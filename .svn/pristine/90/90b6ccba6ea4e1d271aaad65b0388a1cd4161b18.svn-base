<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Subversion: svn_stringbuf_t functions</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">svn_stringbuf_t functions</div>  </div>
<div class="ingroups"><a class="el" href="group__svn__string.html">String handling</a></div></div>
<div class="contents">
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga8601f093a616a8e02037dc8e8a90f91a">svn_stringbuf_create</a> (const char *cstring, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new bytestring containing a C string (NULL-terminated).  <a href="#ga8601f093a616a8e02037dc8e8a90f91a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga52aff4fcf51690403e493bb35ac87991"></a><!-- doxytag: member="svn_string_svn_stringbuf_t::svn_stringbuf_ncreate" ref="ga52aff4fcf51690403e493bb35ac87991" args="(const char *bytes, apr_size_t size, apr_pool_t *pool)" -->
<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga52aff4fcf51690403e493bb35ac87991">svn_stringbuf_ncreate</a> (const char *bytes, apr_size_t size, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new bytestring containing a generic string of bytes (NON-NULL-terminated) <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga75ce9fc03e6382cd7a259042834355b3">svn_stringbuf_create_ensure</a> (apr_size_t minimum_size, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new empty bytestring with at least <em>minimum_size</em> bytes of space available in the memory block.  <a href="#ga75ce9fc03e6382cd7a259042834355b3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa7d76a0ae1245b7695b290b91cda4947"></a><!-- doxytag: member="svn_string_svn_stringbuf_t::svn_stringbuf_create_from_string" ref="gaa7d76a0ae1245b7695b290b91cda4947" args="(const svn_string_t *str, apr_pool_t *pool)" -->
<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#gaa7d76a0ae1245b7695b290b91cda4947">svn_stringbuf_create_from_string</a> (const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *str, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new stringbuf with the contents of the given string. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga0b1ed3183852be19b758ff0dbd743ef2"></a><!-- doxytag: member="svn_string_svn_stringbuf_t::svn_stringbuf_createf" ref="ga0b1ed3183852be19b758ff0dbd743ef2" args="(apr_pool_t *pool, const char *fmt,...)" -->
<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga0b1ed3183852be19b758ff0dbd743ef2">svn_stringbuf_createf</a> (apr_pool_t *pool, const char *fmt,...)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new bytestring by formatting <em>cstring</em> (NULL-terminated) from varargs, which are as appropriate for apr_psprintf(). <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gac220c36f36b2aff8ec230e947a343a0c"></a><!-- doxytag: member="svn_string_svn_stringbuf_t::svn_stringbuf_createv" ref="gac220c36f36b2aff8ec230e947a343a0c" args="(apr_pool_t *pool, const char *fmt, va_list ap)" -->
<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#gac220c36f36b2aff8ec230e947a343a0c">svn_stringbuf_createv</a> (apr_pool_t *pool, const char *fmt, va_list ap)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new bytestring by formatting <em>cstring</em> (NULL-terminated) from a <code>va_list</code> (see <a class="el" href="group__svn__string__svn__stringbuf__t.html#ga0b1ed3183852be19b758ff0dbd743ef2" title="Create a new bytestring by formatting cstring (NULL-terminated) from varargs, which are as appropriat...">svn_stringbuf_createf()</a>). <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga647abffad5b778d01557d7fba6551f64">svn_stringbuf_ensure</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str, apr_size_t minimum_size)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Make sure that the string <em>str</em> has at least <em>minimum_size</em> bytes of space available in the memory block.  <a href="#ga647abffad5b778d01557d7fba6551f64"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga026d3c9d0850c9b3131dcb37400de532"></a><!-- doxytag: member="svn_string_svn_stringbuf_t::svn_stringbuf_set" ref="ga026d3c9d0850c9b3131dcb37400de532" args="(svn_stringbuf_t *str, const char *value)" -->
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga026d3c9d0850c9b3131dcb37400de532">svn_stringbuf_set</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str, const char *value)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set a bytestring <em>str</em> to <em>value</em>. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#gab83a676f045b8661689f04a59e0efce9">svn_stringbuf_setempty</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set a bytestring <em>str</em> to empty (0 length).  <a href="#gab83a676f045b8661689f04a59e0efce9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga40f3e623c857983b4b56e603431a00fa">svn_stringbuf_isempty</a> (const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <code>TRUE</code> if a bytestring is empty (has length zero).  <a href="#ga40f3e623c857983b4b56e603431a00fa"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga49dc0be31e13c8264575723cf4695c68">svn_stringbuf_chop</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str, apr_size_t nbytes)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Chop <em>nbytes</em> bytes off end of <em>str</em>, but not more than <em>str-&gt;len</em>.  <a href="#ga49dc0be31e13c8264575723cf4695c68"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga4373bb2fae064fb648344f49f24fc96c">svn_stringbuf_fillchar</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str, unsigned char c)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Fill bytestring <em>str</em> with character <em>c</em>.  <a href="#ga4373bb2fae064fb648344f49f24fc96c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#gaac364c08a63485f28ee5b3ee99e941f4">svn_stringbuf_appendbyte</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *targetstr, char byte)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Append a single character <em>byte</em> onto <em>targetstr</em>.  <a href="#gaac364c08a63485f28ee5b3ee99e941f4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga1c60f08eaa9f01d244072291f4cf42d0">svn_stringbuf_appendbytes</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *targetstr, const char *bytes, apr_size_t count)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Append an array of bytes onto <em>targetstr</em>.  <a href="#ga1c60f08eaa9f01d244072291f4cf42d0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga670edcdb88bcbfc421f06b58683a5efb">svn_stringbuf_appendstr</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *targetstr, const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *appendstr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Append an <code><a class="el" href="structsvn__stringbuf__t.html" title="A buffered string, capable of appending without an allocation and copy for each append.">svn_stringbuf_t</a></code> onto <em>targetstr</em>.  <a href="#ga670edcdb88bcbfc421f06b58683a5efb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga21e883d584131b35082f23d27fe877ea">svn_stringbuf_appendcstr</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *targetstr, const char *cstr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Append a C string onto <em>targetstr</em>.  <a href="#ga21e883d584131b35082f23d27fe877ea"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#gad96ee402d1430439779f7e19159ecd78">svn_stringbuf_dup</a> (const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *original_string, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a duplicate of <em>original_string</em>.  <a href="#gad96ee402d1430439779f7e19159ecd78"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga58bf192fb1bab3755a3cb9699ab472c4">svn_stringbuf_compare</a> (const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str1, const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str2)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <code>TRUE</code> iff <em>str1</em> and <em>str2</em> have identical length and data.  <a href="#ga58bf192fb1bab3755a3cb9699ab472c4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga4fc22d2b21e2e8d4bcd1d71f3ed662e8"></a><!-- doxytag: member="svn_string_svn_stringbuf_t::svn_stringbuf_first_non_whitespace" ref="ga4fc22d2b21e2e8d4bcd1d71f3ed662e8" args="(const svn_stringbuf_t *str)" -->
apr_size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga4fc22d2b21e2e8d4bcd1d71f3ed662e8">svn_stringbuf_first_non_whitespace</a> (const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return offset of first non-whitespace character in <em>str</em>, or return <em>str-&gt;len</em> if none. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga6509ce58676a3f404250ea8653034a20">svn_stringbuf_strip_whitespace</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Strip whitespace from both sides of <em>str</em> (modified in place).  <a href="#ga6509ce58676a3f404250ea8653034a20"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa277b724082d592ac403a3c14a1f8636"></a><!-- doxytag: member="svn_string_svn_stringbuf_t::svn_stringbuf_find_char_backward" ref="gaa277b724082d592ac403a3c14a1f8636" args="(const svn_stringbuf_t *str, char ch)" -->
apr_size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#gaa277b724082d592ac403a3c14a1f8636">svn_stringbuf_find_char_backward</a> (const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str, char ch)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return position of last occurrence of <em>ch</em> in <em>str</em>, or return <em>str-&gt;len</em> if no occurrence. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga7fd0407b0fd66e903255e2b8ad61a9cc">svn_string_compare_stringbuf</a> (const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *str1, const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str2)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <code>TRUE</code> iff <em>str1</em> and <em>str2</em> have identical length and data.  <a href="#ga7fd0407b0fd66e903255e2b8ad61a9cc"></a><br/></td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga7fd0407b0fd66e903255e2b8ad61a9cc"></a><!-- doxytag: member="svn_string.h::svn_string_compare_stringbuf" ref="ga7fd0407b0fd66e903255e2b8ad61a9cc" args="(const svn_string_t *str1, const svn_stringbuf_t *str2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> svn_string_compare_stringbuf </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td>
          <td class="paramname"><em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>str2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return <code>TRUE</code> iff <em>str1</em> and <em>str2</em> have identical length and data. </p>

</div>
</div>
<a class="anchor" id="gaac364c08a63485f28ee5b3ee99e941f4"></a><!-- doxytag: member="svn_string.h::svn_stringbuf_appendbyte" ref="gaac364c08a63485f28ee5b3ee99e941f4" args="(svn_stringbuf_t *targetstr, char byte)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_stringbuf_appendbyte </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>targetstr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>byte</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Append a single character <em>byte</em> onto <em>targetstr</em>. </p>
<p>This is an optimized version of <a class="el" href="group__svn__string__svn__stringbuf__t.html#ga1c60f08eaa9f01d244072291f4cf42d0" title="Append an array of bytes onto targetstr.">svn_stringbuf_appendbytes()</a> that is much faster to call and execute. Gains vary with the ABI. The advantages extend beyond the actual call because the reduced register pressure allows for more optimization within the caller.</p>
<p>reallocs if necessary. <em>targetstr</em> is affected, nothing else is. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga1c60f08eaa9f01d244072291f4cf42d0"></a><!-- doxytag: member="svn_string.h::svn_stringbuf_appendbytes" ref="ga1c60f08eaa9f01d244072291f4cf42d0" args="(svn_stringbuf_t *targetstr, const char *bytes, apr_size_t count)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_stringbuf_appendbytes </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>targetstr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_size_t&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Append an array of bytes onto <em>targetstr</em>. </p>
<p>reallocs if necessary. <em>targetstr</em> is affected, nothing else is. </p>

</div>
</div>
<a class="anchor" id="ga21e883d584131b35082f23d27fe877ea"></a><!-- doxytag: member="svn_string.h::svn_stringbuf_appendcstr" ref="ga21e883d584131b35082f23d27fe877ea" args="(svn_stringbuf_t *targetstr, const char *cstr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_stringbuf_appendcstr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>targetstr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>cstr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Append a C string onto <em>targetstr</em>. </p>
<p>reallocs if necessary. <em>targetstr</em> is affected, nothing else is. </p>

</div>
</div>
<a class="anchor" id="ga670edcdb88bcbfc421f06b58683a5efb"></a><!-- doxytag: member="svn_string.h::svn_stringbuf_appendstr" ref="ga670edcdb88bcbfc421f06b58683a5efb" args="(svn_stringbuf_t *targetstr, const svn_stringbuf_t *appendstr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_stringbuf_appendstr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>targetstr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>appendstr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Append an <code><a class="el" href="structsvn__stringbuf__t.html" title="A buffered string, capable of appending without an allocation and copy for each append.">svn_stringbuf_t</a></code> onto <em>targetstr</em>. </p>
<p>reallocs if necessary. <em>targetstr</em> is affected, nothing else is. </p>

</div>
</div>
<a class="anchor" id="ga49dc0be31e13c8264575723cf4695c68"></a><!-- doxytag: member="svn_string.h::svn_stringbuf_chop" ref="ga49dc0be31e13c8264575723cf4695c68" args="(svn_stringbuf_t *str, apr_size_t nbytes)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_stringbuf_chop </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_size_t&#160;</td>
          <td class="paramname"><em>nbytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Chop <em>nbytes</em> bytes off end of <em>str</em>, but not more than <em>str-&gt;len</em>. </p>

</div>
</div>
<a class="anchor" id="ga58bf192fb1bab3755a3cb9699ab472c4"></a><!-- doxytag: member="svn_string.h::svn_stringbuf_compare" ref="ga58bf192fb1bab3755a3cb9699ab472c4" args="(const svn_stringbuf_t *str1, const svn_stringbuf_t *str2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> svn_stringbuf_compare </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>str2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return <code>TRUE</code> iff <em>str1</em> and <em>str2</em> have identical length and data. </p>

</div>
</div>
<a class="anchor" id="ga8601f093a616a8e02037dc8e8a90f91a"></a><!-- doxytag: member="svn_string.h::svn_stringbuf_create" ref="ga8601f093a616a8e02037dc8e8a90f91a" args="(const char *cstring, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a>* svn_stringbuf_create </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>cstring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a new bytestring containing a C string (NULL-terminated). </p>

</div>
</div>
<a class="anchor" id="ga75ce9fc03e6382cd7a259042834355b3"></a><!-- doxytag: member="svn_string.h::svn_stringbuf_create_ensure" ref="ga75ce9fc03e6382cd7a259042834355b3" args="(apr_size_t minimum_size, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a>* svn_stringbuf_create_ensure </td>
          <td>(</td>
          <td class="paramtype">apr_size_t&#160;</td>
          <td class="paramname"><em>minimum_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a new empty bytestring with at least <em>minimum_size</em> bytes of space available in the memory block. </p>
<p>The allocated string buffer will be one byte larger than <em>minimum_size</em> to account for a final '\0'.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="gad96ee402d1430439779f7e19159ecd78"></a><!-- doxytag: member="svn_string.h::svn_stringbuf_dup" ref="gad96ee402d1430439779f7e19159ecd78" args="(const svn_stringbuf_t *original_string, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a>* svn_stringbuf_dup </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>original_string</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return a duplicate of <em>original_string</em>. </p>

</div>
</div>
<a class="anchor" id="ga647abffad5b778d01557d7fba6551f64"></a><!-- doxytag: member="svn_string.h::svn_stringbuf_ensure" ref="ga647abffad5b778d01557d7fba6551f64" args="(svn_stringbuf_t *str, apr_size_t minimum_size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_stringbuf_ensure </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_size_t&#160;</td>
          <td class="paramname"><em>minimum_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Make sure that the string <em>str</em> has at least <em>minimum_size</em> bytes of space available in the memory block. </p>
<p>(<em>minimum_size</em> should include space for the terminating NULL character.) </p>

</div>
</div>
<a class="anchor" id="ga4373bb2fae064fb648344f49f24fc96c"></a><!-- doxytag: member="svn_string.h::svn_stringbuf_fillchar" ref="ga4373bb2fae064fb648344f49f24fc96c" args="(svn_stringbuf_t *str, unsigned char c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_stringbuf_fillchar </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Fill bytestring <em>str</em> with character <em>c</em>. </p>

</div>
</div>
<a class="anchor" id="ga40f3e623c857983b4b56e603431a00fa"></a><!-- doxytag: member="svn_string.h::svn_stringbuf_isempty" ref="ga40f3e623c857983b4b56e603431a00fa" args="(const svn_stringbuf_t *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> svn_stringbuf_isempty </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return <code>TRUE</code> if a bytestring is empty (has length zero). </p>

</div>
</div>
<a class="anchor" id="gab83a676f045b8661689f04a59e0efce9"></a><!-- doxytag: member="svn_string.h::svn_stringbuf_setempty" ref="gab83a676f045b8661689f04a59e0efce9" args="(svn_stringbuf_t *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_stringbuf_setempty </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set a bytestring <em>str</em> to empty (0 length). </p>

</div>
</div>
<a class="anchor" id="ga6509ce58676a3f404250ea8653034a20"></a><!-- doxytag: member="svn_string.h::svn_stringbuf_strip_whitespace" ref="ga6509ce58676a3f404250ea8653034a20" args="(svn_stringbuf_t *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_stringbuf_strip_whitespace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Strip whitespace from both sides of <em>str</em> (modified in place). </p>

</div>
</div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Fri Dec 23 2011 09:20:41 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>
