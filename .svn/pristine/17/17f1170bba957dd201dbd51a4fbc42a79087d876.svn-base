<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Subversion: svn_auth.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">svn_auth.h</div>  </div>
</div>
<div class="contents">
<a href="svn__auth_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**</span>
<a name="l00002"></a>00002 <span class="comment"> * @copyright</span>
<a name="l00003"></a>00003 <span class="comment"> * ====================================================================</span>
<a name="l00004"></a>00004 <span class="comment"> *    Licensed to the Apache Software Foundation (ASF) under one</span>
<a name="l00005"></a>00005 <span class="comment"> *    or more contributor license agreements.  See the NOTICE file</span>
<a name="l00006"></a>00006 <span class="comment"> *    distributed with this work for additional information</span>
<a name="l00007"></a>00007 <span class="comment"> *    regarding copyright ownership.  The ASF licenses this file</span>
<a name="l00008"></a>00008 <span class="comment"> *    to you under the Apache License, Version 2.0 (the</span>
<a name="l00009"></a>00009 <span class="comment"> *    &quot;License&quot;); you may not use this file except in compliance</span>
<a name="l00010"></a>00010 <span class="comment"> *    with the License.  You may obtain a copy of the License at</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00013"></a>00013 <span class="comment"> *</span>
<a name="l00014"></a>00014 <span class="comment"> *    Unless required by applicable law or agreed to in writing,</span>
<a name="l00015"></a>00015 <span class="comment"> *    software distributed under the License is distributed on an</span>
<a name="l00016"></a>00016 <span class="comment"> *    &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span>
<a name="l00017"></a>00017 <span class="comment"> *    KIND, either express or implied.  See the License for the</span>
<a name="l00018"></a>00018 <span class="comment"> *    specific language governing permissions and limitations</span>
<a name="l00019"></a>00019 <span class="comment"> *    under the License.</span>
<a name="l00020"></a>00020 <span class="comment"> * ====================================================================</span>
<a name="l00021"></a>00021 <span class="comment"> * @endcopyright</span>
<a name="l00022"></a>00022 <span class="comment"> *</span>
<a name="l00023"></a>00023 <span class="comment"> * @file svn_auth.h</span>
<a name="l00024"></a>00024 <span class="comment"> * @brief Subversion&#39;s authentication system</span>
<a name="l00025"></a>00025 <span class="comment"> */</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef SVN_AUTH_H</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define SVN_AUTH_H</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;apr.h&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;apr_pools.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;apr_hash.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;apr_tables.h&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="svn__types_8h.html" title="Subversion&#39;s data types.">svn_types.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="svn__config_8h.html" title="Accessing SVN configuration files.">svn_config.h</a>&quot;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {
<a name="l00040"></a>00040 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l00041"></a>00041 <span class="comment"></span>
<a name="l00042"></a>00042 <span class="comment">/** Overview of the svn authentication system.</span>
<a name="l00043"></a>00043 <span class="comment"> *</span>
<a name="l00044"></a>00044 <span class="comment"> * We define an authentication &quot;provider&quot; as a module that is able to</span>
<a name="l00045"></a>00045 <span class="comment"> * return a specific set of credentials. (e.g. username/password,</span>
<a name="l00046"></a>00046 <span class="comment"> * certificate, etc.)  Each provider implements a vtable that</span>
<a name="l00047"></a>00047 <span class="comment"> *</span>
<a name="l00048"></a>00048 <span class="comment"> * - can fetch initial credentials</span>
<a name="l00049"></a>00049 <span class="comment"> * - can retry the fetch (or try to fetch something different)</span>
<a name="l00050"></a>00050 <span class="comment"> * - can store the credentials for future use</span>
<a name="l00051"></a>00051 <span class="comment"> *</span>
<a name="l00052"></a>00052 <span class="comment"> * For any given type of credentials, there can exist any number of</span>
<a name="l00053"></a>00053 <span class="comment"> * separate providers -- each provider has a different method of</span>
<a name="l00054"></a>00054 <span class="comment"> * fetching. (i.e. from a disk store, by prompting the user, etc.)</span>
<a name="l00055"></a>00055 <span class="comment"> *</span>
<a name="l00056"></a>00056 <span class="comment"> * The application begins by creating an auth baton object, and</span>
<a name="l00057"></a>00057 <span class="comment"> * &quot;registers&quot; some number of providers with the auth baton, in a</span>
<a name="l00058"></a>00058 <span class="comment"> * specific order.  (For example, it may first register a</span>
<a name="l00059"></a>00059 <span class="comment"> * username/password provider that looks in disk store, then register</span>
<a name="l00060"></a>00060 <span class="comment"> * a username/password provider that prompts the user.)</span>
<a name="l00061"></a>00061 <span class="comment"> *</span>
<a name="l00062"></a>00062 <span class="comment"> * Later on, when any svn library is challenged, it asks the auth</span>
<a name="l00063"></a>00063 <span class="comment"> * baton for the specific credentials.  If the initial credentials</span>
<a name="l00064"></a>00064 <span class="comment"> * fail to authenticate, the caller keeps requesting new credentials.</span>
<a name="l00065"></a>00065 <span class="comment"> * Under the hood, libsvn_auth effectively &quot;walks&quot; over each provider</span>
<a name="l00066"></a>00066 <span class="comment"> * (in order of registry), one at a time, until all the providers have</span>
<a name="l00067"></a>00067 <span class="comment"> * exhausted all their retry options.</span>
<a name="l00068"></a>00068 <span class="comment"> *</span>
<a name="l00069"></a>00069 <span class="comment"> * This system allows an application to flexibly define authentication</span>
<a name="l00070"></a>00070 <span class="comment"> * behaviors (by changing registration order), and very easily write</span>
<a name="l00071"></a>00071 <span class="comment"> * new authentication providers.</span>
<a name="l00072"></a>00072 <span class="comment"> *</span>
<a name="l00073"></a>00073 <span class="comment"> * An auth_baton also contains an internal hashtable of run-time</span>
<a name="l00074"></a>00074 <span class="comment"> * parameters; any provider or library layer can set these run-time</span>
<a name="l00075"></a>00075 <span class="comment"> * parameters at any time, so that the provider has access to the</span>
<a name="l00076"></a>00076 <span class="comment"> * data.  (For example, certain run-time data may not be available</span>
<a name="l00077"></a>00077 <span class="comment"> * until an authentication challenge is made.)  Each credential type</span>
<a name="l00078"></a>00078 <span class="comment"> * must document the run-time parameters that are made available to</span>
<a name="l00079"></a>00079 <span class="comment"> * its providers.</span>
<a name="l00080"></a>00080 <span class="comment"> *</span>
<a name="l00081"></a>00081 <span class="comment"> * @defgroup auth_fns Authentication functions</span>
<a name="l00082"></a>00082 <span class="comment"> * @{</span>
<a name="l00083"></a>00083 <span class="comment"> */</span>
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 <span class="comment"></span>
<a name="l00086"></a>00086 <span class="comment">/** The type of a Subversion authentication object */</span>
<a name="l00087"></a><a class="code" href="group__auth__fns.html#gaa77a422f326606f52366fb2fb0a43f8d">00087</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="group__auth__fns.html#gaa77a422f326606f52366fb2fb0a43f8d" title="The type of a Subversion authentication object.">svn_auth_baton_t</a> <a class="code" href="group__auth__fns.html#gaa77a422f326606f52366fb2fb0a43f8d" title="The type of a Subversion authentication object.">svn_auth_baton_t</a>;
<a name="l00088"></a>00088 <span class="comment"></span>
<a name="l00089"></a>00089 <span class="comment">/** The type of a Subversion authentication-iteration object */</span>
<a name="l00090"></a><a class="code" href="group__auth__fns.html#ga1ac4eb8d42d56257c6ba607f976b2979">00090</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="group__auth__fns.html#ga1ac4eb8d42d56257c6ba607f976b2979" title="The type of a Subversion authentication-iteration object.">svn_auth_iterstate_t</a> <a class="code" href="group__auth__fns.html#ga1ac4eb8d42d56257c6ba607f976b2979" title="The type of a Subversion authentication-iteration object.">svn_auth_iterstate_t</a>;
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="comment"></span>
<a name="l00093"></a>00093 <span class="comment">/** The main authentication &quot;provider&quot; vtable. */</span>
<a name="l00094"></a><a class="code" href="structsvn__auth__provider__t.html">00094</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__auth__provider__t.html" title="The main authentication &quot;provider&quot; vtable.">svn_auth_provider_t</a>
<a name="l00095"></a>00095 {<span class="comment"></span>
<a name="l00096"></a>00096 <span class="comment">  /** The kind of credentials this provider knows how to retrieve. */</span>
<a name="l00097"></a><a class="code" href="structsvn__auth__provider__t.html#a0d358c058410dfc169d2efa3cd76f477">00097</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__auth__provider__t.html#a0d358c058410dfc169d2efa3cd76f477" title="The kind of credentials this provider knows how to retrieve.">cred_kind</a>;
<a name="l00098"></a>00098 <span class="comment"></span>
<a name="l00099"></a>00099 <span class="comment">  /** Get an initial set of credentials.</span>
<a name="l00100"></a>00100 <span class="comment">   *</span>
<a name="l00101"></a>00101 <span class="comment">   * Set @a *credentials to a set of valid credentials within @a</span>
<a name="l00102"></a>00102 <span class="comment">   * realmstring, or NULL if no credentials are available.  Set @a</span>
<a name="l00103"></a>00103 <span class="comment">   * *iter_baton to context that allows a subsequent call to @c</span>
<a name="l00104"></a>00104 <span class="comment">   * next_credentials, in case the first credentials fail to</span>
<a name="l00105"></a>00105 <span class="comment">   * authenticate.  @a provider_baton is general context for the</span>
<a name="l00106"></a>00106 <span class="comment">   * vtable, @a parameters contains any run-time data that the</span>
<a name="l00107"></a>00107 <span class="comment">   * provider may need, and @a realmstring comes from the</span>
<a name="l00108"></a>00108 <span class="comment">   * svn_auth_first_credentials() call.</span>
<a name="l00109"></a>00109 <span class="comment">   */</span>
<a name="l00110"></a><a class="code" href="structsvn__auth__provider__t.html#aefc235bc5c2c34b61844dda560591b81">00110</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> * (*first_credentials)(<span class="keywordtype">void</span> **credentials,
<a name="l00111"></a>00111                                      <span class="keywordtype">void</span> **iter_baton,
<a name="l00112"></a>00112                                      <span class="keywordtype">void</span> *provider_baton,
<a name="l00113"></a>00113                                      apr_hash_t *parameters,
<a name="l00114"></a>00114                                      <span class="keyword">const</span> <span class="keywordtype">char</span> *realmstring,
<a name="l00115"></a>00115                                      apr_pool_t *pool);
<a name="l00116"></a>00116 <span class="comment"></span>
<a name="l00117"></a>00117 <span class="comment">  /** Get a different set of credentials.</span>
<a name="l00118"></a>00118 <span class="comment">   *</span>
<a name="l00119"></a>00119 <span class="comment">   * Set @a *credentials to another set of valid credentials (using @a</span>
<a name="l00120"></a>00120 <span class="comment">   * iter_baton as the context from previous call to first_credentials</span>
<a name="l00121"></a>00121 <span class="comment">   * or next_credentials).  If no more credentials are available, set</span>
<a name="l00122"></a>00122 <span class="comment">   * @a *credentials to NULL.  If the provider only has one set of</span>
<a name="l00123"></a>00123 <span class="comment">   * credentials, this function pointer should simply be NULL. @a</span>
<a name="l00124"></a>00124 <span class="comment">   * provider_baton is general context for the vtable, @a parameters</span>
<a name="l00125"></a>00125 <span class="comment">   * contains any run-time data that the provider may need, and @a</span>
<a name="l00126"></a>00126 <span class="comment">   * realmstring comes from the svn_auth_first_credentials() call.</span>
<a name="l00127"></a>00127 <span class="comment">   */</span>
<a name="l00128"></a><a class="code" href="structsvn__auth__provider__t.html#a3f5b83e86f2dfa5817bf60c95ee353db">00128</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> * (*next_credentials)(<span class="keywordtype">void</span> **credentials,
<a name="l00129"></a>00129                                     <span class="keywordtype">void</span> *iter_baton,
<a name="l00130"></a>00130                                     <span class="keywordtype">void</span> *provider_baton,
<a name="l00131"></a>00131                                     apr_hash_t *parameters,
<a name="l00132"></a>00132                                     <span class="keyword">const</span> <span class="keywordtype">char</span> *realmstring,
<a name="l00133"></a>00133                                     apr_pool_t *pool);
<a name="l00134"></a>00134 <span class="comment"></span>
<a name="l00135"></a>00135 <span class="comment">  /** Save credentials.</span>
<a name="l00136"></a>00136 <span class="comment">   *</span>
<a name="l00137"></a>00137 <span class="comment">   * Store @a credentials for future use.  @a provider_baton is</span>
<a name="l00138"></a>00138 <span class="comment">   * general context for the vtable, and @a parameters contains any</span>
<a name="l00139"></a>00139 <span class="comment">   * run-time data the provider may need.  Set @a *saved to TRUE if</span>
<a name="l00140"></a>00140 <span class="comment">   * the save happened, or FALSE if not.  The provider is not required</span>
<a name="l00141"></a>00141 <span class="comment">   * to save; if it refuses or is unable to save for non-fatal</span>
<a name="l00142"></a>00142 <span class="comment">   * reasons, return FALSE.  If the provider never saves data, then</span>
<a name="l00143"></a>00143 <span class="comment">   * this function pointer should simply be NULL. @a realmstring comes</span>
<a name="l00144"></a>00144 <span class="comment">   * from the svn_auth_first_credentials() call.</span>
<a name="l00145"></a>00145 <span class="comment">   */</span>
<a name="l00146"></a><a class="code" href="structsvn__auth__provider__t.html#a616c66066c665df9e1b6505b456106dc">00146</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> * (*save_credentials)(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *saved,
<a name="l00147"></a>00147                                     <span class="keywordtype">void</span> *credentials,
<a name="l00148"></a>00148                                     <span class="keywordtype">void</span> *provider_baton,
<a name="l00149"></a>00149                                     apr_hash_t *parameters,
<a name="l00150"></a>00150                                     <span class="keyword">const</span> <span class="keywordtype">char</span> *realmstring,
<a name="l00151"></a>00151                                     apr_pool_t *pool);
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 } <a class="code" href="group__auth__fns.html#gad7fcdd91f3155fde2f5177e921277a5e" title="The main authentication &quot;provider&quot; vtable.">svn_auth_provider_t</a>;
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 <span class="comment"></span>
<a name="l00156"></a>00156 <span class="comment">/** A provider object, ready to be put into an array and given to</span>
<a name="l00157"></a>00157 <span class="comment">    svn_auth_open(). */</span>
<a name="l00158"></a><a class="code" href="structsvn__auth__provider__object__t.html">00158</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a>
<a name="l00159"></a>00159 {
<a name="l00160"></a>00160   <span class="keyword">const</span> <a class="code" href="structsvn__auth__provider__t.html" title="The main authentication &quot;provider&quot; vtable.">svn_auth_provider_t</a> *vtable;
<a name="l00161"></a>00161   <span class="keywordtype">void</span> *provider_baton;
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 } <a class="code" href="group__auth__fns.html#gac5e01b8d1f8385a6060d34865f249a25" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a>;
<a name="l00164"></a>00164 <span class="comment"></span>
<a name="l00165"></a>00165 <span class="comment">/** The type of function returning authentication provider. */</span>
<a name="l00166"></a><a class="code" href="group__auth__fns.html#gaec0778fbc81391e4ba212ca81769f90c">00166</a> <span class="keyword">typedef</span> void (*<a class="code" href="group__auth__fns.html#gaec0778fbc81391e4ba212ca81769f90c" title="The type of function returning authentication provider.">svn_auth_simple_provider_func_t</a>)(
<a name="l00167"></a>00167   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l00168"></a>00168   apr_pool_t *pool);
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 <span class="comment"></span>
<a name="l00171"></a>00171 <span class="comment">/** Specific types of credentials **/</span>
<a name="l00172"></a>00172 <span class="comment"></span>
<a name="l00173"></a>00173 <span class="comment">/** Simple username/password pair credential kind.</span>
<a name="l00174"></a>00174 <span class="comment"> *</span>
<a name="l00175"></a>00175 <span class="comment"> * The following auth parameters are available to the providers:</span>
<a name="l00176"></a>00176 <span class="comment"> *</span>
<a name="l00177"></a>00177 <span class="comment"> * - @c SVN_AUTH_PARAM_CONFIG_CATEGORY_CONFIG (@c svn_config_t*)</span>
<a name="l00178"></a>00178 <span class="comment"> * - @c SVN_AUTH_PARAM_CONFIG_CATEGORY_SERVERS (@c svn_config_t*)</span>
<a name="l00179"></a>00179 <span class="comment"> *</span>
<a name="l00180"></a>00180 <span class="comment"> * The following auth parameters may be available to the providers:</span>
<a name="l00181"></a>00181 <span class="comment"> *</span>
<a name="l00182"></a>00182 <span class="comment"> * - @c SVN_AUTH_PARAM_NO_AUTH_CACHE (@c void*)</span>
<a name="l00183"></a>00183 <span class="comment"> * - @c SVN_AUTH_PARAM_DEFAULT_USERNAME (@c char*)</span>
<a name="l00184"></a>00184 <span class="comment"> * - @c SVN_AUTH_PARAM_DEFAULT_PASSWORD (@c char*)</span>
<a name="l00185"></a>00185 <span class="comment"> */</span>
<a name="l00186"></a><a class="code" href="group__auth__fns.html#ga32d8f21dd9e0e36dca43bd5961d95ec1">00186</a> <span class="preprocessor">#define SVN_AUTH_CRED_SIMPLE &quot;svn.simple&quot;</span>
<a name="l00187"></a>00187 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00188"></a>00188 <span class="comment">/** @c SVN_AUTH_CRED_SIMPLE credentials. */</span>
<a name="l00189"></a><a class="code" href="structsvn__auth__cred__simple__t.html">00189</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__auth__cred__simple__t.html" title="SVN_AUTH_CRED_SIMPLE credentials.">svn_auth_cred_simple_t</a>
<a name="l00190"></a>00190 {<span class="comment"></span>
<a name="l00191"></a>00191 <span class="comment">  /** Username */</span>
<a name="l00192"></a><a class="code" href="structsvn__auth__cred__simple__t.html#aca61326f536c24bf136768f785a32344">00192</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__auth__cred__simple__t.html#aca61326f536c24bf136768f785a32344" title="Username.">username</a>;<span class="comment"></span>
<a name="l00193"></a>00193 <span class="comment">  /** Password */</span>
<a name="l00194"></a><a class="code" href="structsvn__auth__cred__simple__t.html#a36cdf3022ae54ec983986ef4681d4c30">00194</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__auth__cred__simple__t.html#a36cdf3022ae54ec983986ef4681d4c30" title="Password.">password</a>;<span class="comment"></span>
<a name="l00195"></a>00195 <span class="comment">  /** Indicates if the credentials may be saved (to disk). For example, a</span>
<a name="l00196"></a>00196 <span class="comment">   * GUI prompt implementation with a remember password checkbox shall set</span>
<a name="l00197"></a>00197 <span class="comment">   * @a may_save to TRUE if the checkbox is checked.</span>
<a name="l00198"></a>00198 <span class="comment">   */</span>
<a name="l00199"></a><a class="code" href="structsvn__auth__cred__simple__t.html#a57ab107bc469ceb88dab033862a72ab4">00199</a>   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> <a class="code" href="structsvn__auth__cred__simple__t.html#a57ab107bc469ceb88dab033862a72ab4" title="Indicates if the credentials may be saved (to disk).">may_save</a>;
<a name="l00200"></a>00200 } <a class="code" href="group__auth__fns.html#gaa5d3d9b036cff5c464f2c4cf8fa2f388" title="SVN_AUTH_CRED_SIMPLE credentials.">svn_auth_cred_simple_t</a>;
<a name="l00201"></a>00201 
<a name="l00202"></a>00202 <span class="comment"></span>
<a name="l00203"></a>00203 <span class="comment">/** Username credential kind.</span>
<a name="l00204"></a>00204 <span class="comment"> *</span>
<a name="l00205"></a>00205 <span class="comment"> * The following optional auth parameters are relevant to the providers:</span>
<a name="l00206"></a>00206 <span class="comment"> *</span>
<a name="l00207"></a>00207 <span class="comment"> * - @c SVN_AUTH_PARAM_NO_AUTH_CACHE (@c void*)</span>
<a name="l00208"></a>00208 <span class="comment"> * - @c SVN_AUTH_PARAM_DEFAULT_USERNAME (@c char*)</span>
<a name="l00209"></a>00209 <span class="comment"> */</span>
<a name="l00210"></a><a class="code" href="group__auth__fns.html#ga12378bbc34a66b2acc68e9cad5e8354e">00210</a> <span class="preprocessor">#define SVN_AUTH_CRED_USERNAME &quot;svn.username&quot;</span>
<a name="l00211"></a>00211 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00212"></a>00212 <span class="comment">/** @c SVN_AUTH_CRED_USERNAME credentials. */</span>
<a name="l00213"></a><a class="code" href="structsvn__auth__cred__username__t.html">00213</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__auth__cred__username__t.html" title="SVN_AUTH_CRED_USERNAME credentials.">svn_auth_cred_username_t</a>
<a name="l00214"></a>00214 {<span class="comment"></span>
<a name="l00215"></a>00215 <span class="comment">  /** Username */</span>
<a name="l00216"></a><a class="code" href="structsvn__auth__cred__username__t.html#a94b6592c04859b5a0161e789b2422de5">00216</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__auth__cred__username__t.html#a94b6592c04859b5a0161e789b2422de5" title="Username.">username</a>;<span class="comment"></span>
<a name="l00217"></a>00217 <span class="comment">  /** Indicates if the credentials may be saved (to disk). For example, a</span>
<a name="l00218"></a>00218 <span class="comment">   * GUI prompt implementation with a remember username checkbox shall set</span>
<a name="l00219"></a>00219 <span class="comment">   * @a may_save to TRUE if the checkbox is checked.</span>
<a name="l00220"></a>00220 <span class="comment">   */</span>
<a name="l00221"></a><a class="code" href="structsvn__auth__cred__username__t.html#a630ebfc6cb7d09a4db8df5c917ca91ab">00221</a>   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> <a class="code" href="structsvn__auth__cred__username__t.html#a630ebfc6cb7d09a4db8df5c917ca91ab" title="Indicates if the credentials may be saved (to disk).">may_save</a>;
<a name="l00222"></a>00222 } <a class="code" href="group__auth__fns.html#gad42e3f2785585bfe4284e3d2ca9b6f52" title="SVN_AUTH_CRED_USERNAME credentials.">svn_auth_cred_username_t</a>;
<a name="l00223"></a>00223 
<a name="l00224"></a>00224 <span class="comment"></span>
<a name="l00225"></a>00225 <span class="comment">/** SSL client certificate credential type.</span>
<a name="l00226"></a>00226 <span class="comment"> *</span>
<a name="l00227"></a>00227 <span class="comment"> * The following auth parameters are available to the providers:</span>
<a name="l00228"></a>00228 <span class="comment"> *</span>
<a name="l00229"></a>00229 <span class="comment"> * - @c SVN_AUTH_PARAM_CONFIG_CATEGORY_SERVERS (@c svn_config_t*)</span>
<a name="l00230"></a>00230 <span class="comment"> * - @c SVN_AUTH_PARAM_SERVER_GROUP (@c char*)</span>
<a name="l00231"></a>00231 <span class="comment"> *</span>
<a name="l00232"></a>00232 <span class="comment"> * The following optional auth parameters are relevant to the providers:</span>
<a name="l00233"></a>00233 <span class="comment"> *</span>
<a name="l00234"></a>00234 <span class="comment"> * - @c SVN_AUTH_PARAM_NO_AUTH_CACHE (@c void*)</span>
<a name="l00235"></a>00235 <span class="comment"> */</span>
<a name="l00236"></a><a class="code" href="group__auth__fns.html#gabf9f622d1575beede8fe83ae220865cc">00236</a> <span class="preprocessor">#define SVN_AUTH_CRED_SSL_CLIENT_CERT &quot;svn.ssl.client-cert&quot;</span>
<a name="l00237"></a>00237 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00238"></a>00238 <span class="comment">/** @c SVN_AUTH_CRED_SSL_CLIENT_CERT credentials. */</span>
<a name="l00239"></a><a class="code" href="structsvn__auth__cred__ssl__client__cert__t.html">00239</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__auth__cred__ssl__client__cert__t.html" title="SVN_AUTH_CRED_SSL_CLIENT_CERT credentials.">svn_auth_cred_ssl_client_cert_t</a>
<a name="l00240"></a>00240 {<span class="comment"></span>
<a name="l00241"></a>00241 <span class="comment">  /** Absolute path to the certificate file */</span>
<a name="l00242"></a><a class="code" href="structsvn__auth__cred__ssl__client__cert__t.html#a0228bfdd58c212759df32eba5eded2e7">00242</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__auth__cred__ssl__client__cert__t.html#a0228bfdd58c212759df32eba5eded2e7" title="Absolute path to the certificate file.">cert_file</a>;<span class="comment"></span>
<a name="l00243"></a>00243 <span class="comment">  /** Indicates if the credentials may be saved (to disk). For example, a</span>
<a name="l00244"></a>00244 <span class="comment">   * GUI prompt implementation with a remember certificate checkbox shall</span>
<a name="l00245"></a>00245 <span class="comment">   * set @a may_save to TRUE if the checkbox is checked.</span>
<a name="l00246"></a>00246 <span class="comment">   */</span>
<a name="l00247"></a><a class="code" href="structsvn__auth__cred__ssl__client__cert__t.html#ad0172bcdd7c85658e1c3e8b44400f26b">00247</a>   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> <a class="code" href="structsvn__auth__cred__ssl__client__cert__t.html#ad0172bcdd7c85658e1c3e8b44400f26b" title="Indicates if the credentials may be saved (to disk).">may_save</a>;
<a name="l00248"></a>00248 } <a class="code" href="group__auth__fns.html#ga0a73b9884722f08ba3d80808c42f5d50" title="SVN_AUTH_CRED_SSL_CLIENT_CERT credentials.">svn_auth_cred_ssl_client_cert_t</a>;
<a name="l00249"></a>00249 
<a name="l00250"></a>00250 <span class="comment"></span>
<a name="l00251"></a>00251 <span class="comment">/** A function returning an SSL client certificate passphrase provider. */</span>
<a name="l00252"></a><a class="code" href="group__auth__fns.html#ga7c81232e16a5301ca3b88dfe5928c0fe">00252</a> <span class="keyword">typedef</span> void (*<a class="code" href="group__auth__fns.html#ga7c81232e16a5301ca3b88dfe5928c0fe" title="A function returning an SSL client certificate passphrase provider.">svn_auth_ssl_client_cert_pw_provider_func_t</a>)(
<a name="l00253"></a>00253   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l00254"></a>00254   apr_pool_t *pool);
<a name="l00255"></a>00255 <span class="comment"></span>
<a name="l00256"></a>00256 <span class="comment">/** SSL client certificate passphrase credential type.</span>
<a name="l00257"></a>00257 <span class="comment"> *</span>
<a name="l00258"></a>00258 <span class="comment"> * @note The realmstring used with this credential type must be a name that</span>
<a name="l00259"></a>00259 <span class="comment"> * makes it possible for the user to identify the certificate.</span>
<a name="l00260"></a>00260 <span class="comment"> *</span>
<a name="l00261"></a>00261 <span class="comment"> * The following auth parameters are available to the providers:</span>
<a name="l00262"></a>00262 <span class="comment"> *</span>
<a name="l00263"></a>00263 <span class="comment"> * - @c SVN_AUTH_PARAM_CONFIG_CATEGORY_CONFIG (@c svn_config_t*)</span>
<a name="l00264"></a>00264 <span class="comment"> * - @c SVN_AUTH_PARAM_CONFIG_CATEGORY_SERVERS (@c svn_config_t*)</span>
<a name="l00265"></a>00265 <span class="comment"> * - @c SVN_AUTH_PARAM_SERVER_GROUP (@c char*)</span>
<a name="l00266"></a>00266 <span class="comment"> *</span>
<a name="l00267"></a>00267 <span class="comment"> * The following optional auth parameters are relevant to the providers:</span>
<a name="l00268"></a>00268 <span class="comment"> *</span>
<a name="l00269"></a>00269 <span class="comment"> * - @c SVN_AUTH_PARAM_NO_AUTH_CACHE (@c void*)</span>
<a name="l00270"></a>00270 <span class="comment"> */</span>
<a name="l00271"></a><a class="code" href="group__auth__fns.html#ga6b0c78d76560ac103bb431026d2c80ba">00271</a> <span class="preprocessor">#define SVN_AUTH_CRED_SSL_CLIENT_CERT_PW &quot;svn.ssl.client-passphrase&quot;</span>
<a name="l00272"></a>00272 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00273"></a>00273 <span class="comment">/** @c SVN_AUTH_CRED_SSL_CLIENT_CERT_PW credentials. */</span>
<a name="l00274"></a><a class="code" href="structsvn__auth__cred__ssl__client__cert__pw__t.html">00274</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__auth__cred__ssl__client__cert__pw__t.html" title="SVN_AUTH_CRED_SSL_CLIENT_CERT_PW credentials.">svn_auth_cred_ssl_client_cert_pw_t</a>
<a name="l00275"></a>00275 {<span class="comment"></span>
<a name="l00276"></a>00276 <span class="comment">  /** Certificate password */</span>
<a name="l00277"></a><a class="code" href="structsvn__auth__cred__ssl__client__cert__pw__t.html#afbbb92f4f19fc13036b7c7611f48725f">00277</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__auth__cred__ssl__client__cert__pw__t.html#afbbb92f4f19fc13036b7c7611f48725f" title="Certificate password.">password</a>;<span class="comment"></span>
<a name="l00278"></a>00278 <span class="comment">  /** Indicates if the credentials may be saved (to disk). For example, a</span>
<a name="l00279"></a>00279 <span class="comment">   * GUI prompt implementation with a remember password checkbox shall set</span>
<a name="l00280"></a>00280 <span class="comment">   * @a may_save to TRUE if the checkbox is checked.</span>
<a name="l00281"></a>00281 <span class="comment">   */</span>
<a name="l00282"></a><a class="code" href="structsvn__auth__cred__ssl__client__cert__pw__t.html#a8dac9fe51a5825793d9984f71ee56dcb">00282</a>   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> <a class="code" href="structsvn__auth__cred__ssl__client__cert__pw__t.html#a8dac9fe51a5825793d9984f71ee56dcb" title="Indicates if the credentials may be saved (to disk).">may_save</a>;
<a name="l00283"></a>00283 } <a class="code" href="group__auth__fns.html#ga097d8c427a75f8ed99bc823468a836e8" title="SVN_AUTH_CRED_SSL_CLIENT_CERT_PW credentials.">svn_auth_cred_ssl_client_cert_pw_t</a>;
<a name="l00284"></a>00284 
<a name="l00285"></a>00285 <span class="comment"></span>
<a name="l00286"></a>00286 <span class="comment">/** SSL server verification credential type.</span>
<a name="l00287"></a>00287 <span class="comment"> *</span>
<a name="l00288"></a>00288 <span class="comment"> * The following auth parameters are available to the providers:</span>
<a name="l00289"></a>00289 <span class="comment"> *</span>
<a name="l00290"></a>00290 <span class="comment"> * - @c SVN_AUTH_PARAM_CONFIG_CATEGORY_SERVERS (@c svn_config_t*)</span>
<a name="l00291"></a>00291 <span class="comment"> * - @c SVN_AUTH_PARAM_SERVER_GROUP (@c char*)</span>
<a name="l00292"></a>00292 <span class="comment"> * - @c SVN_AUTH_PARAM_SSL_SERVER_FAILURES (@c apr_uint32_t*)</span>
<a name="l00293"></a>00293 <span class="comment"> * - @c SVN_AUTH_PARAM_SSL_SERVER_CERT_INFO</span>
<a name="l00294"></a>00294 <span class="comment"> *      (@c svn_auth_ssl_server_cert_info_t*)</span>
<a name="l00295"></a>00295 <span class="comment"> *</span>
<a name="l00296"></a>00296 <span class="comment"> * The following optional auth parameters are relevant to the providers:</span>
<a name="l00297"></a>00297 <span class="comment"> *</span>
<a name="l00298"></a>00298 <span class="comment"> * - @c SVN_AUTH_PARAM_NO_AUTH_CACHE (@c void*)</span>
<a name="l00299"></a>00299 <span class="comment"> */</span>
<a name="l00300"></a><a class="code" href="group__auth__fns.html#ga86bda1cf1af50c7ac5d65cda286686e2">00300</a> <span class="preprocessor">#define SVN_AUTH_CRED_SSL_SERVER_TRUST &quot;svn.ssl.server&quot;</span>
<a name="l00301"></a>00301 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00302"></a>00302 <span class="comment">/** SSL server certificate information used by @c</span>
<a name="l00303"></a>00303 <span class="comment"> * SVN_AUTH_CRED_SSL_SERVER_TRUST providers.</span>
<a name="l00304"></a>00304 <span class="comment"> */</span>
<a name="l00305"></a><a class="code" href="structsvn__auth__ssl__server__cert__info__t.html">00305</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__auth__ssl__server__cert__info__t.html" title="SSL server certificate information used by SVN_AUTH_CRED_SSL_SERVER_TRUST providers.">svn_auth_ssl_server_cert_info_t</a>
<a name="l00306"></a>00306 {<span class="comment"></span>
<a name="l00307"></a>00307 <span class="comment">  /** Primary CN */</span>
<a name="l00308"></a><a class="code" href="structsvn__auth__ssl__server__cert__info__t.html#af5c199081ea98c10ffb64db579986961">00308</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__auth__ssl__server__cert__info__t.html#af5c199081ea98c10ffb64db579986961" title="Primary CN.">hostname</a>;<span class="comment"></span>
<a name="l00309"></a>00309 <span class="comment">  /** ASCII fingerprint */</span>
<a name="l00310"></a><a class="code" href="structsvn__auth__ssl__server__cert__info__t.html#a13ac9907608952183cdaa2be8a5822a0">00310</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__auth__ssl__server__cert__info__t.html#a13ac9907608952183cdaa2be8a5822a0" title="ASCII fingerprint.">fingerprint</a>;<span class="comment"></span>
<a name="l00311"></a>00311 <span class="comment">  /** ASCII date from which the certificate is valid */</span>
<a name="l00312"></a><a class="code" href="structsvn__auth__ssl__server__cert__info__t.html#a25082853d863ac6f3803616d41dcbb9d">00312</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__auth__ssl__server__cert__info__t.html#a25082853d863ac6f3803616d41dcbb9d" title="ASCII date from which the certificate is valid.">valid_from</a>;<span class="comment"></span>
<a name="l00313"></a>00313 <span class="comment">  /** ASCII date until which the certificate is valid */</span>
<a name="l00314"></a><a class="code" href="structsvn__auth__ssl__server__cert__info__t.html#a81f46ccdddf2611a86fe7c02e6227598">00314</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__auth__ssl__server__cert__info__t.html#a81f46ccdddf2611a86fe7c02e6227598" title="ASCII date until which the certificate is valid.">valid_until</a>;<span class="comment"></span>
<a name="l00315"></a>00315 <span class="comment">  /** DN of the certificate issuer */</span>
<a name="l00316"></a><a class="code" href="structsvn__auth__ssl__server__cert__info__t.html#a4fda462229f4bfff13f1756555a0cd32">00316</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__auth__ssl__server__cert__info__t.html#a4fda462229f4bfff13f1756555a0cd32" title="DN of the certificate issuer.">issuer_dname</a>;<span class="comment"></span>
<a name="l00317"></a>00317 <span class="comment">  /** Base-64 encoded DER certificate representation */</span>
<a name="l00318"></a><a class="code" href="structsvn__auth__ssl__server__cert__info__t.html#a1485385c5a42bf8b367af21533f80dca">00318</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__auth__ssl__server__cert__info__t.html#a1485385c5a42bf8b367af21533f80dca" title="Base-64 encoded DER certificate representation.">ascii_cert</a>;
<a name="l00319"></a>00319 } <a class="code" href="group__auth__fns.html#ga88eafb1ec9ce99e1ef010df4dd4cb273" title="SSL server certificate information used by SVN_AUTH_CRED_SSL_SERVER_TRUST providers.">svn_auth_ssl_server_cert_info_t</a>;
<a name="l00320"></a>00320 <span class="comment"></span>
<a name="l00321"></a>00321 <span class="comment">/**</span>
<a name="l00322"></a>00322 <span class="comment"> * Return a deep copy of @a info, allocated in @a pool.</span>
<a name="l00323"></a>00323 <span class="comment"> *</span>
<a name="l00324"></a>00324 <span class="comment"> * @since New in 1.3.</span>
<a name="l00325"></a>00325 <span class="comment"> */</span>
<a name="l00326"></a>00326 <a class="code" href="structsvn__auth__ssl__server__cert__info__t.html" title="SSL server certificate information used by SVN_AUTH_CRED_SSL_SERVER_TRUST providers.">svn_auth_ssl_server_cert_info_t</a> *
<a name="l00327"></a>00327 <a class="code" href="group__auth__fns.html#gae9bbd41b063adf3212e6bc2d10079089" title="Return a deep copy of info, allocated in pool.">svn_auth_ssl_server_cert_info_dup</a>(<span class="keyword">const</span> <a class="code" href="structsvn__auth__ssl__server__cert__info__t.html" title="SSL server certificate information used by SVN_AUTH_CRED_SSL_SERVER_TRUST providers.">svn_auth_ssl_server_cert_info_t</a> *info,
<a name="l00328"></a>00328                                   apr_pool_t *pool);
<a name="l00329"></a>00329 <span class="comment"></span>
<a name="l00330"></a>00330 <span class="comment">/** @c SVN_AUTH_CRED_SSL_SERVER_TRUST credentials. */</span>
<a name="l00331"></a><a class="code" href="structsvn__auth__cred__ssl__server__trust__t.html">00331</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__auth__cred__ssl__server__trust__t.html" title="SVN_AUTH_CRED_SSL_SERVER_TRUST credentials.">svn_auth_cred_ssl_server_trust_t</a>
<a name="l00332"></a>00332 {<span class="comment"></span>
<a name="l00333"></a>00333 <span class="comment">  /** Indicates if the credentials may be saved (to disk). For example, a</span>
<a name="l00334"></a>00334 <span class="comment">   * GUI prompt implementation with a checkbox to accept the certificate</span>
<a name="l00335"></a>00335 <span class="comment">   * permanently shall set @a may_save to TRUE if the checkbox is checked.</span>
<a name="l00336"></a>00336 <span class="comment">   */</span>
<a name="l00337"></a><a class="code" href="structsvn__auth__cred__ssl__server__trust__t.html#a1f194bad8cec30013e9cdd6bc266fba5">00337</a>   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> <a class="code" href="structsvn__auth__cred__ssl__server__trust__t.html#a1f194bad8cec30013e9cdd6bc266fba5" title="Indicates if the credentials may be saved (to disk).">may_save</a>;<span class="comment"></span>
<a name="l00338"></a>00338 <span class="comment">  /** Bit mask of the accepted failures */</span>
<a name="l00339"></a><a class="code" href="structsvn__auth__cred__ssl__server__trust__t.html#ae1ccadf10cb428b0bd70347f00076100">00339</a>   apr_uint32_t <a class="code" href="structsvn__auth__cred__ssl__server__trust__t.html#ae1ccadf10cb428b0bd70347f00076100" title="Bit mask of the accepted failures.">accepted_failures</a>;
<a name="l00340"></a>00340 } <a class="code" href="group__auth__fns.html#ga11d35b061ebd25ebd2e042286593e71e" title="SVN_AUTH_CRED_SSL_SERVER_TRUST credentials.">svn_auth_cred_ssl_server_trust_t</a>;
<a name="l00341"></a>00341 
<a name="l00342"></a>00342 
<a name="l00343"></a>00343 <span class="comment"></span>
<a name="l00344"></a>00344 <span class="comment">/** Credential-constructing prompt functions. **/</span>
<a name="l00345"></a>00345 <span class="comment"></span>
<a name="l00346"></a>00346 <span class="comment">/** These exist so that different client applications can use</span>
<a name="l00347"></a>00347 <span class="comment"> * different prompt mechanisms to supply the same credentials.  For</span>
<a name="l00348"></a>00348 <span class="comment"> * example, if authentication requires a username and password, a</span>
<a name="l00349"></a>00349 <span class="comment"> * command-line client&#39;s prompting function might prompt first for the</span>
<a name="l00350"></a>00350 <span class="comment"> * username and then for the password, whereas a GUI client&#39;s would</span>
<a name="l00351"></a>00351 <span class="comment"> * present a single dialog box asking for both, and a telepathic</span>
<a name="l00352"></a>00352 <span class="comment"> * client&#39;s would read all the information directly from the user&#39;s</span>
<a name="l00353"></a>00353 <span class="comment"> * mind.  All these prompting functions return the same type of</span>
<a name="l00354"></a>00354 <span class="comment"> * credential, but the information used to construct the credential is</span>
<a name="l00355"></a>00355 <span class="comment"> * gathered in an interface-specific way in each case.</span>
<a name="l00356"></a>00356 <span class="comment"> */</span>
<a name="l00357"></a>00357 <span class="comment"></span>
<a name="l00358"></a>00358 <span class="comment">/** Set @a *cred by prompting the user, allocating @a *cred in @a pool.</span>
<a name="l00359"></a>00359 <span class="comment"> * @a baton is an implementation-specific closure.</span>
<a name="l00360"></a>00360 <span class="comment"> *</span>
<a name="l00361"></a>00361 <span class="comment"> * If @a realm is non-NULL, maybe use it in the prompt string.</span>
<a name="l00362"></a>00362 <span class="comment"> *</span>
<a name="l00363"></a>00363 <span class="comment"> * If @a username is non-NULL, then the user might be prompted only</span>
<a name="l00364"></a>00364 <span class="comment"> * for a password, but @a *cred would still be filled with both</span>
<a name="l00365"></a>00365 <span class="comment"> * username and password.  For example, a typical usage would be to</span>
<a name="l00366"></a>00366 <span class="comment"> * pass @a username on the first call, but then leave it NULL for</span>
<a name="l00367"></a>00367 <span class="comment"> * subsequent calls, on the theory that if credentials failed, it&#39;s</span>
<a name="l00368"></a>00368 <span class="comment"> * as likely to be due to incorrect username as incorrect password.</span>
<a name="l00369"></a>00369 <span class="comment"> *</span>
<a name="l00370"></a>00370 <span class="comment"> * If @a may_save is FALSE, the auth system does not allow the credentials</span>
<a name="l00371"></a>00371 <span class="comment"> * to be saved (to disk). A prompt function shall not ask the user if the</span>
<a name="l00372"></a>00372 <span class="comment"> * credentials shall be saved if @a may_save is FALSE. For example, a GUI</span>
<a name="l00373"></a>00373 <span class="comment"> * client with a remember password checkbox would grey out the checkbox if</span>
<a name="l00374"></a>00374 <span class="comment"> * @a may_save is FALSE.</span>
<a name="l00375"></a>00375 <span class="comment"> */</span>
<a name="l00376"></a><a class="code" href="group__auth__fns.html#gab3e889e27559677e7e1a13a9142a381d">00376</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_auth_simple_prompt_func_t)(
<a name="l00377"></a>00377   <a class="code" href="structsvn__auth__cred__simple__t.html" title="SVN_AUTH_CRED_SIMPLE credentials.">svn_auth_cred_simple_t</a> **cred,
<a name="l00378"></a>00378   <span class="keywordtype">void</span> *baton,
<a name="l00379"></a>00379   <span class="keyword">const</span> <span class="keywordtype">char</span> *realm,
<a name="l00380"></a>00380   <span class="keyword">const</span> <span class="keywordtype">char</span> *username,
<a name="l00381"></a>00381   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> may_save,
<a name="l00382"></a>00382   apr_pool_t *pool);
<a name="l00383"></a>00383 
<a name="l00384"></a>00384 <span class="comment"></span>
<a name="l00385"></a>00385 <span class="comment">/** Set @a *cred by prompting the user, allocating @a *cred in @a pool.</span>
<a name="l00386"></a>00386 <span class="comment"> * @a baton is an implementation-specific closure.</span>
<a name="l00387"></a>00387 <span class="comment"> *</span>
<a name="l00388"></a>00388 <span class="comment"> * If @a realm is non-NULL, maybe use it in the prompt string.</span>
<a name="l00389"></a>00389 <span class="comment"> *</span>
<a name="l00390"></a>00390 <span class="comment"> * If @a may_save is FALSE, the auth system does not allow the credentials</span>
<a name="l00391"></a>00391 <span class="comment"> * to be saved (to disk). A prompt function shall not ask the user if the</span>
<a name="l00392"></a>00392 <span class="comment"> * credentials shall be saved if @a may_save is FALSE. For example, a GUI</span>
<a name="l00393"></a>00393 <span class="comment"> * client with a remember username checkbox would grey out the checkbox if</span>
<a name="l00394"></a>00394 <span class="comment"> * @a may_save is FALSE.</span>
<a name="l00395"></a>00395 <span class="comment"> */</span>
<a name="l00396"></a><a class="code" href="group__auth__fns.html#gaf05167cb101739421c2e9542e27d5a88">00396</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_auth_username_prompt_func_t)(
<a name="l00397"></a>00397   <a class="code" href="structsvn__auth__cred__username__t.html" title="SVN_AUTH_CRED_USERNAME credentials.">svn_auth_cred_username_t</a> **cred,
<a name="l00398"></a>00398   <span class="keywordtype">void</span> *baton,
<a name="l00399"></a>00399   <span class="keyword">const</span> <span class="keywordtype">char</span> *realm,
<a name="l00400"></a>00400   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> may_save,
<a name="l00401"></a>00401   apr_pool_t *pool);
<a name="l00402"></a>00402 
<a name="l00403"></a>00403 <span class="comment"></span>
<a name="l00404"></a>00404 <span class="comment">/** @name SSL server certificate failure bits</span>
<a name="l00405"></a>00405 <span class="comment"> *</span>
<a name="l00406"></a>00406 <span class="comment"> * @note These values are stored in the on disk auth cache by the SSL</span>
<a name="l00407"></a>00407 <span class="comment"> * server certificate auth provider, so the meaning of these bits must</span>
<a name="l00408"></a>00408 <span class="comment"> * not be changed.</span>
<a name="l00409"></a>00409 <span class="comment"> * @{</span>
<a name="l00410"></a>00410 <span class="comment"> */</span><span class="comment"></span>
<a name="l00411"></a>00411 <span class="comment">/** Certificate is not yet valid. */</span>
<a name="l00412"></a><a class="code" href="group__auth__fns.html#ga241ceaea2fee42793d5ec05e80f460dd">00412</a> <span class="preprocessor">#define SVN_AUTH_SSL_NOTYETVALID 0x00000001</span>
<a name="l00413"></a>00413 <span class="preprocessor"></span><span class="comment">/** Certificate has expired. */</span>
<a name="l00414"></a><a class="code" href="group__auth__fns.html#gaae0127e8e012387291902cb0cf44c150">00414</a> <span class="preprocessor">#define SVN_AUTH_SSL_EXPIRED     0x00000002</span>
<a name="l00415"></a>00415 <span class="preprocessor"></span><span class="comment">/** Certificate&#39;s CN (hostname) does not match the remote hostname. */</span>
<a name="l00416"></a><a class="code" href="group__auth__fns.html#ga9c57755aef85ef30017e78b26d9c1b27">00416</a> <span class="preprocessor">#define SVN_AUTH_SSL_CNMISMATCH  0x00000004</span>
<a name="l00417"></a>00417 <span class="preprocessor"></span><span class="comment">/** @brief Certificate authority is unknown (i.e. not trusted) */</span>
<a name="l00418"></a><a class="code" href="group__auth__fns.html#ga9672897802eba02cd5d2418f57120742">00418</a> <span class="preprocessor">#define SVN_AUTH_SSL_UNKNOWNCA   0x00000008</span>
<a name="l00419"></a>00419 <span class="preprocessor"></span><span class="comment">/** @brief Other failure. This can happen if neon has introduced a new</span>
<a name="l00420"></a>00420 <span class="comment"> * failure bit that we do not handle yet. */</span>
<a name="l00421"></a><a class="code" href="group__auth__fns.html#gaae23f698dc7c9dd280f46c3fb3267dc2">00421</a> <span class="preprocessor">#define SVN_AUTH_SSL_OTHER       0x40000000</span>
<a name="l00422"></a>00422 <span class="preprocessor"></span><span class="comment">/** @} */</span>
<a name="l00423"></a>00423 <span class="comment"></span>
<a name="l00424"></a>00424 <span class="comment">/** Set @a *cred by prompting the user, allocating @a *cred in @a pool.</span>
<a name="l00425"></a>00425 <span class="comment"> * @a baton is an implementation-specific closure.</span>
<a name="l00426"></a>00426 <span class="comment"> *</span>
<a name="l00427"></a>00427 <span class="comment"> * @a cert_info is a structure describing the server cert that was</span>
<a name="l00428"></a>00428 <span class="comment"> * presented to the client, and @a failures is a bitmask that</span>
<a name="l00429"></a>00429 <span class="comment"> * describes exactly why the cert could not be automatically validated,</span>
<a name="l00430"></a>00430 <span class="comment"> * composed from the constants SVN_AUTH_SSL_* (@c SVN_AUTH_SSL_NOTYETVALID</span>
<a name="l00431"></a>00431 <span class="comment"> * etc.).  @a realm is a string that can be used in the prompt string.</span>
<a name="l00432"></a>00432 <span class="comment"> *</span>
<a name="l00433"></a>00433 <span class="comment"> * If @a may_save is FALSE, the auth system does not allow the credentials</span>
<a name="l00434"></a>00434 <span class="comment"> * to be saved (to disk). A prompt function shall not ask the user if the</span>
<a name="l00435"></a>00435 <span class="comment"> * credentials shall be saved if @a may_save is FALSE. For example, a GUI</span>
<a name="l00436"></a>00436 <span class="comment"> * client with a trust permanently checkbox would grey out the checkbox if</span>
<a name="l00437"></a>00437 <span class="comment"> * @a may_save is FALSE.</span>
<a name="l00438"></a>00438 <span class="comment"> */</span>
<a name="l00439"></a><a class="code" href="group__auth__fns.html#gac5805f633a96271f97b919297e9908a3">00439</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_auth_ssl_server_trust_prompt_func_t)(
<a name="l00440"></a>00440   <a class="code" href="structsvn__auth__cred__ssl__server__trust__t.html" title="SVN_AUTH_CRED_SSL_SERVER_TRUST credentials.">svn_auth_cred_ssl_server_trust_t</a> **cred,
<a name="l00441"></a>00441   <span class="keywordtype">void</span> *baton,
<a name="l00442"></a>00442   <span class="keyword">const</span> <span class="keywordtype">char</span> *realm,
<a name="l00443"></a>00443   apr_uint32_t failures,
<a name="l00444"></a>00444   <span class="keyword">const</span> <a class="code" href="structsvn__auth__ssl__server__cert__info__t.html" title="SSL server certificate information used by SVN_AUTH_CRED_SSL_SERVER_TRUST providers.">svn_auth_ssl_server_cert_info_t</a> *cert_info,
<a name="l00445"></a>00445   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> may_save,
<a name="l00446"></a>00446   apr_pool_t *pool);
<a name="l00447"></a>00447 
<a name="l00448"></a>00448 <span class="comment"></span>
<a name="l00449"></a>00449 <span class="comment">/** Set @a *cred by prompting the user, allocating @a *cred in @a pool.</span>
<a name="l00450"></a>00450 <span class="comment"> * @a baton is an implementation-specific closure.  @a realm is a string</span>
<a name="l00451"></a>00451 <span class="comment"> * that can be used in the prompt string.</span>
<a name="l00452"></a>00452 <span class="comment"> *</span>
<a name="l00453"></a>00453 <span class="comment"> * If @a may_save is FALSE, the auth system does not allow the credentials</span>
<a name="l00454"></a>00454 <span class="comment"> * to be saved (to disk). A prompt function shall not ask the user if the</span>
<a name="l00455"></a>00455 <span class="comment"> * credentials shall be saved if @a may_save is FALSE. For example, a GUI</span>
<a name="l00456"></a>00456 <span class="comment"> * client with a remember certificate checkbox would grey out the checkbox</span>
<a name="l00457"></a>00457 <span class="comment"> * if @a may_save is FALSE.</span>
<a name="l00458"></a>00458 <span class="comment"> */</span>
<a name="l00459"></a><a class="code" href="group__auth__fns.html#ga5afb52c44e95354a2ec52f6fe030c5d2">00459</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_auth_ssl_client_cert_prompt_func_t)(
<a name="l00460"></a>00460   <a class="code" href="structsvn__auth__cred__ssl__client__cert__t.html" title="SVN_AUTH_CRED_SSL_CLIENT_CERT credentials.">svn_auth_cred_ssl_client_cert_t</a> **cred,
<a name="l00461"></a>00461   <span class="keywordtype">void</span> *baton,
<a name="l00462"></a>00462   <span class="keyword">const</span> <span class="keywordtype">char</span> *realm,
<a name="l00463"></a>00463   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> may_save,
<a name="l00464"></a>00464   apr_pool_t *pool);
<a name="l00465"></a>00465 
<a name="l00466"></a>00466 <span class="comment"></span>
<a name="l00467"></a>00467 <span class="comment">/** Set @a *cred by prompting the user, allocating @a *cred in @a pool.</span>
<a name="l00468"></a>00468 <span class="comment"> * @a baton is an implementation-specific closure.  @a realm is a string</span>
<a name="l00469"></a>00469 <span class="comment"> * identifying the certificate, and can be used in the prompt string.</span>
<a name="l00470"></a>00470 <span class="comment"> *</span>
<a name="l00471"></a>00471 <span class="comment"> * If @a may_save is FALSE, the auth system does not allow the credentials</span>
<a name="l00472"></a>00472 <span class="comment"> * to be saved (to disk). A prompt function shall not ask the user if the</span>
<a name="l00473"></a>00473 <span class="comment"> * credentials shall be saved if @a may_save is FALSE. For example, a GUI</span>
<a name="l00474"></a>00474 <span class="comment"> * client with a remember password checkbox would grey out the checkbox if</span>
<a name="l00475"></a>00475 <span class="comment"> * @a may_save is FALSE.</span>
<a name="l00476"></a>00476 <span class="comment"> */</span>
<a name="l00477"></a><a class="code" href="group__auth__fns.html#gafeb529b5bafaed2e3f423e4186d60f06">00477</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_auth_ssl_client_cert_pw_prompt_func_t)(
<a name="l00478"></a>00478   <a class="code" href="structsvn__auth__cred__ssl__client__cert__pw__t.html" title="SVN_AUTH_CRED_SSL_CLIENT_CERT_PW credentials.">svn_auth_cred_ssl_client_cert_pw_t</a> **cred,
<a name="l00479"></a>00479   <span class="keywordtype">void</span> *baton,
<a name="l00480"></a>00480   <span class="keyword">const</span> <span class="keywordtype">char</span> *realm,
<a name="l00481"></a>00481   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> may_save,
<a name="l00482"></a>00482   apr_pool_t *pool);
<a name="l00483"></a>00483 <span class="comment"></span>
<a name="l00484"></a>00484 <span class="comment">/** A type of callback function for asking whether storing a password to</span>
<a name="l00485"></a>00485 <span class="comment"> * disk in plaintext is allowed.</span>
<a name="l00486"></a>00486 <span class="comment"> *</span>
<a name="l00487"></a>00487 <span class="comment"> * In this callback, the client should ask the user whether storing</span>
<a name="l00488"></a>00488 <span class="comment"> * a password for the realm identified by @a realmstring to disk</span>
<a name="l00489"></a>00489 <span class="comment"> * in plaintext is allowed.</span>
<a name="l00490"></a>00490 <span class="comment"> *</span>
<a name="l00491"></a>00491 <span class="comment"> * The answer is returned in @a *may_save_plaintext.</span>
<a name="l00492"></a>00492 <span class="comment"> * @a baton is an implementation-specific closure.</span>
<a name="l00493"></a>00493 <span class="comment"> * All allocations should be done in @a pool.</span>
<a name="l00494"></a>00494 <span class="comment"> *</span>
<a name="l00495"></a>00495 <span class="comment"> * @since New in 1.6</span>
<a name="l00496"></a>00496 <span class="comment"> */</span>
<a name="l00497"></a><a class="code" href="group__auth__fns.html#gad411a1955468c3efac5f823cb437681f">00497</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_auth_plaintext_prompt_func_t)(
<a name="l00498"></a>00498   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *may_save_plaintext,
<a name="l00499"></a>00499   <span class="keyword">const</span> <span class="keywordtype">char</span> *realmstring,
<a name="l00500"></a>00500   <span class="keywordtype">void</span> *baton,
<a name="l00501"></a>00501   apr_pool_t *pool);
<a name="l00502"></a>00502 <span class="comment"></span>
<a name="l00503"></a>00503 <span class="comment">/** A type of callback function for asking whether storing a passphrase to</span>
<a name="l00504"></a>00504 <span class="comment"> * disk in plaintext is allowed.</span>
<a name="l00505"></a>00505 <span class="comment"> *</span>
<a name="l00506"></a>00506 <span class="comment"> * In this callback, the client should ask the user whether storing</span>
<a name="l00507"></a>00507 <span class="comment"> * a passphrase for the realm identified by @a realmstring to disk</span>
<a name="l00508"></a>00508 <span class="comment"> * in plaintext is allowed.</span>
<a name="l00509"></a>00509 <span class="comment"> *</span>
<a name="l00510"></a>00510 <span class="comment"> * The answer is returned in @a *may_save_plaintext.</span>
<a name="l00511"></a>00511 <span class="comment"> * @a baton is an implementation-specific closure.</span>
<a name="l00512"></a>00512 <span class="comment"> * All allocations should be done in @a pool.</span>
<a name="l00513"></a>00513 <span class="comment"> *</span>
<a name="l00514"></a>00514 <span class="comment"> * @since New in 1.6</span>
<a name="l00515"></a>00515 <span class="comment"> */</span>
<a name="l00516"></a><a class="code" href="group__auth__fns.html#ga81da0ae3bea6ac790f9c7f113db270cc">00516</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_auth_plaintext_passphrase_prompt_func_t)(
<a name="l00517"></a>00517   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *may_save_plaintext,
<a name="l00518"></a>00518   <span class="keyword">const</span> <span class="keywordtype">char</span> *realmstring,
<a name="l00519"></a>00519   <span class="keywordtype">void</span> *baton,
<a name="l00520"></a>00520   apr_pool_t *pool);
<a name="l00521"></a>00521 
<a name="l00522"></a>00522 <span class="comment"></span>
<a name="l00523"></a>00523 <span class="comment">/** Initialize an authentication system.</span>
<a name="l00524"></a>00524 <span class="comment"> *</span>
<a name="l00525"></a>00525 <span class="comment"> * Return an authentication object in @a *auth_baton (allocated in @a</span>
<a name="l00526"></a>00526 <span class="comment"> * pool) that represents a particular instance of the svn</span>
<a name="l00527"></a>00527 <span class="comment"> * authentication system.  @a providers is an array of @c</span>
<a name="l00528"></a>00528 <span class="comment"> * svn_auth_provider_object_t pointers, already allocated in @a pool</span>
<a name="l00529"></a>00529 <span class="comment"> * and intentionally ordered.  These pointers will be stored within @a</span>
<a name="l00530"></a>00530 <span class="comment"> * *auth_baton, grouped by credential type, and searched in this exact</span>
<a name="l00531"></a>00531 <span class="comment"> * order.</span>
<a name="l00532"></a>00532 <span class="comment"> */</span>
<a name="l00533"></a>00533 <span class="keywordtype">void</span>
<a name="l00534"></a>00534 <a class="code" href="group__auth__fns.html#ga1b7fd1fcbdecb6511383d79d5e38fbeb" title="Initialize an authentication system.">svn_auth_open</a>(<a class="code" href="group__auth__fns.html#gaa77a422f326606f52366fb2fb0a43f8d" title="The type of a Subversion authentication object.">svn_auth_baton_t</a> **auth_baton,
<a name="l00535"></a>00535               <span class="keyword">const</span> apr_array_header_t *providers,
<a name="l00536"></a>00536               apr_pool_t *pool);
<a name="l00537"></a>00537 <span class="comment"></span>
<a name="l00538"></a>00538 <span class="comment">/** Set an authentication run-time parameter.</span>
<a name="l00539"></a>00539 <span class="comment"> *</span>
<a name="l00540"></a>00540 <span class="comment"> * Store @a name / @a value pair as a run-time parameter in @a</span>
<a name="l00541"></a>00541 <span class="comment"> * auth_baton, making the data accessible to all providers.  @a name</span>
<a name="l00542"></a>00542 <span class="comment"> * and @a value will NOT be duplicated into the auth_baton&#39;s pool.</span>
<a name="l00543"></a>00543 <span class="comment"> * To delete a run-time parameter, pass NULL for @a value.</span>
<a name="l00544"></a>00544 <span class="comment"> */</span>
<a name="l00545"></a>00545 <span class="keywordtype">void</span>
<a name="l00546"></a>00546 <a class="code" href="group__auth__fns.html#ga44ffb6371ee22a42e8755b56394ca688" title="Set an authentication run-time parameter.">svn_auth_set_parameter</a>(<a class="code" href="group__auth__fns.html#gaa77a422f326606f52366fb2fb0a43f8d" title="The type of a Subversion authentication object.">svn_auth_baton_t</a> *auth_baton,
<a name="l00547"></a>00547                        <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l00548"></a>00548                        <span class="keyword">const</span> <span class="keywordtype">void</span> *value);
<a name="l00549"></a>00549 <span class="comment"></span>
<a name="l00550"></a>00550 <span class="comment">/** Get an authentication run-time parameter.</span>
<a name="l00551"></a>00551 <span class="comment"> *</span>
<a name="l00552"></a>00552 <span class="comment"> * Return a value for run-time parameter @a name from @a auth_baton.</span>
<a name="l00553"></a>00553 <span class="comment"> * Return NULL if the parameter doesn&#39;t exist.</span>
<a name="l00554"></a>00554 <span class="comment"> */</span>
<a name="l00555"></a>00555 <span class="keyword">const</span> <span class="keywordtype">void</span> *
<a name="l00556"></a>00556 <a class="code" href="group__auth__fns.html#ga45fd5c7dd123c9c1d7d3733fb4b3f3fa" title="Get an authentication run-time parameter.">svn_auth_get_parameter</a>(<a class="code" href="group__auth__fns.html#gaa77a422f326606f52366fb2fb0a43f8d" title="The type of a Subversion authentication object.">svn_auth_baton_t</a> *auth_baton,
<a name="l00557"></a>00557                        <span class="keyword">const</span> <span class="keywordtype">char</span> *name);
<a name="l00558"></a>00558 <span class="comment"></span>
<a name="l00559"></a>00559 <span class="comment">/** Universal run-time parameters, made available to all providers.</span>
<a name="l00560"></a>00560 <span class="comment"></span>
<a name="l00561"></a>00561 <span class="comment">    If you are writing a new provider, then to be a &quot;good citizen&quot;,</span>
<a name="l00562"></a>00562 <span class="comment">    you should notice these global parameters!  Note that these</span>
<a name="l00563"></a>00563 <span class="comment">    run-time params should be treated as read-only by providers; the</span>
<a name="l00564"></a>00564 <span class="comment">    application is responsible for placing them into the auth_baton</span>
<a name="l00565"></a>00565 <span class="comment">    hash. */</span>
<a name="l00566"></a>00566 <span class="comment"></span>
<a name="l00567"></a>00567 <span class="comment">/** The auth-hash prefix indicating that the parameter is global. */</span>
<a name="l00568"></a><a class="code" href="group__auth__fns.html#ga6d89f869ad547640121d4dd48beb1d1b">00568</a> <span class="preprocessor">#define SVN_AUTH_PARAM_PREFIX &quot;svn:auth:&quot;</span>
<a name="l00569"></a>00569 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00570"></a>00570 <span class="comment">/**</span>
<a name="l00571"></a>00571 <span class="comment"> * @name Default credentials defines</span>
<a name="l00572"></a>00572 <span class="comment"> * Any &#39;default&#39; credentials that came in through the application itself,</span>
<a name="l00573"></a>00573 <span class="comment"> * (e.g. --username and --password options). Property values are</span>
<a name="l00574"></a>00574 <span class="comment"> * const char *.</span>
<a name="l00575"></a>00575 <span class="comment"> * @{ */</span>
<a name="l00576"></a>00576 <span class="preprocessor">#define SVN_AUTH_PARAM_DEFAULT_USERNAME  SVN_AUTH_PARAM_PREFIX &quot;username&quot;</span>
<a name="l00577"></a>00577 <span class="preprocessor"></span><span class="preprocessor">#define SVN_AUTH_PARAM_DEFAULT_PASSWORD  SVN_AUTH_PARAM_PREFIX &quot;password&quot;</span>
<a name="l00578"></a>00578 <span class="preprocessor"></span><span class="comment">/** @} */</span>
<a name="l00579"></a>00579 <span class="comment"></span>
<a name="l00580"></a>00580 <span class="comment">/** @brief The application doesn&#39;t want any providers to prompt</span>
<a name="l00581"></a>00581 <span class="comment"> * users. Property value is irrelevant; only property&#39;s existence</span>
<a name="l00582"></a>00582 <span class="comment"> * matters. */</span>
<a name="l00583"></a><a class="code" href="group__auth__fns.html#gac66c329d52a1a0ad4c65a0c8fd0f8324">00583</a> <span class="preprocessor">#define SVN_AUTH_PARAM_NON_INTERACTIVE  SVN_AUTH_PARAM_PREFIX &quot;non-interactive&quot;</span>
<a name="l00584"></a>00584 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00585"></a>00585 <span class="comment">/** @brief The application doesn&#39;t want any providers to save passwords</span>
<a name="l00586"></a>00586 <span class="comment"> * to disk. Property value is irrelevant; only property&#39;s existence</span>
<a name="l00587"></a>00587 <span class="comment"> * matters. */</span>
<a name="l00588"></a><a class="code" href="group__auth__fns.html#gac88743299a96916291545a7ab08f62b1">00588</a> <span class="preprocessor">#define SVN_AUTH_PARAM_DONT_STORE_PASSWORDS  SVN_AUTH_PARAM_PREFIX \</span>
<a name="l00589"></a>00589 <span class="preprocessor">                                                 &quot;dont-store-passwords&quot;</span>
<a name="l00590"></a>00590 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00591"></a>00591 <span class="comment">/** @brief Indicates whether providers may save passwords to disk in</span>
<a name="l00592"></a>00592 <span class="comment"> * plaintext. Property value can be either SVN_CONFIG_TRUE,</span>
<a name="l00593"></a>00593 <span class="comment"> * SVN_CONFIG_FALSE, or SVN_CONFIG_ASK. */</span>
<a name="l00594"></a><a class="code" href="group__auth__fns.html#ga56ad04012a7712fa86bd9911f134fc44">00594</a> <span class="preprocessor">#define SVN_AUTH_PARAM_STORE_PLAINTEXT_PASSWORDS  SVN_AUTH_PARAM_PREFIX \</span>
<a name="l00595"></a>00595 <span class="preprocessor">                                                  &quot;store-plaintext-passwords&quot;</span>
<a name="l00596"></a>00596 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00597"></a>00597 <span class="comment">/** @brief The application doesn&#39;t want any providers to save passphrase</span>
<a name="l00598"></a>00598 <span class="comment"> * to disk. Property value is irrelevant; only property&#39;s existence</span>
<a name="l00599"></a>00599 <span class="comment"> * matters. */</span>
<a name="l00600"></a><a class="code" href="group__auth__fns.html#ga647032b5df3c8102289d194131d13dbc">00600</a> <span class="preprocessor">#define SVN_AUTH_PARAM_DONT_STORE_SSL_CLIENT_CERT_PP \</span>
<a name="l00601"></a>00601 <span class="preprocessor">  SVN_AUTH_PARAM_PREFIX &quot;dont-store-ssl-client-cert-pp&quot;</span>
<a name="l00602"></a>00602 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00603"></a>00603 <span class="comment">/** @brief Indicates whether providers may save passphrase to disk in</span>
<a name="l00604"></a>00604 <span class="comment"> * plaintext. Property value can be either SVN_CONFIG_TRUE,</span>
<a name="l00605"></a>00605 <span class="comment"> * SVN_CONFIG_FALSE, or SVN_CONFIG_ASK. */</span>
<a name="l00606"></a><a class="code" href="group__auth__fns.html#gac5edfafa6dfe1e034e33ae6b5e074b8f">00606</a> <span class="preprocessor">#define SVN_AUTH_PARAM_STORE_SSL_CLIENT_CERT_PP_PLAINTEXT \</span>
<a name="l00607"></a>00607 <span class="preprocessor">  SVN_AUTH_PARAM_PREFIX &quot;store-ssl-client-cert-pp-plaintext&quot;</span>
<a name="l00608"></a>00608 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00609"></a>00609 <span class="comment">/** @brief The application doesn&#39;t want any providers to save credentials</span>
<a name="l00610"></a>00610 <span class="comment"> * to disk. Property value is irrelevant; only property&#39;s existence</span>
<a name="l00611"></a>00611 <span class="comment"> * matters. */</span>
<a name="l00612"></a><a class="code" href="group__auth__fns.html#ga96ffebffb3f20cc37f15f96ee08fa789">00612</a> <span class="preprocessor">#define SVN_AUTH_PARAM_NO_AUTH_CACHE  SVN_AUTH_PARAM_PREFIX &quot;no-auth-cache&quot;</span>
<a name="l00613"></a>00613 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00614"></a>00614 <span class="comment">/** @brief The following property is for SSL server cert providers. This</span>
<a name="l00615"></a>00615 <span class="comment"> * provides a pointer to an @c apr_uint32_t containing the failures</span>
<a name="l00616"></a>00616 <span class="comment"> * detected by the certificate validator. */</span>
<a name="l00617"></a><a class="code" href="group__auth__fns.html#gaaaaecf652e2ec7f5c947e22e69eb938c">00617</a> <span class="preprocessor">#define SVN_AUTH_PARAM_SSL_SERVER_FAILURES SVN_AUTH_PARAM_PREFIX \</span>
<a name="l00618"></a>00618 <span class="preprocessor">  &quot;ssl:failures&quot;</span>
<a name="l00619"></a>00619 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00620"></a>00620 <span class="comment">/** @brief The following property is for SSL server cert providers. This</span>
<a name="l00621"></a>00621 <span class="comment"> * provides the cert info (svn_auth_ssl_server_cert_info_t). */</span>
<a name="l00622"></a><a class="code" href="group__auth__fns.html#ga95fc50b793dbb019a9026f783ddcf05b">00622</a> <span class="preprocessor">#define SVN_AUTH_PARAM_SSL_SERVER_CERT_INFO SVN_AUTH_PARAM_PREFIX \</span>
<a name="l00623"></a>00623 <span class="preprocessor">  &quot;ssl:cert-info&quot;</span>
<a name="l00624"></a>00624 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00625"></a>00625 <span class="comment">/** Some providers need access to the @c svn_config_t configuration. */</span>
<a name="l00626"></a><a class="code" href="group__auth__fns.html#ga5c7aa71afbdc25720cade178c570a7ae">00626</a> <span class="preprocessor">#define SVN_AUTH_PARAM_CONFIG_CATEGORY_CONFIG SVN_AUTH_PARAM_PREFIX &quot;config-category-config&quot;</span>
<a name="l00627"></a>00627 <span class="preprocessor"></span><span class="preprocessor">#define SVN_AUTH_PARAM_CONFIG_CATEGORY_SERVERS SVN_AUTH_PARAM_PREFIX &quot;config-category-servers&quot;</span>
<a name="l00628"></a>00628 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00629"></a>00629 <span class="comment">/** @deprecated Provided for backward compatibility with the 1.5 API. */</span>
<a name="l00630"></a><a class="code" href="group__auth__fns.html#ga1c41c986707991899ab975ec63538491">00630</a> <span class="preprocessor">#define SVN_AUTH_PARAM_CONFIG SVN_AUTH_PARAM_CONFIG_CATEGORY_SERVERS</span>
<a name="l00631"></a>00631 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00632"></a>00632 <span class="comment">/** The current server group. */</span>
<a name="l00633"></a><a class="code" href="group__auth__fns.html#ga1c4d18b6b88ea56cb450be5e0c8745a1">00633</a> <span class="preprocessor">#define SVN_AUTH_PARAM_SERVER_GROUP SVN_AUTH_PARAM_PREFIX &quot;server-group&quot;</span>
<a name="l00634"></a>00634 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00635"></a>00635 <span class="comment">/** @brief A configuration directory that overrides the default</span>
<a name="l00636"></a>00636 <span class="comment"> * ~/.subversion. */</span>
<a name="l00637"></a><a class="code" href="group__auth__fns.html#ga58e759823cfe5c9d5fb7d6fc1e20446e">00637</a> <span class="preprocessor">#define SVN_AUTH_PARAM_CONFIG_DIR SVN_AUTH_PARAM_PREFIX &quot;config-dir&quot;</span>
<a name="l00638"></a>00638 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00639"></a>00639 <span class="comment">/** Get an initial set of credentials.</span>
<a name="l00640"></a>00640 <span class="comment"> *</span>
<a name="l00641"></a>00641 <span class="comment"> * Ask @a auth_baton to set @a *credentials to a set of credentials</span>
<a name="l00642"></a>00642 <span class="comment"> * defined by @a cred_kind and valid within @a realmstring, or NULL if</span>
<a name="l00643"></a>00643 <span class="comment"> * no credentials are available.  Otherwise, return an iteration state</span>
<a name="l00644"></a>00644 <span class="comment"> * in @a *state, so that the caller can call</span>
<a name="l00645"></a>00645 <span class="comment"> * svn_auth_next_credentials(), in case the first set of credentials</span>
<a name="l00646"></a>00646 <span class="comment"> * fails to authenticate.</span>
<a name="l00647"></a>00647 <span class="comment"> *</span>
<a name="l00648"></a>00648 <span class="comment"> * Use @a pool to allocate @a *state, and for temporary allocation.</span>
<a name="l00649"></a>00649 <span class="comment"> * Note that @a *credentials will be allocated in @a auth_baton&#39;s pool.</span>
<a name="l00650"></a>00650 <span class="comment"> */</span>
<a name="l00651"></a>00651 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00652"></a>00652 <a class="code" href="group__auth__fns.html#gae830b04d8a93c8b60f802d6809425665" title="Get an initial set of credentials.">svn_auth_first_credentials</a>(<span class="keywordtype">void</span> **credentials,
<a name="l00653"></a>00653                            <a class="code" href="group__auth__fns.html#ga1ac4eb8d42d56257c6ba607f976b2979" title="The type of a Subversion authentication-iteration object.">svn_auth_iterstate_t</a> **state,
<a name="l00654"></a>00654                            <span class="keyword">const</span> <span class="keywordtype">char</span> *cred_kind,
<a name="l00655"></a>00655                            <span class="keyword">const</span> <span class="keywordtype">char</span> *realmstring,
<a name="l00656"></a>00656                            <a class="code" href="group__auth__fns.html#gaa77a422f326606f52366fb2fb0a43f8d" title="The type of a Subversion authentication object.">svn_auth_baton_t</a> *auth_baton,
<a name="l00657"></a>00657                            apr_pool_t *pool);
<a name="l00658"></a>00658 <span class="comment"></span>
<a name="l00659"></a>00659 <span class="comment">/** Get another set of credentials, assuming previous ones failed to</span>
<a name="l00660"></a>00660 <span class="comment"> * authenticate.</span>
<a name="l00661"></a>00661 <span class="comment"> *</span>
<a name="l00662"></a>00662 <span class="comment"> * Use @a state to fetch a different set of @a *credentials, as a</span>
<a name="l00663"></a>00663 <span class="comment"> * follow-up to svn_auth_first_credentials() or</span>
<a name="l00664"></a>00664 <span class="comment"> * svn_auth_next_credentials().  If no more credentials are available,</span>
<a name="l00665"></a>00665 <span class="comment"> * set @a *credentials to NULL.</span>
<a name="l00666"></a>00666 <span class="comment"> *</span>
<a name="l00667"></a>00667 <span class="comment"> * Note that @a *credentials will be allocated in @c auth_baton&#39;s pool.</span>
<a name="l00668"></a>00668 <span class="comment"> */</span>
<a name="l00669"></a>00669 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00670"></a>00670 <a class="code" href="group__auth__fns.html#gab18c2431ea55881ef52b647815600cd3" title="Get another set of credentials, assuming previous ones failed to authenticate.">svn_auth_next_credentials</a>(<span class="keywordtype">void</span> **credentials,
<a name="l00671"></a>00671                           <a class="code" href="group__auth__fns.html#ga1ac4eb8d42d56257c6ba607f976b2979" title="The type of a Subversion authentication-iteration object.">svn_auth_iterstate_t</a> *state,
<a name="l00672"></a>00672                           apr_pool_t *pool);
<a name="l00673"></a>00673 <span class="comment"></span>
<a name="l00674"></a>00674 <span class="comment">/** Save a set of credentials.</span>
<a name="l00675"></a>00675 <span class="comment"> *</span>
<a name="l00676"></a>00676 <span class="comment"> * Ask @a state to store the most recently returned credentials,</span>
<a name="l00677"></a>00677 <span class="comment"> * presumably because they successfully authenticated.</span>
<a name="l00678"></a>00678 <span class="comment"> * All allocations should be done in @a pool.</span>
<a name="l00679"></a>00679 <span class="comment"> *</span>
<a name="l00680"></a>00680 <span class="comment"> * If no credentials were ever returned, do nothing.</span>
<a name="l00681"></a>00681 <span class="comment"> */</span>
<a name="l00682"></a>00682 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00683"></a>00683 <a class="code" href="group__auth__fns.html#gae4a43aa4ab0d4a9baf603bf7f96ec919" title="Save a set of credentials.">svn_auth_save_credentials</a>(<a class="code" href="group__auth__fns.html#ga1ac4eb8d42d56257c6ba607f976b2979" title="The type of a Subversion authentication-iteration object.">svn_auth_iterstate_t</a> *state,
<a name="l00684"></a>00684                           apr_pool_t *pool);
<a name="l00685"></a>00685 <span class="comment"></span>
<a name="l00686"></a>00686 <span class="comment">/** @} */</span>
<a name="l00687"></a>00687 <span class="comment"></span>
<a name="l00688"></a>00688 <span class="comment">/** Set @a *provider to an authentication provider of type</span>
<a name="l00689"></a>00689 <span class="comment"> * svn_auth_cred_simple_t that gets information by prompting the user</span>
<a name="l00690"></a>00690 <span class="comment"> * with @a prompt_func and @a prompt_baton.  Allocate @a *provider in</span>
<a name="l00691"></a>00691 <span class="comment"> * @a pool.</span>
<a name="l00692"></a>00692 <span class="comment"> *</span>
<a name="l00693"></a>00693 <span class="comment"> * If both @c SVN_AUTH_PARAM_DEFAULT_USERNAME and</span>
<a name="l00694"></a>00694 <span class="comment"> * @c SVN_AUTH_PARAM_DEFAULT_PASSWORD are defined as runtime</span>
<a name="l00695"></a>00695 <span class="comment"> * parameters in the @c auth_baton, then @a *provider will return the</span>
<a name="l00696"></a>00696 <span class="comment"> * default arguments when svn_auth_first_credentials() is called.  If</span>
<a name="l00697"></a>00697 <span class="comment"> * svn_auth_first_credentials() fails, then @a *provider will</span>
<a name="l00698"></a>00698 <span class="comment"> * re-prompt @a retry_limit times (via svn_auth_next_credentials()).</span>
<a name="l00699"></a>00699 <span class="comment"> * For infinite retries, set @a retry_limit to value less than 0.</span>
<a name="l00700"></a>00700 <span class="comment"> *</span>
<a name="l00701"></a>00701 <span class="comment"> * @since New in 1.4.</span>
<a name="l00702"></a>00702 <span class="comment"> */</span>
<a name="l00703"></a>00703 <span class="keywordtype">void</span>
<a name="l00704"></a>00704 <a class="code" href="svn__auth_8h.html#a0d1cf74b8f9e2f55a92f1be7a942adb3" title="Set *provider to an authentication provider of type svn_auth_cred_simple_t that gets information by p...">svn_auth_get_simple_prompt_provider</a>(<a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l00705"></a>00705                                     <a class="code" href="group__auth__fns.html#gab3e889e27559677e7e1a13a9142a381d" title="Credential-constructing prompt functions.">svn_auth_simple_prompt_func_t</a> prompt_func,
<a name="l00706"></a>00706                                     <span class="keywordtype">void</span> *prompt_baton,
<a name="l00707"></a>00707                                     <span class="keywordtype">int</span> retry_limit,
<a name="l00708"></a>00708                                     apr_pool_t *pool);
<a name="l00709"></a>00709 
<a name="l00710"></a>00710 <span class="comment"></span>
<a name="l00711"></a>00711 <span class="comment">/** Set @a *provider to an authentication provider of type @c</span>
<a name="l00712"></a>00712 <span class="comment"> * svn_auth_cred_username_t that gets information by prompting the</span>
<a name="l00713"></a>00713 <span class="comment"> * user with @a prompt_func and @a prompt_baton.  Allocate @a *provider</span>
<a name="l00714"></a>00714 <span class="comment"> * in @a pool.</span>
<a name="l00715"></a>00715 <span class="comment"> *</span>
<a name="l00716"></a>00716 <span class="comment"> * If @c SVN_AUTH_PARAM_DEFAULT_USERNAME is defined as a runtime</span>
<a name="l00717"></a>00717 <span class="comment"> * parameter in the @c auth_baton, then @a *provider will return the</span>
<a name="l00718"></a>00718 <span class="comment"> * default argument when svn_auth_first_credentials() is called.  If</span>
<a name="l00719"></a>00719 <span class="comment"> * svn_auth_first_credentials() fails, then @a *provider will</span>
<a name="l00720"></a>00720 <span class="comment"> * re-prompt @a retry_limit times (via svn_auth_next_credentials()).</span>
<a name="l00721"></a>00721 <span class="comment"> * For infinite retries, set @a retry_limit to value less than 0.</span>
<a name="l00722"></a>00722 <span class="comment"> *</span>
<a name="l00723"></a>00723 <span class="comment"> * @since New in 1.4.</span>
<a name="l00724"></a>00724 <span class="comment"> */</span>
<a name="l00725"></a>00725 <span class="keywordtype">void</span>
<a name="l00726"></a>00726 <a class="code" href="svn__auth_8h.html#a99da7f5d7e4b64aadaed2b94d958aebb" title="Set *provider to an authentication provider of type svn_auth_cred_username_t that gets information by...">svn_auth_get_username_prompt_provider</a>(
<a name="l00727"></a>00727   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l00728"></a>00728   <a class="code" href="group__auth__fns.html#gaf05167cb101739421c2e9542e27d5a88" title="Set *cred by prompting the user, allocating *cred in pool.">svn_auth_username_prompt_func_t</a> prompt_func,
<a name="l00729"></a>00729   <span class="keywordtype">void</span> *prompt_baton,
<a name="l00730"></a>00730   <span class="keywordtype">int</span> retry_limit,
<a name="l00731"></a>00731   apr_pool_t *pool);
<a name="l00732"></a>00732 
<a name="l00733"></a>00733 <span class="comment"></span>
<a name="l00734"></a>00734 <span class="comment">/** Set @a *provider to an authentication provider of type @c</span>
<a name="l00735"></a>00735 <span class="comment"> * svn_auth_cred_simple_t that gets/sets information from the user&#39;s</span>
<a name="l00736"></a>00736 <span class="comment"> * ~/.subversion configuration directory.</span>
<a name="l00737"></a>00737 <span class="comment"> *</span>
<a name="l00738"></a>00738 <span class="comment"> * If the provider is going to save the password unencrypted, it calls @a</span>
<a name="l00739"></a>00739 <span class="comment"> * plaintext_prompt_func, passing @a prompt_baton, before saving the</span>
<a name="l00740"></a>00740 <span class="comment"> * password.</span>
<a name="l00741"></a>00741 <span class="comment"> *</span>
<a name="l00742"></a>00742 <span class="comment"> * If @a plaintext_prompt_func is NULL it is not called and the answer is</span>
<a name="l00743"></a>00743 <span class="comment"> * assumed to be TRUE. This matches the deprecated behaviour of storing</span>
<a name="l00744"></a>00744 <span class="comment"> * unencrypted passwords by default, and is only done this way for backward</span>
<a name="l00745"></a>00745 <span class="comment"> * compatibility reasons.</span>
<a name="l00746"></a>00746 <span class="comment"> * Client developers are highly encouraged to provide this callback</span>
<a name="l00747"></a>00747 <span class="comment"> * to ensure their users are made aware of the fact that their password</span>
<a name="l00748"></a>00748 <span class="comment"> * is going to be stored unencrypted. In the future, providers may</span>
<a name="l00749"></a>00749 <span class="comment"> * default to not storing the password unencrypted if this callback is NULL.</span>
<a name="l00750"></a>00750 <span class="comment"> *</span>
<a name="l00751"></a>00751 <span class="comment"> * Clients can however set the callback to NULL and set</span>
<a name="l00752"></a>00752 <span class="comment"> * SVN_AUTH_PARAM_STORE_PLAINTEXT_PASSWORDS to SVN_CONFIG_FALSE or</span>
<a name="l00753"></a>00753 <span class="comment"> * SVN_CONFIG_TRUE to enforce a certain behaviour.</span>
<a name="l00754"></a>00754 <span class="comment"> *</span>
<a name="l00755"></a>00755 <span class="comment"> * Allocate @a *provider in @a pool.</span>
<a name="l00756"></a>00756 <span class="comment"> *</span>
<a name="l00757"></a>00757 <span class="comment"> * If a default username or password is available, @a *provider will</span>
<a name="l00758"></a>00758 <span class="comment"> * honor them as well, and return them when</span>
<a name="l00759"></a>00759 <span class="comment"> * svn_auth_first_credentials() is called.  (see @c</span>
<a name="l00760"></a>00760 <span class="comment"> * SVN_AUTH_PARAM_DEFAULT_USERNAME and @c</span>
<a name="l00761"></a>00761 <span class="comment"> * SVN_AUTH_PARAM_DEFAULT_PASSWORD).</span>
<a name="l00762"></a>00762 <span class="comment"> *</span>
<a name="l00763"></a>00763 <span class="comment"> * @since New in 1.6.</span>
<a name="l00764"></a>00764 <span class="comment"> */</span>
<a name="l00765"></a>00765 <span class="keywordtype">void</span>
<a name="l00766"></a>00766 <a class="code" href="svn__auth_8h.html#adbe6e4f9a56ed5108f06f95d40b8042e" title="Set *provider to an authentication provider of type svn_auth_cred_simple_t that gets/sets information...">svn_auth_get_simple_provider2</a>(
<a name="l00767"></a>00767   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l00768"></a>00768   <a class="code" href="group__auth__fns.html#gad411a1955468c3efac5f823cb437681f" title="A type of callback function for asking whether storing a password to disk in plaintext is allowed...">svn_auth_plaintext_prompt_func_t</a> plaintext_prompt_func,
<a name="l00769"></a>00769   <span class="keywordtype">void</span> *prompt_baton,
<a name="l00770"></a>00770   apr_pool_t *pool);
<a name="l00771"></a>00771 <span class="comment"></span>
<a name="l00772"></a>00772 <span class="comment">/** Like svn_auth_get_simple_provider2, but without the ability to</span>
<a name="l00773"></a>00773 <span class="comment"> * call the svn_auth_plaintext_prompt_func_t callback, and the provider</span>
<a name="l00774"></a>00774 <span class="comment"> * always assumes that it is allowed to store the password in plaintext.</span>
<a name="l00775"></a>00775 <span class="comment"> *</span>
<a name="l00776"></a>00776 <span class="comment"> * @deprecated Provided for backwards compatibility with the 1.5 API.</span>
<a name="l00777"></a>00777 <span class="comment"> * @since New in 1.4.</span>
<a name="l00778"></a>00778 <span class="comment"> */</span>
<a name="l00779"></a>00779 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00780"></a>00780 <span class="keywordtype">void</span>
<a name="l00781"></a>00781 <a class="code" href="svn__auth_8h.html#a7046599e07079f36f7a2845eeb537ca5" title="Like svn_auth_get_simple_provider2, but without the ability to call the svn_auth_plaintext_prompt_fun...">svn_auth_get_simple_provider</a>(<a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l00782"></a>00782                              apr_pool_t *pool);
<a name="l00783"></a>00783 <span class="comment"></span>
<a name="l00784"></a>00784 <span class="comment">/** Set @a *provider to an authentication provider of type @c</span>
<a name="l00785"></a>00785 <span class="comment"> * svn_auth_provider_object_t, or return @c NULL if the provider is not</span>
<a name="l00786"></a>00786 <span class="comment"> * available for the requested platform or the requested provider is unknown.</span>
<a name="l00787"></a>00787 <span class="comment"> *</span>
<a name="l00788"></a>00788 <span class="comment"> * Valid @a provider_name values are: &quot;gnome_keyring&quot;, &quot;keychain&quot;, &quot;kwallet&quot;</span>
<a name="l00789"></a>00789 <span class="comment"> * and &quot;windows&quot;.</span>
<a name="l00790"></a>00790 <span class="comment"> *</span>
<a name="l00791"></a>00791 <span class="comment"> * Valid @a provider_type values are: &quot;simple&quot;, &quot;ssl_client_cert_pw&quot; and</span>
<a name="l00792"></a>00792 <span class="comment"> * &quot;ssl_server_trust&quot;.</span>
<a name="l00793"></a>00793 <span class="comment"> *</span>
<a name="l00794"></a>00794 <span class="comment"> * Allocate @a *provider in @a pool.</span>
<a name="l00795"></a>00795 <span class="comment"> *</span>
<a name="l00796"></a>00796 <span class="comment"> * What actually happens is we invoke the appropriate provider function to</span>
<a name="l00797"></a>00797 <span class="comment"> * supply the @a provider, like so:</span>
<a name="l00798"></a>00798 <span class="comment"> *</span>
<a name="l00799"></a>00799 <span class="comment"> *    svn_auth_get_&lt;name&gt;_&lt;type&gt;_provider(@a provider, @a pool);</span>
<a name="l00800"></a>00800 <span class="comment"> *</span>
<a name="l00801"></a>00801 <span class="comment"> * @since New in 1.6.</span>
<a name="l00802"></a>00802 <span class="comment"> */</span>
<a name="l00803"></a>00803 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00804"></a>00804 <a class="code" href="svn__auth_8h.html#a0efdc798365a84b0416f12e861b04831" title="Set *provider to an authentication provider of type svn_auth_provider_object_t, or return NULL if the...">svn_auth_get_platform_specific_provider</a>(
<a name="l00805"></a>00805   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l00806"></a>00806   <span class="keyword">const</span> <span class="keywordtype">char</span> *provider_name,
<a name="l00807"></a>00807   <span class="keyword">const</span> <span class="keywordtype">char</span> *provider_type,
<a name="l00808"></a>00808   apr_pool_t *pool);
<a name="l00809"></a>00809 <span class="comment"></span>
<a name="l00810"></a>00810 <span class="comment">/** Set @a *providers to an array of &lt;tt&gt;svn_auth_provider_object_t *&lt;/tt&gt;</span>
<a name="l00811"></a>00811 <span class="comment"> * objects.</span>
<a name="l00812"></a>00812 <span class="comment"> * Only client authentication providers available for the current platform are</span>
<a name="l00813"></a>00813 <span class="comment"> * returned. Order of the platform-specific authentication providers is</span>
<a name="l00814"></a>00814 <span class="comment"> * determined by the &#39;password-stores&#39; configuration option which is retrieved</span>
<a name="l00815"></a>00815 <span class="comment"> * from @a config. @a config can be NULL.</span>
<a name="l00816"></a>00816 <span class="comment"> *</span>
<a name="l00817"></a>00817 <span class="comment"> * Create and allocate @a *providers in @a pool.</span>
<a name="l00818"></a>00818 <span class="comment"> *</span>
<a name="l00819"></a>00819 <span class="comment"> * Default order of the platform-specific authentication providers:</span>
<a name="l00820"></a>00820 <span class="comment"> *   1. gnome-keyring</span>
<a name="l00821"></a>00821 <span class="comment"> *   2. kwallet</span>
<a name="l00822"></a>00822 <span class="comment"> *   3. keychain</span>
<a name="l00823"></a>00823 <span class="comment"> *   4. windows-cryptoapi</span>
<a name="l00824"></a>00824 <span class="comment"> *</span>
<a name="l00825"></a>00825 <span class="comment"> * @since New in 1.6.</span>
<a name="l00826"></a>00826 <span class="comment"> */</span>
<a name="l00827"></a>00827 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00828"></a>00828 <a class="code" href="svn__auth_8h.html#acc9973cdd97aa3dec04569827a328c8e" title="Set *providers to an array of svn_auth_provider_object_t * objects.">svn_auth_get_platform_specific_client_providers</a>(
<a name="l00829"></a>00829   apr_array_header_t **providers,
<a name="l00830"></a>00830   <a class="code" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596" title="Opaque structure describing a set of configuration options.">svn_config_t</a> *config,
<a name="l00831"></a>00831   apr_pool_t *pool);
<a name="l00832"></a>00832 
<a name="l00833"></a>00833 <span class="preprocessor">#if (defined(WIN32) &amp;&amp; !defined(__MINGW32__)) || defined(DOXYGEN)</span>
<a name="l00834"></a>00834 <span class="preprocessor"></span><span class="comment">/**</span>
<a name="l00835"></a>00835 <span class="comment"> * Set @a *provider to an authentication provider of type @c</span>
<a name="l00836"></a>00836 <span class="comment"> * svn_auth_cred_simple_t that gets/sets information from the user&#39;s</span>
<a name="l00837"></a>00837 <span class="comment"> * ~/.subversion configuration directory.  Allocate @a *provider in</span>
<a name="l00838"></a>00838 <span class="comment"> * @a pool.</span>
<a name="l00839"></a>00839 <span class="comment"> *</span>
<a name="l00840"></a>00840 <span class="comment"> * This is like svn_auth_get_simple_provider(), except that, when</span>
<a name="l00841"></a>00841 <span class="comment"> * running on Window 2000 or newer (or any other Windows version that</span>
<a name="l00842"></a>00842 <span class="comment"> * includes the CryptoAPI), the provider encrypts the password before</span>
<a name="l00843"></a>00843 <span class="comment"> * storing it to disk. On earlier versions of Windows, the provider</span>
<a name="l00844"></a>00844 <span class="comment"> * does nothing.</span>
<a name="l00845"></a>00845 <span class="comment"> *</span>
<a name="l00846"></a>00846 <span class="comment"> * @since New in 1.4.</span>
<a name="l00847"></a>00847 <span class="comment"> * @note This function is only available on Windows.</span>
<a name="l00848"></a>00848 <span class="comment"> *</span>
<a name="l00849"></a>00849 <span class="comment"> * @note An administrative password reset may invalidate the account&#39;s</span>
<a name="l00850"></a>00850 <span class="comment"> * secret key. This function will detect that situation and behave as</span>
<a name="l00851"></a>00851 <span class="comment"> * if the password were not cached at all.</span>
<a name="l00852"></a>00852 <span class="comment"> */</span>
<a name="l00853"></a>00853 <span class="keywordtype">void</span>
<a name="l00854"></a>00854 <a class="code" href="svn__auth_8h.html#a150ee5110b383bcdb2ce9b341dc26798" title="Set *provider to an authentication provider of type svn_auth_cred_simple_t that gets/sets information...">svn_auth_get_windows_simple_provider</a>(<a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l00855"></a>00855                                      apr_pool_t *pool);
<a name="l00856"></a>00856 <span class="comment"></span>
<a name="l00857"></a>00857 <span class="comment">/**</span>
<a name="l00858"></a>00858 <span class="comment"> * Set @a *provider to an authentication provider of type @c</span>
<a name="l00859"></a>00859 <span class="comment"> * svn_auth_cred_ssl_client_cert_pw_t that gets/sets information from the</span>
<a name="l00860"></a>00860 <span class="comment"> * user&#39;s ~/.subversion configuration directory.  Allocate @a *provider in</span>
<a name="l00861"></a>00861 <span class="comment"> * @a pool.</span>
<a name="l00862"></a>00862 <span class="comment"> *</span>
<a name="l00863"></a>00863 <span class="comment"> * This is like svn_auth_get_ssl_client_cert_pw_file_provider(), except that</span>
<a name="l00864"></a>00864 <span class="comment"> * when running on Window 2000 or newer, the provider encrypts the password</span>
<a name="l00865"></a>00865 <span class="comment"> * before storing it to disk. On earlier versions of Windows, the provider</span>
<a name="l00866"></a>00866 <span class="comment"> * does nothing.</span>
<a name="l00867"></a>00867 <span class="comment"> *</span>
<a name="l00868"></a>00868 <span class="comment"> * @since New in 1.6</span>
<a name="l00869"></a>00869 <span class="comment"> * @note This function is only available on Windows.</span>
<a name="l00870"></a>00870 <span class="comment"> *</span>
<a name="l00871"></a>00871 <span class="comment"> * @note An administrative password reset may invalidate the account&#39;s</span>
<a name="l00872"></a>00872 <span class="comment"> * secret key. This function will detect that situation and behave as</span>
<a name="l00873"></a>00873 <span class="comment"> * if the password were not cached at all.</span>
<a name="l00874"></a>00874 <span class="comment"> */</span>
<a name="l00875"></a>00875 <span class="keywordtype">void</span>
<a name="l00876"></a>00876 <a class="code" href="svn__auth_8h.html#a727c53b91e8d6b2d1d140b38e19f4d60" title="Set *provider to an authentication provider of type svn_auth_cred_ssl_client_cert_pw_t that gets/sets...">svn_auth_get_windows_ssl_client_cert_pw_provider</a>(
<a name="l00877"></a>00877   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l00878"></a>00878   apr_pool_t *pool);
<a name="l00879"></a>00879 <span class="comment"></span>
<a name="l00880"></a>00880 <span class="comment">/**</span>
<a name="l00881"></a>00881 <span class="comment"> * Set @a *provider to an authentication provider of type @c</span>
<a name="l00882"></a>00882 <span class="comment"> * svn_auth_cred_ssl_server_trust_t, allocated in @a pool.</span>
<a name="l00883"></a>00883 <span class="comment"> *</span>
<a name="l00884"></a>00884 <span class="comment"> * This provider automatically validates ssl server certificates with</span>
<a name="l00885"></a>00885 <span class="comment"> * the CryptoApi, like Internet Explorer and the Windows network API do.</span>
<a name="l00886"></a>00886 <span class="comment"> * This allows the rollout of root certificates via Windows Domain</span>
<a name="l00887"></a>00887 <span class="comment"> * policies, instead of Subversion specific configuration.</span>
<a name="l00888"></a>00888 <span class="comment"> *</span>
<a name="l00889"></a>00889 <span class="comment"> * @since New in 1.5.</span>
<a name="l00890"></a>00890 <span class="comment"> * @note This function is only available on Windows.</span>
<a name="l00891"></a>00891 <span class="comment"> */</span>
<a name="l00892"></a>00892 <span class="keywordtype">void</span>
<a name="l00893"></a>00893 <a class="code" href="svn__auth_8h.html#aba0697d924aebb6d00a7a0fa40965161" title="Set *provider to an authentication provider of type svn_auth_cred_ssl_server_trust_t, allocated in pool.">svn_auth_get_windows_ssl_server_trust_provider</a>(
<a name="l00894"></a>00894   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l00895"></a>00895   apr_pool_t *pool);
<a name="l00896"></a>00896 
<a name="l00897"></a>00897 <span class="preprocessor">#endif </span><span class="comment">/* WIN32 &amp;&amp; !__MINGW32__ || DOXYGEN */</span>
<a name="l00898"></a>00898 
<a name="l00899"></a>00899 <span class="preprocessor">#if defined(DARWIN) || defined(DOXYGEN)</span>
<a name="l00900"></a>00900 <span class="preprocessor"></span><span class="comment">/**</span>
<a name="l00901"></a>00901 <span class="comment"> * Set @a *provider to an authentication provider of type @c</span>
<a name="l00902"></a>00902 <span class="comment"> * svn_auth_cred_simple_t that gets/sets information from the user&#39;s</span>
<a name="l00903"></a>00903 <span class="comment"> * ~/.subversion configuration directory.  Allocate @a *provider in</span>
<a name="l00904"></a>00904 <span class="comment"> * @a pool.</span>
<a name="l00905"></a>00905 <span class="comment"> *</span>
<a name="l00906"></a>00906 <span class="comment"> * This is like svn_auth_get_simple_provider(), except that the</span>
<a name="l00907"></a>00907 <span class="comment"> * password is stored in the Mac OS KeyChain.</span>
<a name="l00908"></a>00908 <span class="comment"> *</span>
<a name="l00909"></a>00909 <span class="comment"> * @since New in 1.4</span>
<a name="l00910"></a>00910 <span class="comment"> * @note This function is only available on Mac OS 10.2 and higher.</span>
<a name="l00911"></a>00911 <span class="comment"> */</span>
<a name="l00912"></a>00912 <span class="keywordtype">void</span>
<a name="l00913"></a>00913 <a class="code" href="svn__auth_8h.html#a412a3c955d7aadd3bd41f54fccf2adcd" title="Set *provider to an authentication provider of type svn_auth_cred_simple_t that gets/sets information...">svn_auth_get_keychain_simple_provider</a>(<a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l00914"></a>00914                                       apr_pool_t *pool);
<a name="l00915"></a>00915 <span class="comment"></span>
<a name="l00916"></a>00916 <span class="comment">/**</span>
<a name="l00917"></a>00917 <span class="comment"> * Set @a *provider to an authentication provider of type @c</span>
<a name="l00918"></a>00918 <span class="comment"> * svn_auth_cred_ssl_client_cert_pw_t that gets/sets information from the</span>
<a name="l00919"></a>00919 <span class="comment"> * user&#39;s ~/.subversion configuration directory.  Allocate @a *provider in</span>
<a name="l00920"></a>00920 <span class="comment"> * @a pool.</span>
<a name="l00921"></a>00921 <span class="comment"> *</span>
<a name="l00922"></a>00922 <span class="comment"> * This is like svn_auth_get_ssl_client_cert_pw_file_provider(), except</span>
<a name="l00923"></a>00923 <span class="comment"> * that the password is stored in the Mac OS KeyChain.</span>
<a name="l00924"></a>00924 <span class="comment"> *</span>
<a name="l00925"></a>00925 <span class="comment"> * @since New in 1.6</span>
<a name="l00926"></a>00926 <span class="comment"> * @note This function is only available on Mac OS 10.2 and higher.</span>
<a name="l00927"></a>00927 <span class="comment"> */</span>
<a name="l00928"></a>00928 <span class="keywordtype">void</span>
<a name="l00929"></a>00929 <a class="code" href="svn__auth_8h.html#af243bf165ca0b72faf205e8ebba46f00" title="Set *provider to an authentication provider of type svn_auth_cred_ssl_client_cert_pw_t that gets/sets...">svn_auth_get_keychain_ssl_client_cert_pw_provider</a>(
<a name="l00930"></a>00930   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l00931"></a>00931   apr_pool_t *pool);
<a name="l00932"></a>00932 <span class="preprocessor">#endif </span><span class="comment">/* DARWIN || DOXYGEN */</span>
<a name="l00933"></a>00933 
<a name="l00934"></a>00934 <span class="preprocessor">#if (!defined(DARWIN) &amp;&amp; !defined(WIN32)) || defined(DOXYGEN)</span>
<a name="l00935"></a>00935 <span class="preprocessor"></span><span class="comment">/** A type of callback function for obtaining the GNOME Keyring password.</span>
<a name="l00936"></a>00936 <span class="comment"> *</span>
<a name="l00937"></a>00937 <span class="comment"> * In this callback, the client should ask the user for default keyring</span>
<a name="l00938"></a>00938 <span class="comment"> * @a keyring_name password.</span>
<a name="l00939"></a>00939 <span class="comment"> *</span>
<a name="l00940"></a>00940 <span class="comment"> * The answer is returned in @a *keyring_password.</span>
<a name="l00941"></a>00941 <span class="comment"> * @a baton is an implementation-specific closure.</span>
<a name="l00942"></a>00942 <span class="comment"> * All allocations should be done in @a pool.</span>
<a name="l00943"></a>00943 <span class="comment"> *</span>
<a name="l00944"></a>00944 <span class="comment"> * @since New in 1.6</span>
<a name="l00945"></a>00945 <span class="comment"> */</span>
<a name="l00946"></a><a class="code" href="svn__auth_8h.html#a49f569118db893785c861170c9a0ca38">00946</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_auth_gnome_keyring_unlock_prompt_func_t)(
<a name="l00947"></a>00947   <span class="keywordtype">char</span> **keyring_password,
<a name="l00948"></a>00948   <span class="keyword">const</span> <span class="keywordtype">char</span> *keyring_name,
<a name="l00949"></a>00949   <span class="keywordtype">void</span> *baton,
<a name="l00950"></a>00950   apr_pool_t *pool);
<a name="l00951"></a>00951 
<a name="l00952"></a>00952 <span class="comment"></span>
<a name="l00953"></a>00953 <span class="comment">/** libsvn_auth_gnome_keyring-specific run-time parameters. */</span>
<a name="l00954"></a>00954 <span class="comment"></span>
<a name="l00955"></a>00955 <span class="comment">/** @brief The pointer to function which prompts user for GNOME Keyring</span>
<a name="l00956"></a>00956 <span class="comment"> * password.</span>
<a name="l00957"></a>00957 <span class="comment"> * The type of this pointer should be svn_auth_gnome_keyring_unlock_prompt_func_t. */</span>
<a name="l00958"></a><a class="code" href="svn__auth_8h.html#ae5e28004be0a3c85dce7bf682af76ce2">00958</a> <span class="preprocessor">#define SVN_AUTH_PARAM_GNOME_KEYRING_UNLOCK_PROMPT_FUNC &quot;gnome-keyring-unlock-prompt-func&quot;</span>
<a name="l00959"></a>00959 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00960"></a>00960 <span class="comment">/** @brief The baton which is passed to</span>
<a name="l00961"></a>00961 <span class="comment"> * @c *SVN_AUTH_PARAM_GNOME_KEYRING_UNLOCK_PROMPT_FUNC. */</span>
<a name="l00962"></a><a class="code" href="svn__auth_8h.html#a924cf1863a73cc0ac4b38beea411e046">00962</a> <span class="preprocessor">#define SVN_AUTH_PARAM_GNOME_KEYRING_UNLOCK_PROMPT_BATON &quot;gnome-keyring-unlock-prompt-baton&quot;</span>
<a name="l00963"></a>00963 <span class="preprocessor"></span>
<a name="l00964"></a>00964 <span class="comment"></span>
<a name="l00965"></a>00965 <span class="comment">/**</span>
<a name="l00966"></a>00966 <span class="comment"> * Get libsvn_auth_gnome_keyring version information.</span>
<a name="l00967"></a>00967 <span class="comment"> *</span>
<a name="l00968"></a>00968 <span class="comment"> * @since New in 1.6</span>
<a name="l00969"></a>00969 <span class="comment"> */</span>
<a name="l00970"></a>00970 <span class="keyword">const</span> <a class="code" href="structsvn__version__t.html" title="Version information.">svn_version_t</a> *
<a name="l00971"></a>00971 <a class="code" href="svn__auth_8h.html#ae9807e72666c1838813f9de3d8cb7373" title="Get libsvn_auth_gnome_keyring version information.">svn_auth_gnome_keyring_version</a>(<span class="keywordtype">void</span>);
<a name="l00972"></a>00972 
<a name="l00973"></a>00973 <span class="comment"></span>
<a name="l00974"></a>00974 <span class="comment">/**</span>
<a name="l00975"></a>00975 <span class="comment"> * Set @a *provider to an authentication provider of type @c</span>
<a name="l00976"></a>00976 <span class="comment"> * svn_auth_cred_simple_t that gets/sets information from the user&#39;s</span>
<a name="l00977"></a>00977 <span class="comment"> * ~/.subversion configuration directory.</span>
<a name="l00978"></a>00978 <span class="comment"> *</span>
<a name="l00979"></a>00979 <span class="comment"> * This is like svn_client_get_simple_provider(), except that the</span>
<a name="l00980"></a>00980 <span class="comment"> * password is stored in GNOME Keyring.</span>
<a name="l00981"></a>00981 <span class="comment"> *</span>
<a name="l00982"></a>00982 <span class="comment"> * If the GNOME Keyring is locked the provider calls</span>
<a name="l00983"></a>00983 <span class="comment"> * @c *SVN_AUTH_PARAM_GNOME_KEYRING_UNLOCK_PROMPT_FUNC in order to unlock</span>
<a name="l00984"></a>00984 <span class="comment"> * the keyring.</span>
<a name="l00985"></a>00985 <span class="comment"> *</span>
<a name="l00986"></a>00986 <span class="comment"> * @c SVN_AUTH_PARAM_GNOME_KEYRING_UNLOCK_PROMPT_BATON is passed to</span>
<a name="l00987"></a>00987 <span class="comment"> * @c *SVN_AUTH_PARAM_GNOME_KEYRING_UNLOCK_PROMPT_FUNC.</span>
<a name="l00988"></a>00988 <span class="comment"> *</span>
<a name="l00989"></a>00989 <span class="comment"> * Allocate @a *provider in @a pool.</span>
<a name="l00990"></a>00990 <span class="comment"> *</span>
<a name="l00991"></a>00991 <span class="comment"> * @since New in 1.6</span>
<a name="l00992"></a>00992 <span class="comment"> * @note This function actually works only on systems with</span>
<a name="l00993"></a>00993 <span class="comment"> * libsvn_auth_gnome_keyring and GNOME Keyring installed.</span>
<a name="l00994"></a>00994 <span class="comment"> */</span>
<a name="l00995"></a>00995 <span class="keywordtype">void</span>
<a name="l00996"></a>00996 <a class="code" href="svn__auth_8h.html#ab8992f1f553f731482eee99b42eedaa6" title="Set *provider to an authentication provider of type svn_auth_cred_simple_t that gets/sets information...">svn_auth_get_gnome_keyring_simple_provider</a>(
<a name="l00997"></a>00997   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l00998"></a>00998   apr_pool_t *pool);
<a name="l00999"></a>00999 
<a name="l01000"></a>01000 <span class="comment"></span>
<a name="l01001"></a>01001 <span class="comment">/**</span>
<a name="l01002"></a>01002 <span class="comment"> * Set @a *provider to an authentication provider of type @c</span>
<a name="l01003"></a>01003 <span class="comment"> * svn_auth_cred_ssl_client_cert_pw_t that gets/sets information from the</span>
<a name="l01004"></a>01004 <span class="comment"> * user&#39;s ~/.subversion configuration directory.</span>
<a name="l01005"></a>01005 <span class="comment"> *</span>
<a name="l01006"></a>01006 <span class="comment"> * This is like svn_client_get_ssl_client_cert_pw_file_provider(), except</span>
<a name="l01007"></a>01007 <span class="comment"> * that the password is stored in GNOME Keyring.</span>
<a name="l01008"></a>01008 <span class="comment"> *</span>
<a name="l01009"></a>01009 <span class="comment"> * If the GNOME Keyring is locked the provider calls</span>
<a name="l01010"></a>01010 <span class="comment"> * @c *SVN_AUTH_PARAM_GNOME_KEYRING_UNLOCK_PROMPT_FUNC in order to unlock</span>
<a name="l01011"></a>01011 <span class="comment"> * the keyring.</span>
<a name="l01012"></a>01012 <span class="comment"> *</span>
<a name="l01013"></a>01013 <span class="comment"> * @c SVN_AUTH_PARAM_GNOME_KEYRING_UNLOCK_PROMPT_BATON is passed to</span>
<a name="l01014"></a>01014 <span class="comment"> * @c *SVN_AUTH_PARAM_GNOME_KEYRING_UNLOCK_PROMPT_FUNC.</span>
<a name="l01015"></a>01015 <span class="comment"> *</span>
<a name="l01016"></a>01016 <span class="comment"> * Allocate @a *provider in @a pool.</span>
<a name="l01017"></a>01017 <span class="comment"> *</span>
<a name="l01018"></a>01018 <span class="comment"> * @since New in 1.6</span>
<a name="l01019"></a>01019 <span class="comment"> * @note This function actually works only on systems with</span>
<a name="l01020"></a>01020 <span class="comment"> * libsvn_auth_gnome_keyring and GNOME Keyring installed.</span>
<a name="l01021"></a>01021 <span class="comment"> */</span>
<a name="l01022"></a>01022 <span class="keywordtype">void</span>
<a name="l01023"></a>01023 <a class="code" href="svn__auth_8h.html#a1d2364717fc83a0decd3fa136ae46779" title="Set *provider to an authentication provider of type svn_auth_cred_ssl_client_cert_pw_t that gets/sets...">svn_auth_get_gnome_keyring_ssl_client_cert_pw_provider</a>(
<a name="l01024"></a>01024   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l01025"></a>01025   apr_pool_t *pool);
<a name="l01026"></a>01026 
<a name="l01027"></a>01027 <span class="comment"></span>
<a name="l01028"></a>01028 <span class="comment">/**</span>
<a name="l01029"></a>01029 <span class="comment"> * Get libsvn_auth_kwallet version information.</span>
<a name="l01030"></a>01030 <span class="comment"> *</span>
<a name="l01031"></a>01031 <span class="comment"> * @since New in 1.6</span>
<a name="l01032"></a>01032 <span class="comment"> */</span>
<a name="l01033"></a>01033 <span class="keyword">const</span> <a class="code" href="structsvn__version__t.html" title="Version information.">svn_version_t</a> *
<a name="l01034"></a>01034 <a class="code" href="svn__auth_8h.html#a204f231da37e0d8de0d2939b41483153" title="Get libsvn_auth_kwallet version information.">svn_auth_kwallet_version</a>(<span class="keywordtype">void</span>);
<a name="l01035"></a>01035 
<a name="l01036"></a>01036 <span class="comment"></span>
<a name="l01037"></a>01037 <span class="comment">/**</span>
<a name="l01038"></a>01038 <span class="comment"> * Set @a *provider to an authentication provider of type @c</span>
<a name="l01039"></a>01039 <span class="comment"> * svn_auth_cred_simple_t that gets/sets information from the user&#39;s</span>
<a name="l01040"></a>01040 <span class="comment"> * ~/.subversion configuration directory.  Allocate @a *provider in</span>
<a name="l01041"></a>01041 <span class="comment"> * @a pool.</span>
<a name="l01042"></a>01042 <span class="comment"> *</span>
<a name="l01043"></a>01043 <span class="comment"> * This is like svn_client_get_simple_provider(), except that the</span>
<a name="l01044"></a>01044 <span class="comment"> * password is stored in KWallet.</span>
<a name="l01045"></a>01045 <span class="comment"> *</span>
<a name="l01046"></a>01046 <span class="comment"> * @since New in 1.6</span>
<a name="l01047"></a>01047 <span class="comment"> * @note This function actually works only on systems with libsvn_auth_kwallet</span>
<a name="l01048"></a>01048 <span class="comment"> * and KWallet installed.</span>
<a name="l01049"></a>01049 <span class="comment"> */</span>
<a name="l01050"></a>01050 <span class="keywordtype">void</span>
<a name="l01051"></a>01051 <a class="code" href="svn__auth_8h.html#ad0ada33b2e6776dc056ab70a15299c02" title="Set *provider to an authentication provider of type svn_auth_cred_simple_t that gets/sets information...">svn_auth_get_kwallet_simple_provider</a>(<a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l01052"></a>01052                                      apr_pool_t *pool);
<a name="l01053"></a>01053 
<a name="l01054"></a>01054 <span class="comment"></span>
<a name="l01055"></a>01055 <span class="comment">/**</span>
<a name="l01056"></a>01056 <span class="comment"> * Set @a *provider to an authentication provider of type @c</span>
<a name="l01057"></a>01057 <span class="comment"> * svn_auth_cred_ssl_client_cert_pw_t that gets/sets information from the</span>
<a name="l01058"></a>01058 <span class="comment"> * user&#39;s ~/.subversion configuration directory.  Allocate @a *provider in</span>
<a name="l01059"></a>01059 <span class="comment"> * @a pool.</span>
<a name="l01060"></a>01060 <span class="comment"> *</span>
<a name="l01061"></a>01061 <span class="comment"> * This is like svn_client_get_ssl_client_cert_pw_file_provider(), except</span>
<a name="l01062"></a>01062 <span class="comment"> * that the password is stored in KWallet.</span>
<a name="l01063"></a>01063 <span class="comment"> *</span>
<a name="l01064"></a>01064 <span class="comment"> * @since New in 1.6</span>
<a name="l01065"></a>01065 <span class="comment"> * @note This function actually works only on systems with libsvn_auth_kwallet</span>
<a name="l01066"></a>01066 <span class="comment"> * and KWallet installed.</span>
<a name="l01067"></a>01067 <span class="comment"> */</span>
<a name="l01068"></a>01068 <span class="keywordtype">void</span>
<a name="l01069"></a>01069 <a class="code" href="svn__auth_8h.html#a4cfb9708bb9ee684f494d2fdf027a877" title="Set *provider to an authentication provider of type svn_auth_cred_ssl_client_cert_pw_t that gets/sets...">svn_auth_get_kwallet_ssl_client_cert_pw_provider</a>(
<a name="l01070"></a>01070   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l01071"></a>01071   apr_pool_t *pool);
<a name="l01072"></a>01072 <span class="preprocessor">#endif </span><span class="comment">/* (!DARWIN &amp;&amp; !WIN32) || DOXYGEN */</span>
<a name="l01073"></a>01073 
<a name="l01074"></a>01074 <span class="comment"></span>
<a name="l01075"></a>01075 <span class="comment">/** Set @a *provider to an authentication provider of type @c</span>
<a name="l01076"></a>01076 <span class="comment"> * svn_auth_cred_username_t that gets/sets information from a user&#39;s</span>
<a name="l01077"></a>01077 <span class="comment"> * ~/.subversion configuration directory.  Allocate @a *provider in</span>
<a name="l01078"></a>01078 <span class="comment"> * @a pool.</span>
<a name="l01079"></a>01079 <span class="comment"> *</span>
<a name="l01080"></a>01080 <span class="comment"> * If a default username is available, @a *provider will honor it,</span>
<a name="l01081"></a>01081 <span class="comment"> * and return it when svn_auth_first_credentials() is called.  (See</span>
<a name="l01082"></a>01082 <span class="comment"> * @c SVN_AUTH_PARAM_DEFAULT_USERNAME.)</span>
<a name="l01083"></a>01083 <span class="comment"> *</span>
<a name="l01084"></a>01084 <span class="comment"> * @since New in 1.4.</span>
<a name="l01085"></a>01085 <span class="comment"> */</span>
<a name="l01086"></a>01086 <span class="keywordtype">void</span>
<a name="l01087"></a>01087 <a class="code" href="svn__auth_8h.html#ac107e10d2325dbe7d4805a64aa6bd6c4" title="Set *provider to an authentication provider of type svn_auth_cred_username_t that gets/sets informati...">svn_auth_get_username_provider</a>(<a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l01088"></a>01088                                apr_pool_t *pool);
<a name="l01089"></a>01089 
<a name="l01090"></a>01090 <span class="comment"></span>
<a name="l01091"></a>01091 <span class="comment">/** Set @a *provider to an authentication provider of type @c</span>
<a name="l01092"></a>01092 <span class="comment"> * svn_auth_cred_ssl_server_trust_t, allocated in @a pool.</span>
<a name="l01093"></a>01093 <span class="comment"> *</span>
<a name="l01094"></a>01094 <span class="comment"> * @a *provider retrieves its credentials from the configuration</span>
<a name="l01095"></a>01095 <span class="comment"> * mechanism.  The returned credential is used to override SSL</span>
<a name="l01096"></a>01096 <span class="comment"> * security on an error.</span>
<a name="l01097"></a>01097 <span class="comment"> *</span>
<a name="l01098"></a>01098 <span class="comment"> * @since New in 1.4.</span>
<a name="l01099"></a>01099 <span class="comment"> */</span>
<a name="l01100"></a>01100 <span class="keywordtype">void</span>
<a name="l01101"></a>01101 <a class="code" href="svn__auth_8h.html#aaa8fe3918d02a179811ab9a03ddaec99" title="Set *provider to an authentication provider of type svn_auth_cred_ssl_server_trust_t, allocated in pool.">svn_auth_get_ssl_server_trust_file_provider</a>(
<a name="l01102"></a>01102   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l01103"></a>01103   apr_pool_t *pool);
<a name="l01104"></a>01104 <span class="comment"></span>
<a name="l01105"></a>01105 <span class="comment">/** Set @a *provider to an authentication provider of type @c</span>
<a name="l01106"></a>01106 <span class="comment"> * svn_auth_cred_ssl_client_cert_t, allocated in @a pool.</span>
<a name="l01107"></a>01107 <span class="comment"> *</span>
<a name="l01108"></a>01108 <span class="comment"> * @a *provider retrieves its credentials from the configuration</span>
<a name="l01109"></a>01109 <span class="comment"> * mechanism.  The returned credential is used to load the appropriate</span>
<a name="l01110"></a>01110 <span class="comment"> * client certificate for authentication when requested by a server.</span>
<a name="l01111"></a>01111 <span class="comment"> *</span>
<a name="l01112"></a>01112 <span class="comment"> * @since New in 1.4.</span>
<a name="l01113"></a>01113 <span class="comment"> */</span>
<a name="l01114"></a>01114 <span class="keywordtype">void</span>
<a name="l01115"></a>01115 <a class="code" href="svn__auth_8h.html#aa2fa9ec4071016474d7a927cb4dbacf7" title="Set *provider to an authentication provider of type svn_auth_cred_ssl_client_cert_t, allocated in pool.">svn_auth_get_ssl_client_cert_file_provider</a>(
<a name="l01116"></a>01116   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l01117"></a>01117   apr_pool_t *pool);
<a name="l01118"></a>01118 
<a name="l01119"></a>01119 <span class="comment"></span>
<a name="l01120"></a>01120 <span class="comment">/** Set @a *provider to an authentication provider of type @c</span>
<a name="l01121"></a>01121 <span class="comment"> * svn_auth_cred_ssl_client_cert_pw_t that gets/sets information from the user&#39;s</span>
<a name="l01122"></a>01122 <span class="comment"> * ~/.subversion configuration directory.</span>
<a name="l01123"></a>01123 <span class="comment"> *</span>
<a name="l01124"></a>01124 <span class="comment"> * If the provider is going to save the passphrase unencrypted,</span>
<a name="l01125"></a>01125 <span class="comment"> * it calls @a plaintext_passphrase_prompt_func, passing @a</span>
<a name="l01126"></a>01126 <span class="comment"> * prompt_baton, before saving the passphrase.</span>
<a name="l01127"></a>01127 <span class="comment"> *</span>
<a name="l01128"></a>01128 <span class="comment"> * If @a plaintext_passphrase_prompt_func is NULL it is not called</span>
<a name="l01129"></a>01129 <span class="comment"> * and the passphrase is not stored in plaintext.</span>
<a name="l01130"></a>01130 <span class="comment"> * Client developers are highly encouraged to provide this callback</span>
<a name="l01131"></a>01131 <span class="comment"> * to ensure their users are made aware of the fact that their passphrase</span>
<a name="l01132"></a>01132 <span class="comment"> * is going to be stored unencrypted.</span>
<a name="l01133"></a>01133 <span class="comment"> *</span>
<a name="l01134"></a>01134 <span class="comment"> * Clients can however set the callback to NULL and set</span>
<a name="l01135"></a>01135 <span class="comment"> * SVN_AUTH_PARAM_STORE_SSL_CLIENT_CERT_PP_PLAINTEXT to SVN_CONFIG_FALSE or</span>
<a name="l01136"></a>01136 <span class="comment"> * SVN_CONFIG_TRUE to enforce a certain behaviour.</span>
<a name="l01137"></a>01137 <span class="comment"> *</span>
<a name="l01138"></a>01138 <span class="comment"> * Allocate @a *provider in @a pool.</span>
<a name="l01139"></a>01139 <span class="comment"> *</span>
<a name="l01140"></a>01140 <span class="comment"> * @since New in 1.6.</span>
<a name="l01141"></a>01141 <span class="comment"> */</span>
<a name="l01142"></a>01142 <span class="keywordtype">void</span>
<a name="l01143"></a>01143 <a class="code" href="svn__auth_8h.html#a6daa69fd91b8a658c3af25f27ab40a20" title="Set *provider to an authentication provider of type svn_auth_cred_ssl_client_cert_pw_t that gets/sets...">svn_auth_get_ssl_client_cert_pw_file_provider2</a>(
<a name="l01144"></a>01144   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l01145"></a>01145   <a class="code" href="group__auth__fns.html#ga81da0ae3bea6ac790f9c7f113db270cc" title="A type of callback function for asking whether storing a passphrase to disk in plaintext is allowed...">svn_auth_plaintext_passphrase_prompt_func_t</a> plaintext_passphrase_prompt_func,
<a name="l01146"></a>01146   <span class="keywordtype">void</span> *prompt_baton,
<a name="l01147"></a>01147   apr_pool_t *pool);
<a name="l01148"></a>01148 <span class="comment"></span>
<a name="l01149"></a>01149 <span class="comment">/** Like svn_auth_get_ssl_client_cert_pw_file_provider2, but without</span>
<a name="l01150"></a>01150 <span class="comment"> * the ability to call the svn_auth_plaintext_passphrase_prompt_func_t</span>
<a name="l01151"></a>01151 <span class="comment"> * callback, and the provider always assumes that it is not allowed</span>
<a name="l01152"></a>01152 <span class="comment"> * to store the passphrase in plaintext.</span>
<a name="l01153"></a>01153 <span class="comment"> *</span>
<a name="l01154"></a>01154 <span class="comment"> * @deprecated Provided for backwards compatibility with the 1.5 API.</span>
<a name="l01155"></a>01155 <span class="comment"> * @since New in 1.4.</span>
<a name="l01156"></a>01156 <span class="comment"> */</span>
<a name="l01157"></a>01157 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01158"></a>01158 <span class="keywordtype">void</span>
<a name="l01159"></a>01159 <a class="code" href="svn__auth_8h.html#a031474a8fae4e3d2b191cee3e8e8a165" title="Like svn_auth_get_ssl_client_cert_pw_file_provider2, but without the ability to call the svn_auth_pla...">svn_auth_get_ssl_client_cert_pw_file_provider</a>(
<a name="l01160"></a>01160   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l01161"></a>01161   apr_pool_t *pool);
<a name="l01162"></a>01162 
<a name="l01163"></a>01163 <span class="comment"></span>
<a name="l01164"></a>01164 <span class="comment">/** Set @a *provider to an authentication provider of type @c</span>
<a name="l01165"></a>01165 <span class="comment"> * svn_auth_cred_ssl_server_trust_t, allocated in @a pool.</span>
<a name="l01166"></a>01166 <span class="comment"> *</span>
<a name="l01167"></a>01167 <span class="comment"> * @a *provider retrieves its credentials by using the @a prompt_func</span>
<a name="l01168"></a>01168 <span class="comment"> * and @a prompt_baton.  The returned credential is used to override</span>
<a name="l01169"></a>01169 <span class="comment"> * SSL security on an error.</span>
<a name="l01170"></a>01170 <span class="comment"> *</span>
<a name="l01171"></a>01171 <span class="comment"> * @since New in 1.4.</span>
<a name="l01172"></a>01172 <span class="comment"> */</span>
<a name="l01173"></a>01173 <span class="keywordtype">void</span>
<a name="l01174"></a>01174 <a class="code" href="svn__auth_8h.html#a204388c3be43bff3c51e4490d7f40f43" title="Set *provider to an authentication provider of type svn_auth_cred_ssl_server_trust_t, allocated in pool.">svn_auth_get_ssl_server_trust_prompt_provider</a>(
<a name="l01175"></a>01175   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l01176"></a>01176   <a class="code" href="group__auth__fns.html#gac5805f633a96271f97b919297e9908a3" title="Set *cred by prompting the user, allocating *cred in pool.">svn_auth_ssl_server_trust_prompt_func_t</a> prompt_func,
<a name="l01177"></a>01177   <span class="keywordtype">void</span> *prompt_baton,
<a name="l01178"></a>01178   apr_pool_t *pool);
<a name="l01179"></a>01179 
<a name="l01180"></a>01180 <span class="comment"></span>
<a name="l01181"></a>01181 <span class="comment">/** Set @a *provider to an authentication provider of type @c</span>
<a name="l01182"></a>01182 <span class="comment"> * svn_auth_cred_ssl_client_cert_t, allocated in @a pool.</span>
<a name="l01183"></a>01183 <span class="comment"> *</span>
<a name="l01184"></a>01184 <span class="comment"> * @a *provider retrieves its credentials by using the @a prompt_func</span>
<a name="l01185"></a>01185 <span class="comment"> * and @a prompt_baton.  The returned credential is used to load the</span>
<a name="l01186"></a>01186 <span class="comment"> * appropriate client certificate for authentication when requested by</span>
<a name="l01187"></a>01187 <span class="comment"> * a server.  The prompt will be retried @a retry_limit times. For</span>
<a name="l01188"></a>01188 <span class="comment"> * infinite retries, set @a retry_limit to value less than 0.</span>
<a name="l01189"></a>01189 <span class="comment"> *</span>
<a name="l01190"></a>01190 <span class="comment"> * @since New in 1.4.</span>
<a name="l01191"></a>01191 <span class="comment"> */</span>
<a name="l01192"></a>01192 <span class="keywordtype">void</span>
<a name="l01193"></a>01193 <a class="code" href="svn__auth_8h.html#a091023baac1bdc7846dbb9c3a1b0fdfc" title="Set *provider to an authentication provider of type svn_auth_cred_ssl_client_cert_t, allocated in pool.">svn_auth_get_ssl_client_cert_prompt_provider</a>(
<a name="l01194"></a>01194   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l01195"></a>01195   <a class="code" href="group__auth__fns.html#ga5afb52c44e95354a2ec52f6fe030c5d2" title="Set *cred by prompting the user, allocating *cred in pool.">svn_auth_ssl_client_cert_prompt_func_t</a> prompt_func,
<a name="l01196"></a>01196   <span class="keywordtype">void</span> *prompt_baton,
<a name="l01197"></a>01197   <span class="keywordtype">int</span> retry_limit,
<a name="l01198"></a>01198   apr_pool_t *pool);
<a name="l01199"></a>01199 
<a name="l01200"></a>01200 <span class="comment"></span>
<a name="l01201"></a>01201 <span class="comment">/** Set @a *provider to an authentication provider of type @c</span>
<a name="l01202"></a>01202 <span class="comment"> * svn_auth_cred_ssl_client_cert_pw_t, allocated in @a pool.</span>
<a name="l01203"></a>01203 <span class="comment"> *</span>
<a name="l01204"></a>01204 <span class="comment"> * @a *provider retrieves its credentials by using the @a prompt_func</span>
<a name="l01205"></a>01205 <span class="comment"> * and @a prompt_baton.  The returned credential is used when a loaded</span>
<a name="l01206"></a>01206 <span class="comment"> * client certificate is protected by a passphrase.  The prompt will</span>
<a name="l01207"></a>01207 <span class="comment"> * be retried @a retry_limit times. For infinite retries, set</span>
<a name="l01208"></a>01208 <span class="comment"> * @a retry_limit to value less than 0.</span>
<a name="l01209"></a>01209 <span class="comment"> *</span>
<a name="l01210"></a>01210 <span class="comment"> * @since New in 1.4.</span>
<a name="l01211"></a>01211 <span class="comment"> */</span>
<a name="l01212"></a>01212 <span class="keywordtype">void</span>
<a name="l01213"></a>01213 <a class="code" href="svn__auth_8h.html#afe35741fb55873c3c4227d237e19bc14" title="Set *provider to an authentication provider of type svn_auth_cred_ssl_client_cert_pw_t, allocated in pool.">svn_auth_get_ssl_client_cert_pw_prompt_provider</a>(
<a name="l01214"></a>01214   <a class="code" href="structsvn__auth__provider__object__t.html" title="A provider object, ready to be put into an array and given to svn_auth_open().">svn_auth_provider_object_t</a> **provider,
<a name="l01215"></a>01215   <a class="code" href="group__auth__fns.html#gafeb529b5bafaed2e3f423e4186d60f06" title="Set *cred by prompting the user, allocating *cred in pool.">svn_auth_ssl_client_cert_pw_prompt_func_t</a> prompt_func,
<a name="l01216"></a>01216   <span class="keywordtype">void</span> *prompt_baton,
<a name="l01217"></a>01217   <span class="keywordtype">int</span> retry_limit,
<a name="l01218"></a>01218   apr_pool_t *pool);
<a name="l01219"></a>01219 
<a name="l01220"></a>01220 
<a name="l01221"></a>01221 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l01222"></a>01222 <span class="preprocessor"></span>}
<a name="l01223"></a>01223 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l01224"></a>01224 
<a name="l01225"></a>01225 <span class="preprocessor">#endif </span><span class="comment">/* SVN_AUTH_H */</span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Fri Dec 23 2011 09:20:35 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>
