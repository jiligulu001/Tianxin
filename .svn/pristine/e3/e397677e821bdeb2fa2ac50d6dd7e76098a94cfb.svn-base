<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Subversion: Property functions</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Property functions</div>  </div>
<div class="ingroups"><a class="el" href="group__clnt__wc.html">Client working copy management</a></div></div>
<div class="contents">

<p>Properties.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#ga57cb30d1861ea88b22673bffa989de59">svn_client_propset_remote</a> (const char *propname, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *propval, const char *url, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> skip_checks, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> base_revision_for_url, const apr_hash_t *revprop_table, <a class="el" href="svn__types_8h.html#a5aca95325ba984f70a316d7d9966e1df">svn_commit_callback2_t</a> commit_callback, void *commit_baton, <a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *ctx, apr_pool_t *scratch_pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>propname</em> to <em>propval</em> on <em>url</em>.  <a href="#ga57cb30d1861ea88b22673bffa989de59"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#gaa302c36e754ac213fa01d52d28d55d68">svn_client_propset_local</a> (const char *propname, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *propval, const apr_array_header_t *targets, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> skip_checks, const apr_array_header_t *changelists, <a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *ctx, apr_pool_t *scratch_pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>propname</em> to <em>propval</em> on each (const char *) target in <em>targets</em>.  <a href="#gaa302c36e754ac213fa01d52d28d55d68"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#gaff2980dca147ebda1200d46cfdf0caf7">svn_client_propset3</a> (<a class="el" href="structsvn__commit__info__t.html">svn_commit_info_t</a> **commit_info_p, const char *propname, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *propval, const char *target, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> skip_checks, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> base_revision_for_url, const apr_array_header_t *changelists, const apr_hash_t *revprop_table, <a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *ctx, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">An amalgamation of <a class="el" href="group__svn__client__prop__funcs.html#gaa302c36e754ac213fa01d52d28d55d68" title="Set propname to propval on each (const char *) target in targets.">svn_client_propset_local()</a> and <a class="el" href="group__svn__client__prop__funcs.html#ga57cb30d1861ea88b22673bffa989de59" title="Set propname to propval on url.">svn_client_propset_remote()</a> that takes only a single target, and returns the commit info in <em>*commit_info_p</em> rather than through a callback function.  <a href="#gaff2980dca147ebda1200d46cfdf0caf7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#gadd0b4a944d26837e5d46d29d53070858">svn_client_propset2</a> (const char *propname, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *propval, const char *target, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> skip_checks, <a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *ctx, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Like <a class="el" href="group__svn__client__prop__funcs.html#gaff2980dca147ebda1200d46cfdf0caf7" title="An amalgamation of svn_client_propset_local() and svn_client_propset_remote() that takes only a singl...">svn_client_propset3()</a>, but with <em>base_revision_for_url</em> always <a class="el" href="svn__types_8h.html#a8857d4630bf116eaba54a1b65d43ad92" title="The &#39;official&#39; invalid revision num.">SVN_INVALID_REVNUM</a>; <em>commit_info_p</em> always <code>NULL</code>; <em>changelists</em> always <code>NULL</code>; <em>revprop_table</em> always <code>NULL</code>; and <em>depth</em> set according to <em>recurse:</em> if <em>recurse</em> is TRUE, <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D).">svn_depth_infinity</a>, else <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries.">svn_depth_empty</a>.  <a href="#gadd0b4a944d26837e5d46d29d53070858"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#ga28943f472c40df43209815e2033fe414">svn_client_propset</a> (const char *propname, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *propval, const char *target, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Like <a class="el" href="group__svn__client__prop__funcs.html#gadd0b4a944d26837e5d46d29d53070858" title="Like svn_client_propset3(), but with base_revision_for_url always SVN_INVALID_REVNUM; commit_info_p a...">svn_client_propset2()</a>, but with <em>skip_checks</em> always FALSE and a newly created <em>ctx</em>.  <a href="#ga28943f472c40df43209815e2033fe414"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#ga5ec6d39fdcc1e040950717ac1598037f">svn_client_revprop_set2</a> (const char *propname, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *propval, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *original_propval, const char *URL, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *revision, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *set_rev, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> force, <a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *ctx, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>propname</em> to <em>propval</em> on revision <em>revision</em> in the repository represented by <em>URL</em>.  <a href="#ga5ec6d39fdcc1e040950717ac1598037f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#ga624f20be1fad7998df4f179845d79518">svn_client_revprop_set</a> (const char *propname, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *propval, const char *URL, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *revision, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *set_rev, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> force, <a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *ctx, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__client__prop__funcs.html#ga5ec6d39fdcc1e040950717ac1598037f" title="Set propname to propval on revision revision in the repository represented by URL.">svn_client_revprop_set2()</a>, but with <em>original_propval</em> always <code>NULL</code>.  <a href="#ga624f20be1fad7998df4f179845d79518"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#gab2cac73fb91180924232f0b755a85a3f">svn_client_propget4</a> (apr_hash_t **props, const char *propname, const char *target, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *peg_revision, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *revision, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *actual_revnum, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, const apr_array_header_t *changelists, <a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *ctx, apr_pool_t *result_pool, apr_pool_t *scratch_pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*props</em> to a hash table whose keys are absolute paths or URLs of items on which property <em>propname</em> is set, and whose values are `<a class="el" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *' representing the property value for <em>propname</em> at that path.  <a href="#gab2cac73fb91180924232f0b755a85a3f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#ga308f521360d91e87e6d1f0621363e260">svn_client_propget3</a> (apr_hash_t **props, const char *propname, const char *target, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *peg_revision, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *revision, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *actual_revnum, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, const apr_array_header_t *changelists, <a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *ctx, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__client__prop__funcs.html#gab2cac73fb91180924232f0b755a85a3f" title="Set *props to a hash table whose keys are absolute paths or URLs of items on which property propname ...">svn_client_propget4()</a>, but with the following change to the output hash keys: keys are `<code>char *</code>' paths, prefixed by <em>target</em>, which is a working copy path or a URL.  <a href="#ga308f521360d91e87e6d1f0621363e260"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#gac4e012d04b8ac4b7637b01733c8dabaf">svn_client_propget2</a> (apr_hash_t **props, const char *propname, const char *target, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *peg_revision, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *revision, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *ctx, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__client__prop__funcs.html#ga308f521360d91e87e6d1f0621363e260" title="Similar to svn_client_propget4(), but with the following change to the output hash keys: keys are `ch...">svn_client_propget3()</a>, except that <em>actual_revnum</em> and <em>changelists</em> are always <code>NULL</code>, and <em>depth</em> is set according to <em>recurse:</em> if <em>recurse</em> is TRUE, then <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D).">svn_depth_infinity</a>, else <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries.">svn_depth_empty</a>.  <a href="#gac4e012d04b8ac4b7637b01733c8dabaf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#ga221d812c03943439d6df7bc110d123aa">svn_client_propget</a> (apr_hash_t **props, const char *propname, const char *target, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *revision, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *ctx, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__client__prop__funcs.html#gac4e012d04b8ac4b7637b01733c8dabaf" title="Similar to svn_client_propget3(), except that actual_revnum and changelists are always NULL...">svn_client_propget2()</a>, except that <em>peg_revision</em> is always the same as <em>revision</em>.  <a href="#ga221d812c03943439d6df7bc110d123aa"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#gae4b4f748cb82eaa41f865ba4a2766840">svn_client_revprop_get</a> (const char *propname, <a class="el" href="structsvn__string__t.html">svn_string_t</a> **propval, const char *URL, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *revision, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *set_rev, <a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *ctx, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*propval</em> to the value of <em>propname</em> on revision <em>revision</em> in the repository represented by <em>URL</em>.  <a href="#gae4b4f748cb82eaa41f865ba4a2766840"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#ga6a7566fa1adf53579caf96c584b419ff">svn_client_proplist3</a> (const char *target, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *peg_revision, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *revision, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, const apr_array_header_t *changelists, <a class="el" href="group__clnt__commit.html#ga880d237c32626991c259e6fbced459d2">svn_proplist_receiver_t</a> receiver, void *receiver_baton, <a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *ctx, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoke <em>receiver</em> with <em>receiver_baton</em> to return the regular properties of <em>target</em>, a URL or working copy path.  <a href="#ga6a7566fa1adf53579caf96c584b419ff"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#ga0c3fdcb55aead8324bea9bd29bdac8d4">svn_client_proplist2</a> (apr_array_header_t **props, const char *target, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *peg_revision, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *revision, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *ctx, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__client__prop__funcs.html#ga6a7566fa1adf53579caf96c584b419ff" title="Invoke receiver with receiver_baton to return the regular properties of target, a URL or working copy...">svn_client_proplist3()</a>, except the properties are returned as an array of <a class="el" href="structsvn__client__proplist__item__t.html" title="This is a structure which stores a filename and a hash of property names and values.">svn_client_proplist_item_t</a> * structures instead of by invoking the receiver function, there's no support for <em>changelists</em> filtering, and <em>recurse</em> is used instead of a <a class="el" href="svn__types_8h.html#ae2a8b1d2477ddabbd337d7f35e113743" title="The concept of depth for directories.">svn_depth_t</a> parameter (FALSE corresponds to <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries.">svn_depth_empty</a>, and TRUE to <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D).">svn_depth_infinity</a>).  <a href="#ga0c3fdcb55aead8324bea9bd29bdac8d4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#ga8c2d55caecf446513125697ff99ebb0b">svn_client_proplist</a> (apr_array_header_t **props, const char *target, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *revision, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *ctx, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__client__prop__funcs.html#ga0c3fdcb55aead8324bea9bd29bdac8d4" title="Similar to svn_client_proplist3(), except the properties are returned as an array of svn_client_propl...">svn_client_proplist2()</a>, except that <em>peg_revision</em> is always the same as <em>revision</em>.  <a href="#ga8c2d55caecf446513125697ff99ebb0b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__client__prop__funcs.html#ga654187dc1ed77b326c11a8856a5315bd">svn_client_revprop_list</a> (apr_hash_t **props, const char *URL, const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *revision, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *set_rev, <a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *ctx, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*props</em> to a hash of the revision props attached to <em>revision</em> in the repository represented by <em>URL</em>.  <a href="#ga654187dc1ed77b326c11a8856a5315bd"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<p>Properties. </p>
<p>Note that certain svn-controlled properties must always have their values set and stored in UTF8 with LF line endings. When retrieving these properties, callers must convert the values back to native locale and native line-endings before displaying them to the user. For help with this task, see <a class="el" href="group__svn__props__support.html#ga2b23f5fbe4e1736ccced93b538df782d" title="If prop_name requires that its value be stored as UTF8/LF in the repository, then return TRUE...">svn_prop_needs_translation()</a>, <a class="el" href="svn__subst_8h.html#a626c5dcfbbf5057ebc0e384187f6d330" title="Similar to svn_subst_translate_string2(), except that the information about whether re-encoding or li...">svn_subst_translate_string()</a>, and <a class="el" href="svn__subst_8h.html#a7b0510e7ebae885c80b227ccc3a13685" title="Translate the string value from UTF8 and LF line-endings into native character encoding and native li...">svn_subst_detranslate_string()</a>. </p>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga221d812c03943439d6df7bc110d123aa"></a><!-- doxytag: member="svn_client.h::svn_client_propget" ref="ga221d812c03943439d6df7bc110d123aa" args="(apr_hash_t **props, const char *propname, const char *target, const svn_opt_revision_t *revision, svn_boolean_t recurse, svn_client_ctx_t *ctx, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_propget </td>
          <td>(</td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>propname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="group__svn__client__prop__funcs.html#gac4e012d04b8ac4b7637b01733c8dabaf" title="Similar to svn_client_propget3(), except that actual_revnum and changelists are always NULL...">svn_client_propget2()</a>, except that <em>peg_revision</em> is always the same as <em>revision</em>. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000101">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gac4e012d04b8ac4b7637b01733c8dabaf"></a><!-- doxytag: member="svn_client.h::svn_client_propget2" ref="gac4e012d04b8ac4b7637b01733c8dabaf" args="(apr_hash_t **props, const char *propname, const char *target, const svn_opt_revision_t *peg_revision, const svn_opt_revision_t *revision, svn_boolean_t recurse, svn_client_ctx_t *ctx, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_propget2 </td>
          <td>(</td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>propname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>peg_revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="group__svn__client__prop__funcs.html#ga308f521360d91e87e6d1f0621363e260" title="Similar to svn_client_propget4(), but with the following change to the output hash keys: keys are `ch...">svn_client_propget3()</a>, except that <em>actual_revnum</em> and <em>changelists</em> are always <code>NULL</code>, and <em>depth</em> is set according to <em>recurse:</em> if <em>recurse</em> is TRUE, then <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D).">svn_depth_infinity</a>, else <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries.">svn_depth_empty</a>. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000100">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga308f521360d91e87e6d1f0621363e260"></a><!-- doxytag: member="svn_client.h::svn_client_propget3" ref="ga308f521360d91e87e6d1f0621363e260" args="(apr_hash_t **props, const char *propname, const char *target, const svn_opt_revision_t *peg_revision, const svn_opt_revision_t *revision, svn_revnum_t *actual_revnum, svn_depth_t depth, const apr_array_header_t *changelists, svn_client_ctx_t *ctx, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_propget3 </td>
          <td>(</td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>propname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>peg_revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *&#160;</td>
          <td class="paramname"><em>actual_revnum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>changelists</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="group__svn__client__prop__funcs.html#gab2cac73fb91180924232f0b755a85a3f" title="Set *props to a hash table whose keys are absolute paths or URLs of items on which property propname ...">svn_client_propget4()</a>, but with the following change to the output hash keys: keys are `<code>char *</code>' paths, prefixed by <em>target</em>, which is a working copy path or a URL. </p>
<p>This function returns SVN_ERR_ENTRY_NOT_FOUND where svn_client_propget4 would return SVN_ERR_UNVERSIONED_RESOURCE.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000099">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gab2cac73fb91180924232f0b755a85a3f"></a><!-- doxytag: member="svn_client.h::svn_client_propget4" ref="gab2cac73fb91180924232f0b755a85a3f" args="(apr_hash_t **props, const char *propname, const char *target, const svn_opt_revision_t *peg_revision, const svn_opt_revision_t *revision, svn_revnum_t *actual_revnum, svn_depth_t depth, const apr_array_header_t *changelists, svn_client_ctx_t *ctx, apr_pool_t *result_pool, apr_pool_t *scratch_pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_propget4 </td>
          <td>(</td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>propname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>peg_revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *&#160;</td>
          <td class="paramname"><em>actual_revnum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>changelists</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>result_pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*props</em> to a hash table whose keys are absolute paths or URLs of items on which property <em>propname</em> is set, and whose values are `<a class="el" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *' representing the property value for <em>propname</em> at that path. </p>
<p>Allocate <em>*props</em>, its keys, and its values in <em>pool</em>, use <em>scratch_pool</em> for temporary allocations.</p>
<p>Don't store any path, not even <em>target</em>, if it does not have a property named <em>propname</em>.</p>
<p>If <em>revision-&gt;kind</em> is <a class="el" href="svn__opt_8h.html#a36acb9e17f98a88e71d4834d0dcebbd1adc78e9d487fb33d93cccea4884e4e954" title="No revision information given.">svn_opt_revision_unspecified</a>, then: get properties from the working copy if <em>target</em> is a working copy path, or from the repository head if <em>target</em> is a URL. Else get the properties as of <em>revision</em>. The actual node revision selected is determined by the path as it exists in <em>peg_revision</em>. If <em>peg_revision-&gt;kind</em> is <a class="el" href="svn__opt_8h.html#a36acb9e17f98a88e71d4834d0dcebbd1adc78e9d487fb33d93cccea4884e4e954" title="No revision information given.">svn_opt_revision_unspecified</a>, then it defaults to <a class="el" href="svn__opt_8h.html#a36acb9e17f98a88e71d4834d0dcebbd1a38099b179ac6fbf511821d1d1554bf7c" title="repository youngest">svn_opt_revision_head</a> for URLs or <a class="el" href="svn__opt_8h.html#a36acb9e17f98a88e71d4834d0dcebbd1a56ea9de293c88d10020b3a66b63ecdb3" title="current, plus local mods">svn_opt_revision_working</a> for WC targets. Use the authentication baton in <em>ctx</em> for authentication if contacting the repository. If <em>actual_revnum</em> is not <code>NULL</code>, the actual revision number used for the fetch is stored in <em>*actual_revnum</em>.</p>
<p>If <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries.">svn_depth_empty</a>, fetch the property from <em>target</em> only; if <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345" title="D + its file children, but not subdirs.">svn_depth_files</a>, fetch from <em>target</em> and its file children (if any); if <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca68873e015456e384e4f63f3bbd515c8a" title="D + immediate children (D and its entries).">svn_depth_immediates</a>, from <em>target</em> and all of its immediate children (both files and directories); if <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D).">svn_depth_infinity</a>, from <em>target</em> and everything beneath it.</p>
<p><em>changelists</em> is an array of <code>const char *</code> changelist names, used as a restrictive filter on items whose properties are gotten; that is, don't get <em>propname</em> on any item unless it's a member of one of those changelists. If <em>changelists</em> is empty (or altogether <code>NULL</code>), no changelist filtering occurs.</p>
<p>If error, don't touch <em>*props</em>, otherwise <em>*props</em> is a hash table even if empty.</p>
<p>This function returns SVN_ERR_UNVERSIONED_RESOURCE when it is called on unversioned nodes.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga8c2d55caecf446513125697ff99ebb0b"></a><!-- doxytag: member="svn_client.h::svn_client_proplist" ref="ga8c2d55caecf446513125697ff99ebb0b" args="(apr_array_header_t **props, const char *target, const svn_opt_revision_t *revision, svn_boolean_t recurse, svn_client_ctx_t *ctx, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_proplist </td>
          <td>(</td>
          <td class="paramtype">apr_array_header_t **&#160;</td>
          <td class="paramname"><em>props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="group__svn__client__prop__funcs.html#ga0c3fdcb55aead8324bea9bd29bdac8d4" title="Similar to svn_client_proplist3(), except the properties are returned as an array of svn_client_propl...">svn_client_proplist2()</a>, except that <em>peg_revision</em> is always the same as <em>revision</em>. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000103">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga0c3fdcb55aead8324bea9bd29bdac8d4"></a><!-- doxytag: member="svn_client.h::svn_client_proplist2" ref="ga0c3fdcb55aead8324bea9bd29bdac8d4" args="(apr_array_header_t **props, const char *target, const svn_opt_revision_t *peg_revision, const svn_opt_revision_t *revision, svn_boolean_t recurse, svn_client_ctx_t *ctx, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_proplist2 </td>
          <td>(</td>
          <td class="paramtype">apr_array_header_t **&#160;</td>
          <td class="paramname"><em>props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>peg_revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="group__svn__client__prop__funcs.html#ga6a7566fa1adf53579caf96c584b419ff" title="Invoke receiver with receiver_baton to return the regular properties of target, a URL or working copy...">svn_client_proplist3()</a>, except the properties are returned as an array of <a class="el" href="structsvn__client__proplist__item__t.html" title="This is a structure which stores a filename and a hash of property names and values.">svn_client_proplist_item_t</a> * structures instead of by invoking the receiver function, there's no support for <em>changelists</em> filtering, and <em>recurse</em> is used instead of a <a class="el" href="svn__types_8h.html#ae2a8b1d2477ddabbd337d7f35e113743" title="The concept of depth for directories.">svn_depth_t</a> parameter (FALSE corresponds to <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries.">svn_depth_empty</a>, and TRUE to <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D).">svn_depth_infinity</a>). </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2.</dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000102">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga6a7566fa1adf53579caf96c584b419ff"></a><!-- doxytag: member="svn_client.h::svn_client_proplist3" ref="ga6a7566fa1adf53579caf96c584b419ff" args="(const char *target, const svn_opt_revision_t *peg_revision, const svn_opt_revision_t *revision, svn_depth_t depth, const apr_array_header_t *changelists, svn_proplist_receiver_t receiver, void *receiver_baton, svn_client_ctx_t *ctx, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_proplist3 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>peg_revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>changelists</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__clnt__commit.html#ga880d237c32626991c259e6fbced459d2">svn_proplist_receiver_t</a>&#160;</td>
          <td class="paramname"><em>receiver</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>receiver_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Invoke <em>receiver</em> with <em>receiver_baton</em> to return the regular properties of <em>target</em>, a URL or working copy path. </p>
<p><em>receiver</em> will be called for each path encountered.</p>
<p>If <em>revision-&gt;kind</em> is <a class="el" href="svn__opt_8h.html#a36acb9e17f98a88e71d4834d0dcebbd1adc78e9d487fb33d93cccea4884e4e954" title="No revision information given.">svn_opt_revision_unspecified</a>, then get properties from the working copy, if <em>target</em> is a working copy path, or from the repository head if <em>target</em> is a URL. Else get the properties as of <em>revision</em>. The actual node revision selected is determined by the path as it exists in <em>peg_revision</em>. If <em>peg_revision-&gt;kind</em> is <a class="el" href="svn__opt_8h.html#a36acb9e17f98a88e71d4834d0dcebbd1adc78e9d487fb33d93cccea4884e4e954" title="No revision information given.">svn_opt_revision_unspecified</a>, then it defaults to <a class="el" href="svn__opt_8h.html#a36acb9e17f98a88e71d4834d0dcebbd1a38099b179ac6fbf511821d1d1554bf7c" title="repository youngest">svn_opt_revision_head</a> for URLs or <a class="el" href="svn__opt_8h.html#a36acb9e17f98a88e71d4834d0dcebbd1a56ea9de293c88d10020b3a66b63ecdb3" title="current, plus local mods">svn_opt_revision_working</a> for WC targets. Use the authentication baton cached in <em>ctx</em> for authentication if contacting the repository.</p>
<p>If <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries.">svn_depth_empty</a>, list only the properties of <em>target</em> itself. If <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345" title="D + its file children, but not subdirs.">svn_depth_files</a>, and <em>target</em> is a directory, list the properties of <em>target</em> and its file entries. If <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca68873e015456e384e4f63f3bbd515c8a" title="D + immediate children (D and its entries).">svn_depth_immediates</a>, list the properties of its immediate file and directory entries. If <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D).">svn_depth_infinity</a>, list the properties of its file entries and recurse (with <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D).">svn_depth_infinity</a>) on directory entries. <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2cacf4538edb8e8823b0b9cdeaaac245ebf" title="Depth undetermined or ignored.">svn_depth_unknown</a> is equivalent to <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries.">svn_depth_empty</a>. All other values produce undefined results.</p>
<p><em>changelists</em> is an array of <code>const char *</code> changelist names, used as a restrictive filter on items whose properties are listed; that is, don't list properties on any item unless it's a member of one of those changelists. If <em>changelists</em> is empty (or altogether <code>NULL</code>), no changelist filtering occurs.</p>
<p>If <em>target</em> is not found, return the error <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a3b8131c84b5fb6369d784ad72970826d" title="&quot;Can&#39;t find an entry&quot;">SVN_ERR_ENTRY_NOT_FOUND</a>.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="ga28943f472c40df43209815e2033fe414"></a><!-- doxytag: member="svn_client.h::svn_client_propset" ref="ga28943f472c40df43209815e2033fe414" args="(const char *propname, const svn_string_t *propval, const char *target, svn_boolean_t recurse, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_propset </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>propname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td>
          <td class="paramname"><em>propval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Like <a class="el" href="group__svn__client__prop__funcs.html#gadd0b4a944d26837e5d46d29d53070858" title="Like svn_client_propset3(), but with base_revision_for_url always SVN_INVALID_REVNUM; commit_info_p a...">svn_client_propset2()</a>, but with <em>skip_checks</em> always FALSE and a newly created <em>ctx</em>. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000097">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gadd0b4a944d26837e5d46d29d53070858"></a><!-- doxytag: member="svn_client.h::svn_client_propset2" ref="gadd0b4a944d26837e5d46d29d53070858" args="(const char *propname, const svn_string_t *propval, const char *target, svn_boolean_t recurse, svn_boolean_t skip_checks, svn_client_ctx_t *ctx, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_propset2 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>propname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td>
          <td class="paramname"><em>propval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>skip_checks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Like <a class="el" href="group__svn__client__prop__funcs.html#gaff2980dca147ebda1200d46cfdf0caf7" title="An amalgamation of svn_client_propset_local() and svn_client_propset_remote() that takes only a singl...">svn_client_propset3()</a>, but with <em>base_revision_for_url</em> always <a class="el" href="svn__types_8h.html#a8857d4630bf116eaba54a1b65d43ad92" title="The &#39;official&#39; invalid revision num.">SVN_INVALID_REVNUM</a>; <em>commit_info_p</em> always <code>NULL</code>; <em>changelists</em> always <code>NULL</code>; <em>revprop_table</em> always <code>NULL</code>; and <em>depth</em> set according to <em>recurse:</em> if <em>recurse</em> is TRUE, <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D).">svn_depth_infinity</a>, else <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries.">svn_depth_empty</a>. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000096">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaff2980dca147ebda1200d46cfdf0caf7"></a><!-- doxytag: member="svn_client.h::svn_client_propset3" ref="gaff2980dca147ebda1200d46cfdf0caf7" args="(svn_commit_info_t **commit_info_p, const char *propname, const svn_string_t *propval, const char *target, svn_depth_t depth, svn_boolean_t skip_checks, svn_revnum_t base_revision_for_url, const apr_array_header_t *changelists, const apr_hash_t *revprop_table, svn_client_ctx_t *ctx, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_propset3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__commit__info__t.html">svn_commit_info_t</a> **&#160;</td>
          <td class="paramname"><em>commit_info_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>propname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td>
          <td class="paramname"><em>propval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>skip_checks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>base_revision_for_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>changelists</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_hash_t *&#160;</td>
          <td class="paramname"><em>revprop_table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>An amalgamation of <a class="el" href="group__svn__client__prop__funcs.html#gaa302c36e754ac213fa01d52d28d55d68" title="Set propname to propval on each (const char *) target in targets.">svn_client_propset_local()</a> and <a class="el" href="group__svn__client__prop__funcs.html#ga57cb30d1861ea88b22673bffa989de59" title="Set propname to propval on url.">svn_client_propset_remote()</a> that takes only a single target, and returns the commit info in <em>*commit_info_p</em> rather than through a callback function. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000095">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa302c36e754ac213fa01d52d28d55d68"></a><!-- doxytag: member="svn_client.h::svn_client_propset_local" ref="gaa302c36e754ac213fa01d52d28d55d68" args="(const char *propname, const svn_string_t *propval, const apr_array_header_t *targets, svn_depth_t depth, svn_boolean_t skip_checks, const apr_array_header_t *changelists, svn_client_ctx_t *ctx, apr_pool_t *scratch_pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_propset_local </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>propname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td>
          <td class="paramname"><em>propval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>targets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>skip_checks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>changelists</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>propname</em> to <em>propval</em> on each (const char *) target in <em>targets</em>. </p>
<p>The targets must be all working copy paths. A <em>propval</em> of <code>NULL</code> will delete the property.</p>
<p>If <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries.">svn_depth_empty</a>, set the property on each member of <em>targets</em> only; if <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345" title="D + its file children, but not subdirs.">svn_depth_files</a>, set it on <em>targets</em> and their file children (if any); if <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca68873e015456e384e4f63f3bbd515c8a" title="D + immediate children (D and its entries).">svn_depth_immediates</a>, on <em>targets</em> and all of their immediate children (both files and directories); if <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D).">svn_depth_infinity</a>, on <em>targets</em> and everything beneath them.</p>
<p><em>changelists</em> is an array of <code>const char *</code> changelist names, used as a restrictive filter on items whose properties are set; that is, don't set properties on any item unless it's a member of one of those changelists. If <em>changelists</em> is empty (or altogether <code>NULL</code>), no changelist filtering occurs.</p>
<p>If <em>propname</em> is an svn-controlled property (i.e. prefixed with <a class="el" href="group__svn__props__support.html#ga17fe0cc2c221f33d00a2c917ad66bfd4" title="All Subversion property names start with this.">SVN_PROP_PREFIX</a>), then the caller is responsible for ensuring that the value is UTF8-encoded and uses LF line-endings.</p>
<p>If <em>skip_checks</em> is TRUE, do no validity checking. But if <em>skip_checks</em> is FALSE, and <em>propname</em> is not a valid property for <em>targets</em>, return an error, either <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a600dd588fe36a1627b179bbb8d066752" title="&quot;Illegal target for the requested operation&quot;">SVN_ERR_ILLEGAL_TARGET</a> (if the property is not appropriate for <em>targets</em>), or <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660acf00eb32bb6cf0ab5ec3c9af7d6d885a" title="&quot;Bogus mime-type&quot;">SVN_ERR_BAD_MIME_TYPE</a> (if <em>propname</em> is "svn:mime-type", but <em>propval</em> is not a valid mime-type).</p>
<p>If <em>ctx-&gt;cancel_func</em> is non-NULL, invoke it passing <em>ctx-&gt;cancel_baton</em> at various places during the operation.</p>
<p>Use <em>scratch_pool</em> for all memory allocation.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga57cb30d1861ea88b22673bffa989de59"></a><!-- doxytag: member="svn_client.h::svn_client_propset_remote" ref="ga57cb30d1861ea88b22673bffa989de59" args="(const char *propname, const svn_string_t *propval, const char *url, svn_boolean_t skip_checks, svn_revnum_t base_revision_for_url, const apr_hash_t *revprop_table, svn_commit_callback2_t commit_callback, void *commit_baton, svn_client_ctx_t *ctx, apr_pool_t *scratch_pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_propset_remote </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>propname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td>
          <td class="paramname"><em>propval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>skip_checks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>base_revision_for_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_hash_t *&#160;</td>
          <td class="paramname"><em>revprop_table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a5aca95325ba984f70a316d7d9966e1df">svn_commit_callback2_t</a>&#160;</td>
          <td class="paramname"><em>commit_callback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>commit_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>propname</em> to <em>propval</em> on <em>url</em>. </p>
<p>A <em>propval</em> of <code>NULL</code> will delete the property.</p>
<p>Immediately attempt to commit the property change in the repository, using the authentication baton in <em>ctx</em> and <em>ctx-&gt;log_msg_func3/<em>ctx-&gt;log_msg_baton3</em>.</em> </p>
<p>If the property has changed on <em>url</em> since revision <em>base_revision_for_url</em> (which must not be <a class="el" href="svn__types_8h.html#a8857d4630bf116eaba54a1b65d43ad92" title="The &#39;official&#39; invalid revision num.">SVN_INVALID_REVNUM</a>), no change will be made and an error will be returned.</p>
<p>If non-NULL, <em>revprop_table</em> is a hash table holding additional, custom revision properties (<code>const char *</code> names mapped to <code><a class="el" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *</code> values) to be set on the new revision. This table cannot contain any standard Subversion properties.</p>
<p>If <em>commit_callback</em> is non-NULL, then call <em>commit_callback</em> with <em>commit_baton</em> and a <a class="el" href="structsvn__commit__info__t.html" title="All information about a commit.">svn_commit_info_t</a> for the commit.</p>
<p>If <em>propname</em> is an svn-controlled property (i.e. prefixed with <a class="el" href="group__svn__props__support.html#ga17fe0cc2c221f33d00a2c917ad66bfd4" title="All Subversion property names start with this.">SVN_PROP_PREFIX</a>), then the caller is responsible for ensuring that the value is UTF8-encoded and uses LF line-endings.</p>
<p>If <em>skip_checks</em> is TRUE, do no validity checking. But if <em>skip_checks</em> is FALSE, and <em>propname</em> is not a valid property for <em>url</em>, return an error, either <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a600dd588fe36a1627b179bbb8d066752" title="&quot;Illegal target for the requested operation&quot;">SVN_ERR_ILLEGAL_TARGET</a> (if the property is not appropriate for <em>url</em>), or * <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660acf00eb32bb6cf0ab5ec3c9af7d6d885a" title="&quot;Bogus mime-type&quot;">SVN_ERR_BAD_MIME_TYPE</a> (if <em>propname</em> is "svn:mime-type", but <em>propval</em> is not a valid mime-type).</p>
<p>Use <em>scratch_pool</em> for all memory allocation.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="gae4b4f748cb82eaa41f865ba4a2766840"></a><!-- doxytag: member="svn_client.h::svn_client_revprop_get" ref="gae4b4f748cb82eaa41f865ba4a2766840" args="(const char *propname, svn_string_t **propval, const char *URL, const svn_opt_revision_t *revision, svn_revnum_t *set_rev, svn_client_ctx_t *ctx, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_revprop_get </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>propname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__string__t.html">svn_string_t</a> **&#160;</td>
          <td class="paramname"><em>propval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>URL</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *&#160;</td>
          <td class="paramname"><em>set_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*propval</em> to the value of <em>propname</em> on revision <em>revision</em> in the repository represented by <em>URL</em>. </p>
<p>Use the authentication baton in <em>ctx</em> for authentication, and <em>pool</em> for all memory allocation. Return the actual rev queried in <em>*set_rev</em>.</p>
<p>Note that unlike its cousin <a class="el" href="group__svn__client__prop__funcs.html#ga221d812c03943439d6df7bc110d123aa" title="Similar to svn_client_propget2(), except that peg_revision is always the same as revision.">svn_client_propget()</a>, this routine doesn't affect the working copy at all; it's a pure network operation that queries an *unversioned* property attached to a revision. This can query log messages, dates, authors, and the like. </p>

</div>
</div>
<a class="anchor" id="ga654187dc1ed77b326c11a8856a5315bd"></a><!-- doxytag: member="svn_client.h::svn_client_revprop_list" ref="ga654187dc1ed77b326c11a8856a5315bd" args="(apr_hash_t **props, const char *URL, const svn_opt_revision_t *revision, svn_revnum_t *set_rev, svn_client_ctx_t *ctx, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_revprop_list </td>
          <td>(</td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>URL</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *&#160;</td>
          <td class="paramname"><em>set_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*props</em> to a hash of the revision props attached to <em>revision</em> in the repository represented by <em>URL</em>. </p>
<p>Use the authentication baton cached in <em>ctx</em> for authentication, and <em>pool</em> for all memory allocation. Return the actual rev queried in <em>*set_rev</em>.</p>
<p>The allocated hash maps (<code>const char *</code>) property names to (<a class="el" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *) property values.</p>
<p>Note that unlike its cousin <a class="el" href="group__svn__client__prop__funcs.html#ga8c2d55caecf446513125697ff99ebb0b" title="Similar to svn_client_proplist2(), except that peg_revision is always the same as revision...">svn_client_proplist()</a>, this routine doesn't read a working copy at all; it's a pure network operation that reads *unversioned* properties attached to a revision. </p>

</div>
</div>
<a class="anchor" id="ga624f20be1fad7998df4f179845d79518"></a><!-- doxytag: member="svn_client.h::svn_client_revprop_set" ref="ga624f20be1fad7998df4f179845d79518" args="(const char *propname, const svn_string_t *propval, const char *URL, const svn_opt_revision_t *revision, svn_revnum_t *set_rev, svn_boolean_t force, svn_client_ctx_t *ctx, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_revprop_set </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>propname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td>
          <td class="paramname"><em>propval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>URL</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *&#160;</td>
          <td class="paramname"><em>set_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>force</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="group__svn__client__prop__funcs.html#ga5ec6d39fdcc1e040950717ac1598037f" title="Set propname to propval on revision revision in the repository represented by URL.">svn_client_revprop_set2()</a>, but with <em>original_propval</em> always <code>NULL</code>. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000098">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.5 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga5ec6d39fdcc1e040950717ac1598037f"></a><!-- doxytag: member="svn_client.h::svn_client_revprop_set2" ref="ga5ec6d39fdcc1e040950717ac1598037f" args="(const char *propname, const svn_string_t *propval, const svn_string_t *original_propval, const char *URL, const svn_opt_revision_t *revision, svn_revnum_t *set_rev, svn_boolean_t force, svn_client_ctx_t *ctx, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_client_revprop_set2 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>propname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td>
          <td class="paramname"><em>propval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td>
          <td class="paramname"><em>original_propval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>URL</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__opt__revision__t.html">svn_opt_revision_t</a> *&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *&#160;</td>
          <td class="paramname"><em>set_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>force</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__client__ctx__t.html">svn_client_ctx_t</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>propname</em> to <em>propval</em> on revision <em>revision</em> in the repository represented by <em>URL</em>. </p>
<p>Use the authentication baton in <em>ctx</em> for authentication, and <em>pool</em> for all memory allocation. Return the actual rev affected in <em>*set_rev</em>. A <em>propval</em> of <code>NULL</code> will delete the property.</p>
<p>If <em>original_propval</em> is non-NULL, then just before setting the new value, check that the old value matches <em>original_propval</em>; if they do not match, return the error <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a21e54f47ee731423b446a9e890abc83e" title="&quot;Item is out of date&quot;">SVN_ERR_RA_OUT_OF_DATE</a>. This is to help clients support interactive editing of revprops: without this check, the window during which the property may change underneath the user is as wide as the amount of time the user spends editing the property. With this check, the window is reduced to a small, constant amount of time right before we set the new value. (To check that an old value is still non-existent, set <em>original_propval-&gt;data</em> to NULL, and <em>original_propval-&gt;len</em> is ignored.) If the server advertises <a class="el" href="group__Capabilities.html#gaead8141f54c6a645fc4f1303071e3ac3" title="The capability of specifying (and atomically verifying) expected preexisting values when modifying re...">SVN_RA_CAPABILITY_ATOMIC_REVPROPS</a>, the check of <em>original_propval</em> is done atomically.</p>
<p>Note: the representation of "property is not set" in <em>original_propval</em> differs from the representation in other APIs (such as <a class="el" href="group__fs__handling.html#ga42e1c39fc4980da8c2f2f575fa7515ac" title="Change a revision&#39;s property&#39;s value, or add/delete a property.">svn_fs_change_rev_prop2()</a> and <a class="el" href="svn__ra_8h.html#ab8d3b20527a836b2b1bca65ba797f137" title="Set the property name to value on revision rev in the repository of session.">svn_ra_change_rev_prop2()</a>).</p>
<p>If <em>force</em> is TRUE, allow newlines in the author property.</p>
<p>If <em>propname</em> is an svn-controlled property (i.e. prefixed with <a class="el" href="group__svn__props__support.html#ga17fe0cc2c221f33d00a2c917ad66bfd4" title="All Subversion property names start with this.">SVN_PROP_PREFIX</a>), then the caller is responsible for ensuring that the value UTF8-encoded and uses LF line-endings.</p>
<p>Note that unlike its cousin <a class="el" href="group__svn__client__prop__funcs.html#gaff2980dca147ebda1200d46cfdf0caf7" title="An amalgamation of svn_client_propset_local() and svn_client_propset_remote() that takes only a singl...">svn_client_propset3()</a>, this routine doesn't affect the working copy at all; it's a pure network operation that changes an *unversioned* property attached to a revision. This can be used to tweak log messages, dates, authors, and the like. Be careful: it's a lossy operation.</p>
<p><em>ctx-&gt;notify_func2</em> and <em>ctx-&gt;notify_baton2</em> are the notification functions and baton which are called upon successful setting of the property.</p>
<p>Also note that unless the administrator creates a pre-revprop-change hook in the repository, this feature will fail.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.6. </dd></dl>

</div>
</div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Fri Dec 23 2011 09:20:40 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>
