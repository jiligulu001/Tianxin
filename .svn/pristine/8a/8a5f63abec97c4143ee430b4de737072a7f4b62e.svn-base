<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Subversion: svn_xml.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_c37f7789c49aa9e5999234152b1ef6ed.html">subversion</a></li><li class="navelem"><a class="el" href="dir_334478eea8dba5ae935f94af9469978f.html">include</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">svn_xml.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="svn__xml_8h.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * @copyright</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * ====================================================================</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *    Licensed to the Apache Software Foundation (ASF) under one</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *    or more contributor license agreements.  See the NOTICE file</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *    distributed with this work for additional information</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *    regarding copyright ownership.  The ASF licenses this file</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *    to you under the Apache License, Version 2.0 (the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *    &quot;License&quot;); you may not use this file except in compliance</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *    with the License.  You may obtain a copy of the License at</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *    Unless required by applicable law or agreed to in writing,</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *    software distributed under the License is distributed on an</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *    &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *    KIND, either express or implied.  See the License for the</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *    specific language governing permissions and limitations</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *    under the License.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * ====================================================================</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * @endcopyright</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> * @file svn_xml.h</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> * @brief XML code shared by various Subversion libraries.</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#ifndef SVN_XML_H</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SVN_XML_H</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;apr.h&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;apr_pools.h&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;apr_hash.h&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="svn__types_8h.html">svn_types.h</a>&quot;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="svn__string_8h.html">svn_string.h</a>&quot;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor"></span><span class="comment"></span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">/** The namespace all Subversion XML uses. */</span></div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="svn__xml_8h.html#a58f060f8c09438e2a5485355ec523fe6">   42</a></span>&#160;<span class="preprocessor">#define SVN_XML_NAMESPACE &quot;svn:&quot;</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor"></span><span class="comment"></span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">/** Used as style argument to svn_xml_make_open_tag() and friends. */</span></div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="svn__xml_8h.html#a96fab6557db17be482982e30d7becbc6">   45</a></span>&#160;<span class="keyword">enum</span> <a class="code" href="svn__xml_8h.html#a96fab6557db17be482982e30d7becbc6">svn_xml_open_tag_style</a> {<span class="comment"></span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">  /** &lt;tag ...&gt; */</span></div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="svn__xml_8h.html#a96fab6557db17be482982e30d7becbc6a325a91b8ed7a386421fbc4efe6af7751">   47</a></span>&#160;  <a class="code" href="svn__xml_8h.html#a96fab6557db17be482982e30d7becbc6a325a91b8ed7a386421fbc4efe6af7751">svn_xml_normal</a> = 1,</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">  /** &lt;tag ...&gt;, no cosmetic newline */</span></div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="svn__xml_8h.html#a96fab6557db17be482982e30d7becbc6a1d0dae4e4332a29d0cb9e467239f50df">   50</a></span>&#160;  <a class="code" href="svn__xml_8h.html#a96fab6557db17be482982e30d7becbc6a1d0dae4e4332a29d0cb9e467239f50df">svn_xml_protect_pcdata</a>,</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">  /** &lt;tag .../&gt;  */</span></div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="svn__xml_8h.html#a96fab6557db17be482982e30d7becbc6a6fdb5e284fb439d68e280d9235127eb5">   53</a></span>&#160;  <a class="code" href="svn__xml_8h.html#a96fab6557db17be482982e30d7becbc6a6fdb5e284fb439d68e280d9235127eb5">svn_xml_self_closing</a></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;};</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">/** Determine if a string of character @a data of length @a len is a</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> * safe bet for use with the svn_xml_escape_* functions found in this</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> * header.</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"> * Return @c TRUE if it is, @c FALSE otherwise.</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"> * Essentially, this function exists to determine whether or not</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"> * simply running a string of bytes through the Subversion XML escape</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"> * routines will produce legitimate XML.  It should only be necessary</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"> * for data which might contain bytes that cannot be safely encoded</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"> * into XML (certain control characters, for example).</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<a class="code" href="svn__xml_8h.html#a4e1f838f920694c5d8fb572bb8f158f3">svn_xml_is_xml_safe</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *data,</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                    apr_size_t len);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">/** Create or append in @a *outstr an xml-escaped version of @a string,</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> * suitable for output as character data.</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> * If @a *outstr is @c NULL, set @a *outstr to a new stringbuf allocated</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> * in @a pool, else append to the existing stringbuf there.</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<a class="code" href="svn__xml_8h.html#a791aebe273d97127c89d03e20d687fee">svn_xml_escape_cdata_stringbuf</a>(<a class="code" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> **outstr,</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                               <span class="keyword">const</span> <a class="code" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *<span class="keywordtype">string</span>,</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                               apr_pool_t *pool);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">/** Same as svn_xml_escape_cdata_stringbuf(), but @a string is an</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> * @c svn_string_t.</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<a class="code" href="svn__xml_8h.html#a203e4a15ff06354096450be45a57ad63">svn_xml_escape_cdata_string</a>(<a class="code" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> **outstr,</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                            <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html">svn_string_t</a> *<span class="keywordtype">string</span>,</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                            apr_pool_t *pool);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">/** Same as svn_xml_escape_cdata_stringbuf(), but @a string is a</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"> * NULL-terminated C string.</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<a class="code" href="svn__xml_8h.html#a68b27ad8ed4dc71a4e94f00a3402f148">svn_xml_escape_cdata_cstring</a>(<a class="code" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> **outstr,</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                             <span class="keyword">const</span> <span class="keywordtype">char</span> *<span class="keywordtype">string</span>,</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                             apr_pool_t *pool);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">/** Create or append in @a *outstr an xml-escaped version of @a string,</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"> * suitable for output as an attribute value.</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"> * If @a *outstr is @c NULL, set @a *outstr to a new stringbuf allocated</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"> * in @a pool, else append to the existing stringbuf there.</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<a class="code" href="svn__xml_8h.html#adc69586dc0963c1e90141fda77041137">svn_xml_escape_attr_stringbuf</a>(<a class="code" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> **outstr,</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                              <span class="keyword">const</span> <a class="code" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *<span class="keywordtype">string</span>,</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                              apr_pool_t *pool);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">/** Same as svn_xml_escape_attr_stringbuf(), but @a string is an</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"> * @c svn_string_t.</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<a class="code" href="svn__xml_8h.html#a15cf427831b36add12969b80df9576f4">svn_xml_escape_attr_string</a>(<a class="code" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> **outstr,</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                           <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html">svn_string_t</a> *<span class="keywordtype">string</span>,</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                           apr_pool_t *pool);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">/** Same as svn_xml_escape_attr_stringbuf(), but @a string is a</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> * NULL-terminated C string.</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<a class="code" href="svn__xml_8h.html#afddce35e71a70d50b652c9a2b61a7506">svn_xml_escape_attr_cstring</a>(<a class="code" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> **outstr,</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                            <span class="keyword">const</span> <span class="keywordtype">char</span> *<span class="keywordtype">string</span>,</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                            apr_pool_t *pool);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"> * Return UTF-8 string @a string if it contains no characters that are</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> * unrepresentable in XML.  Else, return a copy of @a string,</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> * allocated in @a pool, with each unrepresentable character replaced</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"> * by &quot;?\uuu&quot;, where &quot;uuu&quot; is the three-digit unsigned decimal value</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"> * of that character.</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"> * Neither the input nor the output need be valid XML; however, the</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"> * output can always be safely XML-escaped.</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"> * @note The current implementation treats all Unicode characters as</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"> * representable, except for most ASCII control characters (the</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"> * exceptions being CR, LF, and TAB, which are valid in XML).  There</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"> * may be other UTF-8 characters that are invalid in XML; see</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"> * http://subversion.tigris.org/servlets/ReadMsg?list=dev&amp;msgNo=90591</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"> * and its thread for details.</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"> * @since New in 1.2.</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span> *</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<a class="code" href="svn__xml_8h.html#ac1070a1f742deb7666f1fa02a7794ec7">svn_xml_fuzzy_escape</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *<span class="keywordtype">string</span>,</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                     apr_pool_t *pool);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">/*---------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">/* Generalized Subversion XML Parsing */</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">/** A generalized Subversion XML parser object */</span></div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="svn__xml_8h.html#a05c7a03105de7809b8760f1425a888da">  158</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="svn__xml_8h.html#a05c7a03105de7809b8760f1425a888da">svn_xml_parser_t</a> <a class="code" href="svn__xml_8h.html#a05c7a03105de7809b8760f1425a888da">svn_xml_parser_t</a>;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keyword">typedef</span> void (*svn_xml_start_elem)(<span class="keywordtype">void</span> *baton,</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                   <span class="keyword">const</span> <span class="keywordtype">char</span> *name,</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                                   <span class="keyword">const</span> <span class="keywordtype">char</span> **atts);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">typedef</span> void (*svn_xml_end_elem)(<span class="keywordtype">void</span> *baton, <span class="keyword">const</span> <span class="keywordtype">char</span> *name);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">/* data is not NULL-terminated. */</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">typedef</span> void (*svn_xml_char_data)(<span class="keywordtype">void</span> *baton,</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                                  <span class="keyword">const</span> <span class="keywordtype">char</span> *data,</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                                  apr_size_t len);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">/** Create a general Subversion XML parser */</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<a class="code" href="svn__xml_8h.html#a05c7a03105de7809b8760f1425a888da">svn_xml_parser_t</a> *</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<a class="code" href="svn__xml_8h.html#a1f8f1b81e03621e15d5d4a3412ded766">svn_xml_make_parser</a>(<span class="keywordtype">void</span> *baton,</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    svn_xml_start_elem start_handler,</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    svn_xml_end_elem end_handler,</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    svn_xml_char_data data_handler,</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    apr_pool_t *pool);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">/** Free a general Subversion XML parser */</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<a class="code" href="svn__xml_8h.html#a8aae298d9c4b403502fd03f8c3e491de">svn_xml_free_parser</a>(<a class="code" href="svn__xml_8h.html#a05c7a03105de7809b8760f1425a888da">svn_xml_parser_t</a> *svn_parser);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">/** Push @a len bytes of xml data in @a buf at @a svn_parser.</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"> * If this is the final push, @a is_final must be set.</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"> * An error will be returned if there was a syntax problem in the XML,</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment"> * or if any of the callbacks set an error using</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment"> * svn_xml_signal_bailout().</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"> * If an error is returned, the @c svn_xml_parser_t will have been freed</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment"> * automatically, so the caller should not call svn_xml_free_parser().</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<a class="code" href="structsvn__error__t.html">svn_error_t</a> *</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<a class="code" href="svn__xml_8h.html#a57a5745b6c3a8a78f6cf96cec7322593">svn_xml_parse</a>(<a class="code" href="svn__xml_8h.html#a05c7a03105de7809b8760f1425a888da">svn_xml_parser_t</a> *svn_parser,</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;              <span class="keyword">const</span> <span class="keywordtype">char</span> *buf,</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;              apr_size_t len,</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;              <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> is_final);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">/** The way to officially bail out of xml parsing.</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment"> * Store @a error in @a svn_parser and set all expat callbacks to @c NULL.</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<a class="code" href="svn__xml_8h.html#ac42af5bd3d46c569326baf9fe3dee787">svn_xml_signal_bailout</a>(<a class="code" href="structsvn__error__t.html">svn_error_t</a> *error,</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                       <a class="code" href="svn__xml_8h.html#a05c7a03105de7809b8760f1425a888da">svn_xml_parser_t</a> *svn_parser);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">/*** Helpers for dealing with the data Expat gives us. ***/</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">/** Return the value associated with @a name in expat attribute array @a atts,</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"> * else return @c NULL.</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"> * (There could never be a @c NULL attribute value in the XML,</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"> * although the empty string is possible.)</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"> * @a atts is an array of c-strings: even-numbered indexes are names,</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"> * odd-numbers hold values.  If all is right, it should end on an</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"> * even-numbered index pointing to @c NULL.</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span> *</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<a class="code" href="svn__xml_8h.html#ae704ac9e4a78c16d64da26fcf11d609e">svn_xml_get_attr_value</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *name,</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                       <span class="keyword">const</span> <span class="keywordtype">char</span> *<span class="keyword">const</span> *atts);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">/* Converting between Expat attribute lists and APR hash tables. */</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">/** Create an attribute hash from @c va_list @a ap.</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment"> * The contents of @a ap are alternating &lt;tt&gt;char *&lt;/tt&gt; keys and</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment"> * &lt;tt&gt;char *&lt;/tt&gt; vals, terminated by a final @c NULL falling on an</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment"> * even index (zero-based).</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;apr_hash_t *</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<a class="code" href="svn__xml_8h.html#a1914b5fb6cf24bb299ea171eddb681f7">svn_xml_ap_to_hash</a>(va_list ap,</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                   apr_pool_t *pool);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">/** Create a hash that corresponds to Expat xml attribute list @a atts.</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"> * The hash&#39;s keys and values are &lt;tt&gt;char *&lt;/tt&gt;&#39;s.</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment"> * @a atts may be NULL, in which case you just get an empty hash back</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment"> * (this makes life more convenient for some callers).</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;apr_hash_t *</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<a class="code" href="svn__xml_8h.html#a46344c54e4a536df1cd0d6531e4a4934">svn_xml_make_att_hash</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> **atts,</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                      apr_pool_t *pool);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">/** Like svn_xml_make_att_hash(), but takes a hash and preserves any</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment"> * key/value pairs already in it.</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<a class="code" href="svn__xml_8h.html#a078fe0e91283b54183cfafb69d733adf">svn_xml_hash_atts_preserving</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> **atts,</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                             apr_hash_t *ht,</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                             apr_pool_t *pool);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">/** Like svn_xml_make_att_hash(), but takes a hash and overwrites</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"> * key/value pairs already in it that also appear in @a atts.</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<a class="code" href="svn__xml_8h.html#a388721068598aacbdf67e2f9304df67f">svn_xml_hash_atts_overlaying</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> **atts,</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                             apr_hash_t *ht,</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                             apr_pool_t *pool);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">/* Printing XML */</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">/** Create an XML header and return it in @a *str.</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"> * Fully-formed XML documents should start out with a header,</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment"> * something like &lt;pre&gt;</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment"> *         &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment"> * &lt;/pre&gt;</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment"> * This function returns such a header.  @a *str must either be @c NULL, in</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment"> * which case a new string is created, or it must point to an existing</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment"> * string to be appended to. @a encoding must either be NULL, in which case</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"> * encoding information is omitted from the header, or must be the name of</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"> * the encoding of the XML document, such as &quot;UTF-8&quot;.</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment"> * @since New in 1.7.</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<a class="code" href="svn__xml_8h.html#ac7d7ae08baa3dd5a18d916d3ff2c19bb">svn_xml_make_header2</a>(<a class="code" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> **str,</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                     <span class="keyword">const</span> <span class="keywordtype">char</span> *encoding,</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                     apr_pool_t *pool);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">/** Like svn_xml_make_header2(), but does not emit encoding information.</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1">SVN_DEPRECATED</a></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<a class="code" href="svn__xml_8h.html#a8952697d8cace5f4db1a05958007b04b">svn_xml_make_header</a>(<a class="code" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> **str,</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                    apr_pool_t *pool);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">/** Store a new xml tag @a tagname in @a *str.</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment"> * If @a *str is @c NULL, set @a *str to a new stringbuf allocated</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment"> * in @a pool, else append to the existing stringbuf there.</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment"> * Take the tag&#39;s attributes from varargs, a NULL-terminated list of</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"> * alternating &lt;tt&gt;char *&lt;/tt&gt; key and &lt;tt&gt;char *&lt;/tt&gt; val.  Do xml-escaping</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"> * on each val.</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment"> * @a style is one of the enumerated styles in @c svn_xml_open_tag_style.</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<a class="code" href="svn__xml_8h.html#a93ba8523ad3d6063db280ff9d2db544b">svn_xml_make_open_tag</a>(<a class="code" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> **str,</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                      apr_pool_t *pool,</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                      <span class="keyword">enum</span> <a class="code" href="svn__xml_8h.html#a96fab6557db17be482982e30d7becbc6">svn_xml_open_tag_style</a> style,</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                      <span class="keyword">const</span> <span class="keywordtype">char</span> *tagname,</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                      ...);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">/** Like svn_xml_make_open_tag(), but takes a @c va_list instead of being</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment"> * variadic.</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<a class="code" href="svn__xml_8h.html#ab08389a7d146e02b1f2e2ce6ef49f243">svn_xml_make_open_tag_v</a>(<a class="code" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> **str,</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                        apr_pool_t *pool,</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                        <span class="keyword">enum</span> <a class="code" href="svn__xml_8h.html#a96fab6557db17be482982e30d7becbc6">svn_xml_open_tag_style</a> style,</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">char</span> *tagname,</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                        va_list ap);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">/** Like svn_xml_make_open_tag(), but takes a hash table of attributes</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment"> * (&lt;tt&gt;char *&lt;/tt&gt; keys mapping to &lt;tt&gt;char *&lt;/tt&gt; values).</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment"> * You might ask, why not just provide svn_xml_make_tag_atts()?</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment"> * The reason is that a hash table is the most natural interface to an</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment"> * attribute list; the fact that Expat uses &lt;tt&gt;char **&lt;/tt&gt; atts instead is</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment"> * certainly a defensible implementation decision, but since we&#39;d have</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment"> * to have special code to support such lists throughout Subversion</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment"> * anyway, we might as well write that code for the natural interface</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment"> * (hashes) and then convert in the few cases where conversion is</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment"> * needed.  Someday it might even be nice to change expat-lite to work</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment"> * with apr hashes.</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment"> * See conversion functions svn_xml_make_att_hash() and</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment"> * svn_xml_make_att_hash_overlaying().  Callers should use those to</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment"> * convert Expat attr lists into hashes when necessary.</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<a class="code" href="svn__xml_8h.html#a2505af51b37f20fc09716f7a09718794">svn_xml_make_open_tag_hash</a>(<a class="code" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> **str,</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                           apr_pool_t *pool,</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                           <span class="keyword">enum</span> <a class="code" href="svn__xml_8h.html#a96fab6557db17be482982e30d7becbc6">svn_xml_open_tag_style</a> style,</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                           <span class="keyword">const</span> <span class="keywordtype">char</span> *tagname,</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                           apr_hash_t *attributes);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment">/** Store an xml close tag @a tagname in @a str.</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment"> * If @a *str is @c NULL, set @a *str to a new stringbuf allocated</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment"> * in @a pool, else append to the existing stringbuf there.</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<a class="code" href="svn__xml_8h.html#a828f71e7c3e1c2550282651e2de529c3">svn_xml_make_close_tag</a>(<a class="code" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> **str,</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                       apr_pool_t *pool,</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                       <span class="keyword">const</span> <span class="keywordtype">char</span> *tagname);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SVN_XML_H */</span><span class="preprocessor"></span></div>
<div class="ttc" id="svn__string_8h_html"><div class="ttname"><a href="svn__string_8h.html">svn_string.h</a></div><div class="ttdoc">Counted-length strings for Subversion, plus some C string goodies. </div></div>
<div class="ttc" id="svn__xml_8h_html_a46344c54e4a536df1cd0d6531e4a4934"><div class="ttname"><a href="svn__xml_8h.html#a46344c54e4a536df1cd0d6531e4a4934">svn_xml_make_att_hash</a></div><div class="ttdeci">apr_hash_t * svn_xml_make_att_hash(const char **atts, apr_pool_t *pool)</div><div class="ttdoc">Create a hash that corresponds to Expat xml attribute list atts. </div></div>
<div class="ttc" id="svn__xml_8h_html_a4e1f838f920694c5d8fb572bb8f158f3"><div class="ttname"><a href="svn__xml_8h.html#a4e1f838f920694c5d8fb572bb8f158f3">svn_xml_is_xml_safe</a></div><div class="ttdeci">svn_boolean_t svn_xml_is_xml_safe(const char *data, apr_size_t len)</div><div class="ttdoc">Determine if a string of character data of length len is a safe bet for use with the svn_xml_escape_*...</div></div>
<div class="ttc" id="svn__xml_8h_html_a791aebe273d97127c89d03e20d687fee"><div class="ttname"><a href="svn__xml_8h.html#a791aebe273d97127c89d03e20d687fee">svn_xml_escape_cdata_stringbuf</a></div><div class="ttdeci">void svn_xml_escape_cdata_stringbuf(svn_stringbuf_t **outstr, const svn_stringbuf_t *string, apr_pool_t *pool)</div><div class="ttdoc">Create or append in *outstr an xml-escaped version of string, suitable for output as character data...</div></div>
<div class="ttc" id="svn__xml_8h_html_a203e4a15ff06354096450be45a57ad63"><div class="ttname"><a href="svn__xml_8h.html#a203e4a15ff06354096450be45a57ad63">svn_xml_escape_cdata_string</a></div><div class="ttdeci">void svn_xml_escape_cdata_string(svn_stringbuf_t **outstr, const svn_string_t *string, apr_pool_t *pool)</div><div class="ttdoc">Same as svn_xml_escape_cdata_stringbuf(), but string is an svn_string_t. </div></div>
<div class="ttc" id="svn__xml_8h_html_a57a5745b6c3a8a78f6cf96cec7322593"><div class="ttname"><a href="svn__xml_8h.html#a57a5745b6c3a8a78f6cf96cec7322593">svn_xml_parse</a></div><div class="ttdeci">svn_error_t * svn_xml_parse(svn_xml_parser_t *svn_parser, const char *buf, apr_size_t len, svn_boolean_t is_final)</div><div class="ttdoc">Push len bytes of xml data in buf at svn_parser. </div></div>
<div class="ttc" id="svn__xml_8h_html_adc69586dc0963c1e90141fda77041137"><div class="ttname"><a href="svn__xml_8h.html#adc69586dc0963c1e90141fda77041137">svn_xml_escape_attr_stringbuf</a></div><div class="ttdeci">void svn_xml_escape_attr_stringbuf(svn_stringbuf_t **outstr, const svn_stringbuf_t *string, apr_pool_t *pool)</div><div class="ttdoc">Create or append in *outstr an xml-escaped version of string, suitable for output as an attribute val...</div></div>
<div class="ttc" id="svn__xml_8h_html_a68b27ad8ed4dc71a4e94f00a3402f148"><div class="ttname"><a href="svn__xml_8h.html#a68b27ad8ed4dc71a4e94f00a3402f148">svn_xml_escape_cdata_cstring</a></div><div class="ttdeci">void svn_xml_escape_cdata_cstring(svn_stringbuf_t **outstr, const char *string, apr_pool_t *pool)</div><div class="ttdoc">Same as svn_xml_escape_cdata_stringbuf(), but string is a NULL-terminated C string. </div></div>
<div class="ttc" id="structsvn__string__t_html"><div class="ttname"><a href="structsvn__string__t.html">svn_string_t</a></div><div class="ttdoc">A simple counted string. </div><div class="ttdef"><b>Definition:</b> <a href="svn__string_8h_source.html#l00096">svn_string.h:96</a></div></div>
<div class="ttc" id="svn__xml_8h_html_a8952697d8cace5f4db1a05958007b04b"><div class="ttname"><a href="svn__xml_8h.html#a8952697d8cace5f4db1a05958007b04b">svn_xml_make_header</a></div><div class="ttdeci">void svn_xml_make_header(svn_stringbuf_t **str, apr_pool_t *pool)</div><div class="ttdoc">Like svn_xml_make_header2(), but does not emit encoding information. </div></div>
<div class="ttc" id="svn__xml_8h_html_a15cf427831b36add12969b80df9576f4"><div class="ttname"><a href="svn__xml_8h.html#a15cf427831b36add12969b80df9576f4">svn_xml_escape_attr_string</a></div><div class="ttdeci">void svn_xml_escape_attr_string(svn_stringbuf_t **outstr, const svn_string_t *string, apr_pool_t *pool)</div><div class="ttdoc">Same as svn_xml_escape_attr_stringbuf(), but string is an svn_string_t. </div></div>
<div class="ttc" id="svn__xml_8h_html_ab08389a7d146e02b1f2e2ce6ef49f243"><div class="ttname"><a href="svn__xml_8h.html#ab08389a7d146e02b1f2e2ce6ef49f243">svn_xml_make_open_tag_v</a></div><div class="ttdeci">void svn_xml_make_open_tag_v(svn_stringbuf_t **str, apr_pool_t *pool, enum svn_xml_open_tag_style style, const char *tagname, va_list ap)</div><div class="ttdoc">Like svn_xml_make_open_tag(), but takes a va_list instead of being variadic. </div></div>
<div class="ttc" id="svn__xml_8h_html_ac42af5bd3d46c569326baf9fe3dee787"><div class="ttname"><a href="svn__xml_8h.html#ac42af5bd3d46c569326baf9fe3dee787">svn_xml_signal_bailout</a></div><div class="ttdeci">void svn_xml_signal_bailout(svn_error_t *error, svn_xml_parser_t *svn_parser)</div><div class="ttdoc">The way to officially bail out of xml parsing. </div></div>
<div class="ttc" id="structsvn__error__t_html"><div class="ttname"><a href="structsvn__error__t.html">svn_error_t</a></div><div class="ttdoc">Subversion error object. </div><div class="ttdef"><b>Definition:</b> <a href="svn__types_8h_source.html#l00113">svn_types.h:113</a></div></div>
<div class="ttc" id="svn__xml_8h_html_a96fab6557db17be482982e30d7becbc6a6fdb5e284fb439d68e280d9235127eb5"><div class="ttname"><a href="svn__xml_8h.html#a96fab6557db17be482982e30d7becbc6a6fdb5e284fb439d68e280d9235127eb5">svn_xml_self_closing</a></div><div class="ttdoc">&amp;lt;tag .../&amp;gt; </div><div class="ttdef"><b>Definition:</b> <a href="svn__xml_8h_source.html#l00053">svn_xml.h:53</a></div></div>
<div class="ttc" id="svn__xml_8h_html_ac1070a1f742deb7666f1fa02a7794ec7"><div class="ttname"><a href="svn__xml_8h.html#ac1070a1f742deb7666f1fa02a7794ec7">svn_xml_fuzzy_escape</a></div><div class="ttdeci">const char * svn_xml_fuzzy_escape(const char *string, apr_pool_t *pool)</div><div class="ttdoc">Return UTF-8 string string if it contains no characters that are unrepresentable in XML...</div></div>
<div class="ttc" id="svn__xml_8h_html_a93ba8523ad3d6063db280ff9d2db544b"><div class="ttname"><a href="svn__xml_8h.html#a93ba8523ad3d6063db280ff9d2db544b">svn_xml_make_open_tag</a></div><div class="ttdeci">void svn_xml_make_open_tag(svn_stringbuf_t **str, apr_pool_t *pool, enum svn_xml_open_tag_style style, const char *tagname,...)</div><div class="ttdoc">Store a new xml tag tagname in *str. </div></div>
<div class="ttc" id="svn__xml_8h_html_ac7d7ae08baa3dd5a18d916d3ff2c19bb"><div class="ttname"><a href="svn__xml_8h.html#ac7d7ae08baa3dd5a18d916d3ff2c19bb">svn_xml_make_header2</a></div><div class="ttdeci">void svn_xml_make_header2(svn_stringbuf_t **str, const char *encoding, apr_pool_t *pool)</div><div class="ttdoc">Create an XML header and return it in *str. </div></div>
<div class="ttc" id="svn__xml_8h_html_a1914b5fb6cf24bb299ea171eddb681f7"><div class="ttname"><a href="svn__xml_8h.html#a1914b5fb6cf24bb299ea171eddb681f7">svn_xml_ap_to_hash</a></div><div class="ttdeci">apr_hash_t * svn_xml_ap_to_hash(va_list ap, apr_pool_t *pool)</div><div class="ttdoc">Create an attribute hash from va_list ap. </div></div>
<div class="ttc" id="svn__xml_8h_html_a1f8f1b81e03621e15d5d4a3412ded766"><div class="ttname"><a href="svn__xml_8h.html#a1f8f1b81e03621e15d5d4a3412ded766">svn_xml_make_parser</a></div><div class="ttdeci">svn_xml_parser_t * svn_xml_make_parser(void *baton, svn_xml_start_elem start_handler, svn_xml_end_elem end_handler, svn_xml_char_data data_handler, apr_pool_t *pool)</div><div class="ttdoc">Create a general Subversion XML parser. </div></div>
<div class="ttc" id="svn__types_8h_html"><div class="ttname"><a href="svn__types_8h.html">svn_types.h</a></div><div class="ttdoc">Subversion&amp;#39;s data types. </div></div>
<div class="ttc" id="svn__xml_8h_html_a2505af51b37f20fc09716f7a09718794"><div class="ttname"><a href="svn__xml_8h.html#a2505af51b37f20fc09716f7a09718794">svn_xml_make_open_tag_hash</a></div><div class="ttdeci">void svn_xml_make_open_tag_hash(svn_stringbuf_t **str, apr_pool_t *pool, enum svn_xml_open_tag_style style, const char *tagname, apr_hash_t *attributes)</div><div class="ttdoc">Like svn_xml_make_open_tag(), but takes a hash table of attributes (char * keys mapping to char * val...</div></div>
<div class="ttc" id="svn__xml_8h_html_a96fab6557db17be482982e30d7becbc6"><div class="ttname"><a href="svn__xml_8h.html#a96fab6557db17be482982e30d7becbc6">svn_xml_open_tag_style</a></div><div class="ttdeci">svn_xml_open_tag_style</div><div class="ttdoc">Used as style argument to svn_xml_make_open_tag() and friends. </div><div class="ttdef"><b>Definition:</b> <a href="svn__xml_8h_source.html#l00045">svn_xml.h:45</a></div></div>
<div class="ttc" id="svn__xml_8h_html_a05c7a03105de7809b8760f1425a888da"><div class="ttname"><a href="svn__xml_8h.html#a05c7a03105de7809b8760f1425a888da">svn_xml_parser_t</a></div><div class="ttdeci">struct svn_xml_parser_t svn_xml_parser_t</div><div class="ttdoc">A generalized Subversion XML parser object. </div><div class="ttdef"><b>Definition:</b> <a href="svn__xml_8h_source.html#l00158">svn_xml.h:158</a></div></div>
<div class="ttc" id="svn__xml_8h_html_a96fab6557db17be482982e30d7becbc6a1d0dae4e4332a29d0cb9e467239f50df"><div class="ttname"><a href="svn__xml_8h.html#a96fab6557db17be482982e30d7becbc6a1d0dae4e4332a29d0cb9e467239f50df">svn_xml_protect_pcdata</a></div><div class="ttdoc">&amp;lt;tag ...&amp;gt;, no cosmetic newline </div><div class="ttdef"><b>Definition:</b> <a href="svn__xml_8h_source.html#l00050">svn_xml.h:50</a></div></div>
<div class="ttc" id="svn__types_8h_html_aeced35b9b096eb3eb6f3d1af3e685aa1"><div class="ttname"><a href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1">SVN_DEPRECATED</a></div><div class="ttdeci">#define SVN_DEPRECATED</div><div class="ttdoc">Macro used to mark deprecated functions. </div><div class="ttdef"><b>Definition:</b> <a href="svn__types_8h_source.html#l00059">svn_types.h:59</a></div></div>
<div class="ttc" id="svn__xml_8h_html_ae704ac9e4a78c16d64da26fcf11d609e"><div class="ttname"><a href="svn__xml_8h.html#ae704ac9e4a78c16d64da26fcf11d609e">svn_xml_get_attr_value</a></div><div class="ttdeci">const char * svn_xml_get_attr_value(const char *name, const char *const *atts)</div><div class="ttdoc">Return the value associated with name in expat attribute array atts, else return NULL. </div></div>
<div class="ttc" id="svn__xml_8h_html_afddce35e71a70d50b652c9a2b61a7506"><div class="ttname"><a href="svn__xml_8h.html#afddce35e71a70d50b652c9a2b61a7506">svn_xml_escape_attr_cstring</a></div><div class="ttdeci">void svn_xml_escape_attr_cstring(svn_stringbuf_t **outstr, const char *string, apr_pool_t *pool)</div><div class="ttdoc">Same as svn_xml_escape_attr_stringbuf(), but string is a NULL-terminated C string. </div></div>
<div class="ttc" id="svn__xml_8h_html_a8aae298d9c4b403502fd03f8c3e491de"><div class="ttname"><a href="svn__xml_8h.html#a8aae298d9c4b403502fd03f8c3e491de">svn_xml_free_parser</a></div><div class="ttdeci">void svn_xml_free_parser(svn_xml_parser_t *svn_parser)</div><div class="ttdoc">Free a general Subversion XML parser. </div></div>
<div class="ttc" id="svn__xml_8h_html_a078fe0e91283b54183cfafb69d733adf"><div class="ttname"><a href="svn__xml_8h.html#a078fe0e91283b54183cfafb69d733adf">svn_xml_hash_atts_preserving</a></div><div class="ttdeci">void svn_xml_hash_atts_preserving(const char **atts, apr_hash_t *ht, apr_pool_t *pool)</div><div class="ttdoc">Like svn_xml_make_att_hash(), but takes a hash and preserves any key/value pairs already in it...</div></div>
<div class="ttc" id="svn__types_8h_html_a22b35baddc4213c688d1bb12feea1024"><div class="ttname"><a href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a></div><div class="ttdeci">int svn_boolean_t</div><div class="ttdoc">YABT: Yet Another Boolean Type. </div><div class="ttdef"><b>Definition:</b> <a href="svn__types_8h_source.html#l00094">svn_types.h:94</a></div></div>
<div class="ttc" id="svn__xml_8h_html_a96fab6557db17be482982e30d7becbc6a325a91b8ed7a386421fbc4efe6af7751"><div class="ttname"><a href="svn__xml_8h.html#a96fab6557db17be482982e30d7becbc6a325a91b8ed7a386421fbc4efe6af7751">svn_xml_normal</a></div><div class="ttdoc">&amp;lt;tag ...&amp;gt; </div><div class="ttdef"><b>Definition:</b> <a href="svn__xml_8h_source.html#l00047">svn_xml.h:47</a></div></div>
<div class="ttc" id="svn__xml_8h_html_a388721068598aacbdf67e2f9304df67f"><div class="ttname"><a href="svn__xml_8h.html#a388721068598aacbdf67e2f9304df67f">svn_xml_hash_atts_overlaying</a></div><div class="ttdeci">void svn_xml_hash_atts_overlaying(const char **atts, apr_hash_t *ht, apr_pool_t *pool)</div><div class="ttdoc">Like svn_xml_make_att_hash(), but takes a hash and overwrites key/value pairs already in it that also...</div></div>
<div class="ttc" id="svn__xml_8h_html_a828f71e7c3e1c2550282651e2de529c3"><div class="ttname"><a href="svn__xml_8h.html#a828f71e7c3e1c2550282651e2de529c3">svn_xml_make_close_tag</a></div><div class="ttdeci">void svn_xml_make_close_tag(svn_stringbuf_t **str, apr_pool_t *pool, const char *tagname)</div><div class="ttdoc">Store an xml close tag tagname in str. </div></div>
<div class="ttc" id="structsvn__stringbuf__t_html"><div class="ttname"><a href="structsvn__stringbuf__t.html">svn_stringbuf_t</a></div><div class="ttdoc">A buffered string, capable of appending without an allocation and copy for each append. </div><div class="ttdef"><b>Definition:</b> <a href="svn__string_8h_source.html#l00104">svn_string.h:104</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 19 2015 09:37:22 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
