<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Subversion: Error creation and destruction</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Error creation and destruction</div>  </div>
</div><!--header-->
<div class="contents">

<p>SVN error creation and destruction.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga2d4bba65866869939178e21df8e6fffb"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#ga2d4bba65866869939178e21df8e6fffb">SVN_ERR</a>(expr)</td></tr>
<tr class="memdesc:ga2d4bba65866869939178e21df8e6fffb"><td class="mdescLeft">&#160;</td><td class="mdescRight">A statement macro for checking error values.  <a href="#ga2d4bba65866869939178e21df8e6fffb">More...</a><br/></td></tr>
<tr class="separator:ga2d4bba65866869939178e21df8e6fffb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaebf3a4b9b88c5ac6f6eec7d9792a2288"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#gaebf3a4b9b88c5ac6f6eec7d9792a2288">svn_error_trace</a>(expr)&#160;&#160;&#160;(expr)</td></tr>
<tr class="memdesc:gaebf3a4b9b88c5ac6f6eec7d9792a2288"><td class="mdescLeft">&#160;</td><td class="mdescRight">A macro for wrapping an error in a source-location trace message.  <a href="#gaebf3a4b9b88c5ac6f6eec7d9792a2288">More...</a><br/></td></tr>
<tr class="separator:gaebf3a4b9b88c5ac6f6eec7d9792a2288"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab25a91cd83a69c02997d636778652924"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#gab25a91cd83a69c02997d636778652924">SVN_ERR_W</a>(expr, wrap_msg)</td></tr>
<tr class="memdesc:gab25a91cd83a69c02997d636778652924"><td class="mdescLeft">&#160;</td><td class="mdescRight">A statement macro, very similar to <code>SVN_ERR</code>.  <a href="#gab25a91cd83a69c02997d636778652924">More...</a><br/></td></tr>
<tr class="separator:gab25a91cd83a69c02997d636778652924"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab5f98501379447f3b996418cec2a9e83"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#gab5f98501379447f3b996418cec2a9e83">SVN_INT_ERR</a>(expr)</td></tr>
<tr class="memdesc:gab5f98501379447f3b996418cec2a9e83"><td class="mdescLeft">&#160;</td><td class="mdescRight">A statement macro, similar to <code>SVN_ERR</code>, but returns an integer.  <a href="#gab5f98501379447f3b996418cec2a9e83">More...</a><br/></td></tr>
<tr class="separator:gab5f98501379447f3b996418cec2a9e83"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga63cac13b078a6d0af98e74d61f7e355b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#ga63cac13b078a6d0af98e74d61f7e355b">svn_error_create</a> (apr_status_t apr_err, <a class="el" href="structsvn__error__t.html">svn_error_t</a> *child, const char *message)</td></tr>
<tr class="memdesc:ga63cac13b078a6d0af98e74d61f7e355b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a nested exception structure.  <a href="#ga63cac13b078a6d0af98e74d61f7e355b">More...</a><br/></td></tr>
<tr class="separator:ga63cac13b078a6d0af98e74d61f7e355b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3b21968b79922680a90fc13314d70789"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga3b21968b79922680a90fc13314d70789"></a>
<a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#ga3b21968b79922680a90fc13314d70789">svn_error_createf</a> (apr_status_t apr_err, <a class="el" href="structsvn__error__t.html">svn_error_t</a> *child, const char *fmt,...)</td></tr>
<tr class="memdesc:ga3b21968b79922680a90fc13314d70789"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an error structure with the given <em>apr_err</em> and <em>child</em>, with a printf-style error message produced by passing <em>fmt</em>, using apr_psprintf(). <br/></td></tr>
<tr class="separator:ga3b21968b79922680a90fc13314d70789"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga592eecb0b768f46e1183f4eabc348676"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#ga592eecb0b768f46e1183f4eabc348676">svn_error_wrap_apr</a> (apr_status_t status, const char *fmt,...)</td></tr>
<tr class="memdesc:ga592eecb0b768f46e1183f4eabc348676"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wrap a <em>status</em> from an APR function.  <a href="#ga592eecb0b768f46e1183f4eabc348676">More...</a><br/></td></tr>
<tr class="separator:ga592eecb0b768f46e1183f4eabc348676"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9a02d9052446ffc08ecece578d1a3c2f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#ga9a02d9052446ffc08ecece578d1a3c2f">svn_error_quick_wrap</a> (<a class="el" href="structsvn__error__t.html">svn_error_t</a> *child, const char *new_msg)</td></tr>
<tr class="memdesc:ga9a02d9052446ffc08ecece578d1a3c2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">A quick n' easy way to create a wrapped exception with your own message, before throwing it up the stack.  <a href="#ga9a02d9052446ffc08ecece578d1a3c2f">More...</a><br/></td></tr>
<tr class="separator:ga9a02d9052446ffc08ecece578d1a3c2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3478fc47db9ca31d169138aa6ef7daee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#ga3478fc47db9ca31d169138aa6ef7daee">svn_error_compose_create</a> (<a class="el" href="structsvn__error__t.html">svn_error_t</a> *err1, <a class="el" href="structsvn__error__t.html">svn_error_t</a> *err2)</td></tr>
<tr class="memdesc:ga3478fc47db9ca31d169138aa6ef7daee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compose two errors, returning the composition as a brand new error and consuming the original errors.  <a href="#ga3478fc47db9ca31d169138aa6ef7daee">More...</a><br/></td></tr>
<tr class="separator:ga3478fc47db9ca31d169138aa6ef7daee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0617c02787a33ecbf68dcf752fe17b34"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#ga0617c02787a33ecbf68dcf752fe17b34">svn_error_compose</a> (<a class="el" href="structsvn__error__t.html">svn_error_t</a> *chain, <a class="el" href="structsvn__error__t.html">svn_error_t</a> *new_err)</td></tr>
<tr class="memdesc:ga0617c02787a33ecbf68dcf752fe17b34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add <em>new_err</em> to the end of <em>chain's</em> chain of errors.  <a href="#ga0617c02787a33ecbf68dcf752fe17b34">More...</a><br/></td></tr>
<tr class="separator:ga0617c02787a33ecbf68dcf752fe17b34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga963dd4ae636823a71c36f4a1abec70f7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#ga963dd4ae636823a71c36f4a1abec70f7">svn_error_root_cause</a> (<a class="el" href="structsvn__error__t.html">svn_error_t</a> *err)</td></tr>
<tr class="memdesc:ga963dd4ae636823a71c36f4a1abec70f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the root cause of <em>err</em> by finding the last error in its chain (e.g.  <a href="#ga963dd4ae636823a71c36f4a1abec70f7">More...</a><br/></td></tr>
<tr class="separator:ga963dd4ae636823a71c36f4a1abec70f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac7330fec4b094a825fe32ba6ca9b4ad2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#gac7330fec4b094a825fe32ba6ca9b4ad2">svn_error_find_cause</a> (<a class="el" href="structsvn__error__t.html">svn_error_t</a> *err, apr_status_t apr_err)</td></tr>
<tr class="memdesc:gac7330fec4b094a825fe32ba6ca9b4ad2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the first error in <em>err's</em> chain that has an error code <em>apr_err</em> or <a class="el" href="svn__error_8h.html#a657398222a237c3c8cc77dcabf427f63" title="the best kind of (svn_error_t *) ! ">SVN_NO_ERROR</a> if there is no error with that code.  <a href="#gac7330fec4b094a825fe32ba6ca9b4ad2">More...</a><br/></td></tr>
<tr class="separator:gac7330fec4b094a825fe32ba6ca9b4ad2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabbe0febe6b533b445347f8b7eaca448b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#gabbe0febe6b533b445347f8b7eaca448b">svn_error_dup</a> (<a class="el" href="structsvn__error__t.html">svn_error_t</a> *err)</td></tr>
<tr class="memdesc:gabbe0febe6b533b445347f8b7eaca448b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new error that is a deep copy of <em>err</em> and return it.  <a href="#gabbe0febe6b533b445347f8b7eaca448b">More...</a><br/></td></tr>
<tr class="separator:gabbe0febe6b533b445347f8b7eaca448b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac8bb06e98118a482ccf534fe38c33495"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#gac8bb06e98118a482ccf534fe38c33495">svn_error_clear</a> (<a class="el" href="structsvn__error__t.html">svn_error_t</a> *error)</td></tr>
<tr class="memdesc:gac8bb06e98118a482ccf534fe38c33495"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free the memory used by <em>error</em>, as well as all ancestors and descendants of <em>error</em>.  <a href="#gac8bb06e98118a482ccf534fe38c33495">More...</a><br/></td></tr>
<tr class="separator:gac8bb06e98118a482ccf534fe38c33495"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf9008085ded8f0af940f38a3cad6edb1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#gaf9008085ded8f0af940f38a3cad6edb1">svn_handle_error2</a> (<a class="el" href="structsvn__error__t.html">svn_error_t</a> *error, FILE *stream, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> fatal, const char *prefix)</td></tr>
<tr class="memdesc:gaf9008085ded8f0af940f38a3cad6edb1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Very basic default error handler: print out error stack <em>error</em> to the stdio stream <em>stream</em>, with each error prefixed by <em>prefix</em>; quit and clear <em>error</em> iff the <em>fatal</em> flag is set.  <a href="#gaf9008085ded8f0af940f38a3cad6edb1">More...</a><br/></td></tr>
<tr class="separator:gaf9008085ded8f0af940f38a3cad6edb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9eb04d5b9b6f6ad76132a7fb822aa77f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#ga9eb04d5b9b6f6ad76132a7fb822aa77f">svn_handle_error</a> (<a class="el" href="structsvn__error__t.html">svn_error_t</a> *error, FILE *stream, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> fatal)</td></tr>
<tr class="memdesc:ga9eb04d5b9b6f6ad76132a7fb822aa77f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Like <a class="el" href="group__svn__error__error__creation__destroy.html#gaf9008085ded8f0af940f38a3cad6edb1" title="Very basic default error handler: print out error stack error to the stdio stream stream...">svn_handle_error2()</a> but with <code>prefix</code> set to "svn: ".  <a href="#ga9eb04d5b9b6f6ad76132a7fb822aa77f">More...</a><br/></td></tr>
<tr class="separator:ga9eb04d5b9b6f6ad76132a7fb822aa77f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34f08713630352a0546038088ffa6479"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#ga34f08713630352a0546038088ffa6479">svn_handle_warning2</a> (FILE *stream, <a class="el" href="structsvn__error__t.html">svn_error_t</a> *error, const char *prefix)</td></tr>
<tr class="memdesc:ga34f08713630352a0546038088ffa6479"><td class="mdescLeft">&#160;</td><td class="mdescRight">Very basic default warning handler: print out the error <em>error</em> to the stdio stream <em>stream</em>, prefixed by <em>prefix</em>.  <a href="#ga34f08713630352a0546038088ffa6479">More...</a><br/></td></tr>
<tr class="separator:ga34f08713630352a0546038088ffa6479"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga34bb30baf6f2da4abad396082111d671"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#ga34bb30baf6f2da4abad396082111d671">svn_handle_warning</a> (FILE *stream, <a class="el" href="structsvn__error__t.html">svn_error_t</a> *error)</td></tr>
<tr class="memdesc:ga34bb30baf6f2da4abad396082111d671"><td class="mdescLeft">&#160;</td><td class="mdescRight">Like <a class="el" href="group__svn__error__error__creation__destroy.html#ga34f08713630352a0546038088ffa6479" title="Very basic default warning handler: print out the error error to the stdio stream stream...">svn_handle_warning2()</a> but with <code>prefix</code> set to "svn: ".  <a href="#ga34bb30baf6f2da4abad396082111d671">More...</a><br/></td></tr>
<tr class="separator:ga34bb30baf6f2da4abad396082111d671"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga50fb6a28adf05e66b42993b2e89eb098"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__error__creation__destroy.html#ga50fb6a28adf05e66b42993b2e89eb098">svn_error_purge_tracing</a> (<a class="el" href="structsvn__error__t.html">svn_error_t</a> *err)</td></tr>
<tr class="memdesc:ga50fb6a28adf05e66b42993b2e89eb098"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an error chain that is based on <em>err's</em> error chain but does not include any error tracing placeholders.  <a href="#ga50fb6a28adf05e66b42993b2e89eb098">More...</a><br/></td></tr>
<tr class="separator:ga50fb6a28adf05e66b42993b2e89eb098"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>SVN error creation and destruction. </p>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="ga2d4bba65866869939178e21df8e6fffb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_ERR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">expr</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">do</span> {                                          <a class="code" href="svn__types_8h.html#aee5cf08f356d7506dcd929a7f2e51aa0">\</a></div>
<div class="line"><a class="code" href="svn__types_8h.html#aee5cf08f356d7506dcd929a7f2e51aa0">    svn_error_t</a> *svn_err__temp = (expr);        \</div>
<div class="line">    if (svn_err__temp)                          \</div>
<div class="line">      return <a class="code" href="group__svn__error__error__creation__destroy.html#gaebf3a4b9b88c5ac6f6eec7d9792a2288">svn_error_trace</a>(svn_err__temp);    \</div>
<div class="line">  } <span class="keywordflow">while</span> (0)</div>
<div class="ttc" id="svn__types_8h_html_aee5cf08f356d7506dcd929a7f2e51aa0"><div class="ttname"><a href="svn__types_8h.html#aee5cf08f356d7506dcd929a7f2e51aa0">svn_error_t</a></div><div class="ttdeci">struct svn_error_t svn_error_t</div><div class="ttdoc">Subversion error object. </div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_gaebf3a4b9b88c5ac6f6eec7d9792a2288"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#gaebf3a4b9b88c5ac6f6eec7d9792a2288">svn_error_trace</a></div><div class="ttdeci">#define svn_error_trace(expr)</div><div class="ttdoc">A macro for wrapping an error in a source-location trace message. </div><div class="ttdef"><b>Definition:</b> <a href="svn__error_8h_source.html#l00353">svn_error.h:353</a></div></div>
</div><!-- fragment -->
<p>A statement macro for checking error values. </p>
<p>Evaluate <em>expr</em>. If it yields an error, return that error from the current function. Otherwise, continue.</p>
<p>The <code>do { ... } while (0)</code> wrapper has no semantic effect, but it makes this macro syntactically equivalent to the expression statement it resembles. Without it, statements like</p>
<div class="fragment"><div class="line">*   <span class="keywordflow">if</span> (a)</div>
<div class="line">*     <a class="code" href="group__svn__error__error__creation__destroy.html#ga2d4bba65866869939178e21df8e6fffb">SVN_ERR</a>(some operation);</div>
<div class="line">*   <span class="keywordflow">else</span></div>
<div class="line">*     foo;</div>
<div class="line">* </div>
</div><!-- fragment --><p>would not mean what they appear to. </p>

<p>Definition at line <a class="el" href="svn__error_8h_source.html#l00331">331</a> of file <a class="el" href="svn__error_8h_source.html">svn_error.h</a>.</p>

</div>
</div>
<a class="anchor" id="gab25a91cd83a69c02997d636778652924"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_ERR_W</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">expr, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">wrap_msg&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">do</span> {                                                      <a class="code" href="svn__types_8h.html#aee5cf08f356d7506dcd929a7f2e51aa0">\</a></div>
<div class="line"><a class="code" href="svn__types_8h.html#aee5cf08f356d7506dcd929a7f2e51aa0">    svn_error_t</a> *svn_err__temp = (expr);                    \</div>
<div class="line">    if (svn_err__temp)                                      \</div>
<div class="line">      return <a class="code" href="group__svn__error__error__creation__destroy.html#ga9a02d9052446ffc08ecece578d1a3c2f">svn_error_quick_wrap</a>(svn_err__temp, wrap_msg); \</div>
<div class="line">  } <span class="keywordflow">while</span> (0)</div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_ga9a02d9052446ffc08ecece578d1a3c2f"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#ga9a02d9052446ffc08ecece578d1a3c2f">svn_error_quick_wrap</a></div><div class="ttdeci">svn_error_t * svn_error_quick_wrap(svn_error_t *child, const char *new_msg)</div><div class="ttdoc">A quick n&amp;#39; easy way to create a wrapped exception with your own message, before throwing it up the st...</div></div>
<div class="ttc" id="svn__types_8h_html_aee5cf08f356d7506dcd929a7f2e51aa0"><div class="ttname"><a href="svn__types_8h.html#aee5cf08f356d7506dcd929a7f2e51aa0">svn_error_t</a></div><div class="ttdeci">struct svn_error_t svn_error_t</div><div class="ttdoc">Subversion error object. </div></div>
</div><!-- fragment -->
<p>A statement macro, very similar to <code>SVN_ERR</code>. </p>
<p>This macro will wrap the error with the specified text before returning the error. </p>

<p>Definition at line <a class="el" href="svn__error_8h_source.html#l00382">382</a> of file <a class="el" href="svn__error_8h_source.html">svn_error.h</a>.</p>

</div>
</div>
<a class="anchor" id="gaebf3a4b9b88c5ac6f6eec7d9792a2288"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define svn_error_trace</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">expr</td><td>)</td>
          <td>&#160;&#160;&#160;(expr)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A macro for wrapping an error in a source-location trace message. </p>
<p>This macro can be used when directly returning an already created error (when not using SVN_ERR, <a class="el" href="group__svn__error__error__creation__destroy.html#ga63cac13b078a6d0af98e74d61f7e355b" title="Create a nested exception structure. ">svn_error_create()</a>, etc.) to ensure that the call stack is recorded correctly.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

<p>Definition at line <a class="el" href="svn__error_8h_source.html#l00353">353</a> of file <a class="el" href="svn__error_8h_source.html">svn_error.h</a>.</p>

</div>
</div>
<a class="anchor" id="gab5f98501379447f3b996418cec2a9e83"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_INT_ERR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">expr</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">do</span> {                                                           <a class="code" href="svn__types_8h.html#aee5cf08f356d7506dcd929a7f2e51aa0">\</a></div>
<div class="line"><a class="code" href="svn__types_8h.html#aee5cf08f356d7506dcd929a7f2e51aa0">    svn_error_t</a> *svn_err__temp = (expr);                         \</div>
<div class="line">    if (svn_err__temp) {                                         <a class="code" href="group__svn__error__error__creation__destroy.html#gaf9008085ded8f0af940f38a3cad6edb1">\</a></div>
<div class="line"><a class="code" href="group__svn__error__error__creation__destroy.html#gaf9008085ded8f0af940f38a3cad6edb1">      svn_handle_error2</a>(svn_err__temp, stderr, <a class="code" href="svn__types_8h.html#aa93f0eb578d23995850d61f7d61c55c1">FALSE</a>, <span class="stringliteral">&quot;svn: &quot;</span>);  <a class="code" href="group__svn__error__error__creation__destroy.html#gac8bb06e98118a482ccf534fe38c33495">\</a></div>
<div class="line"><a class="code" href="group__svn__error__error__creation__destroy.html#gac8bb06e98118a482ccf534fe38c33495">      svn_error_clear</a>(svn_err__temp);                            \</div>
<div class="line">      return EXIT_FAILURE; }                                     \</div>
<div class="line">  } <span class="keywordflow">while</span> (0)</div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_gaf9008085ded8f0af940f38a3cad6edb1"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#gaf9008085ded8f0af940f38a3cad6edb1">svn_handle_error2</a></div><div class="ttdeci">void svn_handle_error2(svn_error_t *error, FILE *stream, svn_boolean_t fatal, const char *prefix)</div><div class="ttdoc">Very basic default error handler: print out error stack error to the stdio stream stream...</div></div>
<div class="ttc" id="svn__types_8h_html_aa93f0eb578d23995850d61f7d61c55c1"><div class="ttname"><a href="svn__types_8h.html#aa93f0eb578d23995850d61f7d61c55c1">FALSE</a></div><div class="ttdeci">#define FALSE</div><div class="ttdoc">uhh... </div><div class="ttdef"><b>Definition:</b> <a href="svn__types_8h_source.html#l00103">svn_types.h:103</a></div></div>
<div class="ttc" id="svn__types_8h_html_aee5cf08f356d7506dcd929a7f2e51aa0"><div class="ttname"><a href="svn__types_8h.html#aee5cf08f356d7506dcd929a7f2e51aa0">svn_error_t</a></div><div class="ttdeci">struct svn_error_t svn_error_t</div><div class="ttdoc">Subversion error object. </div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_gac8bb06e98118a482ccf534fe38c33495"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#gac8bb06e98118a482ccf534fe38c33495">svn_error_clear</a></div><div class="ttdeci">void svn_error_clear(svn_error_t *error)</div><div class="ttdoc">Free the memory used by error, as well as all ancestors and descendants of error. ...</div></div>
</div><!-- fragment -->
<p>A statement macro, similar to <code>SVN_ERR</code>, but returns an integer. </p>
<p>Evaluate <em>expr</em>. If it yields an error, handle that error and return <code>EXIT_FAILURE</code>. </p>

<p>Definition at line <a class="el" href="svn__error_8h_source.html#l00395">395</a> of file <a class="el" href="svn__error_8h_source.html">svn_error.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="gac8bb06e98118a482ccf534fe38c33495"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_error_clear </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td>
          <td class="paramname"><em>error</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Free the memory used by <em>error</em>, as well as all ancestors and descendants of <em>error</em>. </p>
<p>Unlike other Subversion objects, errors are managed explicitly; you MUST clear an error if you are ignoring it, or you are leaking memory. For convenience, <em>error</em> may be <code>NULL</code>, in which case this function does nothing; thus, svn_error_clear(svn_foo(...)) works as an idiom to ignore errors. </p>

</div>
</div>
<a class="anchor" id="ga0617c02787a33ecbf68dcf752fe17b34"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_error_compose </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td>
          <td class="paramname"><em>chain</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td>
          <td class="paramname"><em>new_err</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add <em>new_err</em> to the end of <em>chain's</em> chain of errors. </p>
<p>The <em>new_err</em> chain will be copied into <em>chain's</em> pool and destroyed, so <em>new_err</em> itself becomes invalid after this function.</p>
<p>Either <em>chain</em> or <em>new_err</em> can be functions that return svn_error_t* but if both are functions they can be evaluated in either order as per the C language rules. </p>

</div>
</div>
<a class="anchor" id="ga3478fc47db9ca31d169138aa6ef7daee"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_error_compose_create </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td>
          <td class="paramname"><em>err1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td>
          <td class="paramname"><em>err2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compose two errors, returning the composition as a brand new error and consuming the original errors. </p>
<p>Either or both of <em>err1</em> and <em>err2</em> may be <code>SVN_NO_ERROR</code>. If both are not <code>SVN_NO_ERROR</code>, <em>err2</em> will follow <em>err1</em> in the chain of the returned error.</p>
<p>Either <em>err1</em> or <em>err2</em> can be functions that return svn_error_t* but if both are functions they can be evaluated in either order as per the C language rules.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="ga63cac13b078a6d0af98e74d61f7e355b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_error_create </td>
          <td>(</td>
          <td class="paramtype">apr_status_t&#160;</td>
          <td class="paramname"><em>apr_err</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td>
          <td class="paramname"><em>child</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>message</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a nested exception structure. </p>
<p>Input: an APR or SVN custom error code, a "child" error to wrap, a specific message</p>
<p>Returns: a new error structure (containing the old one).</p>
<dl class="section note"><dt>Note</dt><dd>Errors are always allocated in a subpool of the global pool, since an error's lifetime is generally not related to the lifetime of any convenient pool. Errors must be freed with <a class="el" href="group__svn__error__error__creation__destroy.html#gac8bb06e98118a482ccf534fe38c33495" title="Free the memory used by error, as well as all ancestors and descendants of error. ...">svn_error_clear()</a>. The specific message should be <code>NULL</code> if there is nothing to add to the general message associated with the error code.</dd></dl>
<p>If creating the "bottommost" error in a chain, pass <code>NULL</code> for the child argument. </p>

</div>
</div>
<a class="anchor" id="gabbe0febe6b533b445347f8b7eaca448b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_error_dup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td>
          <td class="paramname"><em>err</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a new error that is a deep copy of <em>err</em> and return it. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="gac7330fec4b094a825fe32ba6ca9b4ad2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_error_find_cause </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td>
          <td class="paramname"><em>err</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_status_t&#160;</td>
          <td class="paramname"><em>apr_err</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the first error in <em>err's</em> chain that has an error code <em>apr_err</em> or <a class="el" href="svn__error_8h.html#a657398222a237c3c8cc77dcabf427f63" title="the best kind of (svn_error_t *) ! ">SVN_NO_ERROR</a> if there is no error with that code. </p>
<p>The returned error should <em>not</em> be cleared as it shares memory with <em>err</em>.</p>
<p>If <em>err</em> is <a class="el" href="svn__error_8h.html#a657398222a237c3c8cc77dcabf427f63" title="the best kind of (svn_error_t *) ! ">SVN_NO_ERROR</a>, return <a class="el" href="svn__error_8h.html#a657398222a237c3c8cc77dcabf427f63" title="the best kind of (svn_error_t *) ! ">SVN_NO_ERROR</a>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga50fb6a28adf05e66b42993b2e89eb098"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_error_purge_tracing </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td>
          <td class="paramname"><em>err</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an error chain that is based on <em>err's</em> error chain but does not include any error tracing placeholders. </p>
<p><em>err</em> is not modified, except for any allocations using its pool.</p>
<p>The returned error chain is allocated from <em>err's</em> pool and shares its message and source filename character arrays. The returned error chain should <em>not</em> be cleared because it is not a fully fledged error chain, only clearing <em>err</em> should be done to clear the returned error chain. If <em>err</em> is cleared, then the returned error chain is unusable.</p>
<p><em>err</em> can be <a class="el" href="svn__error_8h.html#a657398222a237c3c8cc77dcabf427f63" title="the best kind of (svn_error_t *) ! ">SVN_NO_ERROR</a>. If <em>err</em> is not <a class="el" href="svn__error_8h.html#a657398222a237c3c8cc77dcabf427f63" title="the best kind of (svn_error_t *) ! ">SVN_NO_ERROR</a>, then the last link in the error chain must be a non-tracing error, i.e, a real error.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga9a02d9052446ffc08ecece578d1a3c2f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_error_quick_wrap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td>
          <td class="paramname"><em>child</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>new_msg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A quick n' easy way to create a wrapped exception with your own message, before throwing it up the stack. </p>
<p>(It uses all of the <em>child's</em> fields.) </p>

</div>
</div>
<a class="anchor" id="ga963dd4ae636823a71c36f4a1abec70f7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_error_root_cause </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td>
          <td class="paramname"><em>err</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the root cause of <em>err</em> by finding the last error in its chain (e.g. </p>
<p>it or its children). <em>err</em> may be <code>SVN_NO_ERROR</code>, in which case <code>SVN_NO_ERROR</code> is returned.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="ga592eecb0b768f46e1183f4eabc348676"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_error_wrap_apr </td>
          <td>(</td>
          <td class="paramtype">apr_status_t&#160;</td>
          <td class="paramname"><em>status</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wrap a <em>status</em> from an APR function. </p>
<p>If <em>fmt</em> is NULL, this is equivalent to svn_error_create(status,NULL,NULL). Otherwise, the error message is constructed by formatting <em>fmt</em> and the following arguments according to apr_psprintf(), and then appending ": " and the error message corresponding to <em>status</em>. (If UTF-8 translation of the APR error message fails, the ": " and APR error are not appended to the error message.) </p>

</div>
</div>
<a class="anchor" id="ga9eb04d5b9b6f6ad76132a7fb822aa77f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_handle_error </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td>
          <td class="paramname"><em>error</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>fatal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Like <a class="el" href="group__svn__error__error__creation__destroy.html#gaf9008085ded8f0af940f38a3cad6edb1" title="Very basic default error handler: print out error stack error to the stdio stream stream...">svn_handle_error2()</a> but with <code>prefix</code> set to "svn: ". </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000176">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf9008085ded8f0af940f38a3cad6edb1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_handle_error2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td>
          <td class="paramname"><em>error</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>fatal</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>prefix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Very basic default error handler: print out error stack <em>error</em> to the stdio stream <em>stream</em>, with each error prefixed by <em>prefix</em>; quit and clear <em>error</em> iff the <em>fatal</em> flag is set. </p>
<p>Allocations are performed in the <em>error's</em> pool.</p>
<p>If you're not sure what prefix to pass, just pass "svn: ". That's what code that used to call <a class="el" href="group__svn__error__error__creation__destroy.html#ga9eb04d5b9b6f6ad76132a7fb822aa77f" title="Like svn_handle_error2() but with prefix set to &quot;svn: &quot;. ">svn_handle_error()</a> and now calls <a class="el" href="group__svn__error__error__creation__destroy.html#gaf9008085ded8f0af940f38a3cad6edb1" title="Very basic default error handler: print out error stack error to the stdio stream stream...">svn_handle_error2()</a> does.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="ga34bb30baf6f2da4abad396082111d671"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_handle_warning </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td>
          <td class="paramname"><em>error</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Like <a class="el" href="group__svn__error__error__creation__destroy.html#ga34f08713630352a0546038088ffa6479" title="Very basic default warning handler: print out the error error to the stdio stream stream...">svn_handle_warning2()</a> but with <code>prefix</code> set to "svn: ". </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000177">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga34f08713630352a0546038088ffa6479"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_handle_warning2 </td>
          <td>(</td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td>
          <td class="paramname"><em>error</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>prefix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Very basic default warning handler: print out the error <em>error</em> to the stdio stream <em>stream</em>, prefixed by <em>prefix</em>. </p>
<p>Allocations are performed in the error's pool.</p>
<p><em>error</em> may not be <code>NULL</code>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.2. </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 19 2015 09:37:24 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
