<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Subversion: svn_string.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_c37f7789c49aa9e5999234152b1ef6ed.html">subversion</a></li><li class="navelem"><a class="el" href="dir_334478eea8dba5ae935f94af9469978f.html">include</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">svn_string.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Counted-length strings for Subversion, plus some C string goodies.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &lt;apr.h&gt;</code><br/>
<code>#include &lt;apr_pools.h&gt;</code><br/>
<code>#include &lt;apr_tables.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="svn__types_8h_source.html">svn_types.h</a>&quot;</code><br/>
</div>
<p><a href="svn__string_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__string__t.html">svn_string_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A simple counted string.  <a href="structsvn__string__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A buffered string, capable of appending without an allocation and copy for each append.  <a href="structsvn__stringbuf__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:gaa3c24f4e0bc88b3aaf74ca4fbb3acff2"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structsvn__string__t.html">svn_string_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string.html#gaa3c24f4e0bc88b3aaf74ca4fbb3acff2">svn_string_t</a></td></tr>
<tr class="memdesc:gaa3c24f4e0bc88b3aaf74ca4fbb3acff2"><td class="mdescLeft">&#160;</td><td class="mdescRight">A simple counted string.  <a href="group__svn__string.html#gaa3c24f4e0bc88b3aaf74ca4fbb3acff2">More...</a><br/></td></tr>
<tr class="separator:gaa3c24f4e0bc88b3aaf74ca4fbb3acff2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga75e4f8a8d92ddac53a8b8baae1302c4a"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string.html#ga75e4f8a8d92ddac53a8b8baae1302c4a">svn_stringbuf_t</a></td></tr>
<tr class="memdesc:ga75e4f8a8d92ddac53a8b8baae1302c4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">A buffered string, capable of appending without an allocation and copy for each append.  <a href="group__svn__string.html#ga75e4f8a8d92ddac53a8b8baae1302c4a">More...</a><br/></td></tr>
<tr class="separator:ga75e4f8a8d92ddac53a8b8baae1302c4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gad95dc9d38e6bdc84747f3ef9d3e35fe0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad95dc9d38e6bdc84747f3ef9d3e35fe0"></a>
<a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__string__t.html#gad95dc9d38e6bdc84747f3ef9d3e35fe0">svn_string_create</a> (const char *cstring, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gad95dc9d38e6bdc84747f3ef9d3e35fe0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new string copied from the null-terminated C string <em>cstring</em>. <br/></td></tr>
<tr class="separator:gad95dc9d38e6bdc84747f3ef9d3e35fe0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaa66cba8f1418eabbac67f8f3a22a775"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__string__t.html#gaaa66cba8f1418eabbac67f8f3a22a775">svn_string_create_empty</a> (apr_pool_t *pool)</td></tr>
<tr class="memdesc:gaaa66cba8f1418eabbac67f8f3a22a775"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new, empty string.  <a href="group__svn__string__svn__string__t.html#gaaa66cba8f1418eabbac67f8f3a22a775">More...</a><br/></td></tr>
<tr class="separator:gaaa66cba8f1418eabbac67f8f3a22a775"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac3d86b18881673a058d2436abc4f3b3d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__string__t.html#gac3d86b18881673a058d2436abc4f3b3d">svn_string_ncreate</a> (const char *bytes, apr_size_t size, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gac3d86b18881673a058d2436abc4f3b3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new string copied from a generic string of bytes, <em>bytes</em>, of length <em>size</em> bytes.  <a href="group__svn__string__svn__string__t.html#gac3d86b18881673a058d2436abc4f3b3d">More...</a><br/></td></tr>
<tr class="separator:gac3d86b18881673a058d2436abc4f3b3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae371a744fa00e25cb91e326b628c0d58"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae371a744fa00e25cb91e326b628c0d58"></a>
<a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__string__t.html#gae371a744fa00e25cb91e326b628c0d58">svn_string_create_from_buf</a> (const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *strbuf, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gae371a744fa00e25cb91e326b628c0d58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new string copied from the stringbuf <em>strbuf</em>. <br/></td></tr>
<tr class="separator:gae371a744fa00e25cb91e326b628c0d58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadf11867a5acaf851da1ee35ebda9a26b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__string__t.html">svn_string_t</a> *<a class="el" href="structsvn__string__t.html">svn_string_t</a> <br class="typebreak"/>
*<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__string__t.html#gadf11867a5acaf851da1ee35ebda9a26b">svn_string_isempty</a> (const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *str)</td></tr>
<tr class="memdesc:gadf11867a5acaf851da1ee35ebda9a26b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new string by printf-style formatting using <em>fmt</em> and the variable arguments, which are as appropriate for apr_psprintf().  <a href="group__svn__string__svn__string__t.html#gadf11867a5acaf851da1ee35ebda9a26b">More...</a><br/></td></tr>
<tr class="separator:gadf11867a5acaf851da1ee35ebda9a26b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafbbbff4a252b2cc528f17d908a05f63e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__string__t.html#gafbbbff4a252b2cc528f17d908a05f63e">svn_string_dup</a> (const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *original_string, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gafbbbff4a252b2cc528f17d908a05f63e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a duplicate of <em>original_string</em>.  <a href="group__svn__string__svn__string__t.html#gafbbbff4a252b2cc528f17d908a05f63e">More...</a><br/></td></tr>
<tr class="separator:gafbbbff4a252b2cc528f17d908a05f63e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb0c115b0e43071290450146585701d4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__string__t.html#gadb0c115b0e43071290450146585701d4">svn_string_compare</a> (const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *str1, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *str2)</td></tr>
<tr class="memdesc:gadb0c115b0e43071290450146585701d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <code>TRUE</code> iff <em>str1</em> and <em>str2</em> have identical length and data.  <a href="group__svn__string__svn__string__t.html#gadb0c115b0e43071290450146585701d4">More...</a><br/></td></tr>
<tr class="separator:gadb0c115b0e43071290450146585701d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaef03ff9a4a6164c224ab26cb89088f98"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaef03ff9a4a6164c224ab26cb89088f98"></a>
apr_size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__string__t.html#gaef03ff9a4a6164c224ab26cb89088f98">svn_string_first_non_whitespace</a> (const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *str)</td></tr>
<tr class="memdesc:gaef03ff9a4a6164c224ab26cb89088f98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return offset of first non-whitespace character in <em>str</em>, or return <em>str-&gt;len</em> if none. <br/></td></tr>
<tr class="separator:gaef03ff9a4a6164c224ab26cb89088f98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga60d959ad747d999baf4cc0582f1ecfa0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga60d959ad747d999baf4cc0582f1ecfa0"></a>
apr_size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__string__t.html#ga60d959ad747d999baf4cc0582f1ecfa0">svn_string_find_char_backward</a> (const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *str, char ch)</td></tr>
<tr class="memdesc:ga60d959ad747d999baf4cc0582f1ecfa0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return position of last occurrence of <em>ch</em> in <em>str</em>, or return <em>str-&gt;len</em> if no occurrence. <br/></td></tr>
<tr class="separator:ga60d959ad747d999baf4cc0582f1ecfa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8601f093a616a8e02037dc8e8a90f91a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga8601f093a616a8e02037dc8e8a90f91a"></a>
<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga8601f093a616a8e02037dc8e8a90f91a">svn_stringbuf_create</a> (const char *cstring, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga8601f093a616a8e02037dc8e8a90f91a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new stringbuf copied from the null-terminated C string <em>cstring</em>. <br/></td></tr>
<tr class="separator:ga8601f093a616a8e02037dc8e8a90f91a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga52aff4fcf51690403e493bb35ac87991"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga52aff4fcf51690403e493bb35ac87991">svn_stringbuf_ncreate</a> (const char *bytes, apr_size_t size, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga52aff4fcf51690403e493bb35ac87991"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new stringbuf copied from the generic string of bytes, <em>bytes</em>, of length <em>size</em> bytes.  <a href="group__svn__string__svn__stringbuf__t.html#ga52aff4fcf51690403e493bb35ac87991">More...</a><br/></td></tr>
<tr class="separator:ga52aff4fcf51690403e493bb35ac87991"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga69de2af20dc203f258335dfc475cf1ad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga69de2af20dc203f258335dfc475cf1ad">svn_stringbuf_create_empty</a> (apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga69de2af20dc203f258335dfc475cf1ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new, empty stringbuf.  <a href="group__svn__string__svn__stringbuf__t.html#ga69de2af20dc203f258335dfc475cf1ad">More...</a><br/></td></tr>
<tr class="separator:ga69de2af20dc203f258335dfc475cf1ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga75ce9fc03e6382cd7a259042834355b3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga75ce9fc03e6382cd7a259042834355b3">svn_stringbuf_create_ensure</a> (apr_size_t minimum_size, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga75ce9fc03e6382cd7a259042834355b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new, empty stringbuf with at least <em>minimum_size</em> bytes of space available in the memory block.  <a href="group__svn__string__svn__stringbuf__t.html#ga75ce9fc03e6382cd7a259042834355b3">More...</a><br/></td></tr>
<tr class="separator:ga75ce9fc03e6382cd7a259042834355b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa7d76a0ae1245b7695b290b91cda4947"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa7d76a0ae1245b7695b290b91cda4947"></a>
<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#gaa7d76a0ae1245b7695b290b91cda4947">svn_stringbuf_create_from_string</a> (const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *str, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gaa7d76a0ae1245b7695b290b91cda4947"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new stringbuf copied from the string <em>str</em>. <br/></td></tr>
<tr class="separator:gaa7d76a0ae1245b7695b290b91cda4947"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9593514bf4b6f220d498a1bcad1cb63f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga9593514bf4b6f220d498a1bcad1cb63f">svn_stringbuf_create_wrap</a> (char *str, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga9593514bf4b6f220d498a1bcad1cb63f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new stringbuf using the given <em>str</em> as initial buffer.  <a href="group__svn__string__svn__stringbuf__t.html#ga9593514bf4b6f220d498a1bcad1cb63f">More...</a><br/></td></tr>
<tr class="separator:ga9593514bf4b6f220d498a1bcad1cb63f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaebc36db5adf759c66508d23e3cb195c2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> <br class="typebreak"/>
*<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#gaebc36db5adf759c66508d23e3cb195c2">svn_stringbuf_ensure</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str, apr_size_t minimum_size)</td></tr>
<tr class="memdesc:gaebc36db5adf759c66508d23e3cb195c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new stringbuf by printf-style formatting using <em>fmt</em> and the variable arguments, which are as appropriate for apr_psprintf().  <a href="group__svn__string__svn__stringbuf__t.html#gaebc36db5adf759c66508d23e3cb195c2">More...</a><br/></td></tr>
<tr class="separator:gaebc36db5adf759c66508d23e3cb195c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga026d3c9d0850c9b3131dcb37400de532"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga026d3c9d0850c9b3131dcb37400de532">svn_stringbuf_set</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str, const char *value)</td></tr>
<tr class="memdesc:ga026d3c9d0850c9b3131dcb37400de532"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>str</em> to a copy of the null-terminated C string <em>value</em>.  <a href="group__svn__string__svn__stringbuf__t.html#ga026d3c9d0850c9b3131dcb37400de532">More...</a><br/></td></tr>
<tr class="separator:ga026d3c9d0850c9b3131dcb37400de532"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab83a676f045b8661689f04a59e0efce9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#gab83a676f045b8661689f04a59e0efce9">svn_stringbuf_setempty</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str)</td></tr>
<tr class="memdesc:gab83a676f045b8661689f04a59e0efce9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>str</em> to empty (zero length).  <a href="group__svn__string__svn__stringbuf__t.html#gab83a676f045b8661689f04a59e0efce9">More...</a><br/></td></tr>
<tr class="separator:gab83a676f045b8661689f04a59e0efce9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga40f3e623c857983b4b56e603431a00fa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga40f3e623c857983b4b56e603431a00fa">svn_stringbuf_isempty</a> (const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str)</td></tr>
<tr class="memdesc:ga40f3e623c857983b4b56e603431a00fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <code>TRUE</code> if <em>str</em> is empty (has length zero).  <a href="group__svn__string__svn__stringbuf__t.html#ga40f3e623c857983b4b56e603431a00fa">More...</a><br/></td></tr>
<tr class="separator:ga40f3e623c857983b4b56e603431a00fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga49dc0be31e13c8264575723cf4695c68"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga49dc0be31e13c8264575723cf4695c68">svn_stringbuf_chop</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str, apr_size_t nbytes)</td></tr>
<tr class="memdesc:ga49dc0be31e13c8264575723cf4695c68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Chop <em>nbytes</em> bytes off end of <em>str</em>, but not more than <em>str-&gt;len</em>.  <a href="group__svn__string__svn__stringbuf__t.html#ga49dc0be31e13c8264575723cf4695c68">More...</a><br/></td></tr>
<tr class="separator:ga49dc0be31e13c8264575723cf4695c68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4373bb2fae064fb648344f49f24fc96c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga4373bb2fae064fb648344f49f24fc96c">svn_stringbuf_fillchar</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str, unsigned char c)</td></tr>
<tr class="memdesc:ga4373bb2fae064fb648344f49f24fc96c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fill <em>str</em> with character <em>c</em>.  <a href="group__svn__string__svn__stringbuf__t.html#ga4373bb2fae064fb648344f49f24fc96c">More...</a><br/></td></tr>
<tr class="separator:ga4373bb2fae064fb648344f49f24fc96c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaac364c08a63485f28ee5b3ee99e941f4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#gaac364c08a63485f28ee5b3ee99e941f4">svn_stringbuf_appendbyte</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *targetstr, char byte)</td></tr>
<tr class="memdesc:gaac364c08a63485f28ee5b3ee99e941f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Append the single character <em>byte</em> onto <em>targetstr</em>.  <a href="group__svn__string__svn__stringbuf__t.html#gaac364c08a63485f28ee5b3ee99e941f4">More...</a><br/></td></tr>
<tr class="separator:gaac364c08a63485f28ee5b3ee99e941f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1c60f08eaa9f01d244072291f4cf42d0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga1c60f08eaa9f01d244072291f4cf42d0">svn_stringbuf_appendbytes</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *targetstr, const char *bytes, apr_size_t count)</td></tr>
<tr class="memdesc:ga1c60f08eaa9f01d244072291f4cf42d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Append the array of bytes <em>bytes</em> of length <em>count</em> onto <em>targetstr</em>.  <a href="group__svn__string__svn__stringbuf__t.html#ga1c60f08eaa9f01d244072291f4cf42d0">More...</a><br/></td></tr>
<tr class="separator:ga1c60f08eaa9f01d244072291f4cf42d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5cc195ace8501ac3f8748a5a9f23ece7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga5cc195ace8501ac3f8748a5a9f23ece7">svn_stringbuf_appendfill</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *targetstr, char byte, apr_size_t count)</td></tr>
<tr class="memdesc:ga5cc195ace8501ac3f8748a5a9f23ece7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Append <em>byte</em> <em>count</em> times onto <em>targetstr</em>.  <a href="group__svn__string__svn__stringbuf__t.html#ga5cc195ace8501ac3f8748a5a9f23ece7">More...</a><br/></td></tr>
<tr class="separator:ga5cc195ace8501ac3f8748a5a9f23ece7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga670edcdb88bcbfc421f06b58683a5efb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga670edcdb88bcbfc421f06b58683a5efb">svn_stringbuf_appendstr</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *targetstr, const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *appendstr)</td></tr>
<tr class="memdesc:ga670edcdb88bcbfc421f06b58683a5efb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Append the stringbuf <code>appendstr</code> onto <em>targetstr</em>.  <a href="group__svn__string__svn__stringbuf__t.html#ga670edcdb88bcbfc421f06b58683a5efb">More...</a><br/></td></tr>
<tr class="separator:ga670edcdb88bcbfc421f06b58683a5efb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga21e883d584131b35082f23d27fe877ea"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga21e883d584131b35082f23d27fe877ea">svn_stringbuf_appendcstr</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *targetstr, const char *cstr)</td></tr>
<tr class="memdesc:ga21e883d584131b35082f23d27fe877ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Append the C string <em>cstr</em> onto <em>targetstr</em>.  <a href="group__svn__string__svn__stringbuf__t.html#ga21e883d584131b35082f23d27fe877ea">More...</a><br/></td></tr>
<tr class="separator:ga21e883d584131b35082f23d27fe877ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga59fe19732799703addf0c20a7f45133f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga59fe19732799703addf0c20a7f45133f">svn_stringbuf_insert</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str, apr_size_t pos, const char *bytes, apr_size_t count)</td></tr>
<tr class="memdesc:ga59fe19732799703addf0c20a7f45133f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insert into <em>str</em> at position <em>pos</em> an array of bytes <em>bytes</em> which is <em>count</em> bytes long.  <a href="group__svn__string__svn__stringbuf__t.html#ga59fe19732799703addf0c20a7f45133f">More...</a><br/></td></tr>
<tr class="separator:ga59fe19732799703addf0c20a7f45133f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga95328e1824649b300eff3b3f9b07f85f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga95328e1824649b300eff3b3f9b07f85f">svn_stringbuf_remove</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str, apr_size_t pos, apr_size_t count)</td></tr>
<tr class="memdesc:ga95328e1824649b300eff3b3f9b07f85f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove <em>count</em> bytes from <em>str</em>, starting at position <em>pos</em>.  <a href="group__svn__string__svn__stringbuf__t.html#ga95328e1824649b300eff3b3f9b07f85f">More...</a><br/></td></tr>
<tr class="separator:ga95328e1824649b300eff3b3f9b07f85f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaceb4e369123b0bc333d0bf3014fb9d51"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#gaceb4e369123b0bc333d0bf3014fb9d51">svn_stringbuf_replace</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str, apr_size_t pos, apr_size_t old_count, const char *bytes, apr_size_t new_count)</td></tr>
<tr class="memdesc:gaceb4e369123b0bc333d0bf3014fb9d51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace in <em>str</em> the substring which starts at <em>pos</em> and is <em>old_count</em> bytes long with a new substring <em>bytes</em> which is <em>new_count</em> bytes long.  <a href="group__svn__string__svn__stringbuf__t.html#gaceb4e369123b0bc333d0bf3014fb9d51">More...</a><br/></td></tr>
<tr class="separator:gaceb4e369123b0bc333d0bf3014fb9d51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad96ee402d1430439779f7e19159ecd78"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#gad96ee402d1430439779f7e19159ecd78">svn_stringbuf_dup</a> (const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *original_string, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gad96ee402d1430439779f7e19159ecd78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a duplicate of <em>original_string</em>.  <a href="group__svn__string__svn__stringbuf__t.html#gad96ee402d1430439779f7e19159ecd78">More...</a><br/></td></tr>
<tr class="separator:gad96ee402d1430439779f7e19159ecd78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58bf192fb1bab3755a3cb9699ab472c4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga58bf192fb1bab3755a3cb9699ab472c4">svn_stringbuf_compare</a> (const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str1, const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str2)</td></tr>
<tr class="memdesc:ga58bf192fb1bab3755a3cb9699ab472c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <code>TRUE</code> iff <em>str1</em> and <em>str2</em> have identical length and data.  <a href="group__svn__string__svn__stringbuf__t.html#ga58bf192fb1bab3755a3cb9699ab472c4">More...</a><br/></td></tr>
<tr class="separator:ga58bf192fb1bab3755a3cb9699ab472c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4fc22d2b21e2e8d4bcd1d71f3ed662e8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga4fc22d2b21e2e8d4bcd1d71f3ed662e8"></a>
apr_size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga4fc22d2b21e2e8d4bcd1d71f3ed662e8">svn_stringbuf_first_non_whitespace</a> (const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str)</td></tr>
<tr class="memdesc:ga4fc22d2b21e2e8d4bcd1d71f3ed662e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return offset of first non-whitespace character in <em>str</em>, or return <em>str-&gt;len</em> if none. <br/></td></tr>
<tr class="separator:ga4fc22d2b21e2e8d4bcd1d71f3ed662e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6509ce58676a3f404250ea8653034a20"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga6509ce58676a3f404250ea8653034a20">svn_stringbuf_strip_whitespace</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str)</td></tr>
<tr class="memdesc:ga6509ce58676a3f404250ea8653034a20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Strip whitespace from both sides of <em>str</em> (modified in place).  <a href="group__svn__string__svn__stringbuf__t.html#ga6509ce58676a3f404250ea8653034a20">More...</a><br/></td></tr>
<tr class="separator:ga6509ce58676a3f404250ea8653034a20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa277b724082d592ac403a3c14a1f8636"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa277b724082d592ac403a3c14a1f8636"></a>
apr_size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#gaa277b724082d592ac403a3c14a1f8636">svn_stringbuf_find_char_backward</a> (const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str, char ch)</td></tr>
<tr class="memdesc:gaa277b724082d592ac403a3c14a1f8636"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return position of last occurrence of <em>ch</em> in <em>str</em>, or return <em>str-&gt;len</em> if no occurrence. <br/></td></tr>
<tr class="separator:gaa277b724082d592ac403a3c14a1f8636"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7fd0407b0fd66e903255e2b8ad61a9cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__svn__stringbuf__t.html#ga7fd0407b0fd66e903255e2b8ad61a9cc">svn_string_compare_stringbuf</a> (const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *str1, const <a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *str2)</td></tr>
<tr class="memdesc:ga7fd0407b0fd66e903255e2b8ad61a9cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <code>TRUE</code> iff <em>str1</em> and <em>str2</em> have identical length and data.  <a href="group__svn__string__svn__stringbuf__t.html#ga7fd0407b0fd66e903255e2b8ad61a9cc">More...</a><br/></td></tr>
<tr class="separator:ga7fd0407b0fd66e903255e2b8ad61a9cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1af9bdcdb39027b11107088fd02cad9b"><td class="memItemLeft" align="right" valign="top">apr_array_header_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga1af9bdcdb39027b11107088fd02cad9b">svn_cstring_split</a> (const char *input, const char *sep_chars, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> chop_whitespace, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga1af9bdcdb39027b11107088fd02cad9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divide <em>input</em> into substrings, interpreting any char from <em>sep</em> as a token separator.  <a href="group__svn__string__cstrings.html#ga1af9bdcdb39027b11107088fd02cad9b">More...</a><br/></td></tr>
<tr class="separator:ga1af9bdcdb39027b11107088fd02cad9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabb4be8497dbc9b869bcabefe93a08f83"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#gabb4be8497dbc9b869bcabefe93a08f83">svn_cstring_split_append</a> (apr_array_header_t *array, const char *input, const char *sep_chars, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> chop_whitespace, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gabb4be8497dbc9b869bcabefe93a08f83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Like <a class="el" href="group__svn__string__cstrings.html#ga1af9bdcdb39027b11107088fd02cad9b" title="Divide input into substrings, interpreting any char from sep as a token separator. ">svn_cstring_split()</a>, but append to existing <em>array</em> instead of creating a new one.  <a href="group__svn__string__cstrings.html#gabb4be8497dbc9b869bcabefe93a08f83">More...</a><br/></td></tr>
<tr class="separator:gabb4be8497dbc9b869bcabefe93a08f83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga87a19191b67f3a0b9cb690e14ee00fb7"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga87a19191b67f3a0b9cb690e14ee00fb7"></a>
<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga87a19191b67f3a0b9cb690e14ee00fb7">svn_cstring_match_glob_list</a> (const char *str, const apr_array_header_t *list)</td></tr>
<tr class="memdesc:ga87a19191b67f3a0b9cb690e14ee00fb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <code>TRUE</code> iff <em>str</em> matches any of the elements of <em>list</em>, a list of zero or more glob patterns. <br/></td></tr>
<tr class="separator:ga87a19191b67f3a0b9cb690e14ee00fb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1f70bcb1cb2c819879693f03043aa0de"><td class="memItemLeft" align="right" valign="top"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga1f70bcb1cb2c819879693f03043aa0de">svn_cstring_match_list</a> (const char *str, const apr_array_header_t *list)</td></tr>
<tr class="memdesc:ga1f70bcb1cb2c819879693f03043aa0de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <code>TRUE</code> iff <em>str</em> exactly matches any of the elements of <em>list</em>.  <a href="group__svn__string__cstrings.html#ga1f70bcb1cb2c819879693f03043aa0de">More...</a><br/></td></tr>
<tr class="separator:ga1f70bcb1cb2c819879693f03043aa0de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab354d6c2cc1a010de5f81a94d50adb66"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#gab354d6c2cc1a010de5f81a94d50adb66">svn_cstring_tokenize</a> (const char *sep, char **str)</td></tr>
<tr class="memdesc:gab354d6c2cc1a010de5f81a94d50adb66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the next token from <em>*str</em> interpreting any char from <em>sep</em> as a token separator.  <a href="group__svn__string__cstrings.html#gab354d6c2cc1a010de5f81a94d50adb66">More...</a><br/></td></tr>
<tr class="separator:gab354d6c2cc1a010de5f81a94d50adb66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga842ab6a90aecda5498232ad7dc5a3365"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga842ab6a90aecda5498232ad7dc5a3365">svn_cstring_count_newlines</a> (const char *msg)</td></tr>
<tr class="memdesc:ga842ab6a90aecda5498232ad7dc5a3365"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of line breaks in <em>msg</em>, allowing any kind of newline termination (CR, LF, CRLF, or LFCR), even inconsistent.  <a href="group__svn__string__cstrings.html#ga842ab6a90aecda5498232ad7dc5a3365">More...</a><br/></td></tr>
<tr class="separator:ga842ab6a90aecda5498232ad7dc5a3365"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6173f7c6f546c0ebfcdc900b10f22f3"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#gac6173f7c6f546c0ebfcdc900b10f22f3">svn_cstring_join</a> (const apr_array_header_t *strings, const char *separator, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gac6173f7c6f546c0ebfcdc900b10f22f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a cstring which is the concatenation of <em>strings</em> (an array of char *) each followed by <em>separator</em> (that is, <em>separator</em> will also end the resulting string).  <a href="group__svn__string__cstrings.html#gac6173f7c6f546c0ebfcdc900b10f22f3">More...</a><br/></td></tr>
<tr class="separator:gac6173f7c6f546c0ebfcdc900b10f22f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga33a5b549150b10cc9dae66e96062f077"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga33a5b549150b10cc9dae66e96062f077">svn_cstring_casecmp</a> (const char *str1, const char *str2)</td></tr>
<tr class="memdesc:ga33a5b549150b10cc9dae66e96062f077"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare two strings <em>atr1</em> and <em>atr2</em>, treating case-equivalent unaccented Latin (ASCII subset) letters as equal.  <a href="group__svn__string__cstrings.html#ga33a5b549150b10cc9dae66e96062f077">More...</a><br/></td></tr>
<tr class="separator:ga33a5b549150b10cc9dae66e96062f077"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga18761d57b6ad71f09a7a5680f5dd83e7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga18761d57b6ad71f09a7a5680f5dd83e7">svn_cstring_strtoi64</a> (apr_int64_t *n, const char *str, apr_int64_t minval, apr_int64_t maxval, int base)</td></tr>
<tr class="memdesc:ga18761d57b6ad71f09a7a5680f5dd83e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the C string <em>str</em> into a 64 bit number, and return it in <em>*n</em>.  <a href="group__svn__string__cstrings.html#ga18761d57b6ad71f09a7a5680f5dd83e7">More...</a><br/></td></tr>
<tr class="separator:ga18761d57b6ad71f09a7a5680f5dd83e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga79b3d8a797aa0e73ffce52a883d0104e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga79b3d8a797aa0e73ffce52a883d0104e">svn_cstring_atoi64</a> (apr_int64_t *n, const char *str)</td></tr>
<tr class="memdesc:ga79b3d8a797aa0e73ffce52a883d0104e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the C string <em>str</em> into a 64 bit number, and return it in <em>*n</em>.  <a href="group__svn__string__cstrings.html#ga79b3d8a797aa0e73ffce52a883d0104e">More...</a><br/></td></tr>
<tr class="separator:ga79b3d8a797aa0e73ffce52a883d0104e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac55643ce692cdc83320b7ad27efb6452"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#gac55643ce692cdc83320b7ad27efb6452">svn_cstring_atoi</a> (int *n, const char *str)</td></tr>
<tr class="memdesc:gac55643ce692cdc83320b7ad27efb6452"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the C string <em>str</em> into a 32 bit number, and return it in <em>*n</em>.  <a href="group__svn__string__cstrings.html#gac55643ce692cdc83320b7ad27efb6452">More...</a><br/></td></tr>
<tr class="separator:gac55643ce692cdc83320b7ad27efb6452"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac69778af4590bde974c4565aa9395584"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#gac69778af4590bde974c4565aa9395584">svn_cstring_strtoui64</a> (apr_uint64_t *n, const char *str, apr_uint64_t minval, apr_uint64_t maxval, int base)</td></tr>
<tr class="memdesc:gac69778af4590bde974c4565aa9395584"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the C string <em>str</em> into an unsigned 64 bit number, and return it in <em>*n</em>.  <a href="group__svn__string__cstrings.html#gac69778af4590bde974c4565aa9395584">More...</a><br/></td></tr>
<tr class="separator:gac69778af4590bde974c4565aa9395584"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0426301ec4069a4594bd53d5cb6614d6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga0426301ec4069a4594bd53d5cb6614d6">svn_cstring_atoui64</a> (apr_uint64_t *n, const char *str)</td></tr>
<tr class="memdesc:ga0426301ec4069a4594bd53d5cb6614d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the C string <em>str</em> into an unsigned 64 bit number, and return it in <em>*n</em>.  <a href="group__svn__string__cstrings.html#ga0426301ec4069a4594bd53d5cb6614d6">More...</a><br/></td></tr>
<tr class="separator:ga0426301ec4069a4594bd53d5cb6614d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e99e6c6b2eebd930231c987ecae9966"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga3e99e6c6b2eebd930231c987ecae9966">svn_cstring_atoui</a> (unsigned int *n, const char *str)</td></tr>
<tr class="memdesc:ga3e99e6c6b2eebd930231c987ecae9966"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the C string <em>str</em> into an unsigned 32 bit number, and return it in <em>*n</em>.  <a href="group__svn__string__cstrings.html#ga3e99e6c6b2eebd930231c987ecae9966">More...</a><br/></td></tr>
<tr class="separator:ga3e99e6c6b2eebd930231c987ecae9966"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacae9f85cc771e773bc45ffbb5577f259"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#gacae9f85cc771e773bc45ffbb5577f259">svn_cstring_skip_prefix</a> (const char *str, const char *prefix)</td></tr>
<tr class="memdesc:gacae9f85cc771e773bc45ffbb5577f259"><td class="mdescLeft">&#160;</td><td class="mdescRight">Skip the common prefix <em>prefix</em> from the C string <em>str</em>, and return a pointer to the next character after the prefix.  <a href="group__svn__string__cstrings.html#gacae9f85cc771e773bc45ffbb5577f259">More...</a><br/></td></tr>
<tr class="separator:gacae9f85cc771e773bc45ffbb5577f259"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Counted-length strings for Subversion, plus some C string goodies. </p>
<p>There are two string datatypes: <code><a class="el" href="structsvn__string__t.html" title="A simple counted string. ">svn_string_t</a></code> and <code><a class="el" href="structsvn__stringbuf__t.html" title="A buffered string, capable of appending without an allocation and copy for each append. ">svn_stringbuf_t</a></code>. The former is a simple pointer/length pair useful for passing around strings (or arbitrary bytes) with a counted length. <code><a class="el" href="structsvn__stringbuf__t.html" title="A buffered string, capable of appending without an allocation and copy for each append. ">svn_stringbuf_t</a></code> is buffered to enable efficient appending of strings without an allocation and copy for each append operation.</p>
<p><code><a class="el" href="structsvn__string__t.html" title="A simple counted string. ">svn_string_t</a></code> contains a <code>const char *</code> for its data, so it is most appropriate for constant data and for functions which expect constant, counted data. Functions should generally use <code>const <code><a class="el" href="structsvn__string__t.html" title="A simple counted string. ">svn_string_t</a></code> *</code> as their parameter to indicate they are expecting a constant, counted string.</p>
<p><code><a class="el" href="structsvn__stringbuf__t.html" title="A buffered string, capable of appending without an allocation and copy for each append. ">svn_stringbuf_t</a></code> uses a plain <code>char *</code> for its data, so it is most appropriate for modifiable data.</p>
<h3>Invariants</h3>
<ol type="1">
<li><p class="startli">Null termination:</p>
<p class="startli">Both structures maintain a significant invariant:</p>
<p class="startli"><code>s-&gt;data[s-&gt;len] == '\0'</code></p>
<p class="startli">The functions defined within this header file will maintain the invariant (which does imply that memory is allocated/defined as <code>len+1</code> bytes). If code outside of the <code><a class="el" href="svn__string_8h.html" title="Counted-length strings for Subversion, plus some C string goodies. ">svn_string.h</a></code> functions manually builds these structures, then they must enforce this invariant.</p>
<p class="startli">Note that an <code>svn_string(buf)_t</code> may contain binary data, which means that strlen(s-&gt;data) does not have to equal <code>s-&gt;len</code>. The null terminator is provided to make it easier to pass <code>s-&gt;data</code> to C string interfaces.</p>
</li>
<li><p class="startli">Non-NULL input:</p>
<p class="startli">All the functions assume their input data pointer is non-NULL, unless otherwise documented, and may seg fault if passed NULL. The input data may <em>contain</em> null bytes, of course, just the data pointer itself must not be NULL.</p>
</li>
</ol>
<h3>Memory allocation</h3>
<p>All the functions make a deep copy of all input data, and never store a pointer to the original input data. </p>

<p>Definition in file <a class="el" href="svn__string_8h_source.html">svn_string.h</a>.</p>
</div></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 19 2015 09:17:26 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
