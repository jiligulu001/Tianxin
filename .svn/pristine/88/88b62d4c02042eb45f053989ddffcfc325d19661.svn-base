<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Subversion: svn_types.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_c37f7789c49aa9e5999234152b1ef6ed.html">subversion</a></li><li class="navelem"><a class="el" href="dir_334478eea8dba5ae935f94af9469978f.html">include</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">svn_types.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Subversion's data types.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &lt;stdlib.h&gt;</code><br/>
<code>#include &lt;limits.h&gt;</code><br/>
<code>#include &lt;apr.h&gt;</code><br/>
<code>#include &lt;apr_errno.h&gt;</code><br/>
<code>#include &lt;apr_pools.h&gt;</code><br/>
<code>#include &lt;apr_hash.h&gt;</code><br/>
<code>#include &lt;apr_tables.h&gt;</code><br/>
<code>#include &lt;apr_time.h&gt;</code><br/>
<code>#include &lt;apr_strings.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="svn__error_8h_source.html">svn_error.h</a>&quot;</code><br/>
</div>
<p><a href="svn__types_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__error__t.html">svn_error_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subversion error object.  <a href="structsvn__error__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__dirent__t.html">svn_dirent_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A general subversion directory entry.  <a href="structsvn__dirent__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__commit__info__t.html">svn_commit_info_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">All information about a commit.  <a href="structsvn__commit__info__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__log__changed__path2__t.html">svn_log_changed_path2_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A structure to represent a path that changed for a log entry.  <a href="structsvn__log__changed__path2__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__log__changed__path__t.html">svn_log_changed_path_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A structure to represent a path that changed for a log entry.  <a href="structsvn__log__changed__path__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__log__entry__t.html">svn_log_entry_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A structure to represent all the information about a particular log entry.  <a href="structsvn__log__entry__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__lock__t.html">svn_lock_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A lock object, for client &amp; server to share.  <a href="structsvn__lock__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__merge__range__t.html">svn_merge_range_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mergeinfo representing a merge of a range of revisions.  <a href="structsvn__merge__range__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__location__segment__t.html">svn_location_segment_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A representation of a segment of an object's version history with an emphasis on the object's location in the repository as of various revisions.  <a href="structsvn__location__segment__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:aeced35b9b096eb3eb6f3d1af3e685aa1"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1">SVN_DEPRECATED</a></td></tr>
<tr class="memdesc:aeced35b9b096eb3eb6f3d1af3e685aa1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Macro used to mark deprecated functions.  <a href="#aeced35b9b096eb3eb6f3d1af3e685aa1">More...</a><br/></td></tr>
<tr class="separator:aeced35b9b096eb3eb6f3d1af3e685aa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe6e166ca2705cbb90f8229ec41acf0a"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#abe6e166ca2705cbb90f8229ec41acf0a">SVN_UNALIGNED_ACCESS_IS_OK</a>&#160;&#160;&#160;0</td></tr>
<tr class="memdesc:abe6e166ca2705cbb90f8229ec41acf0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicate whether the current platform supports unaligned data access.  <a href="#abe6e166ca2705cbb90f8229ec41acf0a">More...</a><br/></td></tr>
<tr class="separator:abe6e166ca2705cbb90f8229ec41acf0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8cecfc5c5c054d2875c03e77b7be15d"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#aa8cecfc5c5c054d2875c03e77b7be15d">TRUE</a>&#160;&#160;&#160;1</td></tr>
<tr class="memdesc:aa8cecfc5c5c054d2875c03e77b7be15d"><td class="mdescLeft">&#160;</td><td class="mdescRight">uhh...  <a href="#aa8cecfc5c5c054d2875c03e77b7be15d">More...</a><br/></td></tr>
<tr class="separator:aa8cecfc5c5c054d2875c03e77b7be15d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa93f0eb578d23995850d61f7d61c55c1"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#aa93f0eb578d23995850d61f7d61c55c1">FALSE</a>&#160;&#160;&#160;0</td></tr>
<tr class="memdesc:aa93f0eb578d23995850d61f7d61c55c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">uhh...  <a href="#aa93f0eb578d23995850d61f7d61c55c1">More...</a><br/></td></tr>
<tr class="separator:aa93f0eb578d23995850d61f7d61c55c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga84066caaa4c7632671af18c229809fc4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga84066caaa4c7632671af18c229809fc4"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__APR__ARRAY__compat__macros.html#ga84066caaa4c7632671af18c229809fc4">APR_ARRAY_IDX</a>(ary, i, type)&#160;&#160;&#160;(((type *)(ary)-&gt;elts)[i])</td></tr>
<tr class="memdesc:ga84066caaa4c7632671af18c229809fc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">index into an apr_array_header_t <br/></td></tr>
<tr class="separator:ga84066caaa4c7632671af18c229809fc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1833b0f940ec03d0b95926812152e1ca"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga1833b0f940ec03d0b95926812152e1ca"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__APR__ARRAY__compat__macros.html#ga1833b0f940ec03d0b95926812152e1ca">APR_ARRAY_PUSH</a>(ary, type)&#160;&#160;&#160;(*((type *)apr_array_push(ary)))</td></tr>
<tr class="memdesc:ga1833b0f940ec03d0b95926812152e1ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">easier array-pushing syntax <br/></td></tr>
<tr class="separator:ga1833b0f940ec03d0b95926812152e1ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bbb6c247a5eca01e1e264e4c2e6319c"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a2bbb6c247a5eca01e1e264e4c2e6319c">SVN__APR_STATUS_IS_ENOTDIR</a>(s)&#160;&#160;&#160;APR_STATUS_IS_ENOTDIR(s)</td></tr>
<tr class="memdesc:a2bbb6c247a5eca01e1e264e4c2e6319c"><td class="mdescLeft">&#160;</td><td class="mdescRight">On Windows, APR_STATUS_IS_ENOTDIR includes several kinds of invalid-pathname error but not ERROR_INVALID_NAME, so we include it.  <a href="#a2bbb6c247a5eca01e1e264e4c2e6319c">More...</a><br/></td></tr>
<tr class="separator:a2bbb6c247a5eca01e1e264e4c2e6319c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11b6b7739842c45a896dca439edf5d3d"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a11b6b7739842c45a896dca439edf5d3d">SVN__APR_STATUS_IS_EPIPE</a>(s)&#160;&#160;&#160;APR_STATUS_IS_EPIPE(s)</td></tr>
<tr class="memdesc:a11b6b7739842c45a896dca439edf5d3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">On Windows, APR_STATUS_IS_EPIPE does not include ERROR_NO_DATA error.  <a href="#a11b6b7739842c45a896dca439edf5d3d">More...</a><br/></td></tr>
<tr class="separator:a11b6b7739842c45a896dca439edf5d3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07208246e0c138a99f2bc0a8f50ea1e1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a07208246e0c138a99f2bc0a8f50ea1e1"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a07208246e0c138a99f2bc0a8f50ea1e1">SVN_IS_VALID_REVNUM</a>(n)&#160;&#160;&#160;((n) &gt;= 0)</td></tr>
<tr class="memdesc:a07208246e0c138a99f2bc0a8f50ea1e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Valid revision numbers begin at 0. <br/></td></tr>
<tr class="separator:a07208246e0c138a99f2bc0a8f50ea1e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8857d4630bf116eaba54a1b65d43ad92"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8857d4630bf116eaba54a1b65d43ad92"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a8857d4630bf116eaba54a1b65d43ad92">SVN_INVALID_REVNUM</a>&#160;&#160;&#160;((<a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>) -1)</td></tr>
<tr class="memdesc:a8857d4630bf116eaba54a1b65d43ad92"><td class="mdescLeft">&#160;</td><td class="mdescRight">The 'official' invalid revision num. <br/></td></tr>
<tr class="separator:a8857d4630bf116eaba54a1b65d43ad92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4510a289ee3537201a463aa5d7fc5891"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4510a289ee3537201a463aa5d7fc5891"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a4510a289ee3537201a463aa5d7fc5891">SVN_IGNORED_REVNUM</a>&#160;&#160;&#160;((<a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>) -1)</td></tr>
<tr class="memdesc:a4510a289ee3537201a463aa5d7fc5891"><td class="mdescLeft">&#160;</td><td class="mdescRight">Not really invalid...just unimportant &ndash; one day, this can be its own unique value, for now, just make it the same as <a class="el" href="svn__types_8h.html#a8857d4630bf116eaba54a1b65d43ad92" title="The &#39;official&#39; invalid revision num. ">SVN_INVALID_REVNUM</a>. <br/></td></tr>
<tr class="separator:a4510a289ee3537201a463aa5d7fc5891"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57b4828e19737ceb8f42676dcbe41895"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a57b4828e19737ceb8f42676dcbe41895">SVN_STR_TO_REV</a>(str)&#160;&#160;&#160;((<a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>) atol(str))</td></tr>
<tr class="memdesc:a57b4828e19737ceb8f42676dcbe41895"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert NULL-terminated C string <em>str</em> to a revision number.  <a href="#a57b4828e19737ceb8f42676dcbe41895">More...</a><br/></td></tr>
<tr class="separator:a57b4828e19737ceb8f42676dcbe41895"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a417741eb1f9b222dae237f6942a4b2f0"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a417741eb1f9b222dae237f6942a4b2f0">SVN_REVNUM_T_FMT</a>&#160;&#160;&#160;&quot;ld&quot;</td></tr>
<tr class="memdesc:a417741eb1f9b222dae237f6942a4b2f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Originally intended to be used in printf()-style functions to format revision numbers.  <a href="#a417741eb1f9b222dae237f6942a4b2f0">More...</a><br/></td></tr>
<tr class="separator:a417741eb1f9b222dae237f6942a4b2f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76973f4441098df9caf39ef911e5d9a6"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a76973f4441098df9caf39ef911e5d9a6">SVN_INVALID_FILESIZE</a>&#160;&#160;&#160;((<a class="el" href="svn__types_8h.html#a726e581898461c1d3e7dbdb16d99dad0">svn_filesize_t</a>) -1)</td></tr>
<tr class="memdesc:a76973f4441098df9caf39ef911e5d9a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">The 'official' invalid file size constant.  <a href="#a76973f4441098df9caf39ef911e5d9a6">More...</a><br/></td></tr>
<tr class="separator:a76973f4441098df9caf39ef911e5d9a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a517ca03658c247969d81c31b122c7f04"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a517ca03658c247969d81c31b122c7f04">SVN_FILESIZE_T_FMT</a>&#160;&#160;&#160;APR_INT64_T_FMT</td></tr>
<tr class="memdesc:a517ca03658c247969d81c31b122c7f04"><td class="mdescLeft">&#160;</td><td class="mdescRight">In printf()-style functions, format file sizes using this.  <a href="#a517ca03658c247969d81c31b122c7f04">More...</a><br/></td></tr>
<tr class="separator:a517ca03658c247969d81c31b122c7f04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23d085fee916b8bafb64846402279cda"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a23d085fee916b8bafb64846402279cda">SVN_DEPTH_INFINITY_OR_FILES</a>(recurse)&#160;&#160;&#160;((recurse) ? <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2">svn_depth_infinity</a> : <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345">svn_depth_files</a>)</td></tr>
<tr class="memdesc:a23d085fee916b8bafb64846402279cda"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a> if boolean <em>recurse</em> is TRUE, else return <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345" title="D + its file children, but not subdirs. ">svn_depth_files</a>.  <a href="#a23d085fee916b8bafb64846402279cda">More...</a><br/></td></tr>
<tr class="separator:a23d085fee916b8bafb64846402279cda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f9a75487457c6c8bb78195a0dc9eda0"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a6f9a75487457c6c8bb78195a0dc9eda0">SVN_DEPTH_INFINITY_OR_IMMEDIATES</a>(recurse)&#160;&#160;&#160;((recurse) ? <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2">svn_depth_infinity</a> : <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca68873e015456e384e4f63f3bbd515c8a">svn_depth_immediates</a>)</td></tr>
<tr class="memdesc:a6f9a75487457c6c8bb78195a0dc9eda0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a> if boolean <em>recurse</em> is TRUE, else return <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca68873e015456e384e4f63f3bbd515c8a" title="D + immediate children (D and its entries). ">svn_depth_immediates</a>.  <a href="#a6f9a75487457c6c8bb78195a0dc9eda0">More...</a><br/></td></tr>
<tr class="separator:a6f9a75487457c6c8bb78195a0dc9eda0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9916aa78f8e7f8b48ac2f600332e0084"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a9916aa78f8e7f8b48ac2f600332e0084">SVN_DEPTH_INFINITY_OR_EMPTY</a>(recurse)&#160;&#160;&#160;((recurse) ? <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2">svn_depth_infinity</a> : <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c">svn_depth_empty</a>)</td></tr>
<tr class="memdesc:a9916aa78f8e7f8b48ac2f600332e0084"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a> if boolean <em>recurse</em> is TRUE, else return <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries. ">svn_depth_empty</a>.  <a href="#a9916aa78f8e7f8b48ac2f600332e0084">More...</a><br/></td></tr>
<tr class="separator:a9916aa78f8e7f8b48ac2f600332e0084"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc17035f4973e8a72b6e4ce3108f8596"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#adc17035f4973e8a72b6e4ce3108f8596">SVN_DEPTH_IS_RECURSIVE</a>(depth)&#160;&#160;&#160;((depth) == <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2">svn_depth_infinity</a> || (depth) == <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2cacf4538edb8e8823b0b9cdeaaac245ebf">svn_depth_unknown</a>)</td></tr>
<tr class="memdesc:adc17035f4973e8a72b6e4ce3108f8596"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a recursion boolean based on <em>depth</em>.  <a href="#adc17035f4973e8a72b6e4ce3108f8596">More...</a><br/></td></tr>
<tr class="separator:adc17035f4973e8a72b6e4ce3108f8596"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga617319ee25a887d5667f2571cb8553db"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga617319ee25a887d5667f2571cb8553db"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__dirent__fields.html#ga617319ee25a887d5667f2571cb8553db">SVN_DIRENT_KIND</a>&#160;&#160;&#160;0x00001</td></tr>
<tr class="memdesc:ga617319ee25a887d5667f2571cb8553db"><td class="mdescLeft">&#160;</td><td class="mdescRight">An indication that you are interested in the <code>kind</code> field. <br/></td></tr>
<tr class="separator:ga617319ee25a887d5667f2571cb8553db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6944bb5148ac39ecb570794e98d0812e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga6944bb5148ac39ecb570794e98d0812e"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__dirent__fields.html#ga6944bb5148ac39ecb570794e98d0812e">SVN_DIRENT_SIZE</a>&#160;&#160;&#160;0x00002</td></tr>
<tr class="memdesc:ga6944bb5148ac39ecb570794e98d0812e"><td class="mdescLeft">&#160;</td><td class="mdescRight">An indication that you are interested in the <code>size</code> field. <br/></td></tr>
<tr class="separator:ga6944bb5148ac39ecb570794e98d0812e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8a3bfdb84276e7843b13e15a7ef8bbf8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga8a3bfdb84276e7843b13e15a7ef8bbf8"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__dirent__fields.html#ga8a3bfdb84276e7843b13e15a7ef8bbf8">SVN_DIRENT_HAS_PROPS</a>&#160;&#160;&#160;0x00004</td></tr>
<tr class="memdesc:ga8a3bfdb84276e7843b13e15a7ef8bbf8"><td class="mdescLeft">&#160;</td><td class="mdescRight">An indication that you are interested in the <code>has_props</code> field. <br/></td></tr>
<tr class="separator:ga8a3bfdb84276e7843b13e15a7ef8bbf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae3320c8875d30e0a7f68854ccbceb6cb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gae3320c8875d30e0a7f68854ccbceb6cb"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__dirent__fields.html#gae3320c8875d30e0a7f68854ccbceb6cb">SVN_DIRENT_CREATED_REV</a>&#160;&#160;&#160;0x00008</td></tr>
<tr class="memdesc:gae3320c8875d30e0a7f68854ccbceb6cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">An indication that you are interested in the <code>created_rev</code> field. <br/></td></tr>
<tr class="separator:gae3320c8875d30e0a7f68854ccbceb6cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f1704a0f0226b47845de93c7ba95e2e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga2f1704a0f0226b47845de93c7ba95e2e"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__dirent__fields.html#ga2f1704a0f0226b47845de93c7ba95e2e">SVN_DIRENT_TIME</a>&#160;&#160;&#160;0x00010</td></tr>
<tr class="memdesc:ga2f1704a0f0226b47845de93c7ba95e2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">An indication that you are interested in the <code>time</code> field. <br/></td></tr>
<tr class="separator:ga2f1704a0f0226b47845de93c7ba95e2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad83b72f76ee8842e264513d875b8817e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad83b72f76ee8842e264513d875b8817e"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__dirent__fields.html#gad83b72f76ee8842e264513d875b8817e">SVN_DIRENT_LAST_AUTHOR</a>&#160;&#160;&#160;0x00020</td></tr>
<tr class="memdesc:gad83b72f76ee8842e264513d875b8817e"><td class="mdescLeft">&#160;</td><td class="mdescRight">An indication that you are interested in the <code>last_author</code> field. <br/></td></tr>
<tr class="separator:gad83b72f76ee8842e264513d875b8817e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e9f81a60f25306e827b36ca701a362b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga1e9f81a60f25306e827b36ca701a362b"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__dirent__fields.html#ga1e9f81a60f25306e827b36ca701a362b">SVN_DIRENT_ALL</a>&#160;&#160;&#160;~((apr_uint32_t ) 0)</td></tr>
<tr class="memdesc:ga1e9f81a60f25306e827b36ca701a362b"><td class="mdescLeft">&#160;</td><td class="mdescRight">A combination of all the dirent fields. <br/></td></tr>
<tr class="separator:ga1e9f81a60f25306e827b36ca701a362b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6d0204590095ba187169e9dae3f6d056"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__types__keywords.html#ga6d0204590095ba187169e9dae3f6d056">SVN_KEYWORD_MAX_LEN</a>&#160;&#160;&#160;255</td></tr>
<tr class="memdesc:ga6d0204590095ba187169e9dae3f6d056"><td class="mdescLeft">&#160;</td><td class="mdescRight">The maximum size of an expanded or un-expanded keyword.  <a href="group__svn__types__keywords.html#ga6d0204590095ba187169e9dae3f6d056">More...</a><br/></td></tr>
<tr class="separator:ga6d0204590095ba187169e9dae3f6d056"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9d14196bb1942880198c635baaa75fb5"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__types__keywords.html#ga9d14196bb1942880198c635baaa75fb5">SVN_KEYWORD_REVISION_LONG</a>&#160;&#160;&#160;&quot;LastChangedRevision&quot;</td></tr>
<tr class="memdesc:ga9d14196bb1942880198c635baaa75fb5"><td class="mdescLeft">&#160;</td><td class="mdescRight">The most recent revision in which this file was changed.  <a href="group__svn__types__keywords.html#ga9d14196bb1942880198c635baaa75fb5">More...</a><br/></td></tr>
<tr class="separator:ga9d14196bb1942880198c635baaa75fb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2fbebb74417582f92785586d1cf37827"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga2fbebb74417582f92785586d1cf37827"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__types__keywords.html#ga2fbebb74417582f92785586d1cf37827">SVN_KEYWORD_REVISION_SHORT</a>&#160;&#160;&#160;&quot;Rev&quot;</td></tr>
<tr class="memdesc:ga2fbebb74417582f92785586d1cf37827"><td class="mdescLeft">&#160;</td><td class="mdescRight">Short version of LastChangedRevision. <br/></td></tr>
<tr class="separator:ga2fbebb74417582f92785586d1cf37827"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga00443428745d23430a7294ef7bf6242a"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__types__keywords.html#ga00443428745d23430a7294ef7bf6242a">SVN_KEYWORD_REVISION_MEDIUM</a>&#160;&#160;&#160;&quot;Revision&quot;</td></tr>
<tr class="memdesc:ga00443428745d23430a7294ef7bf6242a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Medium version of LastChangedRevision, matching the one CVS uses.  <a href="group__svn__types__keywords.html#ga00443428745d23430a7294ef7bf6242a">More...</a><br/></td></tr>
<tr class="separator:ga00443428745d23430a7294ef7bf6242a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8972728e286b05d1c4ab4cf4884ad9fe"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__types__keywords.html#ga8972728e286b05d1c4ab4cf4884ad9fe">SVN_KEYWORD_DATE_LONG</a>&#160;&#160;&#160;&quot;LastChangedDate&quot;</td></tr>
<tr class="memdesc:ga8972728e286b05d1c4ab4cf4884ad9fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">The most recent date (repository time) when this file was changed.  <a href="group__svn__types__keywords.html#ga8972728e286b05d1c4ab4cf4884ad9fe">More...</a><br/></td></tr>
<tr class="separator:ga8972728e286b05d1c4ab4cf4884ad9fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1b47ea815c517bb52e068057082fc1fc"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga1b47ea815c517bb52e068057082fc1fc"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__types__keywords.html#ga1b47ea815c517bb52e068057082fc1fc">SVN_KEYWORD_DATE_SHORT</a>&#160;&#160;&#160;&quot;Date&quot;</td></tr>
<tr class="memdesc:ga1b47ea815c517bb52e068057082fc1fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Short version of LastChangedDate. <br/></td></tr>
<tr class="separator:ga1b47ea815c517bb52e068057082fc1fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga29078f72cbb453fb1cde5b230e652ac0"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__types__keywords.html#ga29078f72cbb453fb1cde5b230e652ac0">SVN_KEYWORD_AUTHOR_LONG</a>&#160;&#160;&#160;&quot;LastChangedBy&quot;</td></tr>
<tr class="memdesc:ga29078f72cbb453fb1cde5b230e652ac0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Who most recently committed to this file.  <a href="group__svn__types__keywords.html#ga29078f72cbb453fb1cde5b230e652ac0">More...</a><br/></td></tr>
<tr class="separator:ga29078f72cbb453fb1cde5b230e652ac0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac08225901af5274e1f2d7e7fc9b75a13"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gac08225901af5274e1f2d7e7fc9b75a13"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__types__keywords.html#gac08225901af5274e1f2d7e7fc9b75a13">SVN_KEYWORD_AUTHOR_SHORT</a>&#160;&#160;&#160;&quot;Author&quot;</td></tr>
<tr class="memdesc:gac08225901af5274e1f2d7e7fc9b75a13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Short version of LastChangedBy. <br/></td></tr>
<tr class="separator:gac08225901af5274e1f2d7e7fc9b75a13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga15efae4c111a8e5d94f1864889fe6109"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__types__keywords.html#ga15efae4c111a8e5d94f1864889fe6109">SVN_KEYWORD_URL_LONG</a>&#160;&#160;&#160;&quot;HeadURL&quot;</td></tr>
<tr class="memdesc:ga15efae4c111a8e5d94f1864889fe6109"><td class="mdescLeft">&#160;</td><td class="mdescRight">The URL for the head revision of this file.  <a href="group__svn__types__keywords.html#ga15efae4c111a8e5d94f1864889fe6109">More...</a><br/></td></tr>
<tr class="separator:ga15efae4c111a8e5d94f1864889fe6109"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1ed6f805eb2584f21b14dc8033a9c645"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga1ed6f805eb2584f21b14dc8033a9c645"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__types__keywords.html#ga1ed6f805eb2584f21b14dc8033a9c645">SVN_KEYWORD_URL_SHORT</a>&#160;&#160;&#160;&quot;URL&quot;</td></tr>
<tr class="memdesc:ga1ed6f805eb2584f21b14dc8033a9c645"><td class="mdescLeft">&#160;</td><td class="mdescRight">Short version of HeadURL. <br/></td></tr>
<tr class="separator:ga1ed6f805eb2584f21b14dc8033a9c645"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac2dfa19a6720e26f3059a2eac22c4ec0"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__types__keywords.html#gac2dfa19a6720e26f3059a2eac22c4ec0">SVN_KEYWORD_ID</a>&#160;&#160;&#160;&quot;Id&quot;</td></tr>
<tr class="memdesc:gac2dfa19a6720e26f3059a2eac22c4ec0"><td class="mdescLeft">&#160;</td><td class="mdescRight">A compressed combination of the other four keywords.  <a href="group__svn__types__keywords.html#gac2dfa19a6720e26f3059a2eac22c4ec0">More...</a><br/></td></tr>
<tr class="separator:gac2dfa19a6720e26f3059a2eac22c4ec0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9e9d3e7d844cc27937661a8992e636be"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__types__keywords.html#ga9e9d3e7d844cc27937661a8992e636be">SVN_KEYWORD_HEADER</a>&#160;&#160;&#160;&quot;Header&quot;</td></tr>
<tr class="memdesc:ga9e9d3e7d844cc27937661a8992e636be"><td class="mdescLeft">&#160;</td><td class="mdescRight">A full combination of the first four keywords.  <a href="group__svn__types__keywords.html#ga9e9d3e7d844cc27937661a8992e636be">More...</a><br/></td></tr>
<tr class="separator:ga9e9d3e7d844cc27937661a8992e636be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ef9c8aee97e4efc781c5e12905bf532"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a4ef9c8aee97e4efc781c5e12905bf532">SVN_STREAM_CHUNK_SIZE</a>&#160;&#160;&#160;102400</td></tr>
<tr class="memdesc:a4ef9c8aee97e4efc781c5e12905bf532"><td class="mdescLeft">&#160;</td><td class="mdescRight">A buffer size that may be used when processing a stream of data.  <a href="#a4ef9c8aee97e4efc781c5e12905bf532">More...</a><br/></td></tr>
<tr class="separator:a4ef9c8aee97e4efc781c5e12905bf532"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44fa0aeb7aa519ebe9291b6298dc75cd"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a44fa0aeb7aa519ebe9291b6298dc75cd">SVN_MAX_OBJECT_SIZE</a>&#160;&#160;&#160;(((apr_size_t) -1) / 2)</td></tr>
<tr class="memdesc:a44fa0aeb7aa519ebe9291b6298dc75cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">The maximum amount we can ever hold in memory.  <a href="#a44fa0aeb7aa519ebe9291b6298dc75cd">More...</a><br/></td></tr>
<tr class="separator:a44fa0aeb7aa519ebe9291b6298dc75cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b895dc3fde904cf7553a04b45061491"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a7b895dc3fde904cf7553a04b45061491">SVN_LINENUM_MAX_VALUE</a>&#160;&#160;&#160;ULONG_MAX</td></tr>
<tr class="memdesc:a7b895dc3fde904cf7553a04b45061491"><td class="mdescLeft">&#160;</td><td class="mdescRight">The maximum value of an svn_linenum_t.  <a href="#a7b895dc3fde904cf7553a04b45061491">More...</a><br/></td></tr>
<tr class="separator:a7b895dc3fde904cf7553a04b45061491"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a22b35baddc4213c688d1bb12feea1024"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a22b35baddc4213c688d1bb12feea1024"></a>
typedef int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a></td></tr>
<tr class="memdesc:a22b35baddc4213c688d1bb12feea1024"><td class="mdescLeft">&#160;</td><td class="mdescRight">YABT: Yet Another Boolean Type. <br/></td></tr>
<tr class="separator:a22b35baddc4213c688d1bb12feea1024"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee5cf08f356d7506dcd929a7f2e51aa0"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structsvn__error__t.html">svn_error_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#aee5cf08f356d7506dcd929a7f2e51aa0">svn_error_t</a></td></tr>
<tr class="memdesc:aee5cf08f356d7506dcd929a7f2e51aa0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subversion error object.  <a href="#aee5cf08f356d7506dcd929a7f2e51aa0">More...</a><br/></td></tr>
<tr class="separator:aee5cf08f356d7506dcd929a7f2e51aa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb0072ccd39acae1ef70cb8a96e6422f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="adb0072ccd39acae1ef70cb8a96e6422f"></a>
typedef struct <a class="el" href="structsvn__version__t.html">svn_version_t</a>&#160;</td><td class="memItemRight" valign="bottom"><b>svn_version_t</b></td></tr>
<tr class="separator:adb0072ccd39acae1ef70cb8a96e6422f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3de517663a32716b59eabaf73c6b2bc"><td class="memItemLeft" align="right" valign="top">typedef enum <a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a">svn_node_kind_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#aa3de517663a32716b59eabaf73c6b2bc">svn_node_kind_t</a></td></tr>
<tr class="memdesc:aa3de517663a32716b59eabaf73c6b2bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">The various types of nodes in the Subversion filesystem.  <a href="#aa3de517663a32716b59eabaf73c6b2bc">More...</a><br/></td></tr>
<tr class="separator:aa3de517663a32716b59eabaf73c6b2bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f5fddf07f06d55e6b1fecb123c7ef7e"><td class="memItemLeft" align="right" valign="top">typedef enum <a class="el" href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5d">svn_tristate_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a3f5fddf07f06d55e6b1fecb123c7ef7e">svn_tristate_t</a></td></tr>
<tr class="memdesc:a3f5fddf07f06d55e6b1fecb123c7ef7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic three-state property to represent an unknown value for values that are just like booleans.  <a href="#a3f5fddf07f06d55e6b1fecb123c7ef7e">More...</a><br/></td></tr>
<tr class="separator:a3f5fddf07f06d55e6b1fecb123c7ef7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af16427ed53d30f27da225c56552d2a89"><td class="memItemLeft" align="right" valign="top">typedef long int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a></td></tr>
<tr class="memdesc:af16427ed53d30f27da225c56552d2a89"><td class="mdescLeft">&#160;</td><td class="mdescRight">About Special Files in Subversion.  <a href="#af16427ed53d30f27da225c56552d2a89">More...</a><br/></td></tr>
<tr class="separator:af16427ed53d30f27da225c56552d2a89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a726e581898461c1d3e7dbdb16d99dad0"><td class="memItemLeft" align="right" valign="top">typedef apr_int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a726e581898461c1d3e7dbdb16d99dad0">svn_filesize_t</a></td></tr>
<tr class="memdesc:a726e581898461c1d3e7dbdb16d99dad0"><td class="mdescLeft">&#160;</td><td class="mdescRight">The size of a file in the Subversion FS.  <a href="#a726e581898461c1d3e7dbdb16d99dad0">More...</a><br/></td></tr>
<tr class="separator:a726e581898461c1d3e7dbdb16d99dad0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2a8b1d2477ddabbd337d7f35e113743"><td class="memItemLeft" align="right" valign="top">typedef enum <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#ae2a8b1d2477ddabbd337d7f35e113743">svn_depth_t</a></td></tr>
<tr class="memdesc:ae2a8b1d2477ddabbd337d7f35e113743"><td class="mdescLeft">&#160;</td><td class="mdescRight">The concept of depth for directories.  <a href="#ae2a8b1d2477ddabbd337d7f35e113743">More...</a><br/></td></tr>
<tr class="separator:ae2a8b1d2477ddabbd337d7f35e113743"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ec890938a69ab815e98a74d95b168fa"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structsvn__dirent__t.html">svn_dirent_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a6ec890938a69ab815e98a74d95b168fa">svn_dirent_t</a></td></tr>
<tr class="memdesc:a6ec890938a69ab815e98a74d95b168fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">A general subversion directory entry.  <a href="#a6ec890938a69ab815e98a74d95b168fa">More...</a><br/></td></tr>
<tr class="separator:a6ec890938a69ab815e98a74d95b168fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab44a1742c0d92043fd142d947ba2f547"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structsvn__commit__info__t.html">svn_commit_info_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#ab44a1742c0d92043fd142d947ba2f547">svn_commit_info_t</a></td></tr>
<tr class="memdesc:ab44a1742c0d92043fd142d947ba2f547"><td class="mdescLeft">&#160;</td><td class="mdescRight">All information about a commit.  <a href="#ab44a1742c0d92043fd142d947ba2f547">More...</a><br/></td></tr>
<tr class="separator:ab44a1742c0d92043fd142d947ba2f547"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03bd84e6a97e2448151e761d0e2cd6e0"><td class="memItemLeft" align="right" valign="top">typedef struct <br class="typebreak"/>
<a class="el" href="structsvn__log__changed__path2__t.html">svn_log_changed_path2_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a03bd84e6a97e2448151e761d0e2cd6e0">svn_log_changed_path2_t</a></td></tr>
<tr class="memdesc:a03bd84e6a97e2448151e761d0e2cd6e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">A structure to represent a path that changed for a log entry.  <a href="#a03bd84e6a97e2448151e761d0e2cd6e0">More...</a><br/></td></tr>
<tr class="separator:a03bd84e6a97e2448151e761d0e2cd6e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a224189fd5fe666377d8ee12bb3d5979a"><td class="memItemLeft" align="right" valign="top">typedef struct <br class="typebreak"/>
<a class="el" href="structsvn__log__changed__path__t.html">svn_log_changed_path_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a224189fd5fe666377d8ee12bb3d5979a">svn_log_changed_path_t</a></td></tr>
<tr class="memdesc:a224189fd5fe666377d8ee12bb3d5979a"><td class="mdescLeft">&#160;</td><td class="mdescRight">A structure to represent a path that changed for a log entry.  <a href="#a224189fd5fe666377d8ee12bb3d5979a">More...</a><br/></td></tr>
<tr class="separator:a224189fd5fe666377d8ee12bb3d5979a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a87a80a5f3116a3b24028f3d7d1b3f4"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structsvn__log__entry__t.html">svn_log_entry_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a8a87a80a5f3116a3b24028f3d7d1b3f4">svn_log_entry_t</a></td></tr>
<tr class="memdesc:a8a87a80a5f3116a3b24028f3d7d1b3f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">A structure to represent all the information about a particular log entry.  <a href="#a8a87a80a5f3116a3b24028f3d7d1b3f4">More...</a><br/></td></tr>
<tr class="separator:a8a87a80a5f3116a3b24028f3d7d1b3f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb30054d6301afbcd8b00d8dc11d7ddb"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#afb30054d6301afbcd8b00d8dc11d7ddb">svn_log_entry_receiver_t</a> )(void *baton, <a class="el" href="structsvn__log__entry__t.html">svn_log_entry_t</a> *log_entry, apr_pool_t *pool)</td></tr>
<tr class="memdesc:afb30054d6301afbcd8b00d8dc11d7ddb"><td class="mdescLeft">&#160;</td><td class="mdescRight">The callback invoked by log message loopers, such as <a class="el" href="structsvn__ra__plugin__t.html#a7d7ba051d42dc9b6d9b29327c21380aa" title="Call svn_ra_get_log() with the session associated with session_baton and all other arguments...">svn_ra_plugin_t.get_log()</a> and <a class="el" href="svn__repos_8h.html#a55be2364d9b275c79781ce92384029c9" title="Same as svn_repos_get_logs2(), but with authz_read_func and authz_read_baton always set to NULL...">svn_repos_get_logs()</a>.  <a href="#afb30054d6301afbcd8b00d8dc11d7ddb">More...</a><br/></td></tr>
<tr class="separator:afb30054d6301afbcd8b00d8dc11d7ddb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6aa9147b67a7778294a52399de5c0b33"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a6aa9147b67a7778294a52399de5c0b33">svn_log_message_receiver_t</a> )(void *baton, apr_hash_t *changed_paths, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, const char *author, const char *date, const char *message, apr_pool_t *pool)</td></tr>
<tr class="memdesc:a6aa9147b67a7778294a52399de5c0b33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__types_8h.html#afb30054d6301afbcd8b00d8dc11d7ddb" title="The callback invoked by log message loopers, such as svn_ra_plugin_t.get_log() and svn_repos_get_logs...">svn_log_entry_receiver_t</a>, except this uses separate parameters for each part of the log entry.  <a href="#a6aa9147b67a7778294a52399de5c0b33">More...</a><br/></td></tr>
<tr class="separator:a6aa9147b67a7778294a52399de5c0b33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5aca95325ba984f70a316d7d9966e1df"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a5aca95325ba984f70a316d7d9966e1df">svn_commit_callback2_t</a> )(const <a class="el" href="structsvn__commit__info__t.html">svn_commit_info_t</a> *commit_info, void *baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:a5aca95325ba984f70a316d7d9966e1df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Callback function type for commits.  <a href="#a5aca95325ba984f70a316d7d9966e1df">More...</a><br/></td></tr>
<tr class="separator:a5aca95325ba984f70a316d7d9966e1df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc95cfed422bd097099537e4bde98d6d"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#abc95cfed422bd097099537e4bde98d6d">svn_commit_callback_t</a> )(<a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> new_revision, const char *date, const char *author, void *baton)</td></tr>
<tr class="memdesc:abc95cfed422bd097099537e4bde98d6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="svn__types_8h.html#a5aca95325ba984f70a316d7d9966e1df" title="Callback function type for commits. ">svn_commit_callback2_t</a>, but uses individual data elements instead of the <a class="el" href="structsvn__commit__info__t.html" title="All information about a commit. ">svn_commit_info_t</a> structure.  <a href="#abc95cfed422bd097099537e4bde98d6d">More...</a><br/></td></tr>
<tr class="separator:abc95cfed422bd097099537e4bde98d6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addaab83431a3d41b6c62e9d501cd5ecc"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> )(void *cancel_baton)</td></tr>
<tr class="memdesc:addaab83431a3d41b6c62e9d501cd5ecc"><td class="mdescLeft">&#160;</td><td class="mdescRight">A user defined callback that subversion will call with a user defined baton to see if the current operation should be continued.  <a href="#addaab83431a3d41b6c62e9d501cd5ecc">More...</a><br/></td></tr>
<tr class="separator:addaab83431a3d41b6c62e9d501cd5ecc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a442599fe7984d28ee04c64761b5c11d1"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structsvn__lock__t.html">svn_lock_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a442599fe7984d28ee04c64761b5c11d1">svn_lock_t</a></td></tr>
<tr class="memdesc:a442599fe7984d28ee04c64761b5c11d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">A lock object, for client &amp; server to share.  <a href="#a442599fe7984d28ee04c64761b5c11d1">More...</a><br/></td></tr>
<tr class="separator:a442599fe7984d28ee04c64761b5c11d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af400b9a21725f29d78bfcfa9d237652d"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structsvn__merge__range__t.html">svn_merge_range_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#af400b9a21725f29d78bfcfa9d237652d">svn_merge_range_t</a></td></tr>
<tr class="memdesc:af400b9a21725f29d78bfcfa9d237652d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mergeinfo representing a merge of a range of revisions.  <a href="#af400b9a21725f29d78bfcfa9d237652d">More...</a><br/></td></tr>
<tr class="separator:af400b9a21725f29d78bfcfa9d237652d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2a2e5e829b6321053bf6c990abd5d8db"><td class="memItemLeft" align="right" valign="top">typedef struct <br class="typebreak"/>
<a class="el" href="structsvn__location__segment__t.html">svn_location_segment_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__node__location__seg__reporting.html#ga2a2e5e829b6321053bf6c990abd5d8db">svn_location_segment_t</a></td></tr>
<tr class="memdesc:ga2a2e5e829b6321053bf6c990abd5d8db"><td class="mdescLeft">&#160;</td><td class="mdescRight">A representation of a segment of an object's version history with an emphasis on the object's location in the repository as of various revisions.  <a href="group__node__location__seg__reporting.html#ga2a2e5e829b6321053bf6c990abd5d8db">More...</a><br/></td></tr>
<tr class="separator:ga2a2e5e829b6321053bf6c990abd5d8db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacd495df85498f9d4aedf4f2c26d5b46d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gacd495df85498f9d4aedf4f2c26d5b46d"></a>
typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__node__location__seg__reporting.html#gacd495df85498f9d4aedf4f2c26d5b46d">svn_location_segment_receiver_t</a> )(<a class="el" href="structsvn__location__segment__t.html">svn_location_segment_t</a> *segment, void *baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gacd495df85498f9d4aedf4f2c26d5b46d"><td class="mdescLeft">&#160;</td><td class="mdescRight">A callback invoked by generators of <a class="el" href="structsvn__location__segment__t.html" title="A representation of a segment of an object&#39;s version history with an emphasis on the object&#39;s locatio...">svn_location_segment_t</a> objects, used to report information about a versioned object's history in terms of its location in the repository filesystem over time. <br/></td></tr>
<tr class="separator:gacd495df85498f9d4aedf4f2c26d5b46d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd2fa076b4ade5dbe9309966043f3bf8"><td class="memItemLeft" align="right" valign="top">typedef unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#acd2fa076b4ade5dbe9309966043f3bf8">svn_linenum_t</a></td></tr>
<tr class="memdesc:acd2fa076b4ade5dbe9309966043f3bf8"><td class="mdescLeft">&#160;</td><td class="mdescRight">A line number, such as in a file or a stream.  <a href="#acd2fa076b4ade5dbe9309966043f3bf8">More...</a><br/></td></tr>
<tr class="separator:acd2fa076b4ade5dbe9309966043f3bf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:ac3ca125707a8ca1289c73236b5ce7f9a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a">svn_node_kind_t</a> { <br/>
&#160;&#160;<a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9aae4066898ada99c4a3bc94e80aabe78b5">svn_node_none</a>, 
<br/>
&#160;&#160;<a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9aaa95e604c61f68662a3baed477db64083">svn_node_file</a>, 
<br/>
&#160;&#160;<a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9aaba05e448cccf503e25be6506d7bf9a5b">svn_node_dir</a>, 
<br/>
&#160;&#160;<a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9aa8fa9327ee73e41216ad586867fea4b94">svn_node_unknown</a>, 
<br/>
&#160;&#160;<a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9aa0b9a7eb2f3ac9ed565874a083f136a62">svn_node_symlink</a>
<br/>
 }</td></tr>
<tr class="memdesc:ac3ca125707a8ca1289c73236b5ce7f9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">The various types of nodes in the Subversion filesystem.  <a href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a">More...</a><br/></td></tr>
<tr class="separator:ac3ca125707a8ca1289c73236b5ce7f9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a833b517afeac9ae9b345e47e0d85ea5d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5d">svn_tristate_t</a> { <br/>
&#160;&#160;<a class="el" href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5daf93ff7e8df3d4891ffbbed9e6c5cbb88">svn_tristate_false</a> = 2, 
<br/>
&#160;&#160;<a class="el" href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5dab561d3a1193424ef74ff1813e4fe9e82">svn_tristate_true</a>, 
<br/>
&#160;&#160;<a class="el" href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5da4f52e9ee42abbd7a4d40ee8eef23cdf2">svn_tristate_unknown</a>
<br/>
 }</td></tr>
<tr class="memdesc:a833b517afeac9ae9b345e47e0d85ea5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic three-state property to represent an unknown value for values that are just like booleans.  <a href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5d">More...</a><br/></td></tr>
<tr class="separator:a833b517afeac9ae9b345e47e0d85ea5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af81db79c4e4bbc2304dd95957bc9a905"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#af81db79c4e4bbc2304dd95957bc9a905">svn_recurse_kind</a> { <br/>
&#160;&#160;<b>svn_nonrecursive</b> = 1, 
<br/>
&#160;&#160;<b>svn_recursive</b>
<br/>
 }</td></tr>
<tr class="memdesc:af81db79c4e4bbc2304dd95957bc9a905"><td class="mdescLeft">&#160;</td><td class="mdescRight">An enum to indicate whether recursion is needed.  <a href="svn__types_8h.html#af81db79c4e4bbc2304dd95957bc9a905">More...</a><br/></td></tr>
<tr class="separator:af81db79c4e4bbc2304dd95957bc9a905"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21dd8b080111fa6fb5d59156299f3a2c"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> { <br/>
&#160;&#160;<a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2cacf4538edb8e8823b0b9cdeaaac245ebf">svn_depth_unknown</a> = -2, 
<br/>
&#160;&#160;<a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca1bc611e0caf428575d07287adca72603">svn_depth_exclude</a> = -1, 
<br/>
&#160;&#160;<a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c">svn_depth_empty</a> = 0, 
<br/>
&#160;&#160;<a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345">svn_depth_files</a> = 1, 
<br/>
&#160;&#160;<a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca68873e015456e384e4f63f3bbd515c8a">svn_depth_immediates</a> = 2, 
<br/>
&#160;&#160;<a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2">svn_depth_infinity</a> = 3
<br/>
 }</td></tr>
<tr class="memdesc:a21dd8b080111fa6fb5d59156299f3a2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">The concept of depth for directories.  <a href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">More...</a><br/></td></tr>
<tr class="separator:a21dd8b080111fa6fb5d59156299f3a2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga728a256d97b3f3c119be4e5be4de7ca8"><td class="memItemLeft" align="right" valign="top">const void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__hash__utilities.html#ga728a256d97b3f3c119be4e5be4de7ca8">svn__apr_hash_index_key</a> (const apr_hash_index_t *hi)</td></tr>
<tr class="memdesc:ga728a256d97b3f3c119be4e5be4de7ca8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the key of the hash table entry indexed by <em>hi</em>.  <a href="group__apr__hash__utilities.html#ga728a256d97b3f3c119be4e5be4de7ca8">More...</a><br/></td></tr>
<tr class="separator:ga728a256d97b3f3c119be4e5be4de7ca8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga431e010ff94fce46fff281e459839175"><td class="memItemLeft" align="right" valign="top">apr_ssize_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__hash__utilities.html#ga431e010ff94fce46fff281e459839175">svn__apr_hash_index_klen</a> (const apr_hash_index_t *hi)</td></tr>
<tr class="memdesc:ga431e010ff94fce46fff281e459839175"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the key length of the hash table entry indexed by <em>hi</em>.  <a href="group__apr__hash__utilities.html#ga431e010ff94fce46fff281e459839175">More...</a><br/></td></tr>
<tr class="separator:ga431e010ff94fce46fff281e459839175"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3f2a528a9aa2b73a18bfaac0b69c349d"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__hash__utilities.html#ga3f2a528a9aa2b73a18bfaac0b69c349d">svn__apr_hash_index_val</a> (const apr_hash_index_t *hi)</td></tr>
<tr class="memdesc:ga3f2a528a9aa2b73a18bfaac0b69c349d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the value of the hash table entry indexed by <em>hi</em>.  <a href="group__apr__hash__utilities.html#ga3f2a528a9aa2b73a18bfaac0b69c349d">More...</a><br/></td></tr>
<tr class="separator:ga3f2a528a9aa2b73a18bfaac0b69c349d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a908f230efa1571ead34bb883e7a3c924"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a908f230efa1571ead34bb883e7a3c924">svn_node_kind_to_word</a> (<a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a">svn_node_kind_t</a> kind)</td></tr>
<tr class="memdesc:a908f230efa1571ead34bb883e7a3c924"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a constant string expressing <em>kind</em> as an English word, e.g., "file", "dir", etc.  <a href="#a908f230efa1571ead34bb883e7a3c924">More...</a><br/></td></tr>
<tr class="separator:a908f230efa1571ead34bb883e7a3c924"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0647da15a0f8c919b370c9c940832b33"><td class="memItemLeft" align="right" valign="top"><a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a">svn_node_kind_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a0647da15a0f8c919b370c9c940832b33">svn_node_kind_from_word</a> (const char *word)</td></tr>
<tr class="memdesc:a0647da15a0f8c919b370c9c940832b33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the appropriate node_kind for <em>word</em>.  <a href="#a0647da15a0f8c919b370c9c940832b33">More...</a><br/></td></tr>
<tr class="separator:a0647da15a0f8c919b370c9c940832b33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49e104ce0a3b8400810477072799dc78"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a49e104ce0a3b8400810477072799dc78">svn_tristate__to_word</a> (<a class="el" href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5d">svn_tristate_t</a> tristate)</td></tr>
<tr class="memdesc:a49e104ce0a3b8400810477072799dc78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a constant string "true", "false" or NULL representing the value of <em>tristate</em>.  <a href="#a49e104ce0a3b8400810477072799dc78">More...</a><br/></td></tr>
<tr class="separator:a49e104ce0a3b8400810477072799dc78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d89994fb865d23765e8e437ccca093a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5d">svn_tristate_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a3d89994fb865d23765e8e437ccca093a">svn_tristate__from_word</a> (const char *word)</td></tr>
<tr class="memdesc:a3d89994fb865d23765e8e437ccca093a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the appropriate tristate for <em>word</em>.  <a href="#a3d89994fb865d23765e8e437ccca093a">More...</a><br/></td></tr>
<tr class="separator:a3d89994fb865d23765e8e437ccca093a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb14b5f3ca4e6d152419b8f2d81bf6c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#aeb14b5f3ca4e6d152419b8f2d81bf6c0">svn_revnum_parse</a> (<a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *rev, const char *str, const char **endptr)</td></tr>
<tr class="memdesc:aeb14b5f3ca4e6d152419b8f2d81bf6c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse NULL-terminated C string <em>str</em> as a revision number and store its value in <em>rev</em>.  <a href="#aeb14b5f3ca4e6d152419b8f2d81bf6c0">More...</a><br/></td></tr>
<tr class="separator:aeb14b5f3ca4e6d152419b8f2d81bf6c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb29079e6c46b52a92212b8e8f004ccb"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#aeb29079e6c46b52a92212b8e8f004ccb">svn_depth_to_word</a> (<a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth)</td></tr>
<tr class="memdesc:aeb29079e6c46b52a92212b8e8f004ccb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a constant string expressing <em>depth</em> as an English word, e.g., "infinity", "immediates", etc.  <a href="#aeb29079e6c46b52a92212b8e8f004ccb">More...</a><br/></td></tr>
<tr class="separator:aeb29079e6c46b52a92212b8e8f004ccb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcfd0bd7dea81a2559d94760eab5cff0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#afcfd0bd7dea81a2559d94760eab5cff0">svn_depth_from_word</a> (const char *word)</td></tr>
<tr class="memdesc:afcfd0bd7dea81a2559d94760eab5cff0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the appropriate depth for <em>depth_str</em>.  <a href="#afcfd0bd7dea81a2559d94760eab5cff0">More...</a><br/></td></tr>
<tr class="separator:afcfd0bd7dea81a2559d94760eab5cff0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88103d4d1f98939b90e0a00ff2516575"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__dirent__t.html">svn_dirent_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a88103d4d1f98939b90e0a00ff2516575">svn_dirent_dup</a> (const <a class="el" href="structsvn__dirent__t.html">svn_dirent_t</a> *dirent, apr_pool_t *pool)</td></tr>
<tr class="memdesc:a88103d4d1f98939b90e0a00ff2516575"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a deep copy of <em>dirent</em>, allocated in <em>pool</em>.  <a href="#a88103d4d1f98939b90e0a00ff2516575">More...</a><br/></td></tr>
<tr class="separator:a88103d4d1f98939b90e0a00ff2516575"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac56aa52a9f02046c58e536d6c26cd453"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__dirent__t.html">svn_dirent_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#ac56aa52a9f02046c58e536d6c26cd453">svn_dirent_create</a> (apr_pool_t *result_pool)</td></tr>
<tr class="memdesc:ac56aa52a9f02046c58e536d6c26cd453"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new <a class="el" href="structsvn__dirent__t.html" title="A general subversion directory entry. ">svn_dirent_t</a> instance with all values initialized to their not-available values.  <a href="#ac56aa52a9f02046c58e536d6c26cd453">More...</a><br/></td></tr>
<tr class="separator:ac56aa52a9f02046c58e536d6c26cd453"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8556c3371297c830e5f7f6e7fbf4f529"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__commit__info__t.html">svn_commit_info_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a8556c3371297c830e5f7f6e7fbf4f529">svn_create_commit_info</a> (apr_pool_t *pool)</td></tr>
<tr class="memdesc:a8556c3371297c830e5f7f6e7fbf4f529"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate an object of type <a class="el" href="structsvn__commit__info__t.html" title="All information about a commit. ">svn_commit_info_t</a> in <em>pool</em> and return it.  <a href="#a8556c3371297c830e5f7f6e7fbf4f529">More...</a><br/></td></tr>
<tr class="separator:a8556c3371297c830e5f7f6e7fbf4f529"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2ae74cac609a7c1260dc229597e44ad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__commit__info__t.html">svn_commit_info_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#ae2ae74cac609a7c1260dc229597e44ad">svn_commit_info_dup</a> (const <a class="el" href="structsvn__commit__info__t.html">svn_commit_info_t</a> *src_commit_info, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ae2ae74cac609a7c1260dc229597e44ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a deep copy <em>src_commit_info</em> allocated in <em>pool</em>.  <a href="#ae2ae74cac609a7c1260dc229597e44ad">More...</a><br/></td></tr>
<tr class="separator:ae2ae74cac609a7c1260dc229597e44ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a335a0df53b952023f25638adafd6668a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__log__changed__path2__t.html">svn_log_changed_path2_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a335a0df53b952023f25638adafd6668a">svn_log_changed_path2_create</a> (apr_pool_t *pool)</td></tr>
<tr class="memdesc:a335a0df53b952023f25638adafd6668a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an <a class="el" href="structsvn__log__changed__path2__t.html" title="A structure to represent a path that changed for a log entry. ">svn_log_changed_path2_t</a>, allocated in <em>pool</em> with all fields initialized to NULL, None or empty values.  <a href="#a335a0df53b952023f25638adafd6668a">More...</a><br/></td></tr>
<tr class="separator:a335a0df53b952023f25638adafd6668a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fcb876feb9913fdb436c6bc11d81400"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__log__changed__path2__t.html">svn_log_changed_path2_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a2fcb876feb9913fdb436c6bc11d81400">svn_log_changed_path2_dup</a> (const <a class="el" href="structsvn__log__changed__path2__t.html">svn_log_changed_path2_t</a> *changed_path, apr_pool_t *pool)</td></tr>
<tr class="memdesc:a2fcb876feb9913fdb436c6bc11d81400"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a deep copy of <em>changed_path</em>, allocated in <em>pool</em>.  <a href="#a2fcb876feb9913fdb436c6bc11d81400">More...</a><br/></td></tr>
<tr class="separator:a2fcb876feb9913fdb436c6bc11d81400"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20fb039d61bfbd537935897ac2bc4114"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__log__changed__path__t.html">svn_log_changed_path_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a20fb039d61bfbd537935897ac2bc4114">svn_log_changed_path_dup</a> (const <a class="el" href="structsvn__log__changed__path__t.html">svn_log_changed_path_t</a> *changed_path, apr_pool_t *pool)</td></tr>
<tr class="memdesc:a20fb039d61bfbd537935897ac2bc4114"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a deep copy of <em>changed_path</em>, allocated in <em>pool</em>.  <a href="#a20fb039d61bfbd537935897ac2bc4114">More...</a><br/></td></tr>
<tr class="separator:a20fb039d61bfbd537935897ac2bc4114"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2f14a940d82a6aa93702e3f006855fe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__log__entry__t.html">svn_log_entry_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#ad2f14a940d82a6aa93702e3f006855fe">svn_log_entry_create</a> (apr_pool_t *pool)</td></tr>
<tr class="memdesc:ad2f14a940d82a6aa93702e3f006855fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an <a class="el" href="structsvn__log__entry__t.html" title="A structure to represent all the information about a particular log entry. ">svn_log_entry_t</a>, allocated in <em>pool</em> with all fields initialized to NULL values.  <a href="#ad2f14a940d82a6aa93702e3f006855fe">More...</a><br/></td></tr>
<tr class="separator:ad2f14a940d82a6aa93702e3f006855fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d9e311addb51f7047b901c73458efb0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__log__entry__t.html">svn_log_entry_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a2d9e311addb51f7047b901c73458efb0">svn_log_entry_dup</a> (const <a class="el" href="structsvn__log__entry__t.html">svn_log_entry_t</a> *log_entry, apr_pool_t *pool)</td></tr>
<tr class="memdesc:a2d9e311addb51f7047b901c73458efb0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a deep copy of <em>log_entry</em>, allocated in <em>pool</em>.  <a href="#a2d9e311addb51f7047b901c73458efb0">More...</a><br/></td></tr>
<tr class="separator:a2d9e311addb51f7047b901c73458efb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a6b198d973912515015bc70a55d1860"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a9a6b198d973912515015bc70a55d1860">svn_mime_type_validate</a> (const char *mime_type, apr_pool_t *pool)</td></tr>
<tr class="memdesc:a9a6b198d973912515015bc70a55d1860"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validate <em>mime_type</em>.  <a href="#a9a6b198d973912515015bc70a55d1860">More...</a><br/></td></tr>
<tr class="separator:a9a6b198d973912515015bc70a55d1860"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae95025cb6c9c2010e4c479b2cad0a31"><td class="memItemLeft" align="right" valign="top"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#aae95025cb6c9c2010e4c479b2cad0a31">svn_mime_type_is_binary</a> (const char *mime_type)</td></tr>
<tr class="memdesc:aae95025cb6c9c2010e4c479b2cad0a31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return FALSE iff <em>mime_type</em> is a textual type.  <a href="#aae95025cb6c9c2010e4c479b2cad0a31">More...</a><br/></td></tr>
<tr class="separator:aae95025cb6c9c2010e4c479b2cad0a31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24084e8edbf110cc9f54c7b28e9c9c6d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__lock__t.html">svn_lock_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a24084e8edbf110cc9f54c7b28e9c9c6d">svn_lock_create</a> (apr_pool_t *pool)</td></tr>
<tr class="memdesc:a24084e8edbf110cc9f54c7b28e9c9c6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an <a class="el" href="structsvn__lock__t.html" title="A lock object, for client &amp; server to share. ">svn_lock_t</a>, allocated in <em>pool</em> with all fields initialized to NULL values.  <a href="#a24084e8edbf110cc9f54c7b28e9c9c6d">More...</a><br/></td></tr>
<tr class="separator:a24084e8edbf110cc9f54c7b28e9c9c6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88073f51cc6ce87322e93f8319912643"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__lock__t.html">svn_lock_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a88073f51cc6ce87322e93f8319912643">svn_lock_dup</a> (const <a class="el" href="structsvn__lock__t.html">svn_lock_t</a> *lock, apr_pool_t *pool)</td></tr>
<tr class="memdesc:a88073f51cc6ce87322e93f8319912643"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a deep copy of <em>lock</em>, allocated in <em>pool</em>.  <a href="#a88073f51cc6ce87322e93f8319912643">More...</a><br/></td></tr>
<tr class="separator:a88073f51cc6ce87322e93f8319912643"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a308af54ac5645f38f7b09c6b64bfde36"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a308af54ac5645f38f7b09c6b64bfde36">svn_uuid_generate</a> (apr_pool_t *pool)</td></tr>
<tr class="memdesc:a308af54ac5645f38f7b09c6b64bfde36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a formatted Universal Unique IDentifier (UUID) string.  <a href="#a308af54ac5645f38f7b09c6b64bfde36">More...</a><br/></td></tr>
<tr class="separator:a308af54ac5645f38f7b09c6b64bfde36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12fa65de017149e535054d0e4de0153a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__merge__range__t.html">svn_merge_range_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a12fa65de017149e535054d0e4de0153a">svn_merge_range_dup</a> (const <a class="el" href="structsvn__merge__range__t.html">svn_merge_range_t</a> *range, apr_pool_t *pool)</td></tr>
<tr class="memdesc:a12fa65de017149e535054d0e4de0153a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a copy of <em>range</em>, allocated in <em>pool</em>.  <a href="#a12fa65de017149e535054d0e4de0153a">More...</a><br/></td></tr>
<tr class="separator:a12fa65de017149e535054d0e4de0153a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85ea3b02fa56d552e3b9be77e3520eb2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__types_8h.html#a85ea3b02fa56d552e3b9be77e3520eb2">svn_merge_range_contains_rev</a> (const <a class="el" href="structsvn__merge__range__t.html">svn_merge_range_t</a> *range, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> rev)</td></tr>
<tr class="memdesc:a85ea3b02fa56d552e3b9be77e3520eb2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the changeset committed in revision <em>rev</em> is one of the changesets in the range <em>range</em>.  <a href="#a85ea3b02fa56d552e3b9be77e3520eb2">More...</a><br/></td></tr>
<tr class="separator:a85ea3b02fa56d552e3b9be77e3520eb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b4c972384346b0133224cacd5328d5d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__location__segment__t.html">svn_location_segment_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__node__location__seg__reporting.html#ga5b4c972384346b0133224cacd5328d5d">svn_location_segment_dup</a> (const <a class="el" href="structsvn__location__segment__t.html">svn_location_segment_t</a> *segment, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga5b4c972384346b0133224cacd5328d5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a deep copy of <em>segment</em>, allocated in <em>pool</em>.  <a href="group__node__location__seg__reporting.html#ga5b4c972384346b0133224cacd5328d5d">More...</a><br/></td></tr>
<tr class="separator:ga5b4c972384346b0133224cacd5328d5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Subversion's data types. </p>

<p>Definition in file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>
</div><h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="aa93f0eb578d23995850d61f7d61c55c1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define FALSE&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>uhh... </p>
<p>false </p>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00103">103</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a2bbb6c247a5eca01e1e264e4c2e6319c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN__APR_STATUS_IS_ENOTDIR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">s</td><td>)</td>
          <td>&#160;&#160;&#160;APR_STATUS_IS_ENOTDIR(s)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>On Windows, APR_STATUS_IS_ENOTDIR includes several kinds of invalid-pathname error but not ERROR_INVALID_NAME, so we include it. </p>
<p>We also include ERROR_DIRECTORY as that was not included in apr versions before 1.4.0 and this fix is not backported </p>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00215">215</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a11b6b7739842c45a896dca439edf5d3d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN__APR_STATUS_IS_EPIPE</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">s</td><td>)</td>
          <td>&#160;&#160;&#160;APR_STATUS_IS_EPIPE(s)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>On Windows, APR_STATUS_IS_EPIPE does not include ERROR_NO_DATA error. </p>
<p>So we include it. </p>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00226">226</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="aeced35b9b096eb3eb6f3d1af3e685aa1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_DEPRECATED</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Macro used to mark deprecated functions. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00059">59</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a9916aa78f8e7f8b48ac2f600332e0084"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_DEPTH_INFINITY_OR_EMPTY</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">recurse</td><td>)</td>
          <td>&#160;&#160;&#160;((recurse) ? <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2">svn_depth_infinity</a> : <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c">svn_depth_empty</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a> if boolean <em>recurse</em> is TRUE, else return <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries. ">svn_depth_empty</a>. </p>
<dl class="section note"><dt>Note</dt><dd>New code should never need to use this, it is called only from pre-depth APIs, for compatibility.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00525">525</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a23d085fee916b8bafb64846402279cda"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_DEPTH_INFINITY_OR_FILES</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">recurse</td><td>)</td>
          <td>&#160;&#160;&#160;((recurse) ? <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2">svn_depth_infinity</a> : <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345">svn_depth_files</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a> if boolean <em>recurse</em> is TRUE, else return <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345" title="D + its file children, but not subdirs. ">svn_depth_files</a>. </p>
<dl class="section note"><dt>Note</dt><dd>New code should never need to use this, it is called only from pre-depth APIs, for compatibility.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00503">503</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a6f9a75487457c6c8bb78195a0dc9eda0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_DEPTH_INFINITY_OR_IMMEDIATES</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">recurse</td><td>)</td>
          <td>&#160;&#160;&#160;((recurse) ? <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2">svn_depth_infinity</a> : <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca68873e015456e384e4f63f3bbd515c8a">svn_depth_immediates</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a> if boolean <em>recurse</em> is TRUE, else return <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca68873e015456e384e4f63f3bbd515c8a" title="D + immediate children (D and its entries). ">svn_depth_immediates</a>. </p>
<dl class="section note"><dt>Note</dt><dd>New code should never need to use this, it is called only from pre-depth APIs, for compatibility.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00514">514</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="adc17035f4973e8a72b6e4ce3108f8596"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_DEPTH_IS_RECURSIVE</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">depth</td><td>)</td>
          <td>&#160;&#160;&#160;((depth) == <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2">svn_depth_infinity</a> || (depth) == <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2cacf4538edb8e8823b0b9cdeaaac245ebf">svn_depth_unknown</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a recursion boolean based on <em>depth</em>. </p>
<p>Although much code has been converted to use depth, some code still takes a recurse boolean. In most cases, it makes sense to treat unknown or infinite depth as recursive, and any other depth as non-recursive (which in turn usually translates to <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345" title="D + its file children, but not subdirs. ">svn_depth_files</a>). </p>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00535">535</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a517ca03658c247969d81c31b122c7f04"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_FILESIZE_T_FMT&#160;&#160;&#160;APR_INT64_T_FMT</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>In printf()-style functions, format file sizes using this. </p>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00409">409</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a76973f4441098df9caf39ef911e5d9a6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_INVALID_FILESIZE&#160;&#160;&#160;((<a class="el" href="svn__types_8h.html#a726e581898461c1d3e7dbdb16d99dad0">svn_filesize_t</a>) -1)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The 'official' invalid file size constant. </p>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00406">406</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a7b895dc3fde904cf7553a04b45061491"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_LINENUM_MAX_VALUE&#160;&#160;&#160;ULONG_MAX</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The maximum value of an svn_linenum_t. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l01264">1264</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a44fa0aeb7aa519ebe9291b6298dc75cd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_MAX_OBJECT_SIZE&#160;&#160;&#160;(((apr_size_t) -1) / 2)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The maximum amount we can ever hold in memory. </p>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l01057">1057</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a417741eb1f9b222dae237f6942a4b2f0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_REVNUM_T_FMT&#160;&#160;&#160;&quot;ld&quot;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Originally intended to be used in printf()-style functions to format revision numbers. </p>
<p>Deprecated due to incompatibilities with language translation tools (e.g. gettext).</p>
<p>New code should use a bare "%ld" format specifier for formatting revision numbers.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000400">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.0 API. </dd></dl>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00398">398</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a57b4828e19737ceb8f42676dcbe41895"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_STR_TO_REV</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">str</td><td>)</td>
          <td>&#160;&#160;&#160;((<a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>) atol(str))</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert NULL-terminated C string <em>str</em> to a revision number. </p>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00371">371</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4ef9c8aee97e4efc781c5e12905bf532"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_STREAM_CHUNK_SIZE&#160;&#160;&#160;102400</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A buffer size that may be used when processing a stream of data. </p>
<dl class="section note"><dt>Note</dt><dd>We don't use this constant any longer, since it is considered to be unnecessarily large.</dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000405">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.3 API. </dd></dl>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l01039">1039</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="abe6e166ca2705cbb90f8229ec41acf0a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_UNALIGNED_ACCESS_IS_OK&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Indicate whether the current platform supports unaligned data access. </p>
<p>On the majority of machines running SVN (x86 / x64), unaligned access is much cheaper than repeated aligned access. Define this macro to 1 on those machines. Unaligned access on other machines (e.g. IA64) will trigger memory access faults or simply misbehave.</p>
<p>Note: Some platforms may only support unaligned access for integers (PowerPC). As a result this macro should only be used to determine if unaligned access is supported for integers.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00087">87</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa8cecfc5c5c054d2875c03e77b7be15d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define TRUE&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>uhh... </p>
<p>true </p>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00098">98</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="addaab83431a3d41b6c62e9d501cd5ecc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* svn_cancel_func_t)(void *cancel_baton)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A user defined callback that subversion will call with a user defined baton to see if the current operation should be continued. </p>
<p>If the operation should continue, the function should return <a class="el" href="svn__error_8h.html#a657398222a237c3c8cc77dcabf427f63" title="the best kind of (svn_error_t *) ! ">SVN_NO_ERROR</a>, if not, it should return <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a879a10e8184482c5fb71e48ab0bb28a9" title="&quot;The operation was interrupted&quot; ">SVN_ERR_CANCELLED</a>. </p>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l01098">1098</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a5aca95325ba984f70a316d7d9966e1df"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* svn_commit_callback2_t)(const <a class="el" href="structsvn__commit__info__t.html">svn_commit_info_t</a> *commit_info, void *baton, apr_pool_t *pool)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Callback function type for commits. </p>
<p>When a commit succeeds, an instance of this is invoked with the <em>commit_info</em>, along with the <em>baton</em> closure. <em>pool</em> can be used for temporary allocations.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.4. </dd></dl>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l01014">1014</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="abc95cfed422bd097099537e4bde98d6d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* svn_commit_callback_t)(<a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> new_revision, const char *date, const char *author, void *baton)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Same as <a class="el" href="svn__types_8h.html#a5aca95325ba984f70a316d7d9966e1df" title="Callback function type for commits. ">svn_commit_callback2_t</a>, but uses individual data elements instead of the <a class="el" href="structsvn__commit__info__t.html" title="All information about a commit. ">svn_commit_info_t</a> structure. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000404">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.3 API. </dd></dl>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l01024">1024</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="ab44a1742c0d92043fd142d947ba2f547"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__commit__info__t.html">svn_commit_info_t</a>  <a class="el" href="structsvn__commit__info__t.html">svn_commit_info_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>All information about a commit. </p>
<dl class="section note"><dt>Note</dt><dd>Objects of this type should always be created using the <a class="el" href="svn__types_8h.html#a8556c3371297c830e5f7f6e7fbf4f529" title="Allocate an object of type svn_commit_info_t in pool and return it. ">svn_create_commit_info()</a> function.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.3. </dd></dl>

</div>
</div>
<a class="anchor" id="ae2a8b1d2477ddabbd337d7f35e113743"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef enum <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>  <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The concept of depth for directories. </p>
<dl class="section note"><dt>Note</dt><dd>This is similar to, but not exactly the same as, the WebDAV and LDAP concepts of depth.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a6ec890938a69ab815e98a74d95b168fa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__dirent__t.html">svn_dirent_t</a>  <a class="el" href="structsvn__dirent__t.html">svn_dirent_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A general subversion directory entry. </p>
<dl class="section note"><dt>Note</dt><dd>To allow for extending the <a class="el" href="structsvn__dirent__t.html" title="A general subversion directory entry. ">svn_dirent_t</a> structure in future releases, always use <a class="el" href="svn__types_8h.html#ac56aa52a9f02046c58e536d6c26cd453" title="Create a new svn_dirent_t instance with all values initialized to their not-available values...">svn_dirent_create()</a> to allocate the stucture.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="aee5cf08f356d7506dcd929a7f2e51aa0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__error__t.html">svn_error_t</a>  <a class="el" href="structsvn__error__t.html">svn_error_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Subversion error object. </p>
<p>Defined here, rather than in <a class="el" href="svn__error_8h.html" title="Common exception handling for Subversion. ">svn_error.h</a>, to avoid a recursive #include situation. </p>

</div>
</div>
<a class="anchor" id="a726e581898461c1d3e7dbdb16d99dad0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef apr_int64_t <a class="el" href="svn__types_8h.html#a726e581898461c1d3e7dbdb16d99dad0">svn_filesize_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The size of a file in the Subversion FS. </p>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00403">403</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="acd2fa076b4ade5dbe9309966043f3bf8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef unsigned long <a class="el" href="svn__types_8h.html#acd2fa076b4ade5dbe9309966043f3bf8">svn_linenum_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A line number, such as in a file or a stream. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l01258">1258</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a442599fe7984d28ee04c64761b5c11d1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__lock__t.html">svn_lock_t</a>  <a class="el" href="structsvn__lock__t.html">svn_lock_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A lock object, for client &amp; server to share. </p>
<p>A lock represents the exclusive right to add, delete, or modify a path. A lock is created in a repository, wholly controlled by the repository. A "lock-token" is the lock's UUID, and can be used to learn more about a lock's fields, and or/make use of the lock. Because a lock is immutable, a client is free to not only cache the lock-token, but the lock's fields too, for convenience.</p>
<p>Note that the 'is_dav_comment' field is wholly ignored by every library except for mod_dav_svn. The field isn't even marshalled over the network to the client. Assuming lock structures are created with apr_pcalloc(), a default value of 0 is universally safe.</p>
<dl class="section note"><dt>Note</dt><dd>in the current implementation, only files are lockable.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="a03bd84e6a97e2448151e761d0e2cd6e0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__log__changed__path2__t.html">svn_log_changed_path2_t</a>  <a class="el" href="structsvn__log__changed__path2__t.html">svn_log_changed_path2_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A structure to represent a path that changed for a log entry. </p>
<dl class="section note"><dt>Note</dt><dd>To allow for extending the <a class="el" href="structsvn__log__changed__path2__t.html" title="A structure to represent a path that changed for a log entry. ">svn_log_changed_path2_t</a> structure in future releases, always use <a class="el" href="svn__types_8h.html#a335a0df53b952023f25638adafd6668a" title="Returns an svn_log_changed_path2_t, allocated in pool with all fields initialized to NULL...">svn_log_changed_path2_create()</a> to allocate the structure.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="a224189fd5fe666377d8ee12bb3d5979a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__log__changed__path__t.html">svn_log_changed_path_t</a>  <a class="el" href="structsvn__log__changed__path__t.html">svn_log_changed_path_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A structure to represent a path that changed for a log entry. </p>
<p>Same as the first three fields of <a class="el" href="structsvn__log__changed__path2__t.html" title="A structure to represent a path that changed for a log entry. ">svn_log_changed_path2_t</a>.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000401">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.5 API. </dd></dl>

</div>
</div>
<a class="anchor" id="afb30054d6301afbcd8b00d8dc11d7ddb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* svn_log_entry_receiver_t)(void *baton, <a class="el" href="structsvn__log__entry__t.html">svn_log_entry_t</a> *log_entry, apr_pool_t *pool)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The callback invoked by log message loopers, such as <a class="el" href="structsvn__ra__plugin__t.html#a7d7ba051d42dc9b6d9b29327c21380aa" title="Call svn_ra_get_log() with the session associated with session_baton and all other arguments...">svn_ra_plugin_t.get_log()</a> and <a class="el" href="svn__repos_8h.html#a55be2364d9b275c79781ce92384029c9" title="Same as svn_repos_get_logs2(), but with authz_read_func and authz_read_baton always set to NULL...">svn_repos_get_logs()</a>. </p>
<p>This function is invoked once on each log message, in the order determined by the caller (see above-mentioned functions).</p>
<p><em>baton</em> is what you think it is, and <em>log_entry</em> contains relevant information for the log message. Any of <em>log_entry-&gt;author</em>, <em>log_entry-&gt;date</em>, or <em>log_entry-&gt;message</em> may be <code>NULL</code>.</p>
<p>If <em>log_entry-&gt;date</em> is neither NULL nor the empty string, it was generated by <a class="el" href="svn__time_8h.html#adbaf5e57fe8ea1debf4d80ef730ac5cd" title="Convert when to a const char * representation allocated in pool. ">svn_time_to_cstring()</a> and can be converted to <code>apr_time_t</code> with <a class="el" href="svn__time_8h.html#accec8c3c6775d4cf32cb51641dd9e644" title="Convert data to an apr_time_t when. ">svn_time_from_cstring()</a>.</p>
<p>If <em>log_entry-&gt;changed_paths</em> is non-<code>NULL</code>, then it contains as keys every path committed in <em>log_entry-&gt;revision</em>; the values are (<a class="el" href="structsvn__log__changed__path__t.html" title="A structure to represent a path that changed for a log entry. ">svn_log_changed_path_t</a> *) structures.</p>
<p>If <em>log_entry-&gt;has_children</em> is <code>TRUE</code>, the message will be followed immediately by any number of merged revisions (child messages), which are terminated by an invocation with SVN_INVALID_REVNUM. This usage may be recursive.</p>
<p>Use <em>pool</em> for temporary allocation. If the caller is iterating over log messages, invoking this receiver on each, we recommend the standard pool loop recipe: create a subpool, pass it as <em>pool</em> to each call, clear it after each iteration, destroy it after the loop is done. (For allocation that must last beyond the lifetime of a given receiver call, use a pool in <em>baton</em>.)</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00984">984</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a8a87a80a5f3116a3b24028f3d7d1b3f4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__log__entry__t.html">svn_log_entry_t</a>  <a class="el" href="structsvn__log__entry__t.html">svn_log_entry_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A structure to represent all the information about a particular log entry. </p>
<dl class="section note"><dt>Note</dt><dd>To allow for extending the <a class="el" href="structsvn__log__entry__t.html" title="A structure to represent all the information about a particular log entry. ">svn_log_entry_t</a> structure in future releases, always use <a class="el" href="svn__types_8h.html#ad2f14a940d82a6aa93702e3f006855fe" title="Returns an svn_log_entry_t, allocated in pool with all fields initialized to NULL values...">svn_log_entry_create()</a> to allocate the structure.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a6aa9147b67a7778294a52399de5c0b33"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* svn_log_message_receiver_t)(void *baton, apr_hash_t *changed_paths, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, const char *author, const char *date,const char *message, apr_pool_t *pool)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="svn__types_8h.html#afb30054d6301afbcd8b00d8dc11d7ddb" title="The callback invoked by log message loopers, such as svn_ra_plugin_t.get_log() and svn_repos_get_logs...">svn_log_entry_receiver_t</a>, except this uses separate parameters for each part of the log entry. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000403">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00995">995</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="af400b9a21725f29d78bfcfa9d237652d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__merge__range__t.html">svn_merge_range_t</a>  <a class="el" href="structsvn__merge__range__t.html">svn_merge_range_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Mergeinfo representing a merge of a range of revisions. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5 </dd></dl>

</div>
</div>
<a class="anchor" id="aa3de517663a32716b59eabaf73c6b2bc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef enum <a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a">svn_node_kind_t</a>  <a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a">svn_node_kind_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The various types of nodes in the Subversion filesystem. </p>

</div>
</div>
<a class="anchor" id="af16427ed53d30f27da225c56552d2a89"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef long int <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>About Special Files in Subversion. </p>
<p>Subversion denotes files that cannot be portably created or modified as "special" files (svn_node_special). It stores these files in the repository as a plain text file with the svn:special property set. The file contents contain: a platform-specific type string, a space character, then any information necessary to create the file on a supported platform. For example, if a symbolic link were being represented, the repository file would have the following contents:</p>
<p>"link /path/to/link/target"</p>
<p>Where 'link' is the identifier string showing that this special file should be a symbolic link and '/path/to/link/target' is the destination of the symbolic link.</p>
<p>Special files are stored in the text-base exactly as they are stored in the repository. The platform specific files are created in the working copy at EOL/keyword translation time using <a class="el" href="svn__subst_8h.html#a9bbccf6a71c3e07a112e1e44f9ecec98" title="Similar to svn_subst_copy_and_translate3() except that keywords is a svn_subst_keywords_t struct inst...">svn_subst_copy_and_translate2()</a>. If the current platform does not support a specific special file type, the file is copied into the working copy as it is seen in the repository. Because of this, users of other platforms can still view and modify the special files, even if they do not have their unique properties.</p>
<p>New types of special files can be added by:</p>
<ol type="1">
<li>Implementing a platform-dependent routine to create a uniquely named special file and one to read the special file in libsvn_subr/io.c.</li>
<li>Creating a new textual name similar to SVN_SUBST__SPECIAL_LINK_STR in libsvn_subr/subst.c.</li>
<li>Handling the translation/detranslation case for the new type in create_special_file and detranslate_special_file, using the routines from 1.A revision number. </li>
</ol>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00356">356</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a3f5fddf07f06d55e6b1fecb123c7ef7e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef enum <a class="el" href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5d">svn_tristate_t</a>  <a class="el" href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5d">svn_tristate_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Generic three-state property to represent an unknown value for values that are just like booleans. </p>
<p>The values have been set deliberately to make tristates disjoint from <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type. ">svn_boolean_t</a>.</p>
<dl class="section note"><dt>Note</dt><dd>It is unsafe to use apr_pcalloc() to allocate these, since '0' is not a valid value.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="a21dd8b080111fa6fb5d59156299f3a2c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The concept of depth for directories. </p>
<dl class="section note"><dt>Note</dt><dd>This is similar to, but not exactly the same as, the WebDAV and LDAP concepts of depth.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="a21dd8b080111fa6fb5d59156299f3a2cacf4538edb8e8823b0b9cdeaaac245ebf"></a>svn_depth_unknown</em>&nbsp;</td><td class="fielddoc">
<p>Depth undetermined or ignored. </p>
<p>In some contexts, this means the client should choose an appropriate default depth. The server will generally treat it as <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a21dd8b080111fa6fb5d59156299f3a2ca1bc611e0caf428575d07287adca72603"></a>svn_depth_exclude</em>&nbsp;</td><td class="fielddoc">
<p>Exclude (i.e., don't descend into) directory D. </p>
<dl class="section note"><dt>Note</dt><dd>In Subversion 1.5, svn_depth_exclude is <em>not</em> supported anywhere in the client-side (libsvn_wc/libsvn_client/etc) code; it is only supported as an argument to set_path functions in the ra and repos reporters. (This will enable future versions of Subversion to run updates, etc, against 1.5 servers with proper svn_depth_exclude behavior, once we get a chance to implement client-side support for svn_depth_exclude.) </dd></dl>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c"></a>svn_depth_empty</em>&nbsp;</td><td class="fielddoc">
<p>Just the named directory D, no entries. </p>
<p>Updates will not pull in any files or subdirectories not already present. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345"></a>svn_depth_files</em>&nbsp;</td><td class="fielddoc">
<p>D + its file children, but not subdirs. </p>
<p>Updates will pull in any files not already present, but not subdirectories. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a21dd8b080111fa6fb5d59156299f3a2ca68873e015456e384e4f63f3bbd515c8a"></a>svn_depth_immediates</em>&nbsp;</td><td class="fielddoc">
<p>D + immediate children (D and its entries). </p>
<p>Updates will pull in any files or subdirectories not already present; those subdirectories' this_dir entries will have depth-empty. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2"></a>svn_depth_infinity</em>&nbsp;</td><td class="fielddoc">
<p>D + all descendants (full recursion from D). </p>
<p>Updates will pull in any files or subdirectories not already present; those subdirectories' this_dir entries will have depth-infinity. Equivalent to the pre-1.5 default update behavior. </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00434">434</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="ac3ca125707a8ca1289c73236b5ce7f9a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a">svn_node_kind_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The various types of nodes in the Subversion filesystem. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="ac3ca125707a8ca1289c73236b5ce7f9aae4066898ada99c4a3bc94e80aabe78b5"></a>svn_node_none</em>&nbsp;</td><td class="fielddoc">
<p>absent </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ac3ca125707a8ca1289c73236b5ce7f9aaa95e604c61f68662a3baed477db64083"></a>svn_node_file</em>&nbsp;</td><td class="fielddoc">
<p>regular file </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ac3ca125707a8ca1289c73236b5ce7f9aaba05e448cccf503e25be6506d7bf9a5b"></a>svn_node_dir</em>&nbsp;</td><td class="fielddoc">
<p>directory </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ac3ca125707a8ca1289c73236b5ce7f9aa8fa9327ee73e41216ad586867fea4b94"></a>svn_node_unknown</em>&nbsp;</td><td class="fielddoc">
<p>something's here, but we don't know what </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ac3ca125707a8ca1289c73236b5ce7f9aa0b9a7eb2f3ac9ed565874a083f136a62"></a>svn_node_symlink</em>&nbsp;</td><td class="fielddoc">
<p>symbolic link </p>
<dl class="section note"><dt>Note</dt><dd>This value is not currently used by the public API. </dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.8. </dd></dl>
</td></tr>
</table>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00237">237</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="af81db79c4e4bbc2304dd95957bc9a905"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="svn__types_8h.html#af81db79c4e4bbc2304dd95957bc9a905">svn_recurse_kind</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>An enum to indicate whether recursion is needed. </p>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00421">421</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<a class="anchor" id="a833b517afeac9ae9b345e47e0d85ea5d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5d">svn_tristate_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Generic three-state property to represent an unknown value for values that are just like booleans. </p>
<p>The values have been set deliberately to make tristates disjoint from <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type. ">svn_boolean_t</a>.</p>
<dl class="section note"><dt>Note</dt><dd>It is unsafe to use apr_pcalloc() to allocate these, since '0' is not a valid value.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="a833b517afeac9ae9b345e47e0d85ea5daf93ff7e8df3d4891ffbbed9e6c5cbb88"></a>svn_tristate_false</em>&nbsp;</td><td class="fielddoc">
<p>state known to be false (the constant does not evaulate to false) </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a833b517afeac9ae9b345e47e0d85ea5dab561d3a1193424ef74ff1813e4fe9e82"></a>svn_tristate_true</em>&nbsp;</td><td class="fielddoc">
<p>state known to be true </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a833b517afeac9ae9b345e47e0d85ea5da4f52e9ee42abbd7a4d40ee8eef23cdf2"></a>svn_tristate_unknown</em>&nbsp;</td><td class="fielddoc">
<p>state could be true or false </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="svn__types_8h_source.html#l00287">287</a> of file <a class="el" href="svn__types_8h_source.html">svn_types.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ae2ae74cac609a7c1260dc229597e44ad"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__commit__info__t.html">svn_commit_info_t</a>* svn_commit_info_dup </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structsvn__commit__info__t.html">svn_commit_info_t</a> *&#160;</td>
          <td class="paramname"><em>src_commit_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a deep copy <em>src_commit_info</em> allocated in <em>pool</em>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.4. </dd></dl>

</div>
</div>
<a class="anchor" id="a8556c3371297c830e5f7f6e7fbf4f529"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__commit__info__t.html">svn_commit_info_t</a>* svn_create_commit_info </td>
          <td>(</td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocate an object of type <a class="el" href="structsvn__commit__info__t.html" title="All information about a commit. ">svn_commit_info_t</a> in <em>pool</em> and return it. </p>
<p>The <code>revision</code> field of the new struct is set to <a class="el" href="svn__types_8h.html#a8857d4630bf116eaba54a1b65d43ad92" title="The &#39;official&#39; invalid revision num. ">SVN_INVALID_REVNUM</a>. All other fields are initialized to <code>NULL</code>.</p>
<dl class="section note"><dt>Note</dt><dd>Any object of the type <a class="el" href="structsvn__commit__info__t.html" title="All information about a commit. ">svn_commit_info_t</a> should be created using this function. This is to provide for extending the <a class="el" href="structsvn__commit__info__t.html" title="All information about a commit. ">svn_commit_info_t</a> in the future.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.3. </dd></dl>

</div>
</div>
<a class="anchor" id="afcfd0bd7dea81a2559d94760eab5cff0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> svn_depth_from_word </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>word</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the appropriate depth for <em>depth_str</em>. </p>
<p><em>word</em> is as returned from <a class="el" href="svn__types_8h.html#aeb29079e6c46b52a92212b8e8f004ccb" title="Return a constant string expressing depth as an English word, e.g., &quot;infinity&quot;, &quot;immediates&quot;, etc. ">svn_depth_to_word()</a>. If <em>depth_str</em> does not represent a recognized depth, return <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2cacf4538edb8e8823b0b9cdeaaac245ebf" title="Depth undetermined or ignored. ">svn_depth_unknown</a>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="aeb29079e6c46b52a92212b8e8f004ccb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* svn_depth_to_word </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a constant string expressing <em>depth</em> as an English word, e.g., "infinity", "immediates", etc. </p>
<p>The string is not localized, as it may be used for client&lt;-&gt;server communications.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="ac56aa52a9f02046c58e536d6c26cd453"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__dirent__t.html">svn_dirent_t</a>* svn_dirent_create </td>
          <td>(</td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>result_pool</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a new <a class="el" href="structsvn__dirent__t.html" title="A general subversion directory entry. ">svn_dirent_t</a> instance with all values initialized to their not-available values. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.8. </dd></dl>

</div>
</div>
<a class="anchor" id="a88103d4d1f98939b90e0a00ff2516575"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__dirent__t.html">svn_dirent_t</a>* svn_dirent_dup </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structsvn__dirent__t.html">svn_dirent_t</a> *&#160;</td>
          <td class="paramname"><em>dirent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a deep copy of <em>dirent</em>, allocated in <em>pool</em>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.4. </dd></dl>

</div>
</div>
<a class="anchor" id="a24084e8edbf110cc9f54c7b28e9c9c6d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__lock__t.html">svn_lock_t</a>* svn_lock_create </td>
          <td>(</td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an <a class="el" href="structsvn__lock__t.html" title="A lock object, for client &amp; server to share. ">svn_lock_t</a>, allocated in <em>pool</em> with all fields initialized to NULL values. </p>
<dl class="section note"><dt>Note</dt><dd>To allow for extending the <a class="el" href="structsvn__lock__t.html" title="A lock object, for client &amp; server to share. ">svn_lock_t</a> structure in the future releases, this function should always be used to allocate the structure.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="a88073f51cc6ce87322e93f8319912643"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__lock__t.html">svn_lock_t</a>* svn_lock_dup </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structsvn__lock__t.html">svn_lock_t</a> *&#160;</td>
          <td class="paramname"><em>lock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a deep copy of <em>lock</em>, allocated in <em>pool</em>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="a335a0df53b952023f25638adafd6668a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__log__changed__path2__t.html">svn_log_changed_path2_t</a>* svn_log_changed_path2_create </td>
          <td>(</td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an <a class="el" href="structsvn__log__changed__path2__t.html" title="A structure to represent a path that changed for a log entry. ">svn_log_changed_path2_t</a>, allocated in <em>pool</em> with all fields initialized to NULL, None or empty values. </p>
<dl class="section note"><dt>Note</dt><dd>To allow for extending the <a class="el" href="structsvn__log__changed__path2__t.html" title="A structure to represent a path that changed for a log entry. ">svn_log_changed_path2_t</a> structure in future releases, this function should always be used to allocate the structure.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="a2fcb876feb9913fdb436c6bc11d81400"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__log__changed__path2__t.html">svn_log_changed_path2_t</a>* svn_log_changed_path2_dup </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structsvn__log__changed__path2__t.html">svn_log_changed_path2_t</a> *&#160;</td>
          <td class="paramname"><em>changed_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a deep copy of <em>changed_path</em>, allocated in <em>pool</em>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="a20fb039d61bfbd537935897ac2bc4114"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__log__changed__path__t.html">svn_log_changed_path_t</a>* svn_log_changed_path_dup </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structsvn__log__changed__path__t.html">svn_log_changed_path_t</a> *&#160;</td>
          <td class="paramname"><em>changed_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a deep copy of <em>changed_path</em>, allocated in <em>pool</em>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.3. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000402">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.5 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ad2f14a940d82a6aa93702e3f006855fe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__log__entry__t.html">svn_log_entry_t</a>* svn_log_entry_create </td>
          <td>(</td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an <a class="el" href="structsvn__log__entry__t.html" title="A structure to represent all the information about a particular log entry. ">svn_log_entry_t</a>, allocated in <em>pool</em> with all fields initialized to NULL values. </p>
<dl class="section note"><dt>Note</dt><dd>To allow for extending the <a class="el" href="structsvn__log__entry__t.html" title="A structure to represent all the information about a particular log entry. ">svn_log_entry_t</a> structure in future releases, this function should always be used to allocate the structure.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a2d9e311addb51f7047b901c73458efb0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__log__entry__t.html">svn_log_entry_t</a>* svn_log_entry_dup </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structsvn__log__entry__t.html">svn_log_entry_t</a> *&#160;</td>
          <td class="paramname"><em>log_entry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a deep copy of <em>log_entry</em>, allocated in <em>pool</em>. </p>
<p>The resulting <a class="el" href="structsvn__log__entry__t.html" title="A structure to represent all the information about a particular log entry. ">svn_log_entry_t</a> has <code>changed_paths</code> set to the same value as <code>changed_path2</code>. <code>changed_paths</code> will be <code>NULL</code> if <code>changed_paths2</code> was <code>NULL</code>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="a85ea3b02fa56d552e3b9be77e3520eb2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> svn_merge_range_contains_rev </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structsvn__merge__range__t.html">svn_merge_range_t</a> *&#160;</td>
          <td class="paramname"><em>range</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>rev</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the changeset committed in revision <em>rev</em> is one of the changesets in the range <em>range</em>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a12fa65de017149e535054d0e4de0153a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__merge__range__t.html">svn_merge_range_t</a>* svn_merge_range_dup </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structsvn__merge__range__t.html">svn_merge_range_t</a> *&#160;</td>
          <td class="paramname"><em>range</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a copy of <em>range</em>, allocated in <em>pool</em>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="aae95025cb6c9c2010e4c479b2cad0a31"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> svn_mime_type_is_binary </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>mime_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return FALSE iff <em>mime_type</em> is a textual type. </p>
<p>All mime types that start with "text/" are textual, plus some special cases (for example, "image/x-xbitmap"). </p>

</div>
</div>
<a class="anchor" id="a9a6b198d973912515015bc70a55d1860"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_mime_type_validate </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>mime_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validate <em>mime_type</em>. </p>
<p>If <em>mime_type</em> does not contain a "/", or ends with non-alphanumeric data, return <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660acf00eb32bb6cf0ab5ec3c9af7d6d885a" title="&quot;Bogus mime-type&quot; ">SVN_ERR_BAD_MIME_TYPE</a>, else return success.</p>
<p>Use <em>pool</em> only to find error allocation.</p>
<p>Goal: to match both "foo/bar" and "foo/bar; charset=blah", without being too strict about it, but to disallow mime types that have quotes, newlines, or other garbage on the end, such as might be unsafe in an HTTP header. </p>

</div>
</div>
<a class="anchor" id="a0647da15a0f8c919b370c9c940832b33"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a">svn_node_kind_t</a> svn_node_kind_from_word </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>word</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the appropriate node_kind for <em>word</em>. </p>
<p><em>word</em> is as returned from <a class="el" href="svn__types_8h.html#a908f230efa1571ead34bb883e7a3c924" title="Return a constant string expressing kind as an English word, e.g., &quot;file&quot;, &quot;dir&quot;, etc...">svn_node_kind_to_word()</a>. If <em>word</em> does not represent a recognized kind or is <code>NULL</code>, return <a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9aa8fa9327ee73e41216ad586867fea4b94" title="something&#39;s here, but we don&#39;t know what ">svn_node_unknown</a>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="a908f230efa1571ead34bb883e7a3c924"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* svn_node_kind_to_word </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a">svn_node_kind_t</a>&#160;</td>
          <td class="paramname"><em>kind</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a constant string expressing <em>kind</em> as an English word, e.g., "file", "dir", etc. </p>
<p>The string is not localized, as it may be used for client&lt;-&gt;server communications. If the kind is not recognized, return "unknown".</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="aeb14b5f3ca4e6d152419b8f2d81bf6c0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_revnum_parse </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *&#160;</td>
          <td class="paramname"><em>rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>endptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parse NULL-terminated C string <em>str</em> as a revision number and store its value in <em>rev</em>. </p>
<p>If <em>endptr</em> is non-NULL, then the address of the first non-numeric character in <em>str</em> is stored in it. If there are no digits in <em>str</em>, then <em>endptr</em> is set (if non-NULL), and the error <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a3ed5e34eda2606f23928d75b4ede0fbc" title="&quot;Error parsing revision number&quot; ">SVN_ERR_REVNUM_PARSE_FAILURE</a> error is returned. Negative numbers parsed from <em>str</em> are considered invalid, and result in the same error.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a3d89994fb865d23765e8e437ccca093a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5d">svn_tristate_t</a> svn_tristate__from_word </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>word</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the appropriate tristate for <em>word</em>. </p>
<p>If <em>word</em> is "true", returns <a class="el" href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5dab561d3a1193424ef74ff1813e4fe9e82" title="state known to be true ">svn_tristate_true</a>; if <em>word</em> is "false", returns <a class="el" href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5daf93ff7e8df3d4891ffbbed9e6c5cbb88" title="state known to be false (the constant does not evaulate to false) ">svn_tristate_false</a>, for all other values (including NULL) returns <a class="el" href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5da4f52e9ee42abbd7a4d40ee8eef23cdf2" title="state could be true or false ">svn_tristate_unknown</a>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="a49e104ce0a3b8400810477072799dc78"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* svn_tristate__to_word </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a833b517afeac9ae9b345e47e0d85ea5d">svn_tristate_t</a>&#160;</td>
          <td class="paramname"><em>tristate</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a constant string "true", "false" or NULL representing the value of <em>tristate</em>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="a308af54ac5645f38f7b09c6b64bfde36"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* svn_uuid_generate </td>
          <td>(</td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a formatted Universal Unique IDentifier (UUID) string. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.4. </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 19 2015 09:37:23 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
