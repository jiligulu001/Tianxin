<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Subversion: Malfunctions and assertions</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Malfunctions and assertions</div>  </div>
</div><!--header-->
<div class="contents">

<p>Internal malfunctions and assertions.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga959223b3e45ed38fde9b239a69f2a472"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__malfunction__assertion.html#ga959223b3e45ed38fde9b239a69f2a472">SVN_ERR_MALFUNCTION</a>()</td></tr>
<tr class="memdesc:ga959223b3e45ed38fde9b239a69f2a472"><td class="mdescLeft">&#160;</td><td class="mdescRight">Report that an internal malfunction has occurred, and possibly terminate the program.  <a href="#ga959223b3e45ed38fde9b239a69f2a472">More...</a><br/></td></tr>
<tr class="separator:ga959223b3e45ed38fde9b239a69f2a472"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga18c3e150ee0b87c4eeb61acc72203e51"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__malfunction__assertion.html#ga18c3e150ee0b87c4eeb61acc72203e51">SVN_ERR_MALFUNCTION_NO_RETURN</a>()</td></tr>
<tr class="memdesc:ga18c3e150ee0b87c4eeb61acc72203e51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__error__malfunction__assertion.html#ga959223b3e45ed38fde9b239a69f2a472" title="Report that an internal malfunction has occurred, and possibly terminate the program. ">SVN_ERR_MALFUNCTION()</a>, but without the option of returning an error to the calling function.  <a href="#ga18c3e150ee0b87c4eeb61acc72203e51">More...</a><br/></td></tr>
<tr class="separator:ga18c3e150ee0b87c4eeb61acc72203e51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga72e5264e34a5f884e0b95a73553a310a"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__malfunction__assertion.html#ga72e5264e34a5f884e0b95a73553a310a">SVN_ERR_ASSERT_E</a>(expr, err)</td></tr>
<tr class="memdesc:ga72e5264e34a5f884e0b95a73553a310a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Like <a class="el" href="group__svn__error__malfunction__assertion.html#ga0262f0dfe6997e2f27b46bf1996d4565" title="Check that a condition is true: if not, report an error and possibly terminate the program...">SVN_ERR_ASSERT()</a>, but append ERR to the returned error chain.  <a href="#ga72e5264e34a5f884e0b95a73553a310a">More...</a><br/></td></tr>
<tr class="separator:ga72e5264e34a5f884e0b95a73553a310a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0262f0dfe6997e2f27b46bf1996d4565"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__malfunction__assertion.html#ga0262f0dfe6997e2f27b46bf1996d4565">SVN_ERR_ASSERT</a>(expr)</td></tr>
<tr class="memdesc:ga0262f0dfe6997e2f27b46bf1996d4565"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check that a condition is true: if not, report an error and possibly terminate the program.  <a href="#ga0262f0dfe6997e2f27b46bf1996d4565">More...</a><br/></td></tr>
<tr class="separator:ga0262f0dfe6997e2f27b46bf1996d4565"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf558fc819c1d0c4029a1503b34cdd589"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__malfunction__assertion.html#gaf558fc819c1d0c4029a1503b34cdd589">SVN_ERR_ASSERT_NO_RETURN</a>(expr)</td></tr>
<tr class="memdesc:gaf558fc819c1d0c4029a1503b34cdd589"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__error__malfunction__assertion.html#ga0262f0dfe6997e2f27b46bf1996d4565" title="Check that a condition is true: if not, report an error and possibly terminate the program...">SVN_ERR_ASSERT()</a>, but without the option of returning an error to the calling function.  <a href="#gaf558fc819c1d0c4029a1503b34cdd589">More...</a><br/></td></tr>
<tr class="separator:gaf558fc819c1d0c4029a1503b34cdd589"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga615c96fd3cbc339deeffbed9d3c00d5e"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__malfunction__assertion.html#ga615c96fd3cbc339deeffbed9d3c00d5e">SVN__NOT_IMPLEMENTED</a>()&#160;&#160;&#160;return <a class="el" href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">svn_error__malfunction</a>(<a class="el" href="svn__types_8h.html#aa8cecfc5c5c054d2875c03e77b7be15d">TRUE</a>, __FILE__, __LINE__, &quot;Not implemented.&quot;)</td></tr>
<tr class="memdesc:ga615c96fd3cbc339deeffbed9d3c00d5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Report a "Not implemented" malfunction.  <a href="#ga615c96fd3cbc339deeffbed9d3c00d5e">More...</a><br/></td></tr>
<tr class="separator:ga615c96fd3cbc339deeffbed9d3c00d5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ga8eb40e32bbe9f2f5ceb621611d7f9fd9"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__malfunction__assertion.html#ga8eb40e32bbe9f2f5ceb621611d7f9fd9">svn_error_malfunction_handler_t</a> )(<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> can_return, const char *file, int line, const char *expr)</td></tr>
<tr class="memdesc:ga8eb40e32bbe9f2f5ceb621611d7f9fd9"><td class="mdescLeft">&#160;</td><td class="mdescRight">A type of function that handles an assertion failure or other internal malfunction detected within the Subversion libraries.  <a href="#ga8eb40e32bbe9f2f5ceb621611d7f9fd9">More...</a><br/></td></tr>
<tr class="separator:ga8eb40e32bbe9f2f5ceb621611d7f9fd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga0954e6a6341b3d32c783cba2579858c2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">svn_error__malfunction</a> (<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> can_return, const char *file, int line, const char *expr)</td></tr>
<tr class="memdesc:ga0954e6a6341b3d32c783cba2579858c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">A helper function for the macros that report malfunctions.  <a href="#ga0954e6a6341b3d32c783cba2579858c2">More...</a><br/></td></tr>
<tr class="separator:ga0954e6a6341b3d32c783cba2579858c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga399ab33aa7fcea5cc776a62b56b7ad06"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__svn__error__malfunction__assertion.html#ga8eb40e32bbe9f2f5ceb621611d7f9fd9">svn_error_malfunction_handler_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__malfunction__assertion.html#ga399ab33aa7fcea5cc776a62b56b7ad06">svn_error_set_malfunction_handler</a> (<a class="el" href="group__svn__error__malfunction__assertion.html#ga8eb40e32bbe9f2f5ceb621611d7f9fd9">svn_error_malfunction_handler_t</a> func)</td></tr>
<tr class="memdesc:ga399ab33aa7fcea5cc776a62b56b7ad06"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cause subsequent malfunctions to be handled by <em>func</em>.  <a href="#ga399ab33aa7fcea5cc776a62b56b7ad06">More...</a><br/></td></tr>
<tr class="separator:ga399ab33aa7fcea5cc776a62b56b7ad06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabb40e92a5adfca00da54b9e032771ef7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__svn__error__malfunction__assertion.html#ga8eb40e32bbe9f2f5ceb621611d7f9fd9">svn_error_malfunction_handler_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__malfunction__assertion.html#gabb40e92a5adfca00da54b9e032771ef7">svn_error_get_malfunction_handler</a> (void)</td></tr>
<tr class="memdesc:gabb40e92a5adfca00da54b9e032771ef7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the malfunction handler that is currently in effect.  <a href="#gabb40e92a5adfca00da54b9e032771ef7">More...</a><br/></td></tr>
<tr class="separator:gabb40e92a5adfca00da54b9e032771ef7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3ad3793da54e30aa57e708d2f9e997d1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__malfunction__assertion.html#ga3ad3793da54e30aa57e708d2f9e997d1">svn_error_raise_on_malfunction</a> (<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> can_return, const char *file, int line, const char *expr)</td></tr>
<tr class="memdesc:ga3ad3793da54e30aa57e708d2f9e997d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle a malfunction by returning an error object that describes it.  <a href="#ga3ad3793da54e30aa57e708d2f9e997d1">More...</a><br/></td></tr>
<tr class="separator:ga3ad3793da54e30aa57e708d2f9e997d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga17fc1ce5905f53d7b1107e6678459294"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__error__malfunction__assertion.html#ga17fc1ce5905f53d7b1107e6678459294">svn_error_abort_on_malfunction</a> (<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> can_return, const char *file, int line, const char *expr)</td></tr>
<tr class="memdesc:ga17fc1ce5905f53d7b1107e6678459294"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle a malfunction by printing a message to stderr and aborting.  <a href="#ga17fc1ce5905f53d7b1107e6678459294">More...</a><br/></td></tr>
<tr class="separator:ga17fc1ce5905f53d7b1107e6678459294"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Internal malfunctions and assertions. </p>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="ga615c96fd3cbc339deeffbed9d3c00d5e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN__NOT_IMPLEMENTED</td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>&#160;&#160;&#160;return <a class="el" href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">svn_error__malfunction</a>(<a class="el" href="svn__types_8h.html#aa8cecfc5c5c054d2875c03e77b7be15d">TRUE</a>, __FILE__, __LINE__, &quot;Not implemented.&quot;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Report a "Not implemented" malfunction. </p>
<p>Internal use only. </p>

<p>Definition at line <a class="el" href="svn__error_8h_source.html#l00605">605</a> of file <a class="el" href="svn__error_8h_source.html">svn_error.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga0262f0dfe6997e2f27b46bf1996d4565"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_ERR_ASSERT</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">expr</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">do</span> {                                                                  \</div>
<div class="line">    if (!(expr))                                                        <a class="code" href="group__svn__error__error__creation__destroy.html#ga2d4bba65866869939178e21df8e6fffb">\</a></div>
<div class="line"><a class="code" href="group__svn__error__error__creation__destroy.html#ga2d4bba65866869939178e21df8e6fffb">      SVN_ERR</a>(<a class="code" href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">svn_error__malfunction</a>(<a class="code" href="svn__types_8h.html#aa8cecfc5c5c054d2875c03e77b7be15d">TRUE</a>, __FILE__, __LINE__, #expr)); \</div>
<div class="line">  } <span class="keywordflow">while</span> (0)</div>
<div class="ttc" id="svn__types_8h_html_aa8cecfc5c5c054d2875c03e77b7be15d"><div class="ttname"><a href="svn__types_8h.html#aa8cecfc5c5c054d2875c03e77b7be15d">TRUE</a></div><div class="ttdeci">#define TRUE</div><div class="ttdoc">uhh... </div><div class="ttdef"><b>Definition:</b> <a href="svn__types_8h_source.html#l00143">svn_types.h:143</a></div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_ga2d4bba65866869939178e21df8e6fffb"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#ga2d4bba65866869939178e21df8e6fffb">SVN_ERR</a></div><div class="ttdeci">#define SVN_ERR(expr)</div><div class="ttdoc">A statement macro for checking error values. </div><div class="ttdef"><b>Definition:</b> <a href="svn__error_8h_source.html#l00353">svn_error.h:353</a></div></div>
<div class="ttc" id="group__svn__error__malfunction__assertion_html_ga0954e6a6341b3d32c783cba2579858c2"><div class="ttname"><a href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">svn_error__malfunction</a></div><div class="ttdeci">svn_error_t * svn_error__malfunction(svn_boolean_t can_return, const char *file, int line, const char *expr)</div><div class="ttdoc">A helper function for the macros that report malfunctions. </div></div>
</div><!-- fragment -->
<p>Check that a condition is true: if not, report an error and possibly terminate the program. </p>
<p>If the Boolean expression <em>expr</em> is true, do nothing. Otherwise, act as determined by the current "malfunction handler" which may have been specified by a call to <a class="el" href="group__svn__error__malfunction__assertion.html#ga399ab33aa7fcea5cc776a62b56b7ad06" title="Cause subsequent malfunctions to be handled by func. ">svn_error_set_malfunction_handler()</a> or else is the default handler as specified in that function's documentation. If the malfunction handler returns, then cause the function using this macro to return the error object that it generated.</p>
<dl class="section note"><dt>Note</dt><dd>The intended use of this macro is to check a condition that cannot possibly be false unless there is a bug in the program.</dd>
<dd>
The condition to be checked should not be computationally expensive if it is reached often, as, unlike traditional "assert" statements, the evaluation of this expression is not compiled out in release-mode builds.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.6.</dd></dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__svn__error__malfunction__assertion.html#ga72e5264e34a5f884e0b95a73553a310a" title="Like SVN_ERR_ASSERT(), but append ERR to the returned error chain. ">SVN_ERR_ASSERT_E()</a> </dd></dl>

<p>Definition at line <a class="el" href="svn__error_8h_source.html#l00582">582</a> of file <a class="el" href="svn__error_8h_source.html">svn_error.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga72e5264e34a5f884e0b95a73553a310a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_ERR_ASSERT_E</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">expr, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">err&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">do</span> {                                                                  \</div>
<div class="line">    if (!(expr)) {                                                      \</div>
<div class="line">      return <a class="code" href="group__svn__error__error__creation__destroy.html#ga3478fc47db9ca31d169138aa6ef7daee">svn_error_compose_create</a>(                                  \</div>
<div class="line">               <a class="code" href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">svn_error__malfunction</a>(<a class="code" href="svn__types_8h.html#aa8cecfc5c5c054d2875c03e77b7be15d">TRUE</a>, __FILE__, __LINE__, #expr), \</div>
<div class="line">               (err));                                                  \</div>
<div class="line">    }                                                                   \</div>
<div class="line">  } <span class="keywordflow">while</span> (0)</div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_ga3478fc47db9ca31d169138aa6ef7daee"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#ga3478fc47db9ca31d169138aa6ef7daee">svn_error_compose_create</a></div><div class="ttdeci">svn_error_t * svn_error_compose_create(svn_error_t *err1, svn_error_t *err2)</div><div class="ttdoc">Compose two errors, returning the composition as a brand new error and consuming the original errors...</div></div>
<div class="ttc" id="svn__types_8h_html_aa8cecfc5c5c054d2875c03e77b7be15d"><div class="ttname"><a href="svn__types_8h.html#aa8cecfc5c5c054d2875c03e77b7be15d">TRUE</a></div><div class="ttdeci">#define TRUE</div><div class="ttdoc">uhh... </div><div class="ttdef"><b>Definition:</b> <a href="svn__types_8h_source.html#l00143">svn_types.h:143</a></div></div>
<div class="ttc" id="group__svn__error__malfunction__assertion_html_ga0954e6a6341b3d32c783cba2579858c2"><div class="ttname"><a href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">svn_error__malfunction</a></div><div class="ttdeci">svn_error_t * svn_error__malfunction(svn_boolean_t can_return, const char *file, int line, const char *expr)</div><div class="ttdoc">A helper function for the macros that report malfunctions. </div></div>
</div><!-- fragment -->
<p>Like <a class="el" href="group__svn__error__malfunction__assertion.html#ga0262f0dfe6997e2f27b46bf1996d4565" title="Check that a condition is true: if not, report an error and possibly terminate the program...">SVN_ERR_ASSERT()</a>, but append ERR to the returned error chain. </p>
<p>If EXPR is false, return a malfunction error whose chain includes ERR. If EXPR is true, do nothing. (In particular, this does not clear ERR.)</p>
<p>Types: (svn_boolean_t expr, <a class="el" href="structsvn__error__t.html" title="Subversion error object. ">svn_error_t</a> *err)</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.8. </dd></dl>

<p>Definition at line <a class="el" href="svn__error_8h_source.html#l00546">546</a> of file <a class="el" href="svn__error_8h_source.html">svn_error.h</a>.</p>

</div>
</div>
<a class="anchor" id="gaf558fc819c1d0c4029a1503b34cdd589"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_ERR_ASSERT_NO_RETURN</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">expr</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">do</span> {                                                          \</div>
<div class="line">    if (!(expr)) {                                              <a class="code" href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">\</a></div>
<div class="line"><a class="code" href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">      svn_error__malfunction</a>(<a class="code" href="svn__types_8h.html#aa93f0eb578d23995850d61f7d61c55c1">FALSE</a>, __FILE__, __LINE__, #expr); \</div>
<div class="line">      abort();                                                  \</div>
<div class="line">    }                                                           \</div>
<div class="line">  } <span class="keywordflow">while</span> (0)</div>
<div class="ttc" id="svn__types_8h_html_aa93f0eb578d23995850d61f7d61c55c1"><div class="ttname"><a href="svn__types_8h.html#aa93f0eb578d23995850d61f7d61c55c1">FALSE</a></div><div class="ttdeci">#define FALSE</div><div class="ttdoc">uhh... </div><div class="ttdef"><b>Definition:</b> <a href="svn__types_8h_source.html#l00148">svn_types.h:148</a></div></div>
<div class="ttc" id="group__svn__error__malfunction__assertion_html_ga0954e6a6341b3d32c783cba2579858c2"><div class="ttname"><a href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">svn_error__malfunction</a></div><div class="ttdeci">svn_error_t * svn_error__malfunction(svn_boolean_t can_return, const char *file, int line, const char *expr)</div><div class="ttdoc">A helper function for the macros that report malfunctions. </div></div>
</div><!-- fragment -->
<p>Similar to <a class="el" href="group__svn__error__malfunction__assertion.html#ga0262f0dfe6997e2f27b46bf1996d4565" title="Check that a condition is true: if not, report an error and possibly terminate the program...">SVN_ERR_ASSERT()</a>, but without the option of returning an error to the calling function. </p>
<p>If possible you should use <a class="el" href="group__svn__error__malfunction__assertion.html#ga0262f0dfe6997e2f27b46bf1996d4565" title="Check that a condition is true: if not, report an error and possibly terminate the program...">SVN_ERR_ASSERT()</a> instead.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

<p>Definition at line <a class="el" href="svn__error_8h_source.html#l00596">596</a> of file <a class="el" href="svn__error_8h_source.html">svn_error.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga959223b3e45ed38fde9b239a69f2a472"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_ERR_MALFUNCTION</td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">do</span> {                                                             \</div>
<div class="line">    return <a class="code" href="group__svn__error__error__creation__destroy.html#gaebf3a4b9b88c5ac6f6eec7d9792a2288">svn_error_trace</a>(<a class="code" href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">svn_error__malfunction</a>(                 \</div>
<div class="line">                                 <a class="code" href="svn__types_8h.html#aa8cecfc5c5c054d2875c03e77b7be15d">TRUE</a>, __FILE__, __LINE__, NULL)); \</div>
<div class="line">  } <span class="keywordflow">while</span> (0)</div>
<div class="ttc" id="svn__types_8h_html_aa8cecfc5c5c054d2875c03e77b7be15d"><div class="ttname"><a href="svn__types_8h.html#aa8cecfc5c5c054d2875c03e77b7be15d">TRUE</a></div><div class="ttdeci">#define TRUE</div><div class="ttdoc">uhh... </div><div class="ttdef"><b>Definition:</b> <a href="svn__types_8h_source.html#l00143">svn_types.h:143</a></div></div>
<div class="ttc" id="group__svn__error__malfunction__assertion_html_ga0954e6a6341b3d32c783cba2579858c2"><div class="ttname"><a href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">svn_error__malfunction</a></div><div class="ttdeci">svn_error_t * svn_error__malfunction(svn_boolean_t can_return, const char *file, int line, const char *expr)</div><div class="ttdoc">A helper function for the macros that report malfunctions. </div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_gaebf3a4b9b88c5ac6f6eec7d9792a2288"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#gaebf3a4b9b88c5ac6f6eec7d9792a2288">svn_error_trace</a></div><div class="ttdeci">#define svn_error_trace(expr)</div><div class="ttdoc">A macro for wrapping an error in a source-location trace message. </div><div class="ttdef"><b>Definition:</b> <a href="svn__error_8h_source.html#l00375">svn_error.h:375</a></div></div>
</div><!-- fragment -->
<p>Report that an internal malfunction has occurred, and possibly terminate the program. </p>
<p>Act as determined by the current "malfunction handler" which may have been specified by a call to <a class="el" href="group__svn__error__malfunction__assertion.html#ga399ab33aa7fcea5cc776a62b56b7ad06" title="Cause subsequent malfunctions to be handled by func. ">svn_error_set_malfunction_handler()</a> or else is the default handler as specified in that function's documentation. If the malfunction handler returns, then cause the function using this macro to return the error object that it generated.</p>
<dl class="section note"><dt>Note</dt><dd>The intended use of this macro is where execution reaches a point that cannot possibly be reached unless there is a bug in the program.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

<p>Definition at line <a class="el" href="svn__error_8h_source.html#l00513">513</a> of file <a class="el" href="svn__error_8h_source.html">svn_error.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga18c3e150ee0b87c4eeb61acc72203e51"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_ERR_MALFUNCTION_NO_RETURN</td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">do</span> {                                                       <a class="code" href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">\</a></div>
<div class="line"><a class="code" href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">    svn_error__malfunction</a>(<a class="code" href="svn__types_8h.html#aa93f0eb578d23995850d61f7d61c55c1">FALSE</a>, __FILE__, __LINE__, NULL); \</div>
<div class="line">    abort();                                                 \</div>
<div class="line">  } <span class="keywordflow">while</span> (1)</div>
<div class="ttc" id="svn__types_8h_html_aa93f0eb578d23995850d61f7d61c55c1"><div class="ttname"><a href="svn__types_8h.html#aa93f0eb578d23995850d61f7d61c55c1">FALSE</a></div><div class="ttdeci">#define FALSE</div><div class="ttdoc">uhh... </div><div class="ttdef"><b>Definition:</b> <a href="svn__types_8h_source.html#l00148">svn_types.h:148</a></div></div>
<div class="ttc" id="group__svn__error__malfunction__assertion_html_ga0954e6a6341b3d32c783cba2579858c2"><div class="ttname"><a href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">svn_error__malfunction</a></div><div class="ttdeci">svn_error_t * svn_error__malfunction(svn_boolean_t can_return, const char *file, int line, const char *expr)</div><div class="ttdoc">A helper function for the macros that report malfunctions. </div></div>
</div><!-- fragment -->
<p>Similar to <a class="el" href="group__svn__error__malfunction__assertion.html#ga959223b3e45ed38fde9b239a69f2a472" title="Report that an internal malfunction has occurred, and possibly terminate the program. ">SVN_ERR_MALFUNCTION()</a>, but without the option of returning an error to the calling function. </p>
<p>If possible you should use <a class="el" href="group__svn__error__malfunction__assertion.html#ga959223b3e45ed38fde9b239a69f2a472" title="Report that an internal malfunction has occurred, and possibly terminate the program. ">SVN_ERR_MALFUNCTION()</a> instead.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

<p>Definition at line <a class="el" href="svn__error_8h_source.html#l00526">526</a> of file <a class="el" href="svn__error_8h_source.html">svn_error.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="ga8eb40e32bbe9f2f5ceb621611d7f9fd9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* svn_error_malfunction_handler_t)(<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> can_return, const char *file, int line, const char *expr)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A type of function that handles an assertion failure or other internal malfunction detected within the Subversion libraries. </p>
<p>The error occurred in the source file <em>file</em> at line <em>line</em>, and was an assertion failure of the expression <em>expr</em>, or, if <em>expr</em> is null, an unconditional error.</p>
<p>If <em>can_return</em> is false a function of this type must never return.</p>
<p>If <em>can_return</em> is true a function of this type must do one of:</p>
<ul>
<li>Return an error object describing the error, using an error code in the category SVN_ERR_MALFUNC_CATEGORY_START.</li>
<li>Never return.</li>
</ul>
<p>The function may alter its behaviour according to compile-time and run-time and even interactive conditions.</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__svn__error__error__groups.html#ga763e51bf7f175978a7e5f8d38f731b75" title="Evaluates to TRUE iff apr_err (of type apr_status_t) is in the given category, which should be one of...">SVN_ERROR_IN_CATEGORY()</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

<p>Definition at line <a class="el" href="svn__error_8h_source.html#l00651">651</a> of file <a class="el" href="svn__error_8h_source.html">svn_error.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga0954e6a6341b3d32c783cba2579858c2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_error__malfunction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>can_return</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>expr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A helper function for the macros that report malfunctions. </p>
<p>Handle a malfunction by calling the current "malfunction handler" which may have been specified by a call to <a class="el" href="group__svn__error__malfunction__assertion.html#ga399ab33aa7fcea5cc776a62b56b7ad06" title="Cause subsequent malfunctions to be handled by func. ">svn_error_set_malfunction_handler()</a> or else is the default handler as specified in that function's documentation.</p>
<p>Pass all of the parameters to the handler. The error occurred in the source file <em>file</em> at line <em>line</em>, and was an assertion failure of the expression <em>expr</em>, or, if <em>expr</em> is null, an unconditional error.</p>
<p>If <em>can_return</em> is true, the handler can return an error object that is returned by the caller. If <em>can_return</em> is false the method should never return. (The caller will call abort())</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="ga17fc1ce5905f53d7b1107e6678459294"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_error_abort_on_malfunction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>can_return</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>expr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Handle a malfunction by printing a message to stderr and aborting. </p>
<p>This function implements <code>svn_error_malfunction_handler_t</code>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="gabb40e92a5adfca00da54b9e032771ef7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__svn__error__malfunction__assertion.html#ga8eb40e32bbe9f2f5ceb621611d7f9fd9">svn_error_malfunction_handler_t</a> svn_error_get_malfunction_handler </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the malfunction handler that is currently in effect. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.9. </dd></dl>

</div>
</div>
<a class="anchor" id="ga3ad3793da54e30aa57e708d2f9e997d1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_error_raise_on_malfunction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>can_return</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>expr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Handle a malfunction by returning an error object that describes it. </p>
<p>When <em>can_return</em> is false, abort()</p>
<p>This function implements <code>svn_error_malfunction_handler_t</code>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="ga399ab33aa7fcea5cc776a62b56b7ad06"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__svn__error__malfunction__assertion.html#ga8eb40e32bbe9f2f5ceb621611d7f9fd9">svn_error_malfunction_handler_t</a> svn_error_set_malfunction_handler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__error__malfunction__assertion.html#ga8eb40e32bbe9f2f5ceb621611d7f9fd9">svn_error_malfunction_handler_t</a>&#160;</td>
          <td class="paramname"><em>func</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Cause subsequent malfunctions to be handled by <em>func</em>. </p>
<p>Return the handler that was previously in effect.</p>
<p><em>func</em> may not be null.</p>
<dl class="section note"><dt>Note</dt><dd>The default handler is <a class="el" href="group__svn__error__malfunction__assertion.html#ga17fc1ce5905f53d7b1107e6678459294" title="Handle a malfunction by printing a message to stderr and aborting. ">svn_error_abort_on_malfunction()</a>.</dd>
<dd>
This function must be called in a single-threaded context.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 19 2015 09:17:27 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
