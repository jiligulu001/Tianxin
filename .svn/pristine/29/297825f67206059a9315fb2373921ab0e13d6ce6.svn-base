<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Subversion: svn_repos.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">svn_repos.h</div>  </div>
</div>
<div class="contents">
<a href="svn__repos_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**</span>
<a name="l00002"></a>00002 <span class="comment"> * @copyright</span>
<a name="l00003"></a>00003 <span class="comment"> * ====================================================================</span>
<a name="l00004"></a>00004 <span class="comment"> *    Licensed to the Apache Software Foundation (ASF) under one</span>
<a name="l00005"></a>00005 <span class="comment"> *    or more contributor license agreements.  See the NOTICE file</span>
<a name="l00006"></a>00006 <span class="comment"> *    distributed with this work for additional information</span>
<a name="l00007"></a>00007 <span class="comment"> *    regarding copyright ownership.  The ASF licenses this file</span>
<a name="l00008"></a>00008 <span class="comment"> *    to you under the Apache License, Version 2.0 (the</span>
<a name="l00009"></a>00009 <span class="comment"> *    &quot;License&quot;); you may not use this file except in compliance</span>
<a name="l00010"></a>00010 <span class="comment"> *    with the License.  You may obtain a copy of the License at</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00013"></a>00013 <span class="comment"> *</span>
<a name="l00014"></a>00014 <span class="comment"> *    Unless required by applicable law or agreed to in writing,</span>
<a name="l00015"></a>00015 <span class="comment"> *    software distributed under the License is distributed on an</span>
<a name="l00016"></a>00016 <span class="comment"> *    &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span>
<a name="l00017"></a>00017 <span class="comment"> *    KIND, either express or implied.  See the License for the</span>
<a name="l00018"></a>00018 <span class="comment"> *    specific language governing permissions and limitations</span>
<a name="l00019"></a>00019 <span class="comment"> *    under the License.</span>
<a name="l00020"></a>00020 <span class="comment"> * ====================================================================</span>
<a name="l00021"></a>00021 <span class="comment"> * @endcopyright</span>
<a name="l00022"></a>00022 <span class="comment"> *</span>
<a name="l00023"></a>00023 <span class="comment"> * @file svn_repos.h</span>
<a name="l00024"></a>00024 <span class="comment"> * @brief Tools built on top of the filesystem.</span>
<a name="l00025"></a>00025 <span class="comment"> */</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef SVN_REPOS_H</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define SVN_REPOS_H</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;apr_pools.h&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;apr_hash.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;apr_tables.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;apr_time.h&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="svn__types_8h.html" title="Subversion&#39;s data types.">svn_types.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="svn__string_8h.html" title="Counted-length strings for Subversion, plus some C string goodies.">svn_string.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="svn__delta_8h.html" title="Delta-parsing.">svn_delta.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="svn__fs_8h.html" title="Interface to the Subversion filesystem.">svn_fs.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="svn__io_8h.html" title="General file I/O for Subversion.">svn_io.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="svn__mergeinfo_8h.html" title="mergeinfo handling and processing">svn_mergeinfo.h</a>&quot;</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {
<a name="l00045"></a>00045 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="comment">/* ---------------------------------------------------------------*/</span>
<a name="l00048"></a>00048 <span class="comment"></span>
<a name="l00049"></a>00049 <span class="comment">/**</span>
<a name="l00050"></a>00050 <span class="comment"> * Get libsvn_repos version information.</span>
<a name="l00051"></a>00051 <span class="comment"> *</span>
<a name="l00052"></a>00052 <span class="comment"> * @since New in 1.1.</span>
<a name="l00053"></a>00053 <span class="comment"> */</span>
<a name="l00054"></a>00054 <span class="keyword">const</span> <a class="code" href="structsvn__version__t.html" title="Version information.">svn_version_t</a> *
<a name="l00055"></a>00055 <a class="code" href="svn__repos_8h.html#a3b81bc5193a4fc478c7668717493add6" title="Get libsvn_repos version information.">svn_repos_version</a>(<span class="keywordtype">void</span>);
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="comment">/* Some useful enums.  They need to be declared here for the notification</span>
<a name="l00059"></a>00059 <span class="comment">   system to pick them up. */</span><span class="comment"></span>
<a name="l00060"></a>00060 <span class="comment">/** The different &quot;actions&quot; attached to nodes in the dumpfile. */</span>
<a name="l00061"></a><a class="code" href="svn__repos_8h.html#a089c9789cdc596336839e9ab074970c4">00061</a> <span class="keyword">enum</span> <a class="code" href="svn__repos_8h.html#a089c9789cdc596336839e9ab074970c4" title="The different &quot;actions&quot; attached to nodes in the dumpfile.">svn_node_action</a>
<a name="l00062"></a>00062 {
<a name="l00063"></a>00063   svn_node_action_change,
<a name="l00064"></a>00064   svn_node_action_add,
<a name="l00065"></a>00065   svn_node_action_delete,
<a name="l00066"></a>00066   svn_node_action_replace
<a name="l00067"></a>00067 };
<a name="l00068"></a>00068 <span class="comment"></span>
<a name="l00069"></a>00069 <span class="comment">/** The different policies for processing the UUID in the dumpfile. */</span>
<a name="l00070"></a><a class="code" href="svn__repos_8h.html#a3f25f6afc6c9fc6de9327ea8960a5360">00070</a> <span class="keyword">enum</span> <a class="code" href="svn__repos_8h.html#a3f25f6afc6c9fc6de9327ea8960a5360" title="The different policies for processing the UUID in the dumpfile.">svn_repos_load_uuid</a>
<a name="l00071"></a>00071 {
<a name="l00072"></a>00072   svn_repos_load_uuid_default,
<a name="l00073"></a>00073   svn_repos_load_uuid_ignore,
<a name="l00074"></a>00074   svn_repos_load_uuid_force
<a name="l00075"></a>00075 };
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 <span class="comment"></span>
<a name="l00078"></a>00078 <span class="comment">/** Callback type for checking authorization on paths produced by (at</span>
<a name="l00079"></a>00079 <span class="comment"> * least) svn_repos_dir_delta2().</span>
<a name="l00080"></a>00080 <span class="comment"> *</span>
<a name="l00081"></a>00081 <span class="comment"> * Set @a *allowed to TRUE to indicate that some operation is</span>
<a name="l00082"></a>00082 <span class="comment"> * authorized for @a path in @a root, or set it to FALSE to indicate</span>
<a name="l00083"></a>00083 <span class="comment"> * unauthorized (presumably according to state stored in @a baton).</span>
<a name="l00084"></a>00084 <span class="comment"> *</span>
<a name="l00085"></a>00085 <span class="comment"> * Do not assume @a pool has any lifetime beyond this call.</span>
<a name="l00086"></a>00086 <span class="comment"> *</span>
<a name="l00087"></a>00087 <span class="comment"> * The exact operation being authorized depends on the callback</span>
<a name="l00088"></a>00088 <span class="comment"> * implementation.  For read authorization, for example, the caller</span>
<a name="l00089"></a>00089 <span class="comment"> * would implement an instance that does read checking, and pass it as</span>
<a name="l00090"></a>00090 <span class="comment"> * a parameter named [perhaps] &#39;authz_read_func&#39;.  The receiver of</span>
<a name="l00091"></a>00091 <span class="comment"> * that parameter might also take another parameter named</span>
<a name="l00092"></a>00092 <span class="comment"> * &#39;authz_write_func&#39;, which although sharing this type, would be a</span>
<a name="l00093"></a>00093 <span class="comment"> * different implementation.</span>
<a name="l00094"></a>00094 <span class="comment"> *</span>
<a name="l00095"></a>00095 <span class="comment"> * @note If someday we want more sophisticated authorization states</span>
<a name="l00096"></a>00096 <span class="comment"> * than just yes/no, @a allowed can become an enum type.</span>
<a name="l00097"></a>00097 <span class="comment"> */</span>
<a name="l00098"></a><a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8">00098</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_repos_authz_func_t)(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *allowed,
<a name="l00099"></a>00099                                                <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l00100"></a>00100                                                <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00101"></a>00101                                                <span class="keywordtype">void</span> *baton,
<a name="l00102"></a>00102                                                apr_pool_t *pool);
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="comment"></span>
<a name="l00105"></a>00105 <span class="comment">/** An enum defining the kinds of access authz looks up.</span>
<a name="l00106"></a>00106 <span class="comment"> *</span>
<a name="l00107"></a>00107 <span class="comment"> * @since New in 1.3.</span>
<a name="l00108"></a>00108 <span class="comment"> */</span>
<a name="l00109"></a><a class="code" href="svn__repos_8h.html#a90d4f1b918bc84e87963fc5fed5dcb26">00109</a> <span class="keyword">typedef</span> <span class="keyword">enum</span> <a class="code" href="svn__repos_8h.html#a90d4f1b918bc84e87963fc5fed5dcb26" title="An enum defining the kinds of access authz looks up.">svn_repos_authz_access_t</a>
<a name="l00110"></a>00110 {<span class="comment"></span>
<a name="l00111"></a>00111 <span class="comment">  /** No access. */</span>
<a name="l00112"></a><a class="code" href="svn__repos_8h.html#a90d4f1b918bc84e87963fc5fed5dcb26aff5fe6d567a388a3f0ac56c07efc644d">00112</a>   <a class="code" href="svn__repos_8h.html#a90d4f1b918bc84e87963fc5fed5dcb26aff5fe6d567a388a3f0ac56c07efc644d" title="No access.">svn_authz_none</a> = 0,
<a name="l00113"></a>00113 <span class="comment"></span>
<a name="l00114"></a>00114 <span class="comment">  /** Path can be read. */</span>
<a name="l00115"></a><a class="code" href="svn__repos_8h.html#a90d4f1b918bc84e87963fc5fed5dcb26a28e8e499b87ca8243c391b90a2544e53">00115</a>   <a class="code" href="svn__repos_8h.html#a90d4f1b918bc84e87963fc5fed5dcb26a28e8e499b87ca8243c391b90a2544e53" title="Path can be read.">svn_authz_read</a> = 1,
<a name="l00116"></a>00116 <span class="comment"></span>
<a name="l00117"></a>00117 <span class="comment">  /** Path can be altered. */</span>
<a name="l00118"></a><a class="code" href="svn__repos_8h.html#a90d4f1b918bc84e87963fc5fed5dcb26a178f2e29b60d1f142a11db104fcf1758">00118</a>   <a class="code" href="svn__repos_8h.html#a90d4f1b918bc84e87963fc5fed5dcb26a178f2e29b60d1f142a11db104fcf1758" title="Path can be altered.">svn_authz_write</a> = 2,
<a name="l00119"></a>00119 <span class="comment"></span>
<a name="l00120"></a>00120 <span class="comment">  /** The other access credentials are recursive. */</span>
<a name="l00121"></a><a class="code" href="svn__repos_8h.html#a90d4f1b918bc84e87963fc5fed5dcb26a27842cbdc39c9d360e9ba8e9b91b70cb">00121</a>   <a class="code" href="svn__repos_8h.html#a90d4f1b918bc84e87963fc5fed5dcb26a27842cbdc39c9d360e9ba8e9b91b70cb" title="The other access credentials are recursive.">svn_authz_recursive</a> = 4
<a name="l00122"></a>00122 } <a class="code" href="svn__repos_8h.html#a90d4f1b918bc84e87963fc5fed5dcb26" title="An enum defining the kinds of access authz looks up.">svn_repos_authz_access_t</a>;
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 <span class="comment"></span>
<a name="l00125"></a>00125 <span class="comment">/** Callback type for checking authorization on paths produced by</span>
<a name="l00126"></a>00126 <span class="comment"> * the repository commit editor.</span>
<a name="l00127"></a>00127 <span class="comment"> *</span>
<a name="l00128"></a>00128 <span class="comment"> * Set @a *allowed to TRUE to indicate that the @a required access on</span>
<a name="l00129"></a>00129 <span class="comment"> * @a path in @a root is authorized, or set it to FALSE to indicate</span>
<a name="l00130"></a>00130 <span class="comment"> * unauthorized (presumable according to state stored in @a baton).</span>
<a name="l00131"></a>00131 <span class="comment"> *</span>
<a name="l00132"></a>00132 <span class="comment"> * If @a path is NULL, the callback should perform a global authz</span>
<a name="l00133"></a>00133 <span class="comment"> * lookup for the @a required access.  That is, the lookup should</span>
<a name="l00134"></a>00134 <span class="comment"> * check if the @a required access is granted for at least one path of</span>
<a name="l00135"></a>00135 <span class="comment"> * the repository, and set @a *allowed to TRUE if so.  @a root may</span>
<a name="l00136"></a>00136 <span class="comment"> * also be NULL if @a path is NULL.</span>
<a name="l00137"></a>00137 <span class="comment"> *</span>
<a name="l00138"></a>00138 <span class="comment"> * This callback is very similar to svn_repos_authz_func_t, with the</span>
<a name="l00139"></a>00139 <span class="comment"> * exception of the addition of the @a required parameter.</span>
<a name="l00140"></a>00140 <span class="comment"> * This is due to historical reasons: when authz was first implemented</span>
<a name="l00141"></a>00141 <span class="comment"> * for svn_repos_dir_delta2(), it seemed there would need only checks</span>
<a name="l00142"></a>00142 <span class="comment"> * for read and write operations, hence the svn_repos_authz_func_t</span>
<a name="l00143"></a>00143 <span class="comment"> * callback prototype and usage scenario.  But it was then realized</span>
<a name="l00144"></a>00144 <span class="comment"> * that lookups due to copying needed to be recursive, and that</span>
<a name="l00145"></a>00145 <span class="comment"> * brute-force recursive lookups didn&#39;t square with the O(1)</span>
<a name="l00146"></a>00146 <span class="comment"> * performances a copy operation should have.</span>
<a name="l00147"></a>00147 <span class="comment"> *</span>
<a name="l00148"></a>00148 <span class="comment"> * So a special way to ask for a recursive lookup was introduced.  The</span>
<a name="l00149"></a>00149 <span class="comment"> * commit editor needs this capability to retain acceptable</span>
<a name="l00150"></a>00150 <span class="comment"> * performance.  Instead of revving the existing callback, causing</span>
<a name="l00151"></a>00151 <span class="comment"> * unnecessary revving of functions that don&#39;t actually need the</span>
<a name="l00152"></a>00152 <span class="comment"> * extended functionality, this second, more complete callback was</span>
<a name="l00153"></a>00153 <span class="comment"> * introduced, for use by the commit editor.</span>
<a name="l00154"></a>00154 <span class="comment"> *</span>
<a name="l00155"></a>00155 <span class="comment"> * Some day, it would be nice to reunite these two callbacks and do</span>
<a name="l00156"></a>00156 <span class="comment"> * the necessary revving anyway, but for the time being, this dual</span>
<a name="l00157"></a>00157 <span class="comment"> * callback mechanism will do.</span>
<a name="l00158"></a>00158 <span class="comment"> */</span>
<a name="l00159"></a>00159 <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_repos_authz_callback_t)
<a name="l00160"></a><a class="code" href="svn__repos_8h.html#aface4990939fd87037b6e7b7cdff47ca">00160</a>   (<a class="code" href="svn__repos_8h.html#a90d4f1b918bc84e87963fc5fed5dcb26" title="An enum defining the kinds of access authz looks up.">svn_repos_authz_access_t</a> required,
<a name="l00161"></a>00161    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *allowed,
<a name="l00162"></a>00162    <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l00163"></a>00163    <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00164"></a>00164    <span class="keywordtype">void</span> *baton,
<a name="l00165"></a>00165    apr_pool_t *pool);
<a name="l00166"></a>00166 <span class="comment"></span>
<a name="l00167"></a>00167 <span class="comment">/**</span>
<a name="l00168"></a>00168 <span class="comment"> * Similar to #svn_file_rev_handler_t, but without the @a</span>
<a name="l00169"></a>00169 <span class="comment"> * result_of_merge parameter.</span>
<a name="l00170"></a>00170 <span class="comment"> *</span>
<a name="l00171"></a>00171 <span class="comment"> * @deprecated Provided for backward compatibility with 1.4 API.</span>
<a name="l00172"></a>00172 <span class="comment"> * @since New in 1.1.</span>
<a name="l00173"></a>00173 <span class="comment"> */</span>
<a name="l00174"></a>00174 <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_repos_file_rev_handler_t)
<a name="l00175"></a><a class="code" href="svn__repos_8h.html#a4610a1f09d8e2be17e054a8d82e4475a">00175</a>   (<span class="keywordtype">void</span> *baton,
<a name="l00176"></a>00176    <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00177"></a>00177    <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l00178"></a>00178    apr_hash_t *rev_props,
<a name="l00179"></a>00179    <a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> *delta_handler,
<a name="l00180"></a>00180    <span class="keywordtype">void</span> **delta_baton,
<a name="l00181"></a>00181    apr_array_header_t *prop_diffs,
<a name="l00182"></a>00182    apr_pool_t *pool);
<a name="l00183"></a>00183 
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 <span class="comment">/* Notification system. */</span>
<a name="l00186"></a>00186 <span class="comment"></span>
<a name="l00187"></a>00187 <span class="comment">/** The type of action occurring.</span>
<a name="l00188"></a>00188 <span class="comment"> *</span>
<a name="l00189"></a>00189 <span class="comment"> * @since New in 1.7.</span>
<a name="l00190"></a>00190 <span class="comment"> */</span>
<a name="l00191"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183">00191</a> <span class="keyword">typedef</span> <span class="keyword">enum</span> <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183" title="The type of action occurring.">svn_repos_notify_action_t</a>
<a name="l00192"></a>00192 {<span class="comment"></span>
<a name="l00193"></a>00193 <span class="comment">  /** A warning message is waiting. */</span>
<a name="l00194"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a10a5b2e515291a051339282acbac53c9">00194</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a10a5b2e515291a051339282acbac53c9" title="A warning message is waiting.">svn_repos_notify_warning</a> = 0,
<a name="l00195"></a>00195 <span class="comment"></span>
<a name="l00196"></a>00196 <span class="comment">  /** A revision has finished being dumped. */</span>
<a name="l00197"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183acd6ecf45a6daa5a3806f9305c94dc1ca">00197</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183acd6ecf45a6daa5a3806f9305c94dc1ca" title="A revision has finished being dumped.">svn_repos_notify_dump_rev_end</a>,
<a name="l00198"></a>00198 <span class="comment"></span>
<a name="l00199"></a>00199 <span class="comment">  /** A revision has finished being verified. */</span>
<a name="l00200"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a26850dcf2946789d2cd016a37e635764">00200</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a26850dcf2946789d2cd016a37e635764" title="A revision has finished being verified.">svn_repos_notify_verify_rev_end</a>,
<a name="l00201"></a>00201 <span class="comment"></span>
<a name="l00202"></a>00202 <span class="comment">  /** All revisions have finished being dumped. */</span>
<a name="l00203"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183aa8159a497e6ff683208edfd272fc2dfe">00203</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183aa8159a497e6ff683208edfd272fc2dfe" title="All revisions have finished being dumped.">svn_repos_notify_dump_end</a>,
<a name="l00204"></a>00204 <span class="comment"></span>
<a name="l00205"></a>00205 <span class="comment">  /** All revisions have finished being verified. */</span>
<a name="l00206"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183ac949d21d63b6cde87fb87a949a21e9ca">00206</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183ac949d21d63b6cde87fb87a949a21e9ca" title="All revisions have finished being verified.">svn_repos_notify_verify_end</a>,
<a name="l00207"></a>00207 <span class="comment"></span>
<a name="l00208"></a>00208 <span class="comment">  /** packing of an FSFS shard has commenced */</span>
<a name="l00209"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a8a3292435b644ab8ea61d8b0d71a1986">00209</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a8a3292435b644ab8ea61d8b0d71a1986" title="packing of an FSFS shard has commenced">svn_repos_notify_pack_shard_start</a>,
<a name="l00210"></a>00210 <span class="comment"></span>
<a name="l00211"></a>00211 <span class="comment">  /** packing of an FSFS shard is completed */</span>
<a name="l00212"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183aee3b89ed36c1a4c611f8f8aa08c003fe">00212</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183aee3b89ed36c1a4c611f8f8aa08c003fe" title="packing of an FSFS shard is completed">svn_repos_notify_pack_shard_end</a>,
<a name="l00213"></a>00213 <span class="comment"></span>
<a name="l00214"></a>00214 <span class="comment">  /** packing of the shard revprops has commenced */</span>
<a name="l00215"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183ab3865aa563ce055e28b8eccfd5979737">00215</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183ab3865aa563ce055e28b8eccfd5979737" title="packing of the shard revprops has commenced">svn_repos_notify_pack_shard_start_revprop</a>,
<a name="l00216"></a>00216 <span class="comment"></span>
<a name="l00217"></a>00217 <span class="comment">  /** packing of the shard revprops has completed */</span>
<a name="l00218"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a488df21d64aac6d7fb1254af6c0a9270">00218</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a488df21d64aac6d7fb1254af6c0a9270" title="packing of the shard revprops has completed">svn_repos_notify_pack_shard_end_revprop</a>,
<a name="l00219"></a>00219 <span class="comment"></span>
<a name="l00220"></a>00220 <span class="comment">  /** A revision has begun loading */</span>
<a name="l00221"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183aac3047b90e204ccc1890b0ee9a09e885">00221</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183aac3047b90e204ccc1890b0ee9a09e885" title="A revision has begun loading.">svn_repos_notify_load_txn_start</a>,
<a name="l00222"></a>00222 <span class="comment"></span>
<a name="l00223"></a>00223 <span class="comment">  /** A revision has finished loading */</span>
<a name="l00224"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a07ecdb03c2244abdd15e73a3be4cec4b">00224</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a07ecdb03c2244abdd15e73a3be4cec4b" title="A revision has finished loading.">svn_repos_notify_load_txn_committed</a>,
<a name="l00225"></a>00225 <span class="comment"></span>
<a name="l00226"></a>00226 <span class="comment">  /** A node has begun loading */</span>
<a name="l00227"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183aa874da1e7bb92b47385f3594d22e4444">00227</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183aa874da1e7bb92b47385f3594d22e4444" title="A node has begun loading.">svn_repos_notify_load_node_start</a>,
<a name="l00228"></a>00228 <span class="comment"></span>
<a name="l00229"></a>00229 <span class="comment">  /** A node has finished loading */</span>
<a name="l00230"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183af5249cf0ad7083d74730d1a18b291efe">00230</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183af5249cf0ad7083d74730d1a18b291efe" title="A node has finished loading.">svn_repos_notify_load_node_done</a>,
<a name="l00231"></a>00231 <span class="comment"></span>
<a name="l00232"></a>00232 <span class="comment">  /** A copied node has been encountered */</span>
<a name="l00233"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a0f9dcbca1962e4285e29e2969f889385">00233</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a0f9dcbca1962e4285e29e2969f889385" title="A copied node has been encountered.">svn_repos_notify_load_copied_node</a>,
<a name="l00234"></a>00234 <span class="comment"></span>
<a name="l00235"></a>00235 <span class="comment">  /** Mergeinfo has been normalized */</span>
<a name="l00236"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a75e90a292a2aed81396074e73412b795">00236</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a75e90a292a2aed81396074e73412b795" title="Mergeinfo has been normalized.">svn_repos_notify_load_normalized_mergeinfo</a>,
<a name="l00237"></a>00237 <span class="comment"></span>
<a name="l00238"></a>00238 <span class="comment">  /** The operation has acquired a mutex for the repo. */</span>
<a name="l00239"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a3dbf134f6be34727f46a09df0faf3bb0">00239</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a3dbf134f6be34727f46a09df0faf3bb0" title="The operation has acquired a mutex for the repo.">svn_repos_notify_mutex_acquired</a>,
<a name="l00240"></a>00240 <span class="comment"></span>
<a name="l00241"></a>00241 <span class="comment">  /** Recover has started. */</span>
<a name="l00242"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a9d8bae47d4d045aa95f1cf2a6f4cdd93">00242</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183a9d8bae47d4d045aa95f1cf2a6f4cdd93" title="Recover has started.">svn_repos_notify_recover_start</a>,
<a name="l00243"></a>00243 <span class="comment"></span>
<a name="l00244"></a>00244 <span class="comment">  /** Upgrade has started. */</span>
<a name="l00245"></a><a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183ae4c3b4b8952ceb6da580095d1269809d">00245</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183ae4c3b4b8952ceb6da580095d1269809d" title="Upgrade has started.">svn_repos_notify_upgrade_start</a>
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 } <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183" title="The type of action occurring.">svn_repos_notify_action_t</a>;
<a name="l00248"></a>00248 <span class="comment"></span>
<a name="l00249"></a>00249 <span class="comment">/** The type of error occurring.</span>
<a name="l00250"></a>00250 <span class="comment"> *</span>
<a name="l00251"></a>00251 <span class="comment"> * @since New in 1.7.</span>
<a name="l00252"></a>00252 <span class="comment"> */</span>
<a name="l00253"></a><a class="code" href="svn__repos_8h.html#ad6b8ccc40089f3a414ebc45ee8d7a53e">00253</a> <span class="keyword">typedef</span> <span class="keyword">enum</span> <a class="code" href="svn__repos_8h.html#ad6b8ccc40089f3a414ebc45ee8d7a53e" title="The type of error occurring.">svn_repos_notify_warning_t</a>
<a name="l00254"></a>00254 {<span class="comment"></span>
<a name="l00255"></a>00255 <span class="comment">  /** Referencing copy source data from a revision earlier than the</span>
<a name="l00256"></a>00256 <span class="comment">   * first revision dumped. */</span>
<a name="l00257"></a><a class="code" href="svn__repos_8h.html#ad6b8ccc40089f3a414ebc45ee8d7a53ea75b8db58cf03933889a935fe32bb224d">00257</a>   <a class="code" href="svn__repos_8h.html#ad6b8ccc40089f3a414ebc45ee8d7a53ea75b8db58cf03933889a935fe32bb224d" title="Referencing copy source data from a revision earlier than the first revision dumped.">svn_repos_notify_warning_found_old_reference</a>,
<a name="l00258"></a>00258 <span class="comment"></span>
<a name="l00259"></a>00259 <span class="comment">  /** An #SVN_PROP_MERGEINFO property&#39;s encoded mergeinfo references a</span>
<a name="l00260"></a>00260 <span class="comment">   * revision earlier than the first revision dumped. */</span>
<a name="l00261"></a><a class="code" href="svn__repos_8h.html#ad6b8ccc40089f3a414ebc45ee8d7a53ea227ce8f4ecb3ced554987ef11d2bb82f">00261</a>   <a class="code" href="svn__repos_8h.html#ad6b8ccc40089f3a414ebc45ee8d7a53ea227ce8f4ecb3ced554987ef11d2bb82f" title="An SVN_PROP_MERGEINFO property&#39;s encoded mergeinfo references a revision earlier than the first revis...">svn_repos_notify_warning_found_old_mergeinfo</a>,
<a name="l00262"></a>00262 <span class="comment"></span>
<a name="l00263"></a>00263 <span class="comment">  /** Found an invalid path in the filesystem.</span>
<a name="l00264"></a>00264 <span class="comment">   * @see svn_fs.h:&quot;Directory entry names and directory paths&quot; */</span>
<a name="l00265"></a>00265   <span class="comment">/* ### TODO(doxygen): make that a proper doxygen link */</span>
<a name="l00266"></a>00266   <span class="comment">/* See svn_fs__path_valid(). */</span>
<a name="l00267"></a><a class="code" href="svn__repos_8h.html#ad6b8ccc40089f3a414ebc45ee8d7a53eacff730858893f9dfb1917e7971d1bae3">00267</a>   <a class="code" href="svn__repos_8h.html#ad6b8ccc40089f3a414ebc45ee8d7a53eacff730858893f9dfb1917e7971d1bae3" title="Found an invalid path in the filesystem.">svn_repos_notify_warning_invalid_fspath</a>
<a name="l00268"></a>00268 
<a name="l00269"></a>00269 } <a class="code" href="svn__repos_8h.html#ad6b8ccc40089f3a414ebc45ee8d7a53e" title="The type of error occurring.">svn_repos_notify_warning_t</a>;
<a name="l00270"></a>00270 <span class="comment"></span>
<a name="l00271"></a>00271 <span class="comment">/**</span>
<a name="l00272"></a>00272 <span class="comment"> * Structure used by #svn_repos_notify_func_t.</span>
<a name="l00273"></a>00273 <span class="comment"> *</span>
<a name="l00274"></a>00274 <span class="comment"> * The only field guaranteed to be populated is @c action.  Other fields are</span>
<a name="l00275"></a>00275 <span class="comment"> * dependent upon the @c action.  (See individual fields for more information.)</span>
<a name="l00276"></a>00276 <span class="comment"> *</span>
<a name="l00277"></a>00277 <span class="comment"> * @note Callers of notification functions should use</span>
<a name="l00278"></a>00278 <span class="comment"> * svn_repos_notify_create() to create structures of this type to allow for</span>
<a name="l00279"></a>00279 <span class="comment"> * future extensibility.</span>
<a name="l00280"></a>00280 <span class="comment"> *</span>
<a name="l00281"></a>00281 <span class="comment"> * @since New in 1.7.</span>
<a name="l00282"></a>00282 <span class="comment"> */</span>
<a name="l00283"></a><a class="code" href="structsvn__repos__notify__t.html">00283</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__repos__notify__t.html" title="Structure used by svn_repos_notify_func_t.">svn_repos_notify_t</a>
<a name="l00284"></a>00284 {<span class="comment"></span>
<a name="l00285"></a>00285 <span class="comment">  /** Action that describes what happened in the repository. */</span>
<a name="l00286"></a><a class="code" href="structsvn__repos__notify__t.html#a79b6e09fa2249d98f7a603fbad2ab679">00286</a>   <a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183" title="The type of action occurring.">svn_repos_notify_action_t</a> <a class="code" href="structsvn__repos__notify__t.html#a79b6e09fa2249d98f7a603fbad2ab679" title="Action that describes what happened in the repository.">action</a>;
<a name="l00287"></a>00287 <span class="comment"></span>
<a name="l00288"></a>00288 <span class="comment">  /** For #svn_repos_notify_dump_rev_end and #svn_repos_notify_verify_rev_end,</span>
<a name="l00289"></a>00289 <span class="comment">   * the revision which just completed. */</span>
<a name="l00290"></a><a class="code" href="structsvn__repos__notify__t.html#a9663037b1f5320b516fdd254eb5e2b7b">00290</a>   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> <a class="code" href="structsvn__repos__notify__t.html#a9663037b1f5320b516fdd254eb5e2b7b" title="For svn_repos_notify_dump_rev_end and svn_repos_notify_verify_rev_end, the revision which just comple...">revision</a>;
<a name="l00291"></a>00291 <span class="comment"></span>
<a name="l00292"></a>00292 <span class="comment">  /** For #svn_repos_notify_warning, the warning object. Must be cleared</span>
<a name="l00293"></a>00293 <span class="comment">      by the consumer of the notification. */</span>
<a name="l00294"></a><a class="code" href="structsvn__repos__notify__t.html#aa4c6dce115895ffe804e428d1fa562e2">00294</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__repos__notify__t.html#aa4c6dce115895ffe804e428d1fa562e2" title="For svn_repos_notify_warning, the warning object.">warning_str</a>;
<a name="l00295"></a>00295   <a class="code" href="svn__repos_8h.html#ad6b8ccc40089f3a414ebc45ee8d7a53e" title="The type of error occurring.">svn_repos_notify_warning_t</a> warning;
<a name="l00296"></a>00296 <span class="comment"></span>
<a name="l00297"></a>00297 <span class="comment">  /** For #svn_repos_notify_pack_shard_start,</span>
<a name="l00298"></a>00298 <span class="comment">      #svn_repos_notify_pack_shard_end,</span>
<a name="l00299"></a>00299 <span class="comment">      #svn_repos_notify_pack_shard_start_revprop, and</span>
<a name="l00300"></a>00300 <span class="comment">      #svn_repos_notify_pack_shard_end_revprop, the shard processed. */</span>
<a name="l00301"></a><a class="code" href="structsvn__repos__notify__t.html#a43003d31cbf67f5b98cdc12d4b2a9a60">00301</a>   apr_int64_t <a class="code" href="structsvn__repos__notify__t.html#a43003d31cbf67f5b98cdc12d4b2a9a60" title="For svn_repos_notify_pack_shard_start, svn_repos_notify_pack_shard_end, svn_repos_notify_pack_shard_s...">shard</a>;
<a name="l00302"></a>00302 <span class="comment"></span>
<a name="l00303"></a>00303 <span class="comment">  /** For #svn_repos_notify_load_committed_rev, the revision committed. */</span>
<a name="l00304"></a><a class="code" href="structsvn__repos__notify__t.html#a4d811e68077c960d0ed48265bee7130d">00304</a>   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> <a class="code" href="structsvn__repos__notify__t.html#a4d811e68077c960d0ed48265bee7130d" title="For #svn_repos_notify_load_committed_rev, the revision committed.">new_revision</a>;
<a name="l00305"></a>00305 <span class="comment"></span>
<a name="l00306"></a>00306 <span class="comment">  /** For #svn_repos_notify_load_committed_rev, the source revision, if</span>
<a name="l00307"></a>00307 <span class="comment">      different from @a new_revision, otherwise #SVN_INVALID_REVNUM.</span>
<a name="l00308"></a>00308 <span class="comment">      For #svn_repos_notify_load_txn_start, the source revision. */</span>
<a name="l00309"></a><a class="code" href="structsvn__repos__notify__t.html#a0639dacfb88206d58551ee41be076634">00309</a>   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> <a class="code" href="structsvn__repos__notify__t.html#a0639dacfb88206d58551ee41be076634" title="For #svn_repos_notify_load_committed_rev, the source revision, if different from new_revision, otherwise SVN_INVALID_REVNUM.">old_revision</a>;
<a name="l00310"></a>00310 <span class="comment"></span>
<a name="l00311"></a>00311 <span class="comment">  /** For #svn_repos_notify_load_node_start, the action being taken on the</span>
<a name="l00312"></a>00312 <span class="comment">      node. */</span>
<a name="l00313"></a><a class="code" href="structsvn__repos__notify__t.html#a8a9819ae00d0499a42509affc51943af">00313</a>   <span class="keyword">enum</span> <a class="code" href="svn__repos_8h.html#a089c9789cdc596336839e9ab074970c4" title="The different &quot;actions&quot; attached to nodes in the dumpfile.">svn_node_action</a> <a class="code" href="structsvn__repos__notify__t.html#a8a9819ae00d0499a42509affc51943af" title="For svn_repos_notify_load_node_start, the action being taken on the node.">node_action</a>;
<a name="l00314"></a>00314 <span class="comment"></span>
<a name="l00315"></a>00315 <span class="comment">  /** For #svn_repos_notify_load_node_start, the path of the node. */</span>
<a name="l00316"></a><a class="code" href="structsvn__repos__notify__t.html#a8fa93538dd4001a289e8c528464e35ee">00316</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__repos__notify__t.html#a8fa93538dd4001a289e8c528464e35ee" title="For svn_repos_notify_load_node_start, the path of the node.">path</a>;
<a name="l00317"></a>00317 
<a name="l00318"></a>00318   <span class="comment">/* NOTE: Add new fields at the end to preserve binary compatibility.</span>
<a name="l00319"></a>00319 <span class="comment">     Also, if you add fields here, you have to update</span>
<a name="l00320"></a>00320 <span class="comment">     svn_repos_notify_create(). */</span>
<a name="l00321"></a>00321 } <a class="code" href="svn__repos_8h.html#a2a36f2964a8d9541c862cd4da95eb397" title="Structure used by svn_repos_notify_func_t.">svn_repos_notify_t</a>;
<a name="l00322"></a>00322 <span class="comment"></span>
<a name="l00323"></a>00323 <span class="comment">/** Callback for providing notification from the repository.</span>
<a name="l00324"></a>00324 <span class="comment"> * Returns @c void.  Justification: success of an operation is not dependent</span>
<a name="l00325"></a>00325 <span class="comment"> * upon successful notification of that operation.</span>
<a name="l00326"></a>00326 <span class="comment"> *</span>
<a name="l00327"></a>00327 <span class="comment"> * @since New in 1.7. */</span>
<a name="l00328"></a><a class="code" href="svn__repos_8h.html#a387f44a9ac5041bceee3f105c7f197fe">00328</a> <span class="keyword">typedef</span> void (*<a class="code" href="svn__repos_8h.html#a387f44a9ac5041bceee3f105c7f197fe" title="Callback for providing notification from the repository.">svn_repos_notify_func_t</a>)(<span class="keywordtype">void</span> *baton,
<a name="l00329"></a>00329                                         <span class="keyword">const</span> <a class="code" href="structsvn__repos__notify__t.html" title="Structure used by svn_repos_notify_func_t.">svn_repos_notify_t</a> *notify,
<a name="l00330"></a>00330                                         apr_pool_t *scratch_pool);
<a name="l00331"></a>00331 <span class="comment"></span>
<a name="l00332"></a>00332 <span class="comment">/**</span>
<a name="l00333"></a>00333 <span class="comment"> * Allocate an #svn_repos_notify_t structure in @a result_pool, initialize</span>
<a name="l00334"></a>00334 <span class="comment"> * and return it.</span>
<a name="l00335"></a>00335 <span class="comment"> *</span>
<a name="l00336"></a>00336 <span class="comment"> * @since New in 1.7.</span>
<a name="l00337"></a>00337 <span class="comment"> */</span>
<a name="l00338"></a>00338 <a class="code" href="structsvn__repos__notify__t.html" title="Structure used by svn_repos_notify_func_t.">svn_repos_notify_t</a> *
<a name="l00339"></a>00339 <a class="code" href="svn__repos_8h.html#ae23a26dccaa31af69edc2fb69cdcb5b9" title="Allocate an svn_repos_notify_t structure in result_pool, initialize and return it.">svn_repos_notify_create</a>(<a class="code" href="svn__repos_8h.html#aa62dae92e97e4f496c29eb8d28361183" title="The type of action occurring.">svn_repos_notify_action_t</a> action,
<a name="l00340"></a>00340                         apr_pool_t *result_pool);
<a name="l00341"></a>00341 
<a name="l00342"></a>00342 <span class="comment"></span>
<a name="l00343"></a>00343 <span class="comment">/** The repository object. */</span>
<a name="l00344"></a><a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de">00344</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a>;
<a name="l00345"></a>00345 
<a name="l00346"></a>00346 <span class="comment">/* Opening and creating repositories. */</span>
<a name="l00347"></a>00347 
<a name="l00348"></a>00348 <span class="comment"></span>
<a name="l00349"></a>00349 <span class="comment">/** Find the root path of the repository that contains @a path.</span>
<a name="l00350"></a>00350 <span class="comment"> *</span>
<a name="l00351"></a>00351 <span class="comment"> * If a repository was found, the path to the root of the repository</span>
<a name="l00352"></a>00352 <span class="comment"> * is returned, else @c NULL. The pointer to the returned path may be</span>
<a name="l00353"></a>00353 <span class="comment"> * equal to @a path.</span>
<a name="l00354"></a>00354 <span class="comment"> */</span>
<a name="l00355"></a>00355 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00356"></a>00356 <a class="code" href="svn__repos_8h.html#a5712d7d0db4aa95992dda1ff5597817f" title="Find the root path of the repository that contains path.">svn_repos_find_root_path</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00357"></a>00357                          apr_pool_t *pool);
<a name="l00358"></a>00358 <span class="comment"></span>
<a name="l00359"></a>00359 <span class="comment">/** Set @a *repos_p to a repository object for the repository at @a path.</span>
<a name="l00360"></a>00360 <span class="comment"> *</span>
<a name="l00361"></a>00361 <span class="comment"> * Allocate @a *repos_p in @a pool.</span>
<a name="l00362"></a>00362 <span class="comment"> *</span>
<a name="l00363"></a>00363 <span class="comment"> * Acquires a shared lock on the repository, and attaches a cleanup</span>
<a name="l00364"></a>00364 <span class="comment"> * function to @a pool to remove the lock.  If no lock can be acquired,</span>
<a name="l00365"></a>00365 <span class="comment"> * returns error, with undefined effect on @a *repos_p.  If an exclusive</span>
<a name="l00366"></a>00366 <span class="comment"> * lock is present, this blocks until it&#39;s gone.  @a fs_config will be</span>
<a name="l00367"></a>00367 <span class="comment"> * passed to the filesystem initialization function and may be @c NULL.</span>
<a name="l00368"></a>00368 <span class="comment"> *</span>
<a name="l00369"></a>00369 <span class="comment"> * @since New in 1.7.</span>
<a name="l00370"></a>00370 <span class="comment"> */</span>
<a name="l00371"></a>00371 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00372"></a>00372 <a class="code" href="svn__repos_8h.html#a515e52a79813e3fc34fffd8fedd40df0" title="Set *repos_p to a repository object for the repository at path.">svn_repos_open2</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> **repos_p,
<a name="l00373"></a>00373                 <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00374"></a>00374                 apr_hash_t *fs_config,
<a name="l00375"></a>00375                 apr_pool_t *pool);
<a name="l00376"></a>00376 <span class="comment"></span>
<a name="l00377"></a>00377 <span class="comment">/** Similar to svn_repos_open2() with @a fs_config set to NULL.</span>
<a name="l00378"></a>00378 <span class="comment"> *</span>
<a name="l00379"></a>00379 <span class="comment"> * @deprecated Provided for backward compatibility with 1.6 API.</span>
<a name="l00380"></a>00380 <span class="comment"> */</span>
<a name="l00381"></a>00381 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00382"></a>00382 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00383"></a>00383 <a class="code" href="svn__repos_8h.html#a2703b5e8f427145961f794c1abe4fa11" title="Similar to svn_repos_open2() with fs_config set to NULL.">svn_repos_open</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> **repos_p,
<a name="l00384"></a>00384                <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00385"></a>00385                apr_pool_t *pool);
<a name="l00386"></a>00386 <span class="comment"></span>
<a name="l00387"></a>00387 <span class="comment">/** Create a new Subversion repository at @a path, building the necessary</span>
<a name="l00388"></a>00388 <span class="comment"> * directory structure, creating the filesystem, and so on.</span>
<a name="l00389"></a>00389 <span class="comment"> * Return the repository object in @a *repos_p, allocated in @a pool.</span>
<a name="l00390"></a>00390 <span class="comment"> *</span>
<a name="l00391"></a>00391 <span class="comment"> * @a config is a client configuration hash of #svn_config_t * items</span>
<a name="l00392"></a>00392 <span class="comment"> * keyed on config category names, and may be NULL.</span>
<a name="l00393"></a>00393 <span class="comment"> *</span>
<a name="l00394"></a>00394 <span class="comment"> * @a fs_config is passed to the filesystem, and may be NULL.</span>
<a name="l00395"></a>00395 <span class="comment"> *</span>
<a name="l00396"></a>00396 <span class="comment"> * @a unused_1 and @a unused_2 are not used and should be NULL.</span>
<a name="l00397"></a>00397 <span class="comment"> */</span>
<a name="l00398"></a>00398 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00399"></a>00399 <a class="code" href="svn__repos_8h.html#aadb874232868c06984c2276e866f3929" title="Create a new Subversion repository at path, building the necessary directory structure, creating the filesystem, and so on.">svn_repos_create</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> **repos_p,
<a name="l00400"></a>00400                  <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00401"></a>00401                  <span class="keyword">const</span> <span class="keywordtype">char</span> *unused_1,
<a name="l00402"></a>00402                  <span class="keyword">const</span> <span class="keywordtype">char</span> *unused_2,
<a name="l00403"></a>00403                  apr_hash_t *config,
<a name="l00404"></a>00404                  apr_hash_t *fs_config,
<a name="l00405"></a>00405                  apr_pool_t *pool);
<a name="l00406"></a>00406 <span class="comment"></span>
<a name="l00407"></a>00407 <span class="comment">/**</span>
<a name="l00408"></a>00408 <span class="comment"> * Upgrade the Subversion repository (and its underlying versioned</span>
<a name="l00409"></a>00409 <span class="comment"> * filesystem) located in the directory @a path to the latest version</span>
<a name="l00410"></a>00410 <span class="comment"> * supported by this library.  If the requested upgrade is not</span>
<a name="l00411"></a>00411 <span class="comment"> * supported due to the current state of the repository or it</span>
<a name="l00412"></a>00412 <span class="comment"> * underlying filesystem, return #SVN_ERR_REPOS_UNSUPPORTED_UPGRADE</span>
<a name="l00413"></a>00413 <span class="comment"> * or #SVN_ERR_FS_UNSUPPORTED_UPGRADE (respectively) and make no</span>
<a name="l00414"></a>00414 <span class="comment"> * changes to the repository or filesystem.</span>
<a name="l00415"></a>00415 <span class="comment"> *</span>
<a name="l00416"></a>00416 <span class="comment"> * Acquires an exclusive lock on the repository, upgrades the</span>
<a name="l00417"></a>00417 <span class="comment"> * repository, and releases the lock.  If an exclusive lock can&#39;t be</span>
<a name="l00418"></a>00418 <span class="comment"> * acquired, returns error.</span>
<a name="l00419"></a>00419 <span class="comment"> *</span>
<a name="l00420"></a>00420 <span class="comment"> * If @a nonblocking is TRUE, an error of type EWOULDBLOCK is</span>
<a name="l00421"></a>00421 <span class="comment"> * returned if the lock is not immediately available.</span>
<a name="l00422"></a>00422 <span class="comment"> *</span>
<a name="l00423"></a>00423 <span class="comment"> * If @a start_callback is not NULL, it will be called with @a</span>
<a name="l00424"></a>00424 <span class="comment"> * start_callback_baton as argument before the upgrade starts, but</span>
<a name="l00425"></a>00425 <span class="comment"> * after the exclusive lock has been acquired.</span>
<a name="l00426"></a>00426 <span class="comment"> *</span>
<a name="l00427"></a>00427 <span class="comment"> * Use @a pool for necessary allocations.</span>
<a name="l00428"></a>00428 <span class="comment"> *</span>
<a name="l00429"></a>00429 <span class="comment"> * @note This functionality is provided as a convenience for</span>
<a name="l00430"></a>00430 <span class="comment"> * administrators wishing to make use of new Subversion functionality</span>
<a name="l00431"></a>00431 <span class="comment"> * without a potentially costly full repository dump/load.  As such,</span>
<a name="l00432"></a>00432 <span class="comment"> * the operation performs only the minimum amount of work needed to</span>
<a name="l00433"></a>00433 <span class="comment"> * accomplish this while maintaining the integrity of the repository.</span>
<a name="l00434"></a>00434 <span class="comment"> * It does *not* guarantee the most optimized repository state as a</span>
<a name="l00435"></a>00435 <span class="comment"> * dump and subsequent load would.</span>
<a name="l00436"></a>00436 <span class="comment"> *</span>
<a name="l00437"></a>00437 <span class="comment"> * @since New in 1.7.</span>
<a name="l00438"></a>00438 <span class="comment"> */</span>
<a name="l00439"></a>00439 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00440"></a>00440 <a class="code" href="svn__repos_8h.html#ae8708027c75f3ae3d8ef414061cef1de" title="Upgrade the Subversion repository (and its underlying versioned filesystem) located in the directory ...">svn_repos_upgrade2</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00441"></a>00441                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> nonblocking,
<a name="l00442"></a>00442                    <a class="code" href="svn__repos_8h.html#a387f44a9ac5041bceee3f105c7f197fe" title="Callback for providing notification from the repository.">svn_repos_notify_func_t</a> notify_func,
<a name="l00443"></a>00443                    <span class="keywordtype">void</span> *notify_baton,
<a name="l00444"></a>00444                    apr_pool_t *pool);
<a name="l00445"></a>00445 <span class="comment"></span>
<a name="l00446"></a>00446 <span class="comment">/**</span>
<a name="l00447"></a>00447 <span class="comment"> * Similar to svn_repos_upgrade2(), but with @a start_callback and baton,</span>
<a name="l00448"></a>00448 <span class="comment"> * rather than a notify_callback / baton</span>
<a name="l00449"></a>00449 <span class="comment"> *</span>
<a name="l00450"></a>00450 <span class="comment"> * @since New in 1.5.</span>
<a name="l00451"></a>00451 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l00452"></a>00452 <span class="comment"> */</span>
<a name="l00453"></a>00453 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00454"></a>00454 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00455"></a>00455 <a class="code" href="svn__repos_8h.html#afa89fd30c6a04e09d025bcf1e30148cd" title="Similar to svn_repos_upgrade2(), but with start_callback and baton, rather than a notify_callback / b...">svn_repos_upgrade</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00456"></a>00456                   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> nonblocking,
<a name="l00457"></a>00457                   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*start_callback)(<span class="keywordtype">void</span> *baton),
<a name="l00458"></a>00458                   <span class="keywordtype">void</span> *start_callback_baton,
<a name="l00459"></a>00459                   apr_pool_t *pool);
<a name="l00460"></a>00460 <span class="comment"></span>
<a name="l00461"></a>00461 <span class="comment">/** Destroy the Subversion repository found at @a path, using @a pool for any</span>
<a name="l00462"></a>00462 <span class="comment"> * necessary allocations.</span>
<a name="l00463"></a>00463 <span class="comment"> */</span>
<a name="l00464"></a>00464 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00465"></a>00465 <a class="code" href="svn__repos_8h.html#a65d111363700108428b5e9358c8cddfb" title="Destroy the Subversion repository found at path, using pool for any necessary allocations.">svn_repos_delete</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00466"></a>00466                  apr_pool_t *pool);
<a name="l00467"></a>00467 <span class="comment"></span>
<a name="l00468"></a>00468 <span class="comment">/**</span>
<a name="l00469"></a>00469 <span class="comment"> * Set @a *has to TRUE if @a repos has @a capability (one of the</span>
<a name="l00470"></a>00470 <span class="comment"> * capabilities beginning with @c &quot;SVN_REPOS_CAPABILITY_&quot;), else set</span>
<a name="l00471"></a>00471 <span class="comment"> * @a *has to FALSE.</span>
<a name="l00472"></a>00472 <span class="comment"> *</span>
<a name="l00473"></a>00473 <span class="comment"> * If @a capability isn&#39;t recognized, throw #SVN_ERR_UNKNOWN_CAPABILITY,</span>
<a name="l00474"></a>00474 <span class="comment"> * with the effect on @a *has undefined.</span>
<a name="l00475"></a>00475 <span class="comment"> *</span>
<a name="l00476"></a>00476 <span class="comment"> * Use @a pool for all allocation.</span>
<a name="l00477"></a>00477 <span class="comment"> *</span>
<a name="l00478"></a>00478 <span class="comment"> * @since New in 1.5.</span>
<a name="l00479"></a>00479 <span class="comment"> */</span>
<a name="l00480"></a>00480 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00481"></a>00481 <a class="code" href="svn__repos_8h.html#a8b1af9654f33646f3f12560508ed36e3" title="Set *has to TRUE if repos has capability (one of the capabilities beginning with &quot;SVN_REPOS_CAPABILIT...">svn_repos_has_capability</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00482"></a>00482                          <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *has,
<a name="l00483"></a>00483                          <span class="keyword">const</span> <span class="keywordtype">char</span> *capability,
<a name="l00484"></a>00484                          apr_pool_t *pool);
<a name="l00485"></a>00485 <span class="comment"></span>
<a name="l00486"></a>00486 <span class="comment">/**</span>
<a name="l00487"></a>00487 <span class="comment"> * The capability of doing the right thing with merge-tracking</span>
<a name="l00488"></a>00488 <span class="comment"> * information, both storing it and responding to queries about it.</span>
<a name="l00489"></a>00489 <span class="comment"> *</span>
<a name="l00490"></a>00490 <span class="comment"> * @since New in 1.5.</span>
<a name="l00491"></a>00491 <span class="comment"> */</span>
<a name="l00492"></a><a class="code" href="svn__repos_8h.html#aab01a6ea17c5bb1ed8f841afeb4a79c8">00492</a> <span class="preprocessor">#define SVN_REPOS_CAPABILITY_MERGEINFO &quot;mergeinfo&quot;</span>
<a name="l00493"></a>00493 <span class="preprocessor"></span><span class="comment">/*       *** PLEASE READ THIS IF YOU ADD A NEW CAPABILITY ***</span>
<a name="l00494"></a>00494 <span class="comment"> *</span>
<a name="l00495"></a>00495 <span class="comment"> * @c SVN_REPOS_CAPABILITY_foo strings should not include colons, to</span>
<a name="l00496"></a>00496 <span class="comment"> * be consistent with @c SVN_RA_CAPABILITY_foo strings, which forbid</span>
<a name="l00497"></a>00497 <span class="comment"> * colons for their own reasons.  While this RA limitation has no</span>
<a name="l00498"></a>00498 <span class="comment"> * direct impact on repository capabilities, there&#39;s no reason to be</span>
<a name="l00499"></a>00499 <span class="comment"> * gratuitously different either.</span>
<a name="l00500"></a>00500 <span class="comment"> */</span>
<a name="l00501"></a>00501 
<a name="l00502"></a>00502 <span class="comment"></span>
<a name="l00503"></a>00503 <span class="comment">/** Return the filesystem associated with repository object @a repos. */</span>
<a name="l00504"></a>00504 <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *
<a name="l00505"></a>00505 <a class="code" href="svn__repos_8h.html#a7c2f2ccd59bb55a6db6e567960bc76da" title="Return the filesystem associated with repository object repos.">svn_repos_fs</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos);
<a name="l00506"></a>00506 
<a name="l00507"></a>00507 <span class="comment"></span>
<a name="l00508"></a>00508 <span class="comment">/** Make a hot copy of the Subversion repository found at @a src_path</span>
<a name="l00509"></a>00509 <span class="comment"> * to @a dst_path.</span>
<a name="l00510"></a>00510 <span class="comment"> *</span>
<a name="l00511"></a>00511 <span class="comment"> * Copy a possibly live Subversion repository from @a src_path to</span>
<a name="l00512"></a>00512 <span class="comment"> * @a dst_path.  If @a clean_logs is @c TRUE, perform cleanup on the</span>
<a name="l00513"></a>00513 <span class="comment"> * source filesystem as part of the copy operation; currently, this</span>
<a name="l00514"></a>00514 <span class="comment"> * means deleting copied, unused logfiles for a Berkeley DB source</span>
<a name="l00515"></a>00515 <span class="comment"> * repository.</span>
<a name="l00516"></a>00516 <span class="comment"> */</span>
<a name="l00517"></a>00517 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00518"></a>00518 <a class="code" href="svn__repos_8h.html#a8546d2ec882dcc05454337ea2cb40e6c" title="Make a hot copy of the Subversion repository found at src_path to dst_path.">svn_repos_hotcopy</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src_path,
<a name="l00519"></a>00519                   <span class="keyword">const</span> <span class="keywordtype">char</span> *dst_path,
<a name="l00520"></a>00520                   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> clean_logs,
<a name="l00521"></a>00521                   apr_pool_t *pool);
<a name="l00522"></a>00522 
<a name="l00523"></a>00523 <span class="comment"></span>
<a name="l00524"></a>00524 <span class="comment">/**</span>
<a name="l00525"></a>00525 <span class="comment"> * Possibly update the repository, @a repos, to use a more efficient</span>
<a name="l00526"></a>00526 <span class="comment"> * filesystem representation.  Use @a pool for allocations.</span>
<a name="l00527"></a>00527 <span class="comment"> *</span>
<a name="l00528"></a>00528 <span class="comment"> * @since New in 1.7.</span>
<a name="l00529"></a>00529 <span class="comment"> */</span>
<a name="l00530"></a>00530 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00531"></a>00531 <a class="code" href="svn__repos_8h.html#ac67d2487fb1760c474475dcd3ee066f4" title="Possibly update the repository, repos, to use a more efficient filesystem representation.">svn_repos_fs_pack2</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00532"></a>00532                    <a class="code" href="svn__repos_8h.html#a387f44a9ac5041bceee3f105c7f197fe" title="Callback for providing notification from the repository.">svn_repos_notify_func_t</a> notify_func,
<a name="l00533"></a>00533                    <span class="keywordtype">void</span> *notify_baton,
<a name="l00534"></a>00534                    <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l00535"></a>00535                    <span class="keywordtype">void</span> *cancel_baton,
<a name="l00536"></a>00536                    apr_pool_t *pool);
<a name="l00537"></a>00537 <span class="comment"></span>
<a name="l00538"></a>00538 <span class="comment">/**</span>
<a name="l00539"></a>00539 <span class="comment"> * Similar to svn_repos_fs_pack2(), but with a #svn_fs_pack_notify_t instead</span>
<a name="l00540"></a>00540 <span class="comment"> * of a #svn_repos_notify_t.</span>
<a name="l00541"></a>00541 <span class="comment"> *</span>
<a name="l00542"></a>00542 <span class="comment"> * @since New in 1.6.</span>
<a name="l00543"></a>00543 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l00544"></a>00544 <span class="comment"> */</span>
<a name="l00545"></a>00545 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00546"></a>00546 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00547"></a>00547 <a class="code" href="svn__repos_8h.html#a7f2ea9f2d6e5bd0802decbbc94d5dab7" title="Similar to svn_repos_fs_pack2(), but with a svn_fs_pack_notify_t instead of a svn_repos_notify_t.">svn_repos_fs_pack</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00548"></a>00548                   <a class="code" href="group__fs__handling.html#ga418eae984b0da828404197edf9fcc46e" title="The type of a pack notification function.">svn_fs_pack_notify_t</a> notify_func,
<a name="l00549"></a>00549                   <span class="keywordtype">void</span> *notify_baton,
<a name="l00550"></a>00550                   <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l00551"></a>00551                   <span class="keywordtype">void</span> *cancel_baton,
<a name="l00552"></a>00552                   apr_pool_t *pool);
<a name="l00553"></a>00553 <span class="comment"></span>
<a name="l00554"></a>00554 <span class="comment">/**</span>
<a name="l00555"></a>00555 <span class="comment"> * Run database recovery procedures on the repository at @a path,</span>
<a name="l00556"></a>00556 <span class="comment"> * returning the database to a consistent state.  Use @a pool for all</span>
<a name="l00557"></a>00557 <span class="comment"> * allocation.</span>
<a name="l00558"></a>00558 <span class="comment"> *</span>
<a name="l00559"></a>00559 <span class="comment"> * Acquires an exclusive lock on the repository, recovers the</span>
<a name="l00560"></a>00560 <span class="comment"> * database, and releases the lock.  If an exclusive lock can&#39;t be</span>
<a name="l00561"></a>00561 <span class="comment"> * acquired, returns error.</span>
<a name="l00562"></a>00562 <span class="comment"> *</span>
<a name="l00563"></a>00563 <span class="comment"> * If @a nonblocking is TRUE, an error of type EWOULDBLOCK is</span>
<a name="l00564"></a>00564 <span class="comment"> * returned if the lock is not immediately available.</span>
<a name="l00565"></a>00565 <span class="comment"> *</span>
<a name="l00566"></a>00566 <span class="comment"> * If @a notify_func is not NULL, it will be called with @a</span>
<a name="l00567"></a>00567 <span class="comment"> * notify_baton as argument before the recovery starts, but</span>
<a name="l00568"></a>00568 <span class="comment"> * after the exclusive lock has been acquired.</span>
<a name="l00569"></a>00569 <span class="comment"> *</span>
<a name="l00570"></a>00570 <span class="comment"> * If @a cancel_func is not @c NULL, it is called periodically with</span>
<a name="l00571"></a>00571 <span class="comment"> * @a cancel_baton as argument to see if the client wishes to cancel</span>
<a name="l00572"></a>00572 <span class="comment"> * the recovery.</span>
<a name="l00573"></a>00573 <span class="comment"> *</span>
<a name="l00574"></a>00574 <span class="comment"> * @note On some platforms the exclusive lock does not exclude other</span>
<a name="l00575"></a>00575 <span class="comment"> * threads in the same process so this function should only be called</span>
<a name="l00576"></a>00576 <span class="comment"> * by a single threaded process, or by a multi-threaded process when</span>
<a name="l00577"></a>00577 <span class="comment"> * no other threads are accessing the repository.</span>
<a name="l00578"></a>00578 <span class="comment"> *</span>
<a name="l00579"></a>00579 <span class="comment"> * @since New in 1.7.</span>
<a name="l00580"></a>00580 <span class="comment"> */</span>
<a name="l00581"></a>00581 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00582"></a>00582 <a class="code" href="svn__repos_8h.html#a92147a52eb20665c450f2df439e348a2" title="Run database recovery procedures on the repository at path, returning the database to a consistent st...">svn_repos_recover4</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00583"></a>00583                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> nonblocking,
<a name="l00584"></a>00584                    <a class="code" href="svn__repos_8h.html#a387f44a9ac5041bceee3f105c7f197fe" title="Callback for providing notification from the repository.">svn_repos_notify_func_t</a> notify_func,
<a name="l00585"></a>00585                    <span class="keywordtype">void</span> *notify_baton,
<a name="l00586"></a>00586                    <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l00587"></a>00587                    <span class="keywordtype">void</span> * cancel_baton,
<a name="l00588"></a>00588                    apr_pool_t *pool);
<a name="l00589"></a>00589 <span class="comment"></span>
<a name="l00590"></a>00590 <span class="comment">/**</span>
<a name="l00591"></a>00591 <span class="comment"> * Similar to svn_repos_recover4(), but with @a start callback in place of</span>
<a name="l00592"></a>00592 <span class="comment"> * the notify_func / baton.</span>
<a name="l00593"></a>00593 <span class="comment"> *</span>
<a name="l00594"></a>00594 <span class="comment"> * @since New in 1.5.</span>
<a name="l00595"></a>00595 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l00596"></a>00596 <span class="comment"> */</span>
<a name="l00597"></a>00597 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00598"></a>00598 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00599"></a>00599 <a class="code" href="svn__repos_8h.html#a5fb2a1cd5c0a0bbc132cc23def589b43" title="Similar to svn_repos_recover4(), but with start callback in place of the notify_func / baton...">svn_repos_recover3</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00600"></a>00600                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> nonblocking,
<a name="l00601"></a>00601                    <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*start_callback)(<span class="keywordtype">void</span> *baton),
<a name="l00602"></a>00602                    <span class="keywordtype">void</span> *start_callback_baton,
<a name="l00603"></a>00603                    <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l00604"></a>00604                    <span class="keywordtype">void</span> * cancel_baton,
<a name="l00605"></a>00605                    apr_pool_t *pool);
<a name="l00606"></a>00606 <span class="comment"></span>
<a name="l00607"></a>00607 <span class="comment">/**</span>
<a name="l00608"></a>00608 <span class="comment"> * Similar to svn_repos_recover3(), but without cancellation support.</span>
<a name="l00609"></a>00609 <span class="comment"> *</span>
<a name="l00610"></a>00610 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.4 API.</span>
<a name="l00611"></a>00611 <span class="comment"> */</span>
<a name="l00612"></a>00612 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00613"></a>00613 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00614"></a>00614 <a class="code" href="svn__repos_8h.html#aac5fa56054e5d031ba0353d6e56a9b00" title="Similar to svn_repos_recover3(), but without cancellation support.">svn_repos_recover2</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00615"></a>00615                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> nonblocking,
<a name="l00616"></a>00616                    <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*start_callback)(<span class="keywordtype">void</span> *baton),
<a name="l00617"></a>00617                    <span class="keywordtype">void</span> *start_callback_baton,
<a name="l00618"></a>00618                    apr_pool_t *pool);
<a name="l00619"></a>00619 <span class="comment"></span>
<a name="l00620"></a>00620 <span class="comment">/**</span>
<a name="l00621"></a>00621 <span class="comment"> * Similar to svn_repos_recover2(), but with nonblocking set to FALSE, and</span>
<a name="l00622"></a>00622 <span class="comment"> * with no callbacks provided.</span>
<a name="l00623"></a>00623 <span class="comment"> *</span>
<a name="l00624"></a>00624 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.0 API.</span>
<a name="l00625"></a>00625 <span class="comment"> */</span>
<a name="l00626"></a>00626 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00627"></a>00627 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00628"></a>00628 <a class="code" href="svn__repos_8h.html#ae6c218d946853ce1d51a98e5d8ed5868" title="Similar to svn_repos_recover2(), but with nonblocking set to FALSE, and with no callbacks provided...">svn_repos_recover</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00629"></a>00629                   apr_pool_t *pool);
<a name="l00630"></a>00630 <span class="comment"></span>
<a name="l00631"></a>00631 <span class="comment">/** This function is a wrapper around svn_fs_berkeley_logfiles(),</span>
<a name="l00632"></a>00632 <span class="comment"> * returning log file paths relative to the root of the repository.</span>
<a name="l00633"></a>00633 <span class="comment"> *</span>
<a name="l00634"></a>00634 <span class="comment"> * @copydoc svn_fs_berkeley_logfiles()</span>
<a name="l00635"></a>00635 <span class="comment"> */</span>
<a name="l00636"></a>00636 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00637"></a>00637 <a class="code" href="svn__repos_8h.html#aa7f48ea9484dcee7e67eb0cea41945ad" title="This function is a wrapper around svn_fs_berkeley_logfiles(), returning log file paths relative to th...">svn_repos_db_logfiles</a>(apr_array_header_t **logfiles,
<a name="l00638"></a>00638                       <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00639"></a>00639                       <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> only_unused,
<a name="l00640"></a>00640                       apr_pool_t *pool);
<a name="l00641"></a>00641 
<a name="l00642"></a>00642 
<a name="l00643"></a>00643 
<a name="l00644"></a>00644 <span class="comment">/* Repository Paths */</span>
<a name="l00645"></a>00645 <span class="comment"></span>
<a name="l00646"></a>00646 <span class="comment">/** Return the top-level repository path allocated in @a pool. */</span>
<a name="l00647"></a>00647 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00648"></a>00648 <a class="code" href="svn__repos_8h.html#a87ac5e8f9c9b89ca19491e1dc8a248e2" title="Return the top-level repository path allocated in pool.">svn_repos_path</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00649"></a>00649                apr_pool_t *pool);
<a name="l00650"></a>00650 <span class="comment"></span>
<a name="l00651"></a>00651 <span class="comment">/** Return the path to @a repos&#39;s filesystem directory, allocated in</span>
<a name="l00652"></a>00652 <span class="comment"> * @a pool.</span>
<a name="l00653"></a>00653 <span class="comment"> */</span>
<a name="l00654"></a>00654 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00655"></a>00655 <a class="code" href="svn__repos_8h.html#aad54cd706f073b018cfc62495fdb4bb9" title="Return the path to repos&#39;s filesystem directory, allocated in pool.">svn_repos_db_env</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00656"></a>00656                  apr_pool_t *pool);
<a name="l00657"></a>00657 <span class="comment"></span>
<a name="l00658"></a>00658 <span class="comment">/** Return path to @a repos&#39;s config directory, allocated in @a pool. */</span>
<a name="l00659"></a>00659 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00660"></a>00660 <a class="code" href="svn__repos_8h.html#a5219614d1150381c8d09427e0c78666e" title="Return path to repos&#39;s config directory, allocated in pool.">svn_repos_conf_dir</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00661"></a>00661                    apr_pool_t *pool);
<a name="l00662"></a>00662 <span class="comment"></span>
<a name="l00663"></a>00663 <span class="comment">/** Return path to @a repos&#39;s svnserve.conf, allocated in @a pool. */</span>
<a name="l00664"></a>00664 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00665"></a>00665 <a class="code" href="svn__repos_8h.html#a8cb5523666ac827742bfb1154cc49df0" title="Return path to repos&#39;s svnserve.conf, allocated in pool.">svn_repos_svnserve_conf</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00666"></a>00666                         apr_pool_t *pool);
<a name="l00667"></a>00667 <span class="comment"></span>
<a name="l00668"></a>00668 <span class="comment">/** Return path to @a repos&#39;s lock directory, allocated in @a pool. */</span>
<a name="l00669"></a>00669 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00670"></a>00670 <a class="code" href="svn__repos_8h.html#ac459954f7e5689ca531a6c36282860f7" title="Return path to repos&#39;s lock directory, allocated in pool.">svn_repos_lock_dir</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00671"></a>00671                    apr_pool_t *pool);
<a name="l00672"></a>00672 <span class="comment"></span>
<a name="l00673"></a>00673 <span class="comment">/** Return path to @a repos&#39;s db lockfile, allocated in @a pool. */</span>
<a name="l00674"></a>00674 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00675"></a>00675 <a class="code" href="svn__repos_8h.html#a0ec4ecf84866f735491b03f37ec2ddb7" title="Return path to repos&#39;s db lockfile, allocated in pool.">svn_repos_db_lockfile</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00676"></a>00676                       apr_pool_t *pool);
<a name="l00677"></a>00677 <span class="comment"></span>
<a name="l00678"></a>00678 <span class="comment">/** Return path to @a repos&#39;s db logs lockfile, allocated in @a pool. */</span>
<a name="l00679"></a>00679 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00680"></a>00680 <a class="code" href="svn__repos_8h.html#a2f2d5c4aa4da3269ef2efd8a3bec9c24" title="Return path to repos&#39;s db logs lockfile, allocated in pool.">svn_repos_db_logs_lockfile</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00681"></a>00681                            apr_pool_t *pool);
<a name="l00682"></a>00682 <span class="comment"></span>
<a name="l00683"></a>00683 <span class="comment">/** Return the path to @a repos&#39;s hook directory, allocated in @a pool. */</span>
<a name="l00684"></a>00684 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00685"></a>00685 <a class="code" href="svn__repos_8h.html#acc4d48d389faf67e155e31d4ff7dbfc5" title="Return the path to repos&#39;s hook directory, allocated in pool.">svn_repos_hook_dir</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00686"></a>00686                    apr_pool_t *pool);
<a name="l00687"></a>00687 <span class="comment"></span>
<a name="l00688"></a>00688 <span class="comment">/** Return the path to @a repos&#39;s start-commit hook, allocated in @a pool. */</span>
<a name="l00689"></a>00689 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00690"></a>00690 <a class="code" href="svn__repos_8h.html#a68649aa74c875e06bd184cf116adf98c" title="Return the path to repos&#39;s start-commit hook, allocated in pool.">svn_repos_start_commit_hook</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00691"></a>00691                             apr_pool_t *pool);
<a name="l00692"></a>00692 <span class="comment"></span>
<a name="l00693"></a>00693 <span class="comment">/** Return the path to @a repos&#39;s pre-commit hook, allocated in @a pool. */</span>
<a name="l00694"></a>00694 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00695"></a>00695 <a class="code" href="svn__repos_8h.html#ad33328d183bf8266253d5094c2373add" title="Return the path to repos&#39;s pre-commit hook, allocated in pool.">svn_repos_pre_commit_hook</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00696"></a>00696                           apr_pool_t *pool);
<a name="l00697"></a>00697 <span class="comment"></span>
<a name="l00698"></a>00698 <span class="comment">/** Return the path to @a repos&#39;s post-commit hook, allocated in @a pool. */</span>
<a name="l00699"></a>00699 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00700"></a>00700 <a class="code" href="svn__repos_8h.html#a0cf430715163996d157ea633d67fc702" title="Return the path to repos&#39;s post-commit hook, allocated in pool.">svn_repos_post_commit_hook</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00701"></a>00701                            apr_pool_t *pool);
<a name="l00702"></a>00702 <span class="comment"></span>
<a name="l00703"></a>00703 <span class="comment">/** Return the path to @a repos&#39;s pre-revprop-change hook, allocated in</span>
<a name="l00704"></a>00704 <span class="comment"> * @a pool.</span>
<a name="l00705"></a>00705 <span class="comment"> */</span>
<a name="l00706"></a>00706 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00707"></a>00707 <a class="code" href="svn__repos_8h.html#a328a4eef530a77f12599fd7575580cf3" title="Return the path to repos&#39;s pre-revprop-change hook, allocated in pool.">svn_repos_pre_revprop_change_hook</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00708"></a>00708                                   apr_pool_t *pool);
<a name="l00709"></a>00709 <span class="comment"></span>
<a name="l00710"></a>00710 <span class="comment">/** Return the path to @a repos&#39;s post-revprop-change hook, allocated in</span>
<a name="l00711"></a>00711 <span class="comment"> * @a pool.</span>
<a name="l00712"></a>00712 <span class="comment"> */</span>
<a name="l00713"></a>00713 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00714"></a>00714 <a class="code" href="svn__repos_8h.html#a7dc718b10de2ccb7a41e3c6af566fbcc" title="Return the path to repos&#39;s post-revprop-change hook, allocated in pool.">svn_repos_post_revprop_change_hook</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00715"></a>00715                                    apr_pool_t *pool);
<a name="l00716"></a>00716 
<a name="l00717"></a>00717 <span class="comment"></span>
<a name="l00718"></a>00718 <span class="comment">/** @defgroup svn_repos_lock_hooks Paths to lock hooks</span>
<a name="l00719"></a>00719 <span class="comment"> * @{</span>
<a name="l00720"></a>00720 <span class="comment"> * @since New in 1.2. */</span>
<a name="l00721"></a>00721 <span class="comment"></span>
<a name="l00722"></a>00722 <span class="comment">/** Return the path to @a repos&#39;s pre-lock hook, allocated in @a pool. */</span>
<a name="l00723"></a>00723 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00724"></a>00724 <a class="code" href="group__svn__repos__lock__hooks.html#ga4761798bdb8b640a0a9a31024116517a" title="Return the path to repos&#39;s pre-lock hook, allocated in pool.">svn_repos_pre_lock_hook</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00725"></a>00725                         apr_pool_t *pool);
<a name="l00726"></a>00726 <span class="comment"></span>
<a name="l00727"></a>00727 <span class="comment">/** Return the path to @a repos&#39;s post-lock hook, allocated in @a pool. */</span>
<a name="l00728"></a>00728 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00729"></a>00729 <a class="code" href="group__svn__repos__lock__hooks.html#gac2b22ebd12a184b0f3962f3d9511d477" title="Return the path to repos&#39;s post-lock hook, allocated in pool.">svn_repos_post_lock_hook</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00730"></a>00730                          apr_pool_t *pool);
<a name="l00731"></a>00731 <span class="comment"></span>
<a name="l00732"></a>00732 <span class="comment">/** Return the path to @a repos&#39;s pre-unlock hook, allocated in @a pool. */</span>
<a name="l00733"></a>00733 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00734"></a>00734 <a class="code" href="group__svn__repos__lock__hooks.html#ga5eec112c090e76d4b7bc362a3a948b41" title="Return the path to repos&#39;s pre-unlock hook, allocated in pool.">svn_repos_pre_unlock_hook</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00735"></a>00735                           apr_pool_t *pool);
<a name="l00736"></a>00736 <span class="comment"></span>
<a name="l00737"></a>00737 <span class="comment">/** Return the path to @a repos&#39;s post-unlock hook, allocated in @a pool. */</span>
<a name="l00738"></a>00738 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00739"></a>00739 <a class="code" href="group__svn__repos__lock__hooks.html#ga11407576231071bbe44f9b1d5ab1192e" title="Return the path to repos&#39;s post-unlock hook, allocated in pool.">svn_repos_post_unlock_hook</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00740"></a>00740                            apr_pool_t *pool);
<a name="l00741"></a>00741 <span class="comment"></span>
<a name="l00742"></a>00742 <span class="comment">/** @} */</span>
<a name="l00743"></a>00743 
<a name="l00744"></a>00744 <span class="comment">/* ---------------------------------------------------------------*/</span>
<a name="l00745"></a>00745 
<a name="l00746"></a>00746 <span class="comment">/* Reporting the state of a working copy, for updates. */</span>
<a name="l00747"></a>00747 
<a name="l00748"></a>00748 <span class="comment"></span>
<a name="l00749"></a>00749 <span class="comment">/**</span>
<a name="l00750"></a>00750 <span class="comment"> * Construct and return a @a report_baton that will be passed to the</span>
<a name="l00751"></a>00751 <span class="comment"> * other functions in this section to describe the state of a pre-existing</span>
<a name="l00752"></a>00752 <span class="comment"> * tree (typically, a working copy).  When the report is finished,</span>
<a name="l00753"></a>00753 <span class="comment"> * @a editor/@a edit_baton will be driven in such a way as to transform the</span>
<a name="l00754"></a>00754 <span class="comment"> * existing tree to @a revnum and, if @a tgt_path is non-NULL, switch the</span>
<a name="l00755"></a>00755 <span class="comment"> * reported hierarchy to @a tgt_path.</span>
<a name="l00756"></a>00756 <span class="comment"> *</span>
<a name="l00757"></a>00757 <span class="comment"> * @a fs_base is the absolute path of the node in the filesystem at which</span>
<a name="l00758"></a>00758 <span class="comment"> * the comparison should be rooted.  @a target is a single path component,</span>
<a name="l00759"></a>00759 <span class="comment"> * used to limit the scope of the report to a single entry of @a fs_base,</span>
<a name="l00760"></a>00760 <span class="comment"> * or &quot;&quot; if all of @a fs_base itself is the main subject of the report.</span>
<a name="l00761"></a>00761 <span class="comment"> *</span>
<a name="l00762"></a>00762 <span class="comment"> * @a tgt_path and @a revnum is the fs path/revision pair that is the</span>
<a name="l00763"></a>00763 <span class="comment"> * &quot;target&quot; of the delta.  @a tgt_path should be provided only when</span>
<a name="l00764"></a>00764 <span class="comment"> * the source and target paths of the report differ.  That is, @a tgt_path</span>
<a name="l00765"></a>00765 <span class="comment"> * should *only* be specified when specifying that the resultant editor</span>
<a name="l00766"></a>00766 <span class="comment"> * drive be one that transforms the reported hierarchy into a pristine tree</span>
<a name="l00767"></a>00767 <span class="comment"> * of @a tgt_path at revision @a revnum.  A @c NULL value for @a tgt_path</span>
<a name="l00768"></a>00768 <span class="comment"> * will indicate that the editor should be driven in such a way as to</span>
<a name="l00769"></a>00769 <span class="comment"> * transform the reported hierarchy to revision @a revnum, preserving the</span>
<a name="l00770"></a>00770 <span class="comment"> * reported hierarchy.</span>
<a name="l00771"></a>00771 <span class="comment"> *</span>
<a name="l00772"></a>00772 <span class="comment"> * @a text_deltas instructs the driver of the @a editor to enable</span>
<a name="l00773"></a>00773 <span class="comment"> * the generation of text deltas.</span>
<a name="l00774"></a>00774 <span class="comment"> *</span>
<a name="l00775"></a>00775 <span class="comment"> * @a ignore_ancestry instructs the driver to ignore node ancestry</span>
<a name="l00776"></a>00776 <span class="comment"> * when determining how to transmit differences.</span>
<a name="l00777"></a>00777 <span class="comment"> *</span>
<a name="l00778"></a>00778 <span class="comment"> * @a send_copyfrom_args instructs the driver to send &#39;copyfrom&#39;</span>
<a name="l00779"></a>00779 <span class="comment"> * arguments to the editor&#39;s add_file() and add_directory() methods,</span>
<a name="l00780"></a>00780 <span class="comment"> * whenever it deems feasible.</span>
<a name="l00781"></a>00781 <span class="comment"> *</span>
<a name="l00782"></a>00782 <span class="comment"> * Use @a authz_read_func and @a authz_read_baton (if not @c NULL) to</span>
<a name="l00783"></a>00783 <span class="comment"> * avoid sending data through @a editor/@a edit_baton which is not</span>
<a name="l00784"></a>00784 <span class="comment"> * authorized for transmission.</span>
<a name="l00785"></a>00785 <span class="comment"> *</span>
<a name="l00786"></a>00786 <span class="comment"> * All allocation for the context and collected state will occur in</span>
<a name="l00787"></a>00787 <span class="comment"> * @a pool.</span>
<a name="l00788"></a>00788 <span class="comment"> *</span>
<a name="l00789"></a>00789 <span class="comment"> * @a depth is the requested depth of the editor drive.</span>
<a name="l00790"></a>00790 <span class="comment"> *</span>
<a name="l00791"></a>00791 <span class="comment"> * If @a depth is #svn_depth_unknown, the editor will affect only the</span>
<a name="l00792"></a>00792 <span class="comment"> * paths reported by the individual calls to svn_repos_set_path3() and</span>
<a name="l00793"></a>00793 <span class="comment"> * svn_repos_link_path3().</span>
<a name="l00794"></a>00794 <span class="comment"> *</span>
<a name="l00795"></a>00795 <span class="comment"> * For example, if the reported tree is the @c A subdir of the Greek Tree</span>
<a name="l00796"></a>00796 <span class="comment"> * (see Subversion&#39;s test suite), at depth #svn_depth_empty, but the</span>
<a name="l00797"></a>00797 <span class="comment"> * @c A/B subdir is reported at depth #svn_depth_infinity, then</span>
<a name="l00798"></a>00798 <span class="comment"> * repository-side changes to @c A/mu, or underneath @c A/C and @c</span>
<a name="l00799"></a>00799 <span class="comment"> * A/D, would not be reflected in the editor drive, but changes</span>
<a name="l00800"></a>00800 <span class="comment"> * underneath @c A/B would be.</span>
<a name="l00801"></a>00801 <span class="comment"> *</span>
<a name="l00802"></a>00802 <span class="comment"> * Additionally, the editor driver will call @c add_directory and</span>
<a name="l00803"></a>00803 <span class="comment"> * and @c add_file for directories with an appropriate depth.  For</span>
<a name="l00804"></a>00804 <span class="comment"> * example, a directory reported at #svn_depth_files will receive</span>
<a name="l00805"></a>00805 <span class="comment"> * file (but not directory) additions.  A directory at #svn_depth_empty</span>
<a name="l00806"></a>00806 <span class="comment"> * will receive neither.</span>
<a name="l00807"></a>00807 <span class="comment"> *</span>
<a name="l00808"></a>00808 <span class="comment"> * If @a depth is #svn_depth_files, #svn_depth_immediates or</span>
<a name="l00809"></a>00809 <span class="comment"> * #svn_depth_infinity and @a depth is greater than the reported depth</span>
<a name="l00810"></a>00810 <span class="comment"> * of the working copy, then the editor driver will emit editor</span>
<a name="l00811"></a>00811 <span class="comment"> * operations so as to upgrade the working copy to this depth.</span>
<a name="l00812"></a>00812 <span class="comment"> *</span>
<a name="l00813"></a>00813 <span class="comment"> * If @a depth is #svn_depth_empty, #svn_depth_files,</span>
<a name="l00814"></a>00814 <span class="comment"> * #svn_depth_immediates and @a depth is lower</span>
<a name="l00815"></a>00815 <span class="comment"> * than or equal to the depth of the working copy, then the editor</span>
<a name="l00816"></a>00816 <span class="comment"> * operations will affect only paths at or above @a depth.</span>
<a name="l00817"></a>00817 <span class="comment"> *</span>
<a name="l00818"></a>00818 <span class="comment"> * @since New in 1.5.</span>
<a name="l00819"></a>00819 <span class="comment"> */</span>
<a name="l00820"></a>00820 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00821"></a>00821 <a class="code" href="svn__repos_8h.html#ac0c2d40c2ad3856b51eb07f121382ccb" title="Construct and return a report_baton that will be passed to the other functions in this section to des...">svn_repos_begin_report2</a>(<span class="keywordtype">void</span> **report_baton,
<a name="l00822"></a>00822                         <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> revnum,
<a name="l00823"></a>00823                         <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00824"></a>00824                         <span class="keyword">const</span> <span class="keywordtype">char</span> *fs_base,
<a name="l00825"></a>00825                         <span class="keyword">const</span> <span class="keywordtype">char</span> *target,
<a name="l00826"></a>00826                         <span class="keyword">const</span> <span class="keywordtype">char</span> *tgt_path,
<a name="l00827"></a>00827                         <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> text_deltas,
<a name="l00828"></a>00828                         <a class="code" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c" title="The concept of depth for directories.">svn_depth_t</a> depth,
<a name="l00829"></a>00829                         <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> ignore_ancestry,
<a name="l00830"></a>00830                         <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> send_copyfrom_args,
<a name="l00831"></a>00831                         <span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> *editor,
<a name="l00832"></a>00832                         <span class="keywordtype">void</span> *edit_baton,
<a name="l00833"></a>00833                         <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l00834"></a>00834                         <span class="keywordtype">void</span> *authz_read_baton,
<a name="l00835"></a>00835                         apr_pool_t *pool);
<a name="l00836"></a>00836 <span class="comment"></span>
<a name="l00837"></a>00837 <span class="comment">/**</span>
<a name="l00838"></a>00838 <span class="comment"> * The same as svn_repos_begin_report2(), but taking a boolean</span>
<a name="l00839"></a>00839 <span class="comment"> * @a recurse flag, and sending FALSE for @a send_copyfrom_args.</span>
<a name="l00840"></a>00840 <span class="comment"> *</span>
<a name="l00841"></a>00841 <span class="comment"> * If @a recurse is TRUE, the editor driver will drive the editor with</span>
<a name="l00842"></a>00842 <span class="comment"> * a depth of #svn_depth_infinity; if FALSE, then with a depth of</span>
<a name="l00843"></a>00843 <span class="comment"> * #svn_depth_files.</span>
<a name="l00844"></a>00844 <span class="comment"> *</span>
<a name="l00845"></a>00845 <span class="comment"> * @note @a username is ignored, and has been removed in a revised</span>
<a name="l00846"></a>00846 <span class="comment"> * version of this API.</span>
<a name="l00847"></a>00847 <span class="comment"> *</span>
<a name="l00848"></a>00848 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.4 API.</span>
<a name="l00849"></a>00849 <span class="comment"> */</span>
<a name="l00850"></a>00850 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00851"></a>00851 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00852"></a>00852 <a class="code" href="svn__repos_8h.html#a93bb88154b6ea6afa95e9f29ca504660" title="The same as svn_repos_begin_report2(), but taking a boolean recurse flag, and sending FALSE for send_...">svn_repos_begin_report</a>(<span class="keywordtype">void</span> **report_baton,
<a name="l00853"></a>00853                        <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> revnum,
<a name="l00854"></a>00854                        <span class="keyword">const</span> <span class="keywordtype">char</span> *username,
<a name="l00855"></a>00855                        <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l00856"></a>00856                        <span class="keyword">const</span> <span class="keywordtype">char</span> *fs_base,
<a name="l00857"></a>00857                        <span class="keyword">const</span> <span class="keywordtype">char</span> *target,
<a name="l00858"></a>00858                        <span class="keyword">const</span> <span class="keywordtype">char</span> *tgt_path,
<a name="l00859"></a>00859                        <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> text_deltas,
<a name="l00860"></a>00860                        <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> recurse,
<a name="l00861"></a>00861                        <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> ignore_ancestry,
<a name="l00862"></a>00862                        <span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> *editor,
<a name="l00863"></a>00863                        <span class="keywordtype">void</span> *edit_baton,
<a name="l00864"></a>00864                        <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l00865"></a>00865                        <span class="keywordtype">void</span> *authz_read_baton,
<a name="l00866"></a>00866                        apr_pool_t *pool);
<a name="l00867"></a>00867 
<a name="l00868"></a>00868 <span class="comment"></span>
<a name="l00869"></a>00869 <span class="comment">/**</span>
<a name="l00870"></a>00870 <span class="comment"> * Given a @a report_baton constructed by svn_repos_begin_report2(),</span>
<a name="l00871"></a>00871 <span class="comment"> * record the presence of @a path, at @a revision with depth @a depth,</span>
<a name="l00872"></a>00872 <span class="comment"> * in the current tree.</span>
<a name="l00873"></a>00873 <span class="comment"> *</span>
<a name="l00874"></a>00874 <span class="comment"> * @a path is relative to the anchor/target used in the creation of the</span>
<a name="l00875"></a>00875 <span class="comment"> * @a report_baton.</span>
<a name="l00876"></a>00876 <span class="comment"> *</span>
<a name="l00877"></a>00877 <span class="comment"> * @a revision may be SVN_INVALID_REVNUM if (for example) @a path</span>
<a name="l00878"></a>00878 <span class="comment"> * represents a locally-added path with no revision number, or @a</span>
<a name="l00879"></a>00879 <span class="comment"> * depth is #svn_depth_exclude.</span>
<a name="l00880"></a>00880 <span class="comment"> *</span>
<a name="l00881"></a>00881 <span class="comment"> * @a path may not be underneath a path on which svn_repos_set_path3()</span>
<a name="l00882"></a>00882 <span class="comment"> * was previously called with #svn_depth_exclude in this report.</span>
<a name="l00883"></a>00883 <span class="comment"> *</span>
<a name="l00884"></a>00884 <span class="comment"> * The first call of this in a given report usually passes an empty</span>
<a name="l00885"></a>00885 <span class="comment"> * @a path; this is used to set up the correct root revision for the editor</span>
<a name="l00886"></a>00886 <span class="comment"> * drive.</span>
<a name="l00887"></a>00887 <span class="comment"> *</span>
<a name="l00888"></a>00888 <span class="comment"> * A depth of #svn_depth_unknown is not allowed, and results in an</span>
<a name="l00889"></a>00889 <span class="comment"> * error.</span>
<a name="l00890"></a>00890 <span class="comment"> *</span>
<a name="l00891"></a>00891 <span class="comment"> * If @a start_empty is TRUE and @a path is a directory, then require the</span>
<a name="l00892"></a>00892 <span class="comment"> * caller to explicitly provide all the children of @a path - do not assume</span>
<a name="l00893"></a>00893 <span class="comment"> * that the tree also contains all the children of @a path at @a revision.</span>
<a name="l00894"></a>00894 <span class="comment"> * This is for &#39;low confidence&#39; client reporting.</span>
<a name="l00895"></a>00895 <span class="comment"> *</span>
<a name="l00896"></a>00896 <span class="comment"> * If the caller has a lock token for @a path, then @a lock_token should</span>
<a name="l00897"></a>00897 <span class="comment"> * be set to that token.  Else, @a lock_token should be NULL.</span>
<a name="l00898"></a>00898 <span class="comment"> *</span>
<a name="l00899"></a>00899 <span class="comment"> * All temporary allocations are done in @a pool.</span>
<a name="l00900"></a>00900 <span class="comment"> *</span>
<a name="l00901"></a>00901 <span class="comment"> * @since New in 1.5.</span>
<a name="l00902"></a>00902 <span class="comment"> */</span>
<a name="l00903"></a>00903 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00904"></a>00904 <a class="code" href="svn__repos_8h.html#a82ba182357ef3f409431da4207214d5a" title="Given a report_baton constructed by svn_repos_begin_report2(), record the presence of path...">svn_repos_set_path3</a>(<span class="keywordtype">void</span> *report_baton,
<a name="l00905"></a>00905                     <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00906"></a>00906                     <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> revision,
<a name="l00907"></a>00907                     <a class="code" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c" title="The concept of depth for directories.">svn_depth_t</a> depth,
<a name="l00908"></a>00908                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> start_empty,
<a name="l00909"></a>00909                     <span class="keyword">const</span> <span class="keywordtype">char</span> *lock_token,
<a name="l00910"></a>00910                     apr_pool_t *pool);
<a name="l00911"></a>00911 <span class="comment"></span>
<a name="l00912"></a>00912 <span class="comment">/**</span>
<a name="l00913"></a>00913 <span class="comment"> * Similar to svn_repos_set_path3(), but with @a depth set to</span>
<a name="l00914"></a>00914 <span class="comment"> * #svn_depth_infinity.</span>
<a name="l00915"></a>00915 <span class="comment"> *</span>
<a name="l00916"></a>00916 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.4 API.</span>
<a name="l00917"></a>00917 <span class="comment"> */</span>
<a name="l00918"></a>00918 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00919"></a>00919 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00920"></a>00920 <a class="code" href="svn__repos_8h.html#a505968515d92df76cc76295708dbfe69" title="Similar to svn_repos_set_path3(), but with depth set to svn_depth_infinity.">svn_repos_set_path2</a>(<span class="keywordtype">void</span> *report_baton,
<a name="l00921"></a>00921                     <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00922"></a>00922                     <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> revision,
<a name="l00923"></a>00923                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> start_empty,
<a name="l00924"></a>00924                     <span class="keyword">const</span> <span class="keywordtype">char</span> *lock_token,
<a name="l00925"></a>00925                     apr_pool_t *pool);
<a name="l00926"></a>00926 <span class="comment"></span>
<a name="l00927"></a>00927 <span class="comment">/**</span>
<a name="l00928"></a>00928 <span class="comment"> * Similar to svn_repos_set_path2(), but with @a lock_token set to @c NULL.</span>
<a name="l00929"></a>00929 <span class="comment"> *</span>
<a name="l00930"></a>00930 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.1 API.</span>
<a name="l00931"></a>00931 <span class="comment"> */</span>
<a name="l00932"></a>00932 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00933"></a>00933 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00934"></a>00934 <a class="code" href="svn__repos_8h.html#a8ce3bb452448deb9b1d06d8548093b04" title="Similar to svn_repos_set_path2(), but with lock_token set to NULL.">svn_repos_set_path</a>(<span class="keywordtype">void</span> *report_baton,
<a name="l00935"></a>00935                    <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00936"></a>00936                    <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> revision,
<a name="l00937"></a>00937                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> start_empty,
<a name="l00938"></a>00938                    apr_pool_t *pool);
<a name="l00939"></a>00939 <span class="comment"></span>
<a name="l00940"></a>00940 <span class="comment">/**</span>
<a name="l00941"></a>00941 <span class="comment"> * Given a @a report_baton constructed by svn_repos_begin_report2(),</span>
<a name="l00942"></a>00942 <span class="comment"> * record the presence of @a path in the current tree, containing the contents</span>
<a name="l00943"></a>00943 <span class="comment"> * of @a link_path at @a revision with depth @a depth.</span>
<a name="l00944"></a>00944 <span class="comment"> *</span>
<a name="l00945"></a>00945 <span class="comment"> * A depth of #svn_depth_unknown is not allowed, and results in an</span>
<a name="l00946"></a>00946 <span class="comment"> * error.</span>
<a name="l00947"></a>00947 <span class="comment"> *</span>
<a name="l00948"></a>00948 <span class="comment"> * @a path may not be underneath a path on which svn_repos_set_path3()</span>
<a name="l00949"></a>00949 <span class="comment"> * was previously called with #svn_depth_exclude in this report.</span>
<a name="l00950"></a>00950 <span class="comment"> *</span>
<a name="l00951"></a>00951 <span class="comment"> * Note that while @a path is relative to the anchor/target used in the</span>
<a name="l00952"></a>00952 <span class="comment"> * creation of the @a report_baton, @a link_path is an absolute filesystem</span>
<a name="l00953"></a>00953 <span class="comment"> * path!</span>
<a name="l00954"></a>00954 <span class="comment"> *</span>
<a name="l00955"></a>00955 <span class="comment"> * If @a start_empty is TRUE and @a path is a directory, then require the</span>
<a name="l00956"></a>00956 <span class="comment"> * caller to explicitly provide all the children of @a path - do not assume</span>
<a name="l00957"></a>00957 <span class="comment"> * that the tree also contains all the children of @a link_path at</span>
<a name="l00958"></a>00958 <span class="comment"> * @a revision.  This is for &#39;low confidence&#39; client reporting.</span>
<a name="l00959"></a>00959 <span class="comment"> *</span>
<a name="l00960"></a>00960 <span class="comment"> * If the caller has a lock token for @a link_path, then @a lock_token</span>
<a name="l00961"></a>00961 <span class="comment"> * should be set to that token.  Else, @a lock_token should be NULL.</span>
<a name="l00962"></a>00962 <span class="comment"> *</span>
<a name="l00963"></a>00963 <span class="comment"> * All temporary allocations are done in @a pool.</span>
<a name="l00964"></a>00964 <span class="comment"> *</span>
<a name="l00965"></a>00965 <span class="comment"> * @since New in 1.5.</span>
<a name="l00966"></a>00966 <span class="comment"> */</span>
<a name="l00967"></a>00967 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00968"></a>00968 <a class="code" href="svn__repos_8h.html#a149b37240a92f99324adb4ca3e46ddaf" title="Given a report_baton constructed by svn_repos_begin_report2(), record the presence of path in the cur...">svn_repos_link_path3</a>(<span class="keywordtype">void</span> *report_baton,
<a name="l00969"></a>00969                      <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00970"></a>00970                      <span class="keyword">const</span> <span class="keywordtype">char</span> *link_path,
<a name="l00971"></a>00971                      <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> revision,
<a name="l00972"></a>00972                      <a class="code" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c" title="The concept of depth for directories.">svn_depth_t</a> depth,
<a name="l00973"></a>00973                      <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> start_empty,
<a name="l00974"></a>00974                      <span class="keyword">const</span> <span class="keywordtype">char</span> *lock_token,
<a name="l00975"></a>00975                      apr_pool_t *pool);
<a name="l00976"></a>00976 <span class="comment"></span>
<a name="l00977"></a>00977 <span class="comment">/**</span>
<a name="l00978"></a>00978 <span class="comment"> * Similar to svn_repos_link_path3(), but with @a depth set to</span>
<a name="l00979"></a>00979 <span class="comment"> * #svn_depth_infinity.</span>
<a name="l00980"></a>00980 <span class="comment"> *</span>
<a name="l00981"></a>00981 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.4 API.</span>
<a name="l00982"></a>00982 <span class="comment"> */</span>
<a name="l00983"></a>00983 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00984"></a>00984 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00985"></a>00985 <a class="code" href="svn__repos_8h.html#a26dcc78a980e2c0d1c1a66cf55e5a5ce" title="Similar to svn_repos_link_path3(), but with depth set to svn_depth_infinity.">svn_repos_link_path2</a>(<span class="keywordtype">void</span> *report_baton,
<a name="l00986"></a>00986                      <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00987"></a>00987                      <span class="keyword">const</span> <span class="keywordtype">char</span> *link_path,
<a name="l00988"></a>00988                      <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> revision,
<a name="l00989"></a>00989                      <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> start_empty,
<a name="l00990"></a>00990                      <span class="keyword">const</span> <span class="keywordtype">char</span> *lock_token,
<a name="l00991"></a>00991                      apr_pool_t *pool);
<a name="l00992"></a>00992 <span class="comment"></span>
<a name="l00993"></a>00993 <span class="comment">/**</span>
<a name="l00994"></a>00994 <span class="comment"> * Similar to svn_repos_link_path2(), but with @a lock_token set to @c NULL.</span>
<a name="l00995"></a>00995 <span class="comment"> *</span>
<a name="l00996"></a>00996 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.1 API.</span>
<a name="l00997"></a>00997 <span class="comment"> */</span>
<a name="l00998"></a>00998 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00999"></a>00999 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01000"></a>01000 <a class="code" href="svn__repos_8h.html#a5df2b86cc0cd3477669c7f44bb987890" title="Similar to svn_repos_link_path2(), but with lock_token set to NULL.">svn_repos_link_path</a>(<span class="keywordtype">void</span> *report_baton,
<a name="l01001"></a>01001                     <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01002"></a>01002                     <span class="keyword">const</span> <span class="keywordtype">char</span> *link_path,
<a name="l01003"></a>01003                     <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> revision,
<a name="l01004"></a>01004                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> start_empty,
<a name="l01005"></a>01005                     apr_pool_t *pool);
<a name="l01006"></a>01006 <span class="comment"></span>
<a name="l01007"></a>01007 <span class="comment">/** Given a @a report_baton constructed by svn_repos_begin_report2(),</span>
<a name="l01008"></a>01008 <span class="comment"> * record the non-existence of @a path in the current tree.</span>
<a name="l01009"></a>01009 <span class="comment"> *</span>
<a name="l01010"></a>01010 <span class="comment"> * @a path may not be underneath a path on which svn_repos_set_path3()</span>
<a name="l01011"></a>01011 <span class="comment"> * was previously called with #svn_depth_exclude in this report.</span>
<a name="l01012"></a>01012 <span class="comment"> *</span>
<a name="l01013"></a>01013 <span class="comment"> * (This allows the reporter&#39;s driver to describe missing pieces of a</span>
<a name="l01014"></a>01014 <span class="comment"> * working copy, so that &#39;svn up&#39; can recreate them.)</span>
<a name="l01015"></a>01015 <span class="comment"> *</span>
<a name="l01016"></a>01016 <span class="comment"> * All temporary allocations are done in @a pool.</span>
<a name="l01017"></a>01017 <span class="comment"> */</span>
<a name="l01018"></a>01018 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01019"></a>01019 <a class="code" href="svn__repos_8h.html#a75d0a35939d9e37586db2e7c3ad2d87e" title="Given a report_baton constructed by svn_repos_begin_report2(), record the non-existence of path in th...">svn_repos_delete_path</a>(<span class="keywordtype">void</span> *report_baton,
<a name="l01020"></a>01020                       <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01021"></a>01021                       apr_pool_t *pool);
<a name="l01022"></a>01022 <span class="comment"></span>
<a name="l01023"></a>01023 <span class="comment">/** Given a @a report_baton constructed by svn_repos_begin_report2(),</span>
<a name="l01024"></a>01024 <span class="comment"> * finish the report and drive the editor as specified when the report</span>
<a name="l01025"></a>01025 <span class="comment"> * baton was constructed.</span>
<a name="l01026"></a>01026 <span class="comment"> *</span>
<a name="l01027"></a>01027 <span class="comment"> * If an error occurs during the driving of the editor, do NOT abort the</span>
<a name="l01028"></a>01028 <span class="comment"> * edit; that responsibility belongs to the caller of this function, if</span>
<a name="l01029"></a>01029 <span class="comment"> * it happens at all.</span>
<a name="l01030"></a>01030 <span class="comment"> *</span>
<a name="l01031"></a>01031 <span class="comment"> * After the call to this function, @a report_baton is no longer valid;</span>
<a name="l01032"></a>01032 <span class="comment"> * it should not be passed to any other reporting functions, including</span>
<a name="l01033"></a>01033 <span class="comment"> * svn_repos_abort_report(), even if this function returns an error.</span>
<a name="l01034"></a>01034 <span class="comment"> */</span>
<a name="l01035"></a>01035 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01036"></a>01036 <a class="code" href="svn__repos_8h.html#a4731fce6f6fe11b01604c16cbbb30fe3" title="Given a report_baton constructed by svn_repos_begin_report2(), finish the report and drive the editor...">svn_repos_finish_report</a>(<span class="keywordtype">void</span> *report_baton,
<a name="l01037"></a>01037                         apr_pool_t *pool);
<a name="l01038"></a>01038 
<a name="l01039"></a>01039 <span class="comment"></span>
<a name="l01040"></a>01040 <span class="comment">/** Given a @a report_baton constructed by svn_repos_begin_report2(),</span>
<a name="l01041"></a>01041 <span class="comment"> * abort the report.  This function can be called anytime before</span>
<a name="l01042"></a>01042 <span class="comment"> * svn_repos_finish_report() is called.</span>
<a name="l01043"></a>01043 <span class="comment"> *</span>
<a name="l01044"></a>01044 <span class="comment"> * After the call to this function, @a report_baton is no longer valid;</span>
<a name="l01045"></a>01045 <span class="comment"> * it should not be passed to any other reporting functions.</span>
<a name="l01046"></a>01046 <span class="comment"> */</span>
<a name="l01047"></a>01047 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01048"></a>01048 <a class="code" href="svn__repos_8h.html#a10907f7d26c89d77c8d2bff4fff6c706" title="Given a report_baton constructed by svn_repos_begin_report2(), abort the report.">svn_repos_abort_report</a>(<span class="keywordtype">void</span> *report_baton,
<a name="l01049"></a>01049                        apr_pool_t *pool);
<a name="l01050"></a>01050 
<a name="l01051"></a>01051 
<a name="l01052"></a>01052 <span class="comment">/* ---------------------------------------------------------------*/</span>
<a name="l01053"></a>01053 
<a name="l01054"></a>01054 <span class="comment">/* The magical dir_delta update routines. */</span>
<a name="l01055"></a>01055 <span class="comment"></span>
<a name="l01056"></a>01056 <span class="comment">/** Use the provided @a editor and @a edit_baton to describe the changes</span>
<a name="l01057"></a>01057 <span class="comment"> * necessary for making a given node (and its descendants, if it is a</span>
<a name="l01058"></a>01058 <span class="comment"> * directory) under @a src_root look exactly like @a tgt_path under</span>
<a name="l01059"></a>01059 <span class="comment"> * @a tgt_root.  @a src_entry is the node to update.  If @a src_entry</span>
<a name="l01060"></a>01060 <span class="comment"> * is empty, then compute the difference between the entire tree</span>
<a name="l01061"></a>01061 <span class="comment"> * anchored at @a src_parent_dir under @a src_root and @a tgt_path</span>
<a name="l01062"></a>01062 <span class="comment"> * under @a tgt_root.  Else, describe the changes needed to update</span>
<a name="l01063"></a>01063 <span class="comment"> * only that entry in @a src_parent_dir.  Typically, callers of this</span>
<a name="l01064"></a>01064 <span class="comment"> * function will use a @a tgt_path that is the concatenation of @a</span>
<a name="l01065"></a>01065 <span class="comment"> * src_parent_dir and @a src_entry.</span>
<a name="l01066"></a>01066 <span class="comment"> *</span>
<a name="l01067"></a>01067 <span class="comment"> * @a src_root and @a tgt_root can both be either revision or transaction</span>
<a name="l01068"></a>01068 <span class="comment"> * roots.  If @a tgt_root is a revision, @a editor&#39;s set_target_revision()</span>
<a name="l01069"></a>01069 <span class="comment"> * will be called with the @a tgt_root&#39;s revision number, else it will</span>
<a name="l01070"></a>01070 <span class="comment"> * not be called at all.</span>
<a name="l01071"></a>01071 <span class="comment"> *</span>
<a name="l01072"></a>01072 <span class="comment"> * If @a authz_read_func is non-NULL, invoke it before any call to</span>
<a name="l01073"></a>01073 <span class="comment"> *</span>
<a name="l01074"></a>01074 <span class="comment"> *    @a editor-&gt;open_root</span>
<a name="l01075"></a>01075 <span class="comment"> *    @a editor-&gt;add_directory</span>
<a name="l01076"></a>01076 <span class="comment"> *    @a editor-&gt;open_directory</span>
<a name="l01077"></a>01077 <span class="comment"> *    @a editor-&gt;add_file</span>
<a name="l01078"></a>01078 <span class="comment"> *    @a editor-&gt;open_file</span>
<a name="l01079"></a>01079 <span class="comment"> *</span>
<a name="l01080"></a>01080 <span class="comment"> * passing @a tgt_root, the same path that would be passed to the</span>
<a name="l01081"></a>01081 <span class="comment"> * editor function in question, and @a authz_read_baton.  If the</span>
<a name="l01082"></a>01082 <span class="comment"> * @a *allowed parameter comes back TRUE, then proceed with the planned</span>
<a name="l01083"></a>01083 <span class="comment"> * editor call; else if FALSE, then invoke @a editor-&gt;absent_file or</span>
<a name="l01084"></a>01084 <span class="comment"> * @a editor-&gt;absent_directory as appropriate, except if the planned</span>
<a name="l01085"></a>01085 <span class="comment"> * editor call was open_root, throw SVN_ERR_AUTHZ_ROOT_UNREADABLE.</span>
<a name="l01086"></a>01086 <span class="comment"> *</span>
<a name="l01087"></a>01087 <span class="comment"> * If @a text_deltas is @c FALSE, send a single @c NULL txdelta window to</span>
<a name="l01088"></a>01088 <span class="comment"> * the window handler returned by @a editor-&gt;apply_textdelta().</span>
<a name="l01089"></a>01089 <span class="comment"> *</span>
<a name="l01090"></a>01090 <span class="comment"> * If @a depth is #svn_depth_empty, invoke @a editor calls only on</span>
<a name="l01091"></a>01091 <span class="comment"> * @a src_entry (or @a src_parent_dir, if @a src_entry is empty).</span>
<a name="l01092"></a>01092 <span class="comment"> * If @a depth is #svn_depth_files, also invoke the editor on file</span>
<a name="l01093"></a>01093 <span class="comment"> * children, if any; if #svn_depth_immediates, invoke it on</span>
<a name="l01094"></a>01094 <span class="comment"> * immediate subdirectories as well as files; if #svn_depth_infinity,</span>
<a name="l01095"></a>01095 <span class="comment"> * recurse fully.</span>
<a name="l01096"></a>01096 <span class="comment"> *</span>
<a name="l01097"></a>01097 <span class="comment"> * If @a entry_props is @c TRUE, accompany each opened/added entry with</span>
<a name="l01098"></a>01098 <span class="comment"> * propchange editor calls that relay special &quot;entry props&quot; (this</span>
<a name="l01099"></a>01099 <span class="comment"> * is typically used only for working copy updates).</span>
<a name="l01100"></a>01100 <span class="comment"> *</span>
<a name="l01101"></a>01101 <span class="comment"> * @a ignore_ancestry instructs the function to ignore node ancestry</span>
<a name="l01102"></a>01102 <span class="comment"> * when determining how to transmit differences.</span>
<a name="l01103"></a>01103 <span class="comment"> *</span>
<a name="l01104"></a>01104 <span class="comment"> * Before completing successfully, this function calls @a editor&#39;s</span>
<a name="l01105"></a>01105 <span class="comment"> * close_edit(), so the caller should expect its @a edit_baton to be</span>
<a name="l01106"></a>01106 <span class="comment"> * invalid after its use with this function.</span>
<a name="l01107"></a>01107 <span class="comment"> *</span>
<a name="l01108"></a>01108 <span class="comment"> * Do any allocation necessary for the delta computation in @a pool.</span>
<a name="l01109"></a>01109 <span class="comment"> * This function&#39;s maximum memory consumption is at most roughly</span>
<a name="l01110"></a>01110 <span class="comment"> * proportional to the greatest depth of the tree under @a tgt_root, not</span>
<a name="l01111"></a>01111 <span class="comment"> * the total size of the delta.</span>
<a name="l01112"></a>01112 <span class="comment"> *</span>
<a name="l01113"></a>01113 <span class="comment"> * ### svn_repos_dir_delta2 is mostly superseded by the reporter</span>
<a name="l01114"></a>01114 <span class="comment"> * ### functionality (svn_repos_begin_report2 and friends).</span>
<a name="l01115"></a>01115 <span class="comment"> * ### svn_repos_dir_delta2 does allow the roots to be transaction</span>
<a name="l01116"></a>01116 <span class="comment"> * ### roots rather than just revision roots, and it has the</span>
<a name="l01117"></a>01117 <span class="comment"> * ### entry_props flag.  Almost all of Subversion&#39;s own code uses the</span>
<a name="l01118"></a>01118 <span class="comment"> * ### reporter instead; there are some stray references to the</span>
<a name="l01119"></a>01119 <span class="comment"> * ### svn_repos_dir_delta[2] in comments which should probably</span>
<a name="l01120"></a>01120 <span class="comment"> * ### actually refer to the reporter.</span>
<a name="l01121"></a>01121 <span class="comment"> */</span>
<a name="l01122"></a>01122 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01123"></a>01123 <a class="code" href="svn__repos_8h.html#a3485c1fbcf0585bdeaf13379f7217121" title="Use the provided editor and edit_baton to describe the changes necessary for making a given node (and...">svn_repos_dir_delta2</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *src_root,
<a name="l01124"></a>01124                      <span class="keyword">const</span> <span class="keywordtype">char</span> *src_parent_dir,
<a name="l01125"></a>01125                      <span class="keyword">const</span> <span class="keywordtype">char</span> *src_entry,
<a name="l01126"></a>01126                      <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *tgt_root,
<a name="l01127"></a>01127                      <span class="keyword">const</span> <span class="keywordtype">char</span> *tgt_path,
<a name="l01128"></a>01128                      <span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> *editor,
<a name="l01129"></a>01129                      <span class="keywordtype">void</span> *edit_baton,
<a name="l01130"></a>01130                      <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l01131"></a>01131                      <span class="keywordtype">void</span> *authz_read_baton,
<a name="l01132"></a>01132                      <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> text_deltas,
<a name="l01133"></a>01133                      <a class="code" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c" title="The concept of depth for directories.">svn_depth_t</a> depth,
<a name="l01134"></a>01134                      <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> entry_props,
<a name="l01135"></a>01135                      <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> ignore_ancestry,
<a name="l01136"></a>01136                      apr_pool_t *pool);
<a name="l01137"></a>01137 <span class="comment"></span>
<a name="l01138"></a>01138 <span class="comment">/**</span>
<a name="l01139"></a>01139 <span class="comment"> * Similar to svn_repos_dir_delta2(), but if @a recurse is TRUE, pass</span>
<a name="l01140"></a>01140 <span class="comment"> * #svn_depth_infinity for @a depth, and if @a recurse is FALSE,</span>
<a name="l01141"></a>01141 <span class="comment"> * pass #svn_depth_files for @a depth.</span>
<a name="l01142"></a>01142 <span class="comment"> *</span>
<a name="l01143"></a>01143 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.4 API.</span>
<a name="l01144"></a>01144 <span class="comment"> */</span>
<a name="l01145"></a>01145 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01146"></a>01146 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01147"></a>01147 <a class="code" href="svn__repos_8h.html#a75c041f294a7b3d6c70c4178b9decbac" title="Similar to svn_repos_dir_delta2(), but if recurse is TRUE, pass svn_depth_infinity for depth...">svn_repos_dir_delta</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *src_root,
<a name="l01148"></a>01148                     <span class="keyword">const</span> <span class="keywordtype">char</span> *src_parent_dir,
<a name="l01149"></a>01149                     <span class="keyword">const</span> <span class="keywordtype">char</span> *src_entry,
<a name="l01150"></a>01150                     <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *tgt_root,
<a name="l01151"></a>01151                     <span class="keyword">const</span> <span class="keywordtype">char</span> *tgt_path,
<a name="l01152"></a>01152                     <span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> *editor,
<a name="l01153"></a>01153                     <span class="keywordtype">void</span> *edit_baton,
<a name="l01154"></a>01154                     <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l01155"></a>01155                     <span class="keywordtype">void</span> *authz_read_baton,
<a name="l01156"></a>01156                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> text_deltas,
<a name="l01157"></a>01157                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> recurse,
<a name="l01158"></a>01158                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> entry_props,
<a name="l01159"></a>01159                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> ignore_ancestry,
<a name="l01160"></a>01160                     apr_pool_t *pool);
<a name="l01161"></a>01161 
<a name="l01162"></a>01162 <span class="comment"></span>
<a name="l01163"></a>01163 <span class="comment">/** Use the provided @a editor and @a edit_baton to describe the</span>
<a name="l01164"></a>01164 <span class="comment"> * skeletal changes made in a particular filesystem @a root</span>
<a name="l01165"></a>01165 <span class="comment"> * (revision or transaction).</span>
<a name="l01166"></a>01166 <span class="comment"> *</span>
<a name="l01167"></a>01167 <span class="comment"> * Changes will be limited to those within @a base_dir, and if</span>
<a name="l01168"></a>01168 <span class="comment"> * @a low_water_mark is set to something other than #SVN_INVALID_REVNUM</span>
<a name="l01169"></a>01169 <span class="comment"> * it is assumed that the client has no knowledge of revisions prior to</span>
<a name="l01170"></a>01170 <span class="comment"> * @a low_water_mark.  Together, these two arguments define the portion of</span>
<a name="l01171"></a>01171 <span class="comment"> * the tree that the client is assumed to have knowledge of, and thus any</span>
<a name="l01172"></a>01172 <span class="comment"> * copies of data from outside that part of the tree will be sent in their</span>
<a name="l01173"></a>01173 <span class="comment"> * entirety, not as simple copies or deltas against a previous version.</span>
<a name="l01174"></a>01174 <span class="comment"> *</span>
<a name="l01175"></a>01175 <span class="comment"> * The @a editor passed to this function should be aware of the fact</span>
<a name="l01176"></a>01176 <span class="comment"> * that, if @a send_deltas is FALSE, calls to its change_dir_prop(),</span>
<a name="l01177"></a>01177 <span class="comment"> * change_file_prop(), and apply_textdelta() functions will not</span>
<a name="l01178"></a>01178 <span class="comment"> * contain meaningful data, and merely serve as indications that</span>
<a name="l01179"></a>01179 <span class="comment"> * properties or textual contents were changed.</span>
<a name="l01180"></a>01180 <span class="comment"> *</span>
<a name="l01181"></a>01181 <span class="comment"> * If @a send_deltas is @c TRUE, the text and property deltas for changes</span>
<a name="l01182"></a>01182 <span class="comment"> * will be sent, otherwise NULL text deltas and empty prop changes will be</span>
<a name="l01183"></a>01183 <span class="comment"> * used.</span>
<a name="l01184"></a>01184 <span class="comment"> *</span>
<a name="l01185"></a>01185 <span class="comment"> * If @a authz_read_func is non-NULL, it will be used to determine if the</span>
<a name="l01186"></a>01186 <span class="comment"> * user has read access to the data being accessed.  Data that the user</span>
<a name="l01187"></a>01187 <span class="comment"> * cannot access will be skipped.</span>
<a name="l01188"></a>01188 <span class="comment"> *</span>
<a name="l01189"></a>01189 <span class="comment"> * @note This editor driver passes SVN_INVALID_REVNUM for all</span>
<a name="l01190"></a>01190 <span class="comment"> * revision parameters in the editor interface except the copyfrom</span>
<a name="l01191"></a>01191 <span class="comment"> * parameter of the add_file() and add_directory() editor functions.</span>
<a name="l01192"></a>01192 <span class="comment"> *</span>
<a name="l01193"></a>01193 <span class="comment"> * @since New in 1.4.</span>
<a name="l01194"></a>01194 <span class="comment"> */</span>
<a name="l01195"></a>01195 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01196"></a>01196 <a class="code" href="svn__repos_8h.html#aef0fa3335d10b603cfbae5efc7a5d016" title="Use the provided editor and edit_baton to describe the skeletal changes made in a particular filesyst...">svn_repos_replay2</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01197"></a>01197                   <span class="keyword">const</span> <span class="keywordtype">char</span> *base_dir,
<a name="l01198"></a>01198                   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> low_water_mark,
<a name="l01199"></a>01199                   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> send_deltas,
<a name="l01200"></a>01200                   <span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> *editor,
<a name="l01201"></a>01201                   <span class="keywordtype">void</span> *edit_baton,
<a name="l01202"></a>01202                   <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l01203"></a>01203                   <span class="keywordtype">void</span> *authz_read_baton,
<a name="l01204"></a>01204                   apr_pool_t *pool);
<a name="l01205"></a>01205 <span class="comment"></span>
<a name="l01206"></a>01206 <span class="comment">/**</span>
<a name="l01207"></a>01207 <span class="comment"> * Similar to svn_repos_replay2(), but with @a base_dir set to @c &quot;&quot;,</span>
<a name="l01208"></a>01208 <span class="comment"> * @a low_water_mark set to #SVN_INVALID_REVNUM, @a send_deltas</span>
<a name="l01209"></a>01209 <span class="comment"> * set to @c FALSE, and @a authz_read_func and @a authz_read_baton</span>
<a name="l01210"></a>01210 <span class="comment"> * set to @c NULL.</span>
<a name="l01211"></a>01211 <span class="comment"> *</span>
<a name="l01212"></a>01212 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.3 API.</span>
<a name="l01213"></a>01213 <span class="comment"> */</span>
<a name="l01214"></a>01214 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01215"></a>01215 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01216"></a>01216 <a class="code" href="svn__repos_8h.html#a665ce4abdd61d1a820649d59f09c487b" title="Similar to svn_repos_replay2(), but with base_dir set to &quot;&quot;, low_water_mark set to SVN_INVALID_REVNUM...">svn_repos_replay</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01217"></a>01217                  <span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> *editor,
<a name="l01218"></a>01218                  <span class="keywordtype">void</span> *edit_baton,
<a name="l01219"></a>01219                  apr_pool_t *pool);
<a name="l01220"></a>01220 
<a name="l01221"></a>01221 <span class="comment">/* ---------------------------------------------------------------*/</span>
<a name="l01222"></a>01222 
<a name="l01223"></a>01223 <span class="comment">/* Making commits. */</span>
<a name="l01224"></a>01224 <span class="comment"></span>
<a name="l01225"></a>01225 <span class="comment">/**</span>
<a name="l01226"></a>01226 <span class="comment"> * Return an @a editor and @a edit_baton to commit changes to the</span>
<a name="l01227"></a>01227 <span class="comment"> * filesystem of @a repos, beginning at location &#39;rev:@a base_path&#39;,</span>
<a name="l01228"></a>01228 <span class="comment"> * where &quot;rev&quot; is the argument given to open_root().</span>
<a name="l01229"></a>01229 <span class="comment"> *</span>
<a name="l01230"></a>01230 <span class="comment"> * @a repos is a previously opened repository.  @a repos_url is the</span>
<a name="l01231"></a>01231 <span class="comment"> * decoded URL to the base of the repository, and is used to check</span>
<a name="l01232"></a>01232 <span class="comment"> * copyfrom paths.  @a txn is a filesystem transaction object to use</span>
<a name="l01233"></a>01233 <span class="comment"> * during the commit, or @c NULL to indicate that this function should</span>
<a name="l01234"></a>01234 <span class="comment"> * create (and fully manage) a new transaction.</span>
<a name="l01235"></a>01235 <span class="comment"> *</span>
<a name="l01236"></a>01236 <span class="comment"> * Store the contents of @a revprop_table, a hash mapping &lt;tt&gt;const</span>
<a name="l01237"></a>01237 <span class="comment"> * char *&lt;/tt&gt; property names to #svn_string_t values, as properties</span>
<a name="l01238"></a>01238 <span class="comment"> * of the commit transaction, including author and log message if</span>
<a name="l01239"></a>01239 <span class="comment"> * present.</span>
<a name="l01240"></a>01240 <span class="comment"> *</span>
<a name="l01241"></a>01241 <span class="comment"> * @note #SVN_PROP_REVISION_DATE may be present in @a revprop_table, but</span>
<a name="l01242"></a>01242 <span class="comment"> * it will be overwritten when the transaction is committed.</span>
<a name="l01243"></a>01243 <span class="comment"> *</span>
<a name="l01244"></a>01244 <span class="comment"> * Iff @a authz_callback is provided, check read/write authorizations</span>
<a name="l01245"></a>01245 <span class="comment"> * on paths accessed by editor operations.  An operation which fails</span>
<a name="l01246"></a>01246 <span class="comment"> * due to authz will return SVN_ERR_AUTHZ_UNREADABLE or</span>
<a name="l01247"></a>01247 <span class="comment"> * SVN_ERR_AUTHZ_UNWRITABLE.</span>
<a name="l01248"></a>01248 <span class="comment"> *</span>
<a name="l01249"></a>01249 <span class="comment"> * Calling @a (*editor)-&gt;close_edit completes the commit.</span>
<a name="l01250"></a>01250 <span class="comment"> *</span>
<a name="l01251"></a>01251 <span class="comment"> * If @a callback is non-NULL, then before @c close_edit returns (but</span>
<a name="l01252"></a>01252 <span class="comment"> * after the commit has succeeded) @c close_edit will invoke</span>
<a name="l01253"></a>01253 <span class="comment"> * @a callback with a filled-in #svn_commit_info_t *, @a callback_baton,</span>
<a name="l01254"></a>01254 <span class="comment"> * and @a pool or some subpool thereof as arguments.  If @a callback</span>
<a name="l01255"></a>01255 <span class="comment"> * returns an error, that error will be returned from @c close_edit,</span>
<a name="l01256"></a>01256 <span class="comment"> * otherwise if there was a post-commit hook failure, then that error</span>
<a name="l01257"></a>01257 <span class="comment"> * will be returned with code SVN_ERR_REPOS_POST_COMMIT_HOOK_FAILED.</span>
<a name="l01258"></a>01258 <span class="comment"> * (Note that prior to Subversion 1.6, @a callback cannot be NULL; if</span>
<a name="l01259"></a>01259 <span class="comment"> * you don&#39;t need a callback, pass a dummy function.)</span>
<a name="l01260"></a>01260 <span class="comment"> *</span>
<a name="l01261"></a>01261 <span class="comment"> * Calling @a (*editor)-&gt;abort_edit aborts the commit, and will also</span>
<a name="l01262"></a>01262 <span class="comment"> * abort the commit transaction unless @a txn was supplied (not @c</span>
<a name="l01263"></a>01263 <span class="comment"> * NULL).  Callers who supply their own transactions are responsible</span>
<a name="l01264"></a>01264 <span class="comment"> * for cleaning them up (either by committing them, or aborting them).</span>
<a name="l01265"></a>01265 <span class="comment"> *</span>
<a name="l01266"></a>01266 <span class="comment"> * @since New in 1.5.</span>
<a name="l01267"></a>01267 <span class="comment"> *</span>
<a name="l01268"></a>01268 <span class="comment"> * @note Yes, @a repos_url is a &lt;em&gt;decoded&lt;/em&gt; URL.  We realize</span>
<a name="l01269"></a>01269 <span class="comment"> * that&#39;s sorta wonky.  Sorry about that.</span>
<a name="l01270"></a>01270 <span class="comment"> */</span>
<a name="l01271"></a>01271 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01272"></a>01272 <a class="code" href="svn__repos_8h.html#adb74c9da3d485a73644a722a7a3d6297" title="Return an editor and edit_baton to commit changes to the filesystem of repos, beginning at location &#39;...">svn_repos_get_commit_editor5</a>(<span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> **editor,
<a name="l01273"></a>01273                              <span class="keywordtype">void</span> **edit_baton,
<a name="l01274"></a>01274                              <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01275"></a>01275                              <a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn,
<a name="l01276"></a>01276                              <span class="keyword">const</span> <span class="keywordtype">char</span> *repos_url,
<a name="l01277"></a>01277                              <span class="keyword">const</span> <span class="keywordtype">char</span> *base_path,
<a name="l01278"></a>01278                              apr_hash_t *revprop_table,
<a name="l01279"></a>01279                              <a class="code" href="svn__types_8h.html#a5aca95325ba984f70a316d7d9966e1df" title="Callback function type for commits.">svn_commit_callback2_t</a> callback,
<a name="l01280"></a>01280                              <span class="keywordtype">void</span> *callback_baton,
<a name="l01281"></a>01281                              <a class="code" href="svn__repos_8h.html#aface4990939fd87037b6e7b7cdff47ca" title="Callback type for checking authorization on paths produced by the repository commit editor...">svn_repos_authz_callback_t</a> authz_callback,
<a name="l01282"></a>01282                              <span class="keywordtype">void</span> *authz_baton,
<a name="l01283"></a>01283                              apr_pool_t *pool);
<a name="l01284"></a>01284 <span class="comment"></span>
<a name="l01285"></a>01285 <span class="comment">/**</span>
<a name="l01286"></a>01286 <span class="comment"> * Similar to svn_repos_get_commit_editor5(), but with @a revprop_table</span>
<a name="l01287"></a>01287 <span class="comment"> * set to a hash containing @a user and @a log_msg as the</span>
<a name="l01288"></a>01288 <span class="comment"> * #SVN_PROP_REVISION_AUTHOR and #SVN_PROP_REVISION_LOG properties,</span>
<a name="l01289"></a>01289 <span class="comment"> * respectively.  @a user and @a log_msg may both be @c NULL.</span>
<a name="l01290"></a>01290 <span class="comment"> *</span>
<a name="l01291"></a>01291 <span class="comment"> * @since New in 1.4.</span>
<a name="l01292"></a>01292 <span class="comment"> *</span>
<a name="l01293"></a>01293 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.4 API.</span>
<a name="l01294"></a>01294 <span class="comment"> */</span>
<a name="l01295"></a>01295 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01296"></a>01296 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01297"></a>01297 <a class="code" href="svn__repos_8h.html#a4577d438456135507931728b9479f33b" title="Similar to svn_repos_get_commit_editor5(), but with revprop_table set to a hash containing user and l...">svn_repos_get_commit_editor4</a>(<span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> **editor,
<a name="l01298"></a>01298                              <span class="keywordtype">void</span> **edit_baton,
<a name="l01299"></a>01299                              <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01300"></a>01300                              <a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn,
<a name="l01301"></a>01301                              <span class="keyword">const</span> <span class="keywordtype">char</span> *repos_url,
<a name="l01302"></a>01302                              <span class="keyword">const</span> <span class="keywordtype">char</span> *base_path,
<a name="l01303"></a>01303                              <span class="keyword">const</span> <span class="keywordtype">char</span> *user,
<a name="l01304"></a>01304                              <span class="keyword">const</span> <span class="keywordtype">char</span> *log_msg,
<a name="l01305"></a>01305                              <a class="code" href="svn__types_8h.html#a5aca95325ba984f70a316d7d9966e1df" title="Callback function type for commits.">svn_commit_callback2_t</a> callback,
<a name="l01306"></a>01306                              <span class="keywordtype">void</span> *callback_baton,
<a name="l01307"></a>01307                              <a class="code" href="svn__repos_8h.html#aface4990939fd87037b6e7b7cdff47ca" title="Callback type for checking authorization on paths produced by the repository commit editor...">svn_repos_authz_callback_t</a> authz_callback,
<a name="l01308"></a>01308                              <span class="keywordtype">void</span> *authz_baton,
<a name="l01309"></a>01309                              apr_pool_t *pool);
<a name="l01310"></a>01310 <span class="comment"></span>
<a name="l01311"></a>01311 <span class="comment">/**</span>
<a name="l01312"></a>01312 <span class="comment"> * Similar to svn_repos_get_commit_editor4(), but</span>
<a name="l01313"></a>01313 <span class="comment"> * uses the svn_commit_callback_t type.</span>
<a name="l01314"></a>01314 <span class="comment"> *</span>
<a name="l01315"></a>01315 <span class="comment"> * @since New in 1.3.</span>
<a name="l01316"></a>01316 <span class="comment"> *</span>
<a name="l01317"></a>01317 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.3 API.</span>
<a name="l01318"></a>01318 <span class="comment"> */</span>
<a name="l01319"></a>01319 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01320"></a>01320 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01321"></a>01321 <a class="code" href="svn__repos_8h.html#ad41a82d63e825b41183a13870bcd1d15" title="Similar to svn_repos_get_commit_editor4(), but uses the svn_commit_callback_t type.">svn_repos_get_commit_editor3</a>(<span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> **editor,
<a name="l01322"></a>01322                              <span class="keywordtype">void</span> **edit_baton,
<a name="l01323"></a>01323                              <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01324"></a>01324                              <a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn,
<a name="l01325"></a>01325                              <span class="keyword">const</span> <span class="keywordtype">char</span> *repos_url,
<a name="l01326"></a>01326                              <span class="keyword">const</span> <span class="keywordtype">char</span> *base_path,
<a name="l01327"></a>01327                              <span class="keyword">const</span> <span class="keywordtype">char</span> *user,
<a name="l01328"></a>01328                              <span class="keyword">const</span> <span class="keywordtype">char</span> *log_msg,
<a name="l01329"></a>01329                              <a class="code" href="svn__types_8h.html#abc95cfed422bd097099537e4bde98d6d" title="Same as svn_commit_callback2_t, but uses individual data elements instead of the svn_commit_info_t st...">svn_commit_callback_t</a> callback,
<a name="l01330"></a>01330                              <span class="keywordtype">void</span> *callback_baton,
<a name="l01331"></a>01331                              <a class="code" href="svn__repos_8h.html#aface4990939fd87037b6e7b7cdff47ca" title="Callback type for checking authorization on paths produced by the repository commit editor...">svn_repos_authz_callback_t</a> authz_callback,
<a name="l01332"></a>01332                              <span class="keywordtype">void</span> *authz_baton,
<a name="l01333"></a>01333                              apr_pool_t *pool);
<a name="l01334"></a>01334 <span class="comment"></span>
<a name="l01335"></a>01335 <span class="comment">/**</span>
<a name="l01336"></a>01336 <span class="comment"> * Similar to svn_repos_get_commit_editor3(), but with @a</span>
<a name="l01337"></a>01337 <span class="comment"> * authz_callback and @a authz_baton set to @c NULL.</span>
<a name="l01338"></a>01338 <span class="comment"> *</span>
<a name="l01339"></a>01339 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.2 API.</span>
<a name="l01340"></a>01340 <span class="comment"> */</span>
<a name="l01341"></a>01341 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01342"></a>01342 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01343"></a>01343 <a class="code" href="svn__repos_8h.html#ac53b95e45721b395a8d39db2a1fc9ea4" title="Similar to svn_repos_get_commit_editor3(), but with authz_callback and authz_baton set to NULL...">svn_repos_get_commit_editor2</a>(<span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> **editor,
<a name="l01344"></a>01344                              <span class="keywordtype">void</span> **edit_baton,
<a name="l01345"></a>01345                              <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01346"></a>01346                              <a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn,
<a name="l01347"></a>01347                              <span class="keyword">const</span> <span class="keywordtype">char</span> *repos_url,
<a name="l01348"></a>01348                              <span class="keyword">const</span> <span class="keywordtype">char</span> *base_path,
<a name="l01349"></a>01349                              <span class="keyword">const</span> <span class="keywordtype">char</span> *user,
<a name="l01350"></a>01350                              <span class="keyword">const</span> <span class="keywordtype">char</span> *log_msg,
<a name="l01351"></a>01351                              <a class="code" href="svn__types_8h.html#abc95cfed422bd097099537e4bde98d6d" title="Same as svn_commit_callback2_t, but uses individual data elements instead of the svn_commit_info_t st...">svn_commit_callback_t</a> callback,
<a name="l01352"></a>01352                              <span class="keywordtype">void</span> *callback_baton,
<a name="l01353"></a>01353                              apr_pool_t *pool);
<a name="l01354"></a>01354 
<a name="l01355"></a>01355 <span class="comment"></span>
<a name="l01356"></a>01356 <span class="comment">/**</span>
<a name="l01357"></a>01357 <span class="comment"> * Similar to svn_repos_get_commit_editor2(), but with @a txn always</span>
<a name="l01358"></a>01358 <span class="comment"> * set to @c NULL.</span>
<a name="l01359"></a>01359 <span class="comment"> *</span>
<a name="l01360"></a>01360 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.1 API.</span>
<a name="l01361"></a>01361 <span class="comment"> */</span>
<a name="l01362"></a>01362 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01363"></a>01363 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01364"></a>01364 <a class="code" href="svn__repos_8h.html#a6454365f49124c11c081e7a363572c0c" title="Similar to svn_repos_get_commit_editor2(), but with txn always set to NULL.">svn_repos_get_commit_editor</a>(<span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> **editor,
<a name="l01365"></a>01365                             <span class="keywordtype">void</span> **edit_baton,
<a name="l01366"></a>01366                             <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01367"></a>01367                             <span class="keyword">const</span> <span class="keywordtype">char</span> *repos_url,
<a name="l01368"></a>01368                             <span class="keyword">const</span> <span class="keywordtype">char</span> *base_path,
<a name="l01369"></a>01369                             <span class="keyword">const</span> <span class="keywordtype">char</span> *user,
<a name="l01370"></a>01370                             <span class="keyword">const</span> <span class="keywordtype">char</span> *log_msg,
<a name="l01371"></a>01371                             <a class="code" href="svn__types_8h.html#abc95cfed422bd097099537e4bde98d6d" title="Same as svn_commit_callback2_t, but uses individual data elements instead of the svn_commit_info_t st...">svn_commit_callback_t</a> callback,
<a name="l01372"></a>01372                             <span class="keywordtype">void</span> *callback_baton,
<a name="l01373"></a>01373                             apr_pool_t *pool);
<a name="l01374"></a>01374 
<a name="l01375"></a>01375 <span class="comment">/* ---------------------------------------------------------------*/</span>
<a name="l01376"></a>01376 
<a name="l01377"></a>01377 <span class="comment">/* Finding particular revisions. */</span>
<a name="l01378"></a>01378 <span class="comment"></span>
<a name="l01379"></a>01379 <span class="comment">/** Set @a *revision to the revision number in @a repos&#39;s filesystem that was</span>
<a name="l01380"></a>01380 <span class="comment"> * youngest at time @a tm.</span>
<a name="l01381"></a>01381 <span class="comment"> */</span>
<a name="l01382"></a>01382 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01383"></a>01383 <a class="code" href="svn__repos_8h.html#a2f051f6514b2e0363322c55015a1f3c8" title="Set *revision to the revision number in repos&#39;s filesystem that was youngest at time tm...">svn_repos_dated_revision</a>(<a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> *revision,
<a name="l01384"></a>01384                          <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01385"></a>01385                          apr_time_t tm,
<a name="l01386"></a>01386                          apr_pool_t *pool);
<a name="l01387"></a>01387 
<a name="l01388"></a>01388 <span class="comment"></span>
<a name="l01389"></a>01389 <span class="comment">/** Given a @a root/@a path within some filesystem, return three pieces of</span>
<a name="l01390"></a>01390 <span class="comment"> * information allocated in @a pool:</span>
<a name="l01391"></a>01391 <span class="comment"> *</span>
<a name="l01392"></a>01392 <span class="comment"> *    - set @a *committed_rev to the revision in which the object was</span>
<a name="l01393"></a>01393 <span class="comment"> *      last modified.  (In fs parlance, this is the revision in which</span>
<a name="l01394"></a>01394 <span class="comment"> *      the particular node-rev-id was &#39;created&#39;.)</span>
<a name="l01395"></a>01395 <span class="comment"> *</span>
<a name="l01396"></a>01396 <span class="comment"> *    - set @a *committed_date to the date of said revision, or @c NULL</span>
<a name="l01397"></a>01397 <span class="comment"> *      if not available.</span>
<a name="l01398"></a>01398 <span class="comment"> *</span>
<a name="l01399"></a>01399 <span class="comment"> *    - set @a *last_author to the author of said revision, or @c NULL</span>
<a name="l01400"></a>01400 <span class="comment"> *      if not available.</span>
<a name="l01401"></a>01401 <span class="comment"> */</span>
<a name="l01402"></a>01402 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01403"></a>01403 <a class="code" href="svn__repos_8h.html#a3f6c18a65792047928d2f0b35d5de177" title="Given a root/path within some filesystem, return three pieces of information allocated in pool: ...">svn_repos_get_committed_info</a>(<a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> *committed_rev,
<a name="l01404"></a>01404                              <span class="keyword">const</span> <span class="keywordtype">char</span> **committed_date,
<a name="l01405"></a>01405                              <span class="keyword">const</span> <span class="keywordtype">char</span> **last_author,
<a name="l01406"></a>01406                              <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01407"></a>01407                              <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01408"></a>01408                              apr_pool_t *pool);
<a name="l01409"></a>01409 
<a name="l01410"></a>01410 <span class="comment"></span>
<a name="l01411"></a>01411 <span class="comment">/**</span>
<a name="l01412"></a>01412 <span class="comment"> * Set @a *dirent to an #svn_dirent_t associated with @a path in @a</span>
<a name="l01413"></a>01413 <span class="comment"> * root.  If @a path does not exist in @a root, set @a *dirent to</span>
<a name="l01414"></a>01414 <span class="comment"> * NULL.  Use @a pool for memory allocation.</span>
<a name="l01415"></a>01415 <span class="comment"> *</span>
<a name="l01416"></a>01416 <span class="comment"> * @since New in 1.2.</span>
<a name="l01417"></a>01417 <span class="comment"> */</span>
<a name="l01418"></a>01418 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01419"></a>01419 <a class="code" href="svn__repos_8h.html#ae938398bec69b31ac10ed1d8be2d73f3" title="Set *dirent to an svn_dirent_t associated with path in root.">svn_repos_stat</a>(<a class="code" href="structsvn__dirent__t.html" title="A general subversion directory entry.">svn_dirent_t</a> **dirent,
<a name="l01420"></a>01420                <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01421"></a>01421                <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01422"></a>01422                apr_pool_t *pool);
<a name="l01423"></a>01423 
<a name="l01424"></a>01424 <span class="comment"></span>
<a name="l01425"></a>01425 <span class="comment">/**</span>
<a name="l01426"></a>01426 <span class="comment"> * Given @a path which exists at revision @a start in @a fs, set</span>
<a name="l01427"></a>01427 <span class="comment"> * @a *deleted to the revision @a path was first deleted, within the</span>
<a name="l01428"></a>01428 <span class="comment"> * inclusive revision range bounded by @a start and @a end.  If @a path</span>
<a name="l01429"></a>01429 <span class="comment"> * does not exist at revision @a start or was not deleted within the</span>
<a name="l01430"></a>01430 <span class="comment"> * specified range, then set @a *deleted to SVN_INVALID_REVNUM.</span>
<a name="l01431"></a>01431 <span class="comment"> * Use @a pool for memory allocation.</span>
<a name="l01432"></a>01432 <span class="comment"> *</span>
<a name="l01433"></a>01433 <span class="comment"> * @since New in 1.5.</span>
<a name="l01434"></a>01434 <span class="comment"> */</span>
<a name="l01435"></a>01435 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01436"></a>01436 <a class="code" href="svn__repos_8h.html#ac5c580685f2a3324b64bb01fdee9e3a0" title="Given path which exists at revision start in fs, set *deleted to the revision path was first deleted...">svn_repos_deleted_rev</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l01437"></a>01437                       <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01438"></a>01438                       <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> start,
<a name="l01439"></a>01439                       <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> end,
<a name="l01440"></a>01440                       <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> *deleted,
<a name="l01441"></a>01441                       apr_pool_t *pool);
<a name="l01442"></a>01442 
<a name="l01443"></a>01443 <span class="comment"></span>
<a name="l01444"></a>01444 <span class="comment">/** Callback type for use with svn_repos_history().  @a path and @a</span>
<a name="l01445"></a>01445 <span class="comment"> * revision represent interesting history locations in the lifetime</span>
<a name="l01446"></a>01446 <span class="comment"> * of the path passed to svn_repos_history().  @a baton is the same</span>
<a name="l01447"></a>01447 <span class="comment"> * baton given to svn_repos_history().  @a pool is provided for the</span>
<a name="l01448"></a>01448 <span class="comment"> * convenience of the implementor, who should not expect it to live</span>
<a name="l01449"></a>01449 <span class="comment"> * longer than a single callback call.</span>
<a name="l01450"></a>01450 <span class="comment"> *</span>
<a name="l01451"></a>01451 <span class="comment"> * Signal to callback driver to stop processing/invoking this callback</span>
<a name="l01452"></a>01452 <span class="comment"> * by returning the #SVN_ERR_CEASE_INVOCATION error code.</span>
<a name="l01453"></a>01453 <span class="comment"> *</span>
<a name="l01454"></a>01454 <span class="comment"> * @note SVN_ERR_CEASE_INVOCATION is new in 1.5.</span>
<a name="l01455"></a>01455 <span class="comment"> */</span>
<a name="l01456"></a><a class="code" href="svn__repos_8h.html#a92f554e0857cba7bfe3c45c5b94b9373">01456</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_repos_history_func_t)(<span class="keywordtype">void</span> *baton,
<a name="l01457"></a>01457                                                  <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01458"></a>01458                                                  <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> revision,
<a name="l01459"></a>01459                                                  apr_pool_t *pool);
<a name="l01460"></a>01460 <span class="comment"></span>
<a name="l01461"></a>01461 <span class="comment">/**</span>
<a name="l01462"></a>01462 <span class="comment"> * Call @a history_func (with @a history_baton) for each interesting</span>
<a name="l01463"></a>01463 <span class="comment"> * history location in the lifetime of @a path in @a fs, from the</span>
<a name="l01464"></a>01464 <span class="comment"> * youngest of @a end and @a start to the oldest.  Stop processing if</span>
<a name="l01465"></a>01465 <span class="comment"> * @a history_func returns #SVN_ERR_CEASE_INVOCATION.  Only cross</span>
<a name="l01466"></a>01466 <span class="comment"> * filesystem copy history if @a cross_copies is @c TRUE.  And do all</span>
<a name="l01467"></a>01467 <span class="comment"> * of this in @a pool.</span>
<a name="l01468"></a>01468 <span class="comment"> *</span>
<a name="l01469"></a>01469 <span class="comment"> * If @a authz_read_func is non-NULL, then use it (and @a</span>
<a name="l01470"></a>01470 <span class="comment"> * authz_read_baton) to verify that @a path in @a end is readable; if</span>
<a name="l01471"></a>01471 <span class="comment"> * not, return SVN_ERR_AUTHZ_UNREADABLE.  Also verify the readability</span>
<a name="l01472"></a>01472 <span class="comment"> * of every ancestral path/revision pair before pushing them at @a</span>
<a name="l01473"></a>01473 <span class="comment"> * history_func.  If a pair is deemed unreadable, then do not send</span>
<a name="l01474"></a>01474 <span class="comment"> * them; instead, immediately stop traversing history and return</span>
<a name="l01475"></a>01475 <span class="comment"> * SVN_NO_ERROR.</span>
<a name="l01476"></a>01476 <span class="comment"> *</span>
<a name="l01477"></a>01477 <span class="comment"> * @since New in 1.1.</span>
<a name="l01478"></a>01478 <span class="comment"> *</span>
<a name="l01479"></a>01479 <span class="comment"> * @note SVN_ERR_CEASE_INVOCATION is new in 1.5.</span>
<a name="l01480"></a>01480 <span class="comment"> */</span>
<a name="l01481"></a>01481 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01482"></a>01482 <a class="code" href="svn__repos_8h.html#abfc943b44762abba5b3ade9edd6edf7a" title="Call history_func (with history_baton) for each interesting history location in the lifetime of path ...">svn_repos_history2</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l01483"></a>01483                    <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01484"></a>01484                    <a class="code" href="svn__repos_8h.html#a92f554e0857cba7bfe3c45c5b94b9373" title="Callback type for use with svn_repos_history().">svn_repos_history_func_t</a> history_func,
<a name="l01485"></a>01485                    <span class="keywordtype">void</span> *history_baton,
<a name="l01486"></a>01486                    <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l01487"></a>01487                    <span class="keywordtype">void</span> *authz_read_baton,
<a name="l01488"></a>01488                    <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> start,
<a name="l01489"></a>01489                    <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> end,
<a name="l01490"></a>01490                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> cross_copies,
<a name="l01491"></a>01491                    apr_pool_t *pool);
<a name="l01492"></a>01492 <span class="comment"></span>
<a name="l01493"></a>01493 <span class="comment">/**</span>
<a name="l01494"></a>01494 <span class="comment"> * Similar to svn_repos_history2(), but with @a authz_read_func</span>
<a name="l01495"></a>01495 <span class="comment"> * and @a authz_read_baton always set to NULL.</span>
<a name="l01496"></a>01496 <span class="comment"> *</span>
<a name="l01497"></a>01497 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.0 API.</span>
<a name="l01498"></a>01498 <span class="comment"> */</span>
<a name="l01499"></a>01499 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01500"></a>01500 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01501"></a>01501 <a class="code" href="svn__repos_8h.html#a4217c78836e6c34698277125be03c930" title="Similar to svn_repos_history2(), but with authz_read_func and authz_read_baton always set to NULL...">svn_repos_history</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l01502"></a>01502                   <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01503"></a>01503                   <a class="code" href="svn__repos_8h.html#a92f554e0857cba7bfe3c45c5b94b9373" title="Callback type for use with svn_repos_history().">svn_repos_history_func_t</a> history_func,
<a name="l01504"></a>01504                   <span class="keywordtype">void</span> *history_baton,
<a name="l01505"></a>01505                   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> start,
<a name="l01506"></a>01506                   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> end,
<a name="l01507"></a>01507                   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> cross_copies,
<a name="l01508"></a>01508                   apr_pool_t *pool);
<a name="l01509"></a>01509 
<a name="l01510"></a>01510 <span class="comment"></span>
<a name="l01511"></a>01511 <span class="comment">/**</span>
<a name="l01512"></a>01512 <span class="comment"> * Set @a *locations to be a mapping of the revisions to the paths of</span>
<a name="l01513"></a>01513 <span class="comment"> * the file @a fs_path present at the repository in revision</span>
<a name="l01514"></a>01514 <span class="comment"> * @a peg_revision, where the revisions are taken out of the array</span>
<a name="l01515"></a>01515 <span class="comment"> * @a location_revisions.</span>
<a name="l01516"></a>01516 <span class="comment"> *</span>
<a name="l01517"></a>01517 <span class="comment"> * @a location_revisions is an array of svn_revnum_t&#39;s and @a *locations</span>
<a name="l01518"></a>01518 <span class="comment"> * maps &#39;svn_revnum_t *&#39; to &#39;const char *&#39;.</span>
<a name="l01519"></a>01519 <span class="comment"> *</span>
<a name="l01520"></a>01520 <span class="comment"> * If optional @a authz_read_func is non-NULL, then use it (and @a</span>
<a name="l01521"></a>01521 <span class="comment"> * authz_read_baton) to verify that the peg-object is readable.  If not,</span>
<a name="l01522"></a>01522 <span class="comment"> * return SVN_ERR_AUTHZ_UNREADABLE.  Also use the @a authz_read_func</span>
<a name="l01523"></a>01523 <span class="comment"> * to check that every path returned in the hash is readable.  If an</span>
<a name="l01524"></a>01524 <span class="comment"> * unreadable path is encountered, stop tracing and return</span>
<a name="l01525"></a>01525 <span class="comment"> * SVN_NO_ERROR.</span>
<a name="l01526"></a>01526 <span class="comment"> *</span>
<a name="l01527"></a>01527 <span class="comment"> * @a pool is used for all allocations.</span>
<a name="l01528"></a>01528 <span class="comment"> *</span>
<a name="l01529"></a>01529 <span class="comment"> * @since New in 1.1.</span>
<a name="l01530"></a>01530 <span class="comment"> */</span>
<a name="l01531"></a>01531 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01532"></a>01532 <a class="code" href="svn__repos_8h.html#a1c216adb935d23170f16b9b9c87c0ddd" title="Set *locations to be a mapping of the revisions to the paths of the file fs_path present at the repos...">svn_repos_trace_node_locations</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l01533"></a>01533                                apr_hash_t **locations,
<a name="l01534"></a>01534                                <span class="keyword">const</span> <span class="keywordtype">char</span> *fs_path,
<a name="l01535"></a>01535                                <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> peg_revision,
<a name="l01536"></a>01536                                <span class="keyword">const</span> apr_array_header_t *location_revisions,
<a name="l01537"></a>01537                                <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l01538"></a>01538                                <span class="keywordtype">void</span> *authz_read_baton,
<a name="l01539"></a>01539                                apr_pool_t *pool);
<a name="l01540"></a>01540 
<a name="l01541"></a>01541 <span class="comment"></span>
<a name="l01542"></a>01542 <span class="comment">/**</span>
<a name="l01543"></a>01543 <span class="comment"> * Call @a receiver and @a receiver_baton to report successive</span>
<a name="l01544"></a>01544 <span class="comment"> * location segments in revisions between @a start_rev and @a end_rev</span>
<a name="l01545"></a>01545 <span class="comment"> * (inclusive) for the line of history identified by the peg-object @a</span>
<a name="l01546"></a>01546 <span class="comment"> * path in @a peg_revision (and in @a repos).</span>
<a name="l01547"></a>01547 <span class="comment"> *</span>
<a name="l01548"></a>01548 <span class="comment"> * @a end_rev may be #SVN_INVALID_REVNUM to indicate that you want</span>
<a name="l01549"></a>01549 <span class="comment"> * to trace the history of the object to its origin.</span>
<a name="l01550"></a>01550 <span class="comment"> *</span>
<a name="l01551"></a>01551 <span class="comment"> * @a start_rev may be #SVN_INVALID_REVNUM to indicate &quot;the HEAD</span>
<a name="l01552"></a>01552 <span class="comment"> * revision&quot;.  Otherwise, @a start_rev must be younger than @a end_rev</span>
<a name="l01553"></a>01553 <span class="comment"> * (unless @a end_rev is #SVN_INVALID_REVNUM).</span>
<a name="l01554"></a>01554 <span class="comment"> *</span>
<a name="l01555"></a>01555 <span class="comment"> * @a peg_revision may be #SVN_INVALID_REVNUM to indicate &quot;the HEAD</span>
<a name="l01556"></a>01556 <span class="comment"> * revision&quot;, and must evaluate to be at least as young as @a start_rev.</span>
<a name="l01557"></a>01557 <span class="comment"> *</span>
<a name="l01558"></a>01558 <span class="comment"> * If optional @a authz_read_func is not @c NULL, then use it (and @a</span>
<a name="l01559"></a>01559 <span class="comment"> * authz_read_baton) to verify that the peg-object is readable.  If</span>
<a name="l01560"></a>01560 <span class="comment"> * not, return #SVN_ERR_AUTHZ_UNREADABLE.  Also use the @a</span>
<a name="l01561"></a>01561 <span class="comment"> * authz_read_func to check that every path reported in a location</span>
<a name="l01562"></a>01562 <span class="comment"> * segment is readable.  If an unreadable path is encountered, report</span>
<a name="l01563"></a>01563 <span class="comment"> * a final (possibly truncated) location segment (if any), stop</span>
<a name="l01564"></a>01564 <span class="comment"> * tracing history, and return #SVN_NO_ERROR.</span>
<a name="l01565"></a>01565 <span class="comment"> *</span>
<a name="l01566"></a>01566 <span class="comment"> * @a pool is used for all allocations.</span>
<a name="l01567"></a>01567 <span class="comment"> *</span>
<a name="l01568"></a>01568 <span class="comment"> * @since New in 1.5.</span>
<a name="l01569"></a>01569 <span class="comment"> */</span>
<a name="l01570"></a>01570 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01571"></a>01571 <a class="code" href="svn__repos_8h.html#a7bb95b9e824a4f4947a70443071e6ca3" title="Call receiver and receiver_baton to report successive location segments in revisions between start_re...">svn_repos_node_location_segments</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01572"></a>01572                                  <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01573"></a>01573                                  <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> peg_revision,
<a name="l01574"></a>01574                                  <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> start_rev,
<a name="l01575"></a>01575                                  <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> end_rev,
<a name="l01576"></a>01576                                  <a class="code" href="group__node__location__seg__reporting.html#gacd495df85498f9d4aedf4f2c26d5b46d" title="A callback invoked by generators of svn_location_segment_t objects, used to report information about ...">svn_location_segment_receiver_t</a> receiver,
<a name="l01577"></a>01577                                  <span class="keywordtype">void</span> *receiver_baton,
<a name="l01578"></a>01578                                  <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l01579"></a>01579                                  <span class="keywordtype">void</span> *authz_read_baton,
<a name="l01580"></a>01580                                  apr_pool_t *pool);
<a name="l01581"></a>01581 
<a name="l01582"></a>01582 
<a name="l01583"></a>01583 <span class="comment">/* ### other queries we can do someday --</span>
<a name="l01584"></a>01584 <span class="comment"></span>
<a name="l01585"></a>01585 <span class="comment">     * fetch the last revision created by &lt;user&gt;</span>
<a name="l01586"></a>01586 <span class="comment">         (once usernames become revision properties!)</span>
<a name="l01587"></a>01587 <span class="comment">     * fetch the last revision where &lt;path&gt; was modified</span>
<a name="l01588"></a>01588 <span class="comment"></span>
<a name="l01589"></a>01589 <span class="comment">*/</span>
<a name="l01590"></a>01590 
<a name="l01591"></a>01591 
<a name="l01592"></a>01592 
<a name="l01593"></a>01593 <span class="comment">/* ---------------------------------------------------------------*/</span>
<a name="l01594"></a>01594 
<a name="l01595"></a>01595 <span class="comment">/* Retrieving log messages. */</span>
<a name="l01596"></a>01596 
<a name="l01597"></a>01597 <span class="comment"></span>
<a name="l01598"></a>01598 <span class="comment">/**</span>
<a name="l01599"></a>01599 <span class="comment"> * Invoke @a receiver with @a receiver_baton on each log message from</span>
<a name="l01600"></a>01600 <span class="comment"> * @a start to @a end in @a repos&#39;s filesystem.  @a start may be greater</span>
<a name="l01601"></a>01601 <span class="comment"> * or less than @a end; this just controls whether the log messages are</span>
<a name="l01602"></a>01602 <span class="comment"> * processed in descending or ascending revision number order.</span>
<a name="l01603"></a>01603 <span class="comment"> *</span>
<a name="l01604"></a>01604 <span class="comment"> * If @a start or @a end is #SVN_INVALID_REVNUM, it defaults to youngest.</span>
<a name="l01605"></a>01605 <span class="comment"> *</span>
<a name="l01606"></a>01606 <span class="comment"> * If @a paths is non-NULL and has one or more elements, then only show</span>
<a name="l01607"></a>01607 <span class="comment"> * revisions in which at least one of @a paths was changed (i.e., if</span>
<a name="l01608"></a>01608 <span class="comment"> * file, text or props changed; if dir, props or entries changed or any node</span>
<a name="l01609"></a>01609 <span class="comment"> * changed below it).  Each path is a &lt;tt&gt;const char *&lt;/tt&gt; representing</span>
<a name="l01610"></a>01610 <span class="comment"> * an absolute path in the repository.  If @a paths is NULL or empty,</span>
<a name="l01611"></a>01611 <span class="comment"> * show all revisions regardless of what paths were changed in those</span>
<a name="l01612"></a>01612 <span class="comment"> * revisions.</span>
<a name="l01613"></a>01613 <span class="comment"> *</span>
<a name="l01614"></a>01614 <span class="comment"> * If @a limit is non-zero then only invoke @a receiver on the first</span>
<a name="l01615"></a>01615 <span class="comment"> * @a limit logs.</span>
<a name="l01616"></a>01616 <span class="comment"> *</span>
<a name="l01617"></a>01617 <span class="comment"> * If @a discover_changed_paths, then each call to @a receiver passes a</span>
<a name="l01618"></a>01618 <span class="comment"> * hash mapping paths committed in that revision to information about them</span>
<a name="l01619"></a>01619 <span class="comment"> * as the receiver&#39;s @a changed_paths argument.</span>
<a name="l01620"></a>01620 <span class="comment"> * Otherwise, each call to @a receiver passes NULL for @a changed_paths.</span>
<a name="l01621"></a>01621 <span class="comment"> *</span>
<a name="l01622"></a>01622 <span class="comment"> * If @a strict_node_history is set, copy history (if any exists) will</span>
<a name="l01623"></a>01623 <span class="comment"> * not be traversed while harvesting revision logs for each path.</span>
<a name="l01624"></a>01624 <span class="comment"> *</span>
<a name="l01625"></a>01625 <span class="comment"> * If @a include_merged_revisions is set, log information for revisions</span>
<a name="l01626"></a>01626 <span class="comment"> * which have been merged to @a paths will also be returned, unless these</span>
<a name="l01627"></a>01627 <span class="comment"> * revisions are already part of @a start to @a end in @a repos&#39;s</span>
<a name="l01628"></a>01628 <span class="comment"> * filesystem, as limited by @a paths. In the latter case those revisions</span>
<a name="l01629"></a>01629 <span class="comment"> * are skipped and @a receiver is not invoked.</span>
<a name="l01630"></a>01630 <span class="comment"> *</span>
<a name="l01631"></a>01631 <span class="comment"> * If @a revprops is NULL, retrieve all revprops; else, retrieve only the</span>
<a name="l01632"></a>01632 <span class="comment"> * revprops named in the array (i.e. retrieve none if the array is empty).</span>
<a name="l01633"></a>01633 <span class="comment"> *</span>
<a name="l01634"></a>01634 <span class="comment"> * If any invocation of @a receiver returns error, return that error</span>
<a name="l01635"></a>01635 <span class="comment"> * immediately and without wrapping it.</span>
<a name="l01636"></a>01636 <span class="comment"> *</span>
<a name="l01637"></a>01637 <span class="comment"> * If @a start or @a end is a non-existent revision, return the error</span>
<a name="l01638"></a>01638 <span class="comment"> * #SVN_ERR_FS_NO_SUCH_REVISION, without ever invoking @a receiver.</span>
<a name="l01639"></a>01639 <span class="comment"> *</span>
<a name="l01640"></a>01640 <span class="comment"> * If optional @a authz_read_func is non-NULL, then use this function</span>
<a name="l01641"></a>01641 <span class="comment"> * (along with optional @a authz_read_baton) to check the readability</span>
<a name="l01642"></a>01642 <span class="comment"> * of each changed-path in each revision about to be &quot;pushed&quot; at</span>
<a name="l01643"></a>01643 <span class="comment"> * @a receiver.  If a revision has some changed-paths readable and</span>
<a name="l01644"></a>01644 <span class="comment"> * others unreadable, unreadable paths are omitted from the</span>
<a name="l01645"></a>01645 <span class="comment"> * changed_paths field and only svn:author and svn:date will be</span>
<a name="l01646"></a>01646 <span class="comment"> * available in the revprops field.  If a revision has no</span>
<a name="l01647"></a>01647 <span class="comment"> * changed-paths readable at all, then all paths are omitted and no</span>
<a name="l01648"></a>01648 <span class="comment"> * revprops are available.</span>
<a name="l01649"></a>01649 <span class="comment"> *</span>
<a name="l01650"></a>01650 <span class="comment"> * See also the documentation for #svn_log_entry_receiver_t.</span>
<a name="l01651"></a>01651 <span class="comment"> *</span>
<a name="l01652"></a>01652 <span class="comment"> * Use @a pool for temporary allocations.</span>
<a name="l01653"></a>01653 <span class="comment"> *</span>
<a name="l01654"></a>01654 <span class="comment"> * @since New in 1.5.</span>
<a name="l01655"></a>01655 <span class="comment"> */</span>
<a name="l01656"></a>01656 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01657"></a>01657 <a class="code" href="svn__repos_8h.html#aad951f77f0b023456f98daf49f905185" title="Invoke receiver with receiver_baton on each log message from start to end in repos&#39;s filesystem...">svn_repos_get_logs4</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01658"></a>01658                     <span class="keyword">const</span> apr_array_header_t *paths,
<a name="l01659"></a>01659                     <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> start,
<a name="l01660"></a>01660                     <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> end,
<a name="l01661"></a>01661                     <span class="keywordtype">int</span> limit,
<a name="l01662"></a>01662                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> discover_changed_paths,
<a name="l01663"></a>01663                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> strict_node_history,
<a name="l01664"></a>01664                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> include_merged_revisions,
<a name="l01665"></a>01665                     <span class="keyword">const</span> apr_array_header_t *revprops,
<a name="l01666"></a>01666                     <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l01667"></a>01667                     <span class="keywordtype">void</span> *authz_read_baton,
<a name="l01668"></a>01668                     <a class="code" href="svn__types_8h.html#afb30054d6301afbcd8b00d8dc11d7ddb" title="The callback invoked by log message loopers, such as svn_ra_plugin_t.get_log() and svn_repos_get_logs...">svn_log_entry_receiver_t</a> receiver,
<a name="l01669"></a>01669                     <span class="keywordtype">void</span> *receiver_baton,
<a name="l01670"></a>01670                     apr_pool_t *pool);
<a name="l01671"></a>01671 <span class="comment"></span>
<a name="l01672"></a>01672 <span class="comment">/**</span>
<a name="l01673"></a>01673 <span class="comment"> * Same as svn_repos_get_logs4(), but with @a receiver being</span>
<a name="l01674"></a>01674 <span class="comment"> * #svn_log_message_receiver_t instead of #svn_log_entry_receiver_t.</span>
<a name="l01675"></a>01675 <span class="comment"> * Also, @a include_merged_revisions is set to @c FALSE and @a revprops is</span>
<a name="l01676"></a>01676 <span class="comment"> * svn:author, svn:date, and svn:log.  If @a paths is empty, nothing</span>
<a name="l01677"></a>01677 <span class="comment"> * is returned.</span>
<a name="l01678"></a>01678 <span class="comment"> *</span>
<a name="l01679"></a>01679 <span class="comment"> * @since New in 1.2.</span>
<a name="l01680"></a>01680 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.4 API.</span>
<a name="l01681"></a>01681 <span class="comment"> */</span>
<a name="l01682"></a>01682 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01683"></a>01683 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01684"></a>01684 <a class="code" href="svn__repos_8h.html#a4a76e927eeffde02ab6637720b4444f3" title="Same as svn_repos_get_logs4(), but with receiver being svn_log_message_receiver_t instead of svn_log_...">svn_repos_get_logs3</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01685"></a>01685                     <span class="keyword">const</span> apr_array_header_t *paths,
<a name="l01686"></a>01686                     <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> start,
<a name="l01687"></a>01687                     <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> end,
<a name="l01688"></a>01688                     <span class="keywordtype">int</span> limit,
<a name="l01689"></a>01689                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> discover_changed_paths,
<a name="l01690"></a>01690                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> strict_node_history,
<a name="l01691"></a>01691                     <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l01692"></a>01692                     <span class="keywordtype">void</span> *authz_read_baton,
<a name="l01693"></a>01693                     <a class="code" href="svn__types_8h.html#a6aa9147b67a7778294a52399de5c0b33" title="Similar to svn_log_entry_receiver_t, except this uses separate parameters for each part of the log en...">svn_log_message_receiver_t</a> receiver,
<a name="l01694"></a>01694                     <span class="keywordtype">void</span> *receiver_baton,
<a name="l01695"></a>01695                     apr_pool_t *pool);
<a name="l01696"></a>01696 
<a name="l01697"></a>01697 <span class="comment"></span>
<a name="l01698"></a>01698 <span class="comment">/**</span>
<a name="l01699"></a>01699 <span class="comment"> * Same as svn_repos_get_logs3(), but with @a limit always set to 0.</span>
<a name="l01700"></a>01700 <span class="comment"> *</span>
<a name="l01701"></a>01701 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.1 API.</span>
<a name="l01702"></a>01702 <span class="comment"> */</span>
<a name="l01703"></a>01703 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01704"></a>01704 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01705"></a>01705 <a class="code" href="svn__repos_8h.html#a4c8a93d238c3f49fb3646921a989e6e5" title="Same as svn_repos_get_logs3(), but with limit always set to 0.">svn_repos_get_logs2</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01706"></a>01706                     <span class="keyword">const</span> apr_array_header_t *paths,
<a name="l01707"></a>01707                     <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> start,
<a name="l01708"></a>01708                     <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> end,
<a name="l01709"></a>01709                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> discover_changed_paths,
<a name="l01710"></a>01710                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> strict_node_history,
<a name="l01711"></a>01711                     <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l01712"></a>01712                     <span class="keywordtype">void</span> *authz_read_baton,
<a name="l01713"></a>01713                     <a class="code" href="svn__types_8h.html#a6aa9147b67a7778294a52399de5c0b33" title="Similar to svn_log_entry_receiver_t, except this uses separate parameters for each part of the log en...">svn_log_message_receiver_t</a> receiver,
<a name="l01714"></a>01714                     <span class="keywordtype">void</span> *receiver_baton,
<a name="l01715"></a>01715                     apr_pool_t *pool);
<a name="l01716"></a>01716 <span class="comment"></span>
<a name="l01717"></a>01717 <span class="comment">/**</span>
<a name="l01718"></a>01718 <span class="comment"> * Same as svn_repos_get_logs2(), but with @a authz_read_func and</span>
<a name="l01719"></a>01719 <span class="comment"> * @a authz_read_baton always set to NULL.</span>
<a name="l01720"></a>01720 <span class="comment"> *</span>
<a name="l01721"></a>01721 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.0 API.</span>
<a name="l01722"></a>01722 <span class="comment"> */</span>
<a name="l01723"></a>01723 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01724"></a>01724 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01725"></a>01725 <a class="code" href="svn__repos_8h.html#a55be2364d9b275c79781ce92384029c9" title="Same as svn_repos_get_logs2(), but with authz_read_func and authz_read_baton always set to NULL...">svn_repos_get_logs</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01726"></a>01726                    <span class="keyword">const</span> apr_array_header_t *paths,
<a name="l01727"></a>01727                    <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> start,
<a name="l01728"></a>01728                    <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> end,
<a name="l01729"></a>01729                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> discover_changed_paths,
<a name="l01730"></a>01730                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> strict_node_history,
<a name="l01731"></a>01731                    <a class="code" href="svn__types_8h.html#a6aa9147b67a7778294a52399de5c0b33" title="Similar to svn_log_entry_receiver_t, except this uses separate parameters for each part of the log en...">svn_log_message_receiver_t</a> receiver,
<a name="l01732"></a>01732                    <span class="keywordtype">void</span> *receiver_baton,
<a name="l01733"></a>01733                    apr_pool_t *pool);
<a name="l01734"></a>01734 
<a name="l01735"></a>01735 
<a name="l01736"></a>01736 
<a name="l01737"></a>01737 <span class="comment">/* ---------------------------------------------------------------*/</span>
<a name="l01738"></a>01738 
<a name="l01739"></a>01739 <span class="comment">/* Retrieving mergeinfo. */</span>
<a name="l01740"></a>01740 <span class="comment"></span>
<a name="l01741"></a>01741 <span class="comment">/**</span>
<a name="l01742"></a>01742 <span class="comment"> * Fetch the mergeinfo for @a paths at @a revision in @a repos, and</span>
<a name="l01743"></a>01743 <span class="comment"> * set @a *catalog to a catalog of this mergeinfo.  @a *catalog will</span>
<a name="l01744"></a>01744 <span class="comment"> * never be @c NULL but may be empty.</span>
<a name="l01745"></a>01745 <span class="comment"> *</span>
<a name="l01746"></a>01746 <span class="comment"> * @a inherit indicates whether explicit, explicit or inherited, or</span>
<a name="l01747"></a>01747 <span class="comment"> * only inherited mergeinfo for @a paths is fetched.</span>
<a name="l01748"></a>01748 <span class="comment"> *</span>
<a name="l01749"></a>01749 <span class="comment"> * If @a revision is #SVN_INVALID_REVNUM, it defaults to youngest.</span>
<a name="l01750"></a>01750 <span class="comment"> *</span>
<a name="l01751"></a>01751 <span class="comment"> * If @a include_descendants is TRUE, then additionally return the</span>
<a name="l01752"></a>01752 <span class="comment"> * mergeinfo for any descendant of any element of @a paths which has</span>
<a name="l01753"></a>01753 <span class="comment"> * the #SVN_PROP_MERGEINFO property explicitly set on it.  (Note</span>
<a name="l01754"></a>01754 <span class="comment"> * that inheritance is only taken into account for the elements in @a</span>
<a name="l01755"></a>01755 <span class="comment"> * paths; descendants of the elements in @a paths which get their</span>
<a name="l01756"></a>01756 <span class="comment"> * mergeinfo via inheritance are not included in @a *catalog.)</span>
<a name="l01757"></a>01757 <span class="comment"> *</span>
<a name="l01758"></a>01758 <span class="comment"> * If optional @a authz_read_func is non-NULL, then use this function</span>
<a name="l01759"></a>01759 <span class="comment"> * (along with optional @a authz_read_baton) to check the readability</span>
<a name="l01760"></a>01760 <span class="comment"> * of each path which mergeinfo was requested for (from @a paths).</span>
<a name="l01761"></a>01761 <span class="comment"> * Silently omit unreadable paths from the request for mergeinfo.</span>
<a name="l01762"></a>01762 <span class="comment"> *</span>
<a name="l01763"></a>01763 <span class="comment"> * Use @a pool for all allocations.</span>
<a name="l01764"></a>01764 <span class="comment"> *</span>
<a name="l01765"></a>01765 <span class="comment"> * @since New in 1.5.</span>
<a name="l01766"></a>01766 <span class="comment"> */</span>
<a name="l01767"></a>01767 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01768"></a>01768 <a class="code" href="svn__repos_8h.html#aa3ecd8110f6e4d58e35f2ea16dc12ea1" title="Fetch the mergeinfo for paths at revision in repos, and set *catalog to a catalog of this mergeinfo...">svn_repos_fs_get_mergeinfo</a>(svn_mergeinfo_catalog_t *catalog,
<a name="l01769"></a>01769                            <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01770"></a>01770                            <span class="keyword">const</span> apr_array_header_t *paths,
<a name="l01771"></a>01771                            <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> revision,
<a name="l01772"></a>01772                            <a class="code" href="svn__mergeinfo_8h.html#acd81e9d0f5bcc4eec4df7b8a140f435c" title="The three ways to request mergeinfo affecting a given path.">svn_mergeinfo_inheritance_t</a> inherit,
<a name="l01773"></a>01773                            <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> include_descendants,
<a name="l01774"></a>01774                            <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l01775"></a>01775                            <span class="keywordtype">void</span> *authz_read_baton,
<a name="l01776"></a>01776                            apr_pool_t *pool);
<a name="l01777"></a>01777 
<a name="l01778"></a>01778 
<a name="l01779"></a>01779 <span class="comment">/* ---------------------------------------------------------------*/</span>
<a name="l01780"></a>01780 
<a name="l01781"></a>01781 <span class="comment">/* Retrieving multiple revisions of a file. */</span>
<a name="l01782"></a>01782 <span class="comment"></span>
<a name="l01783"></a>01783 <span class="comment">/**</span>
<a name="l01784"></a>01784 <span class="comment"> * Retrieve a subset of the interesting revisions of a file @a path in</span>
<a name="l01785"></a>01785 <span class="comment"> * @a repos as seen in revision @a end.  Invoke @a handler with</span>
<a name="l01786"></a>01786 <span class="comment"> * @a handler_baton as its first argument for each such revision.</span>
<a name="l01787"></a>01787 <span class="comment"> * @a pool is used for all allocations.  See svn_fs_history_prev() for</span>
<a name="l01788"></a>01788 <span class="comment"> * a discussion of interesting revisions.</span>
<a name="l01789"></a>01789 <span class="comment"> *</span>
<a name="l01790"></a>01790 <span class="comment"> * If optional @a authz_read_func is non-NULL, then use this function</span>
<a name="l01791"></a>01791 <span class="comment"> * (along with optional @a authz_read_baton) to check the readability</span>
<a name="l01792"></a>01792 <span class="comment"> * of the rev-path in each interesting revision encountered.</span>
<a name="l01793"></a>01793 <span class="comment"> *</span>
<a name="l01794"></a>01794 <span class="comment"> * Revision discovery happens from @a end to @a start, and if an</span>
<a name="l01795"></a>01795 <span class="comment"> * unreadable revision is encountered before @a start is reached, then</span>
<a name="l01796"></a>01796 <span class="comment"> * revision discovery stops and only the revisions from @a end to the</span>
<a name="l01797"></a>01797 <span class="comment"> * oldest readable revision are returned (So it will appear that @a</span>
<a name="l01798"></a>01798 <span class="comment"> * path was added without history in the latter revision).</span>
<a name="l01799"></a>01799 <span class="comment"> *</span>
<a name="l01800"></a>01800 <span class="comment"> * If there is an interesting revision of the file that is less than or</span>
<a name="l01801"></a>01801 <span class="comment"> * equal to start, the iteration will start at that revision.  Else, the</span>
<a name="l01802"></a>01802 <span class="comment"> * iteration will start at the first revision of the file in the repository,</span>
<a name="l01803"></a>01803 <span class="comment"> * which has to be less than or equal to end.  Note that if the function</span>
<a name="l01804"></a>01804 <span class="comment"> * succeeds, @a handler will have been called at least once.</span>
<a name="l01805"></a>01805 <span class="comment"> *</span>
<a name="l01806"></a>01806 <span class="comment"> * In a series of calls, the file contents for the first interesting revision</span>
<a name="l01807"></a>01807 <span class="comment"> * will be provided as a text delta against the empty file.  In the following</span>
<a name="l01808"></a>01808 <span class="comment"> * calls, the delta will be against the contents for the previous call.</span>
<a name="l01809"></a>01809 <span class="comment"> *</span>
<a name="l01810"></a>01810 <span class="comment"> * If @a include_merged_revisions is TRUE, revisions which a included as a</span>
<a name="l01811"></a>01811 <span class="comment"> * result of a merge between @a start and @a end will be included.</span>
<a name="l01812"></a>01812 <span class="comment"> *</span>
<a name="l01813"></a>01813 <span class="comment"> * @since New in 1.5.</span>
<a name="l01814"></a>01814 <span class="comment"> */</span>
<a name="l01815"></a>01815 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01816"></a>01816 <a class="code" href="svn__repos_8h.html#aaa6b9cc6022d3f2761be16407ba248b4" title="Retrieve a subset of the interesting revisions of a file path in repos as seen in revision end...">svn_repos_get_file_revs2</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01817"></a>01817                          <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01818"></a>01818                          <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> start,
<a name="l01819"></a>01819                          <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> end,
<a name="l01820"></a>01820                          <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> include_merged_revisions,
<a name="l01821"></a>01821                          <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l01822"></a>01822                          <span class="keywordtype">void</span> *authz_read_baton,
<a name="l01823"></a>01823                          <a class="code" href="group__delta__support.html#ga31e5b4fa524d2ee126ca8f7e7b49eece" title="The callback invoked by file rev loopers, such as svn_ra_plugin_t.get_file_revs2() and svn_repos_get_...">svn_file_rev_handler_t</a> handler,
<a name="l01824"></a>01824                          <span class="keywordtype">void</span> *handler_baton,
<a name="l01825"></a>01825                          apr_pool_t *pool);
<a name="l01826"></a>01826 <span class="comment"></span>
<a name="l01827"></a>01827 <span class="comment">/**</span>
<a name="l01828"></a>01828 <span class="comment"> * Similar to svn_repos_get_file_revs2(), with @a include_merged_revisions</span>
<a name="l01829"></a>01829 <span class="comment"> * set to FALSE.</span>
<a name="l01830"></a>01830 <span class="comment"> *</span>
<a name="l01831"></a>01831 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.4 API.</span>
<a name="l01832"></a>01832 <span class="comment"> * @since New in 1.1.</span>
<a name="l01833"></a>01833 <span class="comment"> */</span>
<a name="l01834"></a>01834 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01835"></a>01835 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01836"></a>01836 <a class="code" href="svn__repos_8h.html#a9bfe434abbfa95a1871b9e37141a04ca" title="Similar to svn_repos_get_file_revs2(), with include_merged_revisions set to FALSE.">svn_repos_get_file_revs</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01837"></a>01837                         <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01838"></a>01838                         <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> start,
<a name="l01839"></a>01839                         <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> end,
<a name="l01840"></a>01840                         <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l01841"></a>01841                         <span class="keywordtype">void</span> *authz_read_baton,
<a name="l01842"></a>01842                         <a class="code" href="svn__repos_8h.html#a4610a1f09d8e2be17e054a8d82e4475a" title="Similar to svn_file_rev_handler_t, but without the result_of_merge parameter.">svn_repos_file_rev_handler_t</a> handler,
<a name="l01843"></a>01843                         <span class="keywordtype">void</span> *handler_baton,
<a name="l01844"></a>01844                         apr_pool_t *pool);
<a name="l01845"></a>01845 
<a name="l01846"></a>01846 
<a name="l01847"></a>01847 <span class="comment">/* ---------------------------------------------------------------*/</span>
<a name="l01848"></a>01848 <span class="comment"></span>
<a name="l01849"></a>01849 <span class="comment">/**</span>
<a name="l01850"></a>01850 <span class="comment"> * @defgroup svn_repos_hook_wrappers Hook-sensitive wrappers for libsvn_fs \</span>
<a name="l01851"></a>01851 <span class="comment"> * routines.</span>
<a name="l01852"></a>01852 <span class="comment"> * @{</span>
<a name="l01853"></a>01853 <span class="comment"> */</span>
<a name="l01854"></a>01854 <span class="comment"></span>
<a name="l01855"></a>01855 <span class="comment">/** Like svn_fs_commit_txn(), but invoke the @a repos&#39; pre- and</span>
<a name="l01856"></a>01856 <span class="comment"> * post-commit hooks around the commit.  Use @a pool for any necessary</span>
<a name="l01857"></a>01857 <span class="comment"> * allocations.</span>
<a name="l01858"></a>01858 <span class="comment"> *</span>
<a name="l01859"></a>01859 <span class="comment"> * If the pre-commit hook fails, do not attempt to commit the</span>
<a name="l01860"></a>01860 <span class="comment"> * transaction and throw the original error to the caller.</span>
<a name="l01861"></a>01861 <span class="comment"> *</span>
<a name="l01862"></a>01862 <span class="comment"> * A successful commit is indicated by a valid revision value in @a</span>
<a name="l01863"></a>01863 <span class="comment"> * *new_rev, not if svn_fs_commit_txn() returns an error, which can</span>
<a name="l01864"></a>01864 <span class="comment"> * occur during its post commit FS processing.  If the transaction was</span>
<a name="l01865"></a>01865 <span class="comment"> * not committed, then return the associated error and do not execute</span>
<a name="l01866"></a>01866 <span class="comment"> * the post-commit hook.</span>
<a name="l01867"></a>01867 <span class="comment"> *</span>
<a name="l01868"></a>01868 <span class="comment"> * If the commit succeeds the post-commit hook is executed.  If the</span>
<a name="l01869"></a>01869 <span class="comment"> * post-commit hook returns an error, always wrap it with</span>
<a name="l01870"></a>01870 <span class="comment"> * SVN_ERR_REPOS_POST_COMMIT_HOOK_FAILED; this allows the caller to</span>
<a name="l01871"></a>01871 <span class="comment"> * find the post-commit hook error in the returned error chain.  If</span>
<a name="l01872"></a>01872 <span class="comment"> * both svn_fs_commit_txn() and the post-commit hook return errors,</span>
<a name="l01873"></a>01873 <span class="comment"> * then svn_fs_commit_txn()&#39;s error is the parent error and the</span>
<a name="l01874"></a>01874 <span class="comment"> * SVN_ERR_REPOS_POST_COMMIT_HOOK_FAILED wrapped error is the child</span>
<a name="l01875"></a>01875 <span class="comment"> * error.</span>
<a name="l01876"></a>01876 <span class="comment"> *</span>
<a name="l01877"></a>01877 <span class="comment"> * @a conflict_p, @a new_rev, and @a txn are as in svn_fs_commit_txn().</span>
<a name="l01878"></a>01878 <span class="comment"> */</span>
<a name="l01879"></a>01879 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01880"></a>01880 <a class="code" href="group__svn__repos__hook__wrappers.html#gab93801ca0f62f026b4163307b7eec2c4" title="Like svn_fs_commit_txn(), but invoke the repos&#39; pre- and post-commit hooks around the commit...">svn_repos_fs_commit_txn</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> **conflict_p,
<a name="l01881"></a>01881                         <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01882"></a>01882                         <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> *new_rev,
<a name="l01883"></a>01883                         <a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn,
<a name="l01884"></a>01884                         apr_pool_t *pool);
<a name="l01885"></a>01885 <span class="comment"></span>
<a name="l01886"></a>01886 <span class="comment">/** Like svn_fs_begin_txn(), but use @a revprop_table, a hash mapping</span>
<a name="l01887"></a>01887 <span class="comment"> * &lt;tt&gt;const char *&lt;/tt&gt; property names to #svn_string_t values, to</span>
<a name="l01888"></a>01888 <span class="comment"> * set the properties on transaction @a *txn_p.  @a repos is the</span>
<a name="l01889"></a>01889 <span class="comment"> * repository object which contains the filesystem.  @a rev, @a</span>
<a name="l01890"></a>01890 <span class="comment"> * *txn_p, and @a pool are as in svn_fs_begin_txn().</span>
<a name="l01891"></a>01891 <span class="comment"> *</span>
<a name="l01892"></a>01892 <span class="comment"> * Before a txn is created, the repository&#39;s start-commit hooks are</span>
<a name="l01893"></a>01893 <span class="comment"> * run; if any of them fail, no txn is created, @a *txn_p is unaffected,</span>
<a name="l01894"></a>01894 <span class="comment"> * and #SVN_ERR_REPOS_HOOK_FAILURE is returned.</span>
<a name="l01895"></a>01895 <span class="comment"> *</span>
<a name="l01896"></a>01896 <span class="comment"> * @note @a revprop_table may contain an #SVN_PROP_REVISION_DATE property,</span>
<a name="l01897"></a>01897 <span class="comment"> * which will be set on the transaction, but that will be overwritten</span>
<a name="l01898"></a>01898 <span class="comment"> * when the transaction is committed.</span>
<a name="l01899"></a>01899 <span class="comment"> *</span>
<a name="l01900"></a>01900 <span class="comment"> * @since New in 1.5.</span>
<a name="l01901"></a>01901 <span class="comment"> */</span>
<a name="l01902"></a>01902 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01903"></a>01903 <a class="code" href="group__svn__repos__hook__wrappers.html#gaf4b3f548b788382018fb6fe2c29e7628" title="Like svn_fs_begin_txn(), but use revprop_table, a hash mapping const char * property names to svn_str...">svn_repos_fs_begin_txn_for_commit2</a>(<a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> **txn_p,
<a name="l01904"></a>01904                                    <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01905"></a>01905                                    <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l01906"></a>01906                                    apr_hash_t *revprop_table,
<a name="l01907"></a>01907                                    apr_pool_t *pool);
<a name="l01908"></a>01908 
<a name="l01909"></a>01909 <span class="comment"></span>
<a name="l01910"></a>01910 <span class="comment">/**</span>
<a name="l01911"></a>01911 <span class="comment"> * Same as svn_repos_fs_begin_txn_for_commit2(), but with @a revprop_table</span>
<a name="l01912"></a>01912 <span class="comment"> * set to a hash containing @a author and @a log_msg as the</span>
<a name="l01913"></a>01913 <span class="comment"> * #SVN_PROP_REVISION_AUTHOR and #SVN_PROP_REVISION_LOG properties,</span>
<a name="l01914"></a>01914 <span class="comment"> * respectively.  @a author and @a log_msg may both be @c NULL.</span>
<a name="l01915"></a>01915 <span class="comment"> *</span>
<a name="l01916"></a>01916 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.4 API.</span>
<a name="l01917"></a>01917 <span class="comment"> */</span>
<a name="l01918"></a>01918 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01919"></a>01919 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01920"></a>01920 <a class="code" href="group__svn__repos__hook__wrappers.html#gaff82acc57f89eb74c4f33071dc820506" title="Same as svn_repos_fs_begin_txn_for_commit2(), but with revprop_table set to a hash containing author ...">svn_repos_fs_begin_txn_for_commit</a>(<a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> **txn_p,
<a name="l01921"></a>01921                                   <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01922"></a>01922                                   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l01923"></a>01923                                   <span class="keyword">const</span> <span class="keywordtype">char</span> *author,
<a name="l01924"></a>01924                                   <span class="keyword">const</span> <span class="keywordtype">char</span> *log_msg,
<a name="l01925"></a>01925                                   apr_pool_t *pool);
<a name="l01926"></a>01926 
<a name="l01927"></a>01927 <span class="comment"></span>
<a name="l01928"></a>01928 <span class="comment">/** Like svn_fs_begin_txn(), but use @a author to set the corresponding</span>
<a name="l01929"></a>01929 <span class="comment"> * property on transaction @a *txn_p.  @a repos is the repository object</span>
<a name="l01930"></a>01930 <span class="comment"> * which contains the filesystem.  @a rev, @a *txn_p, and @a pool are as in</span>
<a name="l01931"></a>01931 <span class="comment"> * svn_fs_begin_txn().</span>
<a name="l01932"></a>01932 <span class="comment"> *</span>
<a name="l01933"></a>01933 <span class="comment"> * ### Someday: before a txn is created, some kind of read-hook could</span>
<a name="l01934"></a>01934 <span class="comment"> *              be called here.</span>
<a name="l01935"></a>01935 <span class="comment"> */</span>
<a name="l01936"></a>01936 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01937"></a>01937 <a class="code" href="group__svn__repos__hook__wrappers.html#ga7cd7aa3f17488f3471af3b31548ed3ca" title="Like svn_fs_begin_txn(), but use author to set the corresponding property on transaction *txn_p...">svn_repos_fs_begin_txn_for_update</a>(<a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> **txn_p,
<a name="l01938"></a>01938                                   <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01939"></a>01939                                   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l01940"></a>01940                                   <span class="keyword">const</span> <span class="keywordtype">char</span> *author,
<a name="l01941"></a>01941                                   apr_pool_t *pool);
<a name="l01942"></a>01942 
<a name="l01943"></a>01943 <span class="comment"></span>
<a name="l01944"></a>01944 <span class="comment">/** @defgroup svn_repos_fs_locks Repository lock wrappers</span>
<a name="l01945"></a>01945 <span class="comment"> * @{</span>
<a name="l01946"></a>01946 <span class="comment"> */</span>
<a name="l01947"></a>01947 <span class="comment"></span>
<a name="l01948"></a>01948 <span class="comment">/** Like svn_fs_lock(), but invoke the @a repos&#39;s pre- and</span>
<a name="l01949"></a>01949 <span class="comment"> * post-lock hooks before and after the locking action.  Use @a pool</span>
<a name="l01950"></a>01950 <span class="comment"> * for any necessary allocations.</span>
<a name="l01951"></a>01951 <span class="comment"> *</span>
<a name="l01952"></a>01952 <span class="comment"> * If the pre-lock hook or svn_fs_lock() fails, throw the original</span>
<a name="l01953"></a>01953 <span class="comment"> * error to caller.  If an error occurs when running the post-lock</span>
<a name="l01954"></a>01954 <span class="comment"> * hook, return the original error wrapped with</span>
<a name="l01955"></a>01955 <span class="comment"> * SVN_ERR_REPOS_POST_LOCK_HOOK_FAILED.  If the caller sees this</span>
<a name="l01956"></a>01956 <span class="comment"> * error, it knows that the lock succeeded anyway.</span>
<a name="l01957"></a>01957 <span class="comment"> *</span>
<a name="l01958"></a>01958 <span class="comment"> * The pre-lock hook may cause a different token to be used for the</span>
<a name="l01959"></a>01959 <span class="comment"> * lock, instead of @a token; see the pre-lock-hook documentation for</span>
<a name="l01960"></a>01960 <span class="comment"> * more.</span>
<a name="l01961"></a>01961 <span class="comment"> *</span>
<a name="l01962"></a>01962 <span class="comment"> * @since New in 1.2.</span>
<a name="l01963"></a>01963 <span class="comment"> */</span>
<a name="l01964"></a>01964 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01965"></a>01965 <a class="code" href="group__svn__repos__fs__locks.html#gaa3d5600c8001c0e4c71feb513851eff3" title="Like svn_fs_lock(), but invoke the repos&#39;s pre- and post-lock hooks before and after the locking acti...">svn_repos_fs_lock</a>(<a class="code" href="structsvn__lock__t.html" title="A lock object, for client &amp; server to share.">svn_lock_t</a> **lock,
<a name="l01966"></a>01966                   <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01967"></a>01967                   <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01968"></a>01968                   <span class="keyword">const</span> <span class="keywordtype">char</span> *token,
<a name="l01969"></a>01969                   <span class="keyword">const</span> <span class="keywordtype">char</span> *comment,
<a name="l01970"></a>01970                   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> is_dav_comment,
<a name="l01971"></a>01971                   apr_time_t expiration_date,
<a name="l01972"></a>01972                   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> current_rev,
<a name="l01973"></a>01973                   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> steal_lock,
<a name="l01974"></a>01974                   apr_pool_t *pool);
<a name="l01975"></a>01975 
<a name="l01976"></a>01976 <span class="comment"></span>
<a name="l01977"></a>01977 <span class="comment">/** Like svn_fs_unlock(), but invoke the @a repos&#39;s pre- and</span>
<a name="l01978"></a>01978 <span class="comment"> * post-unlock hooks before and after the unlocking action.  Use @a</span>
<a name="l01979"></a>01979 <span class="comment"> * pool for any necessary allocations.</span>
<a name="l01980"></a>01980 <span class="comment"> *</span>
<a name="l01981"></a>01981 <span class="comment"> * If the pre-unlock hook or svn_fs_unlock() fails, throw the original</span>
<a name="l01982"></a>01982 <span class="comment"> * error to caller.  If an error occurs when running the post-unlock</span>
<a name="l01983"></a>01983 <span class="comment"> * hook, return the original error wrapped with</span>
<a name="l01984"></a>01984 <span class="comment"> * SVN_ERR_REPOS_POST_UNLOCK_HOOK_FAILED.  If the caller sees this</span>
<a name="l01985"></a>01985 <span class="comment"> * error, it knows that the unlock succeeded anyway.</span>
<a name="l01986"></a>01986 <span class="comment"> *</span>
<a name="l01987"></a>01987 <span class="comment"> * @since New in 1.2.</span>
<a name="l01988"></a>01988 <span class="comment"> */</span>
<a name="l01989"></a>01989 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01990"></a>01990 <a class="code" href="group__svn__repos__fs__locks.html#ga3baa66ae6c50e9f61dc6473311b00a1d" title="Like svn_fs_unlock(), but invoke the repos&#39;s pre- and post-unlock hooks before and after the unlockin...">svn_repos_fs_unlock</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l01991"></a>01991                     <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01992"></a>01992                     <span class="keyword">const</span> <span class="keywordtype">char</span> *token,
<a name="l01993"></a>01993                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> break_lock,
<a name="l01994"></a>01994                     apr_pool_t *pool);
<a name="l01995"></a>01995 
<a name="l01996"></a>01996 
<a name="l01997"></a>01997 <span class="comment"></span>
<a name="l01998"></a>01998 <span class="comment">/** Look up all the locks in and under @a path in @a repos, setting @a</span>
<a name="l01999"></a>01999 <span class="comment"> * *locks to a hash which maps &lt;tt&gt;const char *&lt;/tt&gt; paths to the</span>
<a name="l02000"></a>02000 <span class="comment"> * #svn_lock_t locks associated with those paths.  Use @a</span>
<a name="l02001"></a>02001 <span class="comment"> * authz_read_func and @a authz_read_baton to &quot;screen&quot; all returned</span>
<a name="l02002"></a>02002 <span class="comment"> * locks.  That is: do not return any locks on any paths that are</span>
<a name="l02003"></a>02003 <span class="comment"> * unreadable in HEAD, just silently omit them.</span>
<a name="l02004"></a>02004 <span class="comment"> *</span>
<a name="l02005"></a>02005 <span class="comment"> * @a depth limits the returned locks to those associated with paths</span>
<a name="l02006"></a>02006 <span class="comment"> * within the specified depth of @a path, and must be one of the</span>
<a name="l02007"></a>02007 <span class="comment"> * following values:  #svn_depth_empty, #svn_depth_files,</span>
<a name="l02008"></a>02008 <span class="comment"> * #svn_depth_immediates, or #svn_depth_infinity.</span>
<a name="l02009"></a>02009 <span class="comment"> *</span>
<a name="l02010"></a>02010 <span class="comment"> * @since New in 1.7.</span>
<a name="l02011"></a>02011 <span class="comment"> */</span>
<a name="l02012"></a>02012 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02013"></a>02013 <a class="code" href="group__svn__repos__fs__locks.html#ga776397db6669cbb688468b185851edf2" title="Look up all the locks in and under path in repos, setting *locks to a hash which maps const char * pa...">svn_repos_fs_get_locks2</a>(apr_hash_t **locks,
<a name="l02014"></a>02014                         <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02015"></a>02015                         <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l02016"></a>02016                         <a class="code" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c" title="The concept of depth for directories.">svn_depth_t</a> depth,
<a name="l02017"></a>02017                         <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l02018"></a>02018                         <span class="keywordtype">void</span> *authz_read_baton,
<a name="l02019"></a>02019                         apr_pool_t *pool);
<a name="l02020"></a>02020 <span class="comment"></span>
<a name="l02021"></a>02021 <span class="comment">/**</span>
<a name="l02022"></a>02022 <span class="comment"> * Similar to svn_repos_fs_get_locks2(), but with @a depth always</span>
<a name="l02023"></a>02023 <span class="comment"> * passed as svn_depth_infinity.</span>
<a name="l02024"></a>02024 <span class="comment"> *</span>
<a name="l02025"></a>02025 <span class="comment"> * @since New in 1.2.</span>
<a name="l02026"></a>02026 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l02027"></a>02027 <span class="comment"> */</span>
<a name="l02028"></a>02028 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l02029"></a>02029 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02030"></a>02030 <a class="code" href="group__svn__repos__fs__locks.html#ga1ae7bdbf6c15403e790f21c48c38d88d" title="Similar to svn_repos_fs_get_locks2(), but with depth always passed as svn_depth_infinity.">svn_repos_fs_get_locks</a>(apr_hash_t **locks,
<a name="l02031"></a>02031                        <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02032"></a>02032                        <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l02033"></a>02033                        <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l02034"></a>02034                        <span class="keywordtype">void</span> *authz_read_baton,
<a name="l02035"></a>02035                        apr_pool_t *pool);
<a name="l02036"></a>02036 <span class="comment"></span>
<a name="l02037"></a>02037 <span class="comment">/** @} */</span>
<a name="l02038"></a>02038 <span class="comment"></span>
<a name="l02039"></a>02039 <span class="comment">/**</span>
<a name="l02040"></a>02040 <span class="comment"> * Like svn_fs_change_rev_prop2(), but validate the name and value of the</span>
<a name="l02041"></a>02041 <span class="comment"> * property and invoke the @a repos&#39;s pre- and post-revprop-change hooks</span>
<a name="l02042"></a>02042 <span class="comment"> * around the change as specified by @a use_pre_revprop_change_hook and</span>
<a name="l02043"></a>02043 <span class="comment"> * @a use_post_revprop_change_hook (respectively).</span>
<a name="l02044"></a>02044 <span class="comment"> *</span>
<a name="l02045"></a>02045 <span class="comment"> * @a rev is the revision whose property to change, @a name is the</span>
<a name="l02046"></a>02046 <span class="comment"> * name of the property, and @a new_value is the new value of the</span>
<a name="l02047"></a>02047 <span class="comment"> * property.   If @a old_value_p is not @c NULL, then @a *old_value_p</span>
<a name="l02048"></a>02048 <span class="comment"> * is the expected current (preexisting) value of the property (or @c NULL</span>
<a name="l02049"></a>02049 <span class="comment"> * for &quot;unset&quot;).  @a author is the authenticated username of the person</span>
<a name="l02050"></a>02050 <span class="comment"> * changing the property value, or NULL if not available.</span>
<a name="l02051"></a>02051 <span class="comment"> *</span>
<a name="l02052"></a>02052 <span class="comment"> * If @a authz_read_func is non-NULL, then use it (with @a</span>
<a name="l02053"></a>02053 <span class="comment"> * authz_read_baton) to validate the changed-paths associated with @a</span>
<a name="l02054"></a>02054 <span class="comment"> * rev.  If the revision contains any unreadable changed paths, then</span>
<a name="l02055"></a>02055 <span class="comment"> * return #SVN_ERR_AUTHZ_UNREADABLE.</span>
<a name="l02056"></a>02056 <span class="comment"> *</span>
<a name="l02057"></a>02057 <span class="comment"> * Validate @a name and @a new_value like the same way</span>
<a name="l02058"></a>02058 <span class="comment"> * svn_repos_fs_change_node_prop() does.</span>
<a name="l02059"></a>02059 <span class="comment"> *</span>
<a name="l02060"></a>02060 <span class="comment"> * Use @a pool for temporary allocations.</span>
<a name="l02061"></a>02061 <span class="comment"> *</span>
<a name="l02062"></a>02062 <span class="comment"> * @since New in 1.7.</span>
<a name="l02063"></a>02063 <span class="comment"> */</span>
<a name="l02064"></a>02064 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02065"></a>02065 <a class="code" href="group__svn__repos__hook__wrappers.html#ga4d13b16608ef2264f49347731d215426" title="Like svn_fs_change_rev_prop2(), but validate the name and value of the property and invoke the repos&#39;...">svn_repos_fs_change_rev_prop4</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02066"></a>02066                               <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l02067"></a>02067                               <span class="keyword">const</span> <span class="keywordtype">char</span> *author,
<a name="l02068"></a>02068                               <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l02069"></a>02069                               <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *<span class="keyword">const</span> *old_value_p,
<a name="l02070"></a>02070                               <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *new_value,
<a name="l02071"></a>02071                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a>
<a name="l02072"></a>02072                               use_pre_revprop_change_hook,
<a name="l02073"></a>02073                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a>
<a name="l02074"></a>02074                               use_post_revprop_change_hook,
<a name="l02075"></a>02075                               <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a>
<a name="l02076"></a>02076                               authz_read_func,
<a name="l02077"></a>02077                               <span class="keywordtype">void</span> *authz_read_baton,
<a name="l02078"></a>02078                               apr_pool_t *pool);
<a name="l02079"></a>02079 <span class="comment"></span>
<a name="l02080"></a>02080 <span class="comment">/**</span>
<a name="l02081"></a>02081 <span class="comment"> * Similar to svn_repos_fs_change_rev_prop4(), but with @a old_value_p always</span>
<a name="l02082"></a>02082 <span class="comment"> * set to @c NULL.  (In other words, it is similar to</span>
<a name="l02083"></a>02083 <span class="comment"> * svn_fs_change_rev_prop().)</span>
<a name="l02084"></a>02084 <span class="comment"> *</span>
<a name="l02085"></a>02085 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l02086"></a>02086 <span class="comment"> * @since New in 1.5.</span>
<a name="l02087"></a>02087 <span class="comment"> */</span>
<a name="l02088"></a>02088 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l02089"></a>02089 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02090"></a>02090 <a class="code" href="group__svn__repos__hook__wrappers.html#ga34ee28b0eee003185bacc125f6b70462" title="Similar to svn_repos_fs_change_rev_prop4(), but with old_value_p always set to NULL.">svn_repos_fs_change_rev_prop3</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02091"></a>02091                               <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l02092"></a>02092                               <span class="keyword">const</span> <span class="keywordtype">char</span> *author,
<a name="l02093"></a>02093                               <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l02094"></a>02094                               <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *new_value,
<a name="l02095"></a>02095                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a>
<a name="l02096"></a>02096                               use_pre_revprop_change_hook,
<a name="l02097"></a>02097                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a>
<a name="l02098"></a>02098                               use_post_revprop_change_hook,
<a name="l02099"></a>02099                               <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a>
<a name="l02100"></a>02100                               authz_read_func,
<a name="l02101"></a>02101                               <span class="keywordtype">void</span> *authz_read_baton,
<a name="l02102"></a>02102                               apr_pool_t *pool);
<a name="l02103"></a>02103 <span class="comment"></span>
<a name="l02104"></a>02104 <span class="comment">/**</span>
<a name="l02105"></a>02105 <span class="comment"> * Similar to svn_repos_fs_change_rev_prop3(), but with the @a</span>
<a name="l02106"></a>02106 <span class="comment"> * use_pre_revprop_change_hook and @a use_post_revprop_change_hook</span>
<a name="l02107"></a>02107 <span class="comment"> * always set to @c TRUE.</span>
<a name="l02108"></a>02108 <span class="comment"> *</span>
<a name="l02109"></a>02109 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.4 API.</span>
<a name="l02110"></a>02110 <span class="comment"> */</span>
<a name="l02111"></a>02111 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l02112"></a>02112 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02113"></a>02113 <a class="code" href="group__svn__repos__hook__wrappers.html#ga7732815b4c038205153fa6d0c43be466" title="Similar to svn_repos_fs_change_rev_prop3(), but with the use_pre_revprop_change_hook and use_post_rev...">svn_repos_fs_change_rev_prop2</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02114"></a>02114                               <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l02115"></a>02115                               <span class="keyword">const</span> <span class="keywordtype">char</span> *author,
<a name="l02116"></a>02116                               <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l02117"></a>02117                               <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *new_value,
<a name="l02118"></a>02118                               <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a>
<a name="l02119"></a>02119                               authz_read_func,
<a name="l02120"></a>02120                               <span class="keywordtype">void</span> *authz_read_baton,
<a name="l02121"></a>02121                               apr_pool_t *pool);
<a name="l02122"></a>02122 <span class="comment"></span>
<a name="l02123"></a>02123 <span class="comment">/**</span>
<a name="l02124"></a>02124 <span class="comment"> * Similar to svn_repos_fs_change_rev_prop2(), but with the</span>
<a name="l02125"></a>02125 <span class="comment"> * @a authz_read_func parameter always NULL.</span>
<a name="l02126"></a>02126 <span class="comment"> *</span>
<a name="l02127"></a>02127 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.0 API.</span>
<a name="l02128"></a>02128 <span class="comment"> */</span>
<a name="l02129"></a>02129 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l02130"></a>02130 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02131"></a>02131 <a class="code" href="group__svn__repos__hook__wrappers.html#ga961084af28047d77293a8c93bba145ac" title="Similar to svn_repos_fs_change_rev_prop2(), but with the authz_read_func parameter always NULL...">svn_repos_fs_change_rev_prop</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02132"></a>02132                              <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l02133"></a>02133                              <span class="keyword">const</span> <span class="keywordtype">char</span> *author,
<a name="l02134"></a>02134                              <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l02135"></a>02135                              <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *new_value,
<a name="l02136"></a>02136                              apr_pool_t *pool);
<a name="l02137"></a>02137 
<a name="l02138"></a>02138 
<a name="l02139"></a>02139 <span class="comment"></span>
<a name="l02140"></a>02140 <span class="comment">/**</span>
<a name="l02141"></a>02141 <span class="comment"> * Set @a *value_p to the value of the property named @a propname on</span>
<a name="l02142"></a>02142 <span class="comment"> * revision @a rev in the filesystem opened in @a repos.  If @a rev</span>
<a name="l02143"></a>02143 <span class="comment"> * has no property by that name, set @a *value_p to zero.  Allocate</span>
<a name="l02144"></a>02144 <span class="comment"> * the result in @a pool.</span>
<a name="l02145"></a>02145 <span class="comment"> *</span>
<a name="l02146"></a>02146 <span class="comment"> * If @a authz_read_func is non-NULL, then use it (with @a</span>
<a name="l02147"></a>02147 <span class="comment"> * authz_read_baton) to validate the changed-paths associated with @a</span>
<a name="l02148"></a>02148 <span class="comment"> * rev.  If the changed-paths are all unreadable, then set @a *value_p</span>
<a name="l02149"></a>02149 <span class="comment"> * to zero unconditionally.  If only some of the changed-paths are</span>
<a name="l02150"></a>02150 <span class="comment"> * unreadable, then allow &#39;svn:author&#39; and &#39;svn:date&#39; propvalues to be</span>
<a name="l02151"></a>02151 <span class="comment"> * fetched, but return 0 for any other property.</span>
<a name="l02152"></a>02152 <span class="comment"> *</span>
<a name="l02153"></a>02153 <span class="comment"> * @since New in 1.1.</span>
<a name="l02154"></a>02154 <span class="comment"> */</span>
<a name="l02155"></a>02155 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02156"></a>02156 <a class="code" href="group__svn__repos__hook__wrappers.html#ga1b9c043110f75c99794f1d7068531717" title="Set *value_p to the value of the property named propname on revision rev in the filesystem opened in ...">svn_repos_fs_revision_prop</a>(<a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> **value_p,
<a name="l02157"></a>02157                            <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02158"></a>02158                            <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l02159"></a>02159                            <span class="keyword">const</span> <span class="keywordtype">char</span> *propname,
<a name="l02160"></a>02160                            <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a>
<a name="l02161"></a>02161                            authz_read_func,
<a name="l02162"></a>02162                            <span class="keywordtype">void</span> *authz_read_baton,
<a name="l02163"></a>02163                            apr_pool_t *pool);
<a name="l02164"></a>02164 
<a name="l02165"></a>02165 <span class="comment"></span>
<a name="l02166"></a>02166 <span class="comment">/**</span>
<a name="l02167"></a>02167 <span class="comment"> * Set @a *table_p to the entire property list of revision @a rev in</span>
<a name="l02168"></a>02168 <span class="comment"> * filesystem opened in @a repos, as a hash table allocated in @a</span>
<a name="l02169"></a>02169 <span class="comment"> * pool.  The table maps &lt;tt&gt;char *&lt;/tt&gt; property names to</span>
<a name="l02170"></a>02170 <span class="comment"> * #svn_string_t * values; the names and values are allocated in @a</span>
<a name="l02171"></a>02171 <span class="comment"> * pool.</span>
<a name="l02172"></a>02172 <span class="comment"> *</span>
<a name="l02173"></a>02173 <span class="comment"> * If @a authz_read_func is non-NULL, then use it (with @a</span>
<a name="l02174"></a>02174 <span class="comment"> * authz_read_baton) to validate the changed-paths associated with @a</span>
<a name="l02175"></a>02175 <span class="comment"> * rev.  If the changed-paths are all unreadable, then return an empty</span>
<a name="l02176"></a>02176 <span class="comment"> * hash. If only some of the changed-paths are unreadable, then return</span>
<a name="l02177"></a>02177 <span class="comment"> * an empty hash, except for &#39;svn:author&#39; and &#39;svn:date&#39; properties</span>
<a name="l02178"></a>02178 <span class="comment"> * (assuming those properties exist).</span>
<a name="l02179"></a>02179 <span class="comment"> *</span>
<a name="l02180"></a>02180 <span class="comment"> * @since New in 1.1.</span>
<a name="l02181"></a>02181 <span class="comment"> */</span>
<a name="l02182"></a>02182 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02183"></a>02183 <a class="code" href="group__svn__repos__hook__wrappers.html#ga595dbea42135652a5abaf96117f1bf7c" title="Set *table_p to the entire property list of revision rev in filesystem opened in repos, as a hash table allocated in pool.">svn_repos_fs_revision_proplist</a>(apr_hash_t **table_p,
<a name="l02184"></a>02184                                <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02185"></a>02185                                <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l02186"></a>02186                                <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a>
<a name="l02187"></a>02187                                authz_read_func,
<a name="l02188"></a>02188                                <span class="keywordtype">void</span> *authz_read_baton,
<a name="l02189"></a>02189                                apr_pool_t *pool);
<a name="l02190"></a>02190 
<a name="l02191"></a>02191 
<a name="l02192"></a>02192 
<a name="l02193"></a>02193 <span class="comment">/* ---------------------------------------------------------------*/</span>
<a name="l02194"></a>02194 
<a name="l02195"></a>02195 <span class="comment">/* Prop-changing wrappers for libsvn_fs routines. */</span>
<a name="l02196"></a>02196 
<a name="l02197"></a>02197 <span class="comment">/* NOTE: svn_repos_fs_change_rev_prop() also exists, but is located</span>
<a name="l02198"></a>02198 <span class="comment">   above with the hook-related functions. */</span>
<a name="l02199"></a>02199 
<a name="l02200"></a>02200 <span class="comment"></span>
<a name="l02201"></a>02201 <span class="comment">/** Validating wrapper for svn_fs_change_node_prop() (which see for</span>
<a name="l02202"></a>02202 <span class="comment"> * argument descriptions).</span>
<a name="l02203"></a>02203 <span class="comment"> *</span>
<a name="l02204"></a>02204 <span class="comment"> * If @a name&#39;s kind is not #svn_prop_regular_kind, return</span>
<a name="l02205"></a>02205 <span class="comment"> * #SVN_ERR_REPOS_BAD_ARGS.  If @a name is an &quot;svn:&quot; property, validate its</span>
<a name="l02206"></a>02206 <span class="comment"> * @a value and return SVN_ERR_BAD_PROPERTY_VALUE if it is invalid for the</span>
<a name="l02207"></a>02207 <span class="comment"> * property.</span>
<a name="l02208"></a>02208 <span class="comment"> *</span>
<a name="l02209"></a>02209 <span class="comment"> * @note Currently, the only properties validated are the &quot;svn:&quot; properties</span>
<a name="l02210"></a>02210 <span class="comment"> * #SVN_PROP_REVISION_LOG and #SVN_PROP_REVISION_DATE. This may change</span>
<a name="l02211"></a>02211 <span class="comment"> * in future releases.</span>
<a name="l02212"></a>02212 <span class="comment"> */</span>
<a name="l02213"></a>02213 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02214"></a>02214 <a class="code" href="group__svn__repos__hook__wrappers.html#ga5794f6cf8cc9dd49df94d0bb90d2c4c3" title="Validating wrapper for svn_fs_change_node_prop() (which see for argument descriptions).">svn_repos_fs_change_node_prop</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l02215"></a>02215                               <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l02216"></a>02216                               <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l02217"></a>02217                               <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *value,
<a name="l02218"></a>02218                               apr_pool_t *pool);
<a name="l02219"></a>02219 <span class="comment"></span>
<a name="l02220"></a>02220 <span class="comment">/** Validating wrapper for svn_fs_change_txn_prop() (which see for</span>
<a name="l02221"></a>02221 <span class="comment"> * argument descriptions).  See svn_repos_fs_change_txn_props() for more</span>
<a name="l02222"></a>02222 <span class="comment"> * information.</span>
<a name="l02223"></a>02223 <span class="comment"> */</span>
<a name="l02224"></a>02224 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02225"></a>02225 <a class="code" href="group__svn__repos__hook__wrappers.html#ga97328b88945142c9d79db552001e80c6" title="Validating wrapper for svn_fs_change_txn_prop() (which see for argument descriptions).">svn_repos_fs_change_txn_prop</a>(<a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn,
<a name="l02226"></a>02226                              <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l02227"></a>02227                              <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *value,
<a name="l02228"></a>02228                              apr_pool_t *pool);
<a name="l02229"></a>02229 <span class="comment"></span>
<a name="l02230"></a>02230 <span class="comment">/** Validating wrapper for svn_fs_change_txn_props() (which see for</span>
<a name="l02231"></a>02231 <span class="comment"> * argument descriptions).  Validate properties and their values the</span>
<a name="l02232"></a>02232 <span class="comment"> * same way svn_repos_fs_change_node_prop() does.</span>
<a name="l02233"></a>02233 <span class="comment"> *</span>
<a name="l02234"></a>02234 <span class="comment"> * @since New in 1.5.</span>
<a name="l02235"></a>02235 <span class="comment"> */</span>
<a name="l02236"></a>02236 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02237"></a>02237 <a class="code" href="group__svn__repos__hook__wrappers.html#ga4f32aad8336b85acdef08e0f3d4aa6c7" title="Validating wrapper for svn_fs_change_txn_props() (which see for argument descriptions).">svn_repos_fs_change_txn_props</a>(<a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn,
<a name="l02238"></a>02238                               <span class="keyword">const</span> apr_array_header_t *props,
<a name="l02239"></a>02239                               apr_pool_t *pool);
<a name="l02240"></a>02240 <span class="comment"></span>
<a name="l02241"></a>02241 <span class="comment">/** @} */</span>
<a name="l02242"></a>02242 
<a name="l02243"></a>02243 <span class="comment">/* ---------------------------------------------------------------*/</span>
<a name="l02244"></a>02244 <span class="comment"></span>
<a name="l02245"></a>02245 <span class="comment">/**</span>
<a name="l02246"></a>02246 <span class="comment"> * @defgroup svn_repos_inspection Data structures and editor things for \</span>
<a name="l02247"></a>02247 <span class="comment"> * repository inspection.</span>
<a name="l02248"></a>02248 <span class="comment"> * @{</span>
<a name="l02249"></a>02249 <span class="comment"> *</span>
<a name="l02250"></a>02250 <span class="comment"> * As it turns out, the svn_repos_replay2(), svn_repos_dir_delta2() and</span>
<a name="l02251"></a>02251 <span class="comment"> * svn_repos_begin_report2() interfaces can be extremely useful for</span>
<a name="l02252"></a>02252 <span class="comment"> * examining the repository, or more exactly, changes to the repository.</span>
<a name="l02253"></a>02253 <span class="comment"> * These drivers allows for differences between two trees to be</span>
<a name="l02254"></a>02254 <span class="comment"> * described using an editor.</span>
<a name="l02255"></a>02255 <span class="comment"> *</span>
<a name="l02256"></a>02256 <span class="comment"> * By using the editor obtained from svn_repos_node_editor() with one of</span>
<a name="l02257"></a>02257 <span class="comment"> * the drivers mentioned above, the description of how to transform one</span>
<a name="l02258"></a>02258 <span class="comment"> * tree into another can be used to build an in-memory linked-list tree,</span>
<a name="l02259"></a>02259 <span class="comment"> * which each node representing a repository node that was changed.</span>
<a name="l02260"></a>02260 <span class="comment"> */</span>
<a name="l02261"></a>02261 <span class="comment"></span>
<a name="l02262"></a>02262 <span class="comment">/** A node in the repository. */</span>
<a name="l02263"></a><a class="code" href="structsvn__repos__node__t.html">02263</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__repos__node__t.html" title="A node in the repository.">svn_repos_node_t</a>
<a name="l02264"></a>02264 {<span class="comment"></span>
<a name="l02265"></a>02265 <span class="comment">  /** Node type (file, dir, etc.) */</span>
<a name="l02266"></a><a class="code" href="structsvn__repos__node__t.html#a58676deaf66f93fc0db8edd53775cfa8">02266</a>   <a class="code" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a" title="The various types of nodes in the Subversion filesystem.">svn_node_kind_t</a> <a class="code" href="structsvn__repos__node__t.html#a58676deaf66f93fc0db8edd53775cfa8" title="Node type (file, dir, etc.)">kind</a>;
<a name="l02267"></a>02267 <span class="comment"></span>
<a name="l02268"></a>02268 <span class="comment">  /** How this node entered the node tree: &#39;A&#39;dd, &#39;D&#39;elete, &#39;R&#39;eplace */</span>
<a name="l02269"></a><a class="code" href="structsvn__repos__node__t.html#a7412301c1d2a82fad889cf9eefe11d2a">02269</a>   <span class="keywordtype">char</span> <a class="code" href="structsvn__repos__node__t.html#a7412301c1d2a82fad889cf9eefe11d2a" title="How this node entered the node tree: &#39;A&#39;dd, &#39;D&#39;elete, &#39;R&#39;eplace.">action</a>;
<a name="l02270"></a>02270 <span class="comment"></span>
<a name="l02271"></a>02271 <span class="comment">  /** Were there any textual mods? (files only) */</span>
<a name="l02272"></a><a class="code" href="structsvn__repos__node__t.html#af6d9d5347d50e69d0e5f35a595d07617">02272</a>   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> <a class="code" href="structsvn__repos__node__t.html#af6d9d5347d50e69d0e5f35a595d07617" title="Were there any textual mods? (files only)">text_mod</a>;
<a name="l02273"></a>02273 <span class="comment"></span>
<a name="l02274"></a>02274 <span class="comment">  /** Where there any property mods? */</span>
<a name="l02275"></a><a class="code" href="structsvn__repos__node__t.html#a447e2f6396161fa4f6a47a241d8020e9">02275</a>   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> <a class="code" href="structsvn__repos__node__t.html#a447e2f6396161fa4f6a47a241d8020e9" title="Where there any property mods?">prop_mod</a>;
<a name="l02276"></a>02276 <span class="comment"></span>
<a name="l02277"></a>02277 <span class="comment">  /** The name of this node as it appears in its parent&#39;s entries list */</span>
<a name="l02278"></a><a class="code" href="structsvn__repos__node__t.html#a51821ec2087fd9d841178d22e26bad04">02278</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__repos__node__t.html#a51821ec2087fd9d841178d22e26bad04" title="The name of this node as it appears in its parent&#39;s entries list.">name</a>;
<a name="l02279"></a>02279 <span class="comment"></span>
<a name="l02280"></a>02280 <span class="comment">  /** The filesystem revision where this was copied from (if any) */</span>
<a name="l02281"></a><a class="code" href="structsvn__repos__node__t.html#a86b753d0b43b374852fbc841ae1bc6e6">02281</a>   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> <a class="code" href="structsvn__repos__node__t.html#a86b753d0b43b374852fbc841ae1bc6e6" title="The filesystem revision where this was copied from (if any)">copyfrom_rev</a>;
<a name="l02282"></a>02282 <span class="comment"></span>
<a name="l02283"></a>02283 <span class="comment">  /** The filesystem path where this was copied from (if any) */</span>
<a name="l02284"></a><a class="code" href="structsvn__repos__node__t.html#a73d381d36a73f77f86b2127e4fcf83d7">02284</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__repos__node__t.html#a73d381d36a73f77f86b2127e4fcf83d7" title="The filesystem path where this was copied from (if any)">copyfrom_path</a>;
<a name="l02285"></a>02285 <span class="comment"></span>
<a name="l02286"></a>02286 <span class="comment">  /** Pointer to the next sibling of this node */</span>
<a name="l02287"></a><a class="code" href="structsvn__repos__node__t.html#a0a53f2afa21c39341e45557e3fea7c95">02287</a>   <span class="keyword">struct </span><a class="code" href="structsvn__repos__node__t.html" title="A node in the repository.">svn_repos_node_t</a> *<a class="code" href="structsvn__repos__node__t.html#a0a53f2afa21c39341e45557e3fea7c95" title="Pointer to the next sibling of this node.">sibling</a>;
<a name="l02288"></a>02288 <span class="comment"></span>
<a name="l02289"></a>02289 <span class="comment">  /** Pointer to the first child of this node */</span>
<a name="l02290"></a><a class="code" href="structsvn__repos__node__t.html#a893090f68ae44324a9d98c06dcd36057">02290</a>   <span class="keyword">struct </span><a class="code" href="structsvn__repos__node__t.html" title="A node in the repository.">svn_repos_node_t</a> *<a class="code" href="structsvn__repos__node__t.html#a893090f68ae44324a9d98c06dcd36057" title="Pointer to the first child of this node.">child</a>;
<a name="l02291"></a>02291 <span class="comment"></span>
<a name="l02292"></a>02292 <span class="comment">  /** Pointer to the parent of this node */</span>
<a name="l02293"></a><a class="code" href="structsvn__repos__node__t.html#a79a6871a4dd3599db79fb1c6638a13be">02293</a>   <span class="keyword">struct </span><a class="code" href="structsvn__repos__node__t.html" title="A node in the repository.">svn_repos_node_t</a> *<a class="code" href="structsvn__repos__node__t.html#a79a6871a4dd3599db79fb1c6638a13be" title="Pointer to the parent of this node.">parent</a>;
<a name="l02294"></a>02294 
<a name="l02295"></a>02295 } <a class="code" href="group__svn__repos__inspection.html#ga2bb4285685483fde52f69ff63c07bb35" title="A node in the repository.">svn_repos_node_t</a>;
<a name="l02296"></a>02296 
<a name="l02297"></a>02297 <span class="comment"></span>
<a name="l02298"></a>02298 <span class="comment">/** Set @a *editor and @a *edit_baton to an editor that, when driven by</span>
<a name="l02299"></a>02299 <span class="comment"> * a driver such as svn_repos_replay2(), builds an &lt;tt&gt;svn_repos_node_t *&lt;/tt&gt;</span>
<a name="l02300"></a>02300 <span class="comment"> * tree representing the delta from @a base_root to @a root in @a</span>
<a name="l02301"></a>02301 <span class="comment"> * repos&#39;s filesystem.</span>
<a name="l02302"></a>02302 <span class="comment"> *</span>
<a name="l02303"></a>02303 <span class="comment"> * The editor can also be driven by svn_repos_dir_delta2() or</span>
<a name="l02304"></a>02304 <span class="comment"> * svn_repos_begin_report2(), but unless you have special needs,</span>
<a name="l02305"></a>02305 <span class="comment"> * svn_repos_replay2() is preferred.</span>
<a name="l02306"></a>02306 <span class="comment"> *</span>
<a name="l02307"></a>02307 <span class="comment"> * Invoke svn_repos_node_from_baton() on @a edit_baton to obtain the root</span>
<a name="l02308"></a>02308 <span class="comment"> * node afterwards.</span>
<a name="l02309"></a>02309 <span class="comment"> *</span>
<a name="l02310"></a>02310 <span class="comment"> * Note that the delta includes &quot;bubbled-up&quot; directories; that is,</span>
<a name="l02311"></a>02311 <span class="comment"> * many of the directory nodes will have no prop_mods.</span>
<a name="l02312"></a>02312 <span class="comment"> *</span>
<a name="l02313"></a>02313 <span class="comment"> * Allocate the tree and its contents in @a node_pool; do all other</span>
<a name="l02314"></a>02314 <span class="comment"> * allocation in @a pool.</span>
<a name="l02315"></a>02315 <span class="comment"> */</span>
<a name="l02316"></a>02316 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02317"></a>02317 <a class="code" href="group__svn__repos__inspection.html#gacd092275acf33278f7d8eda0ccff90c8" title="Set *editor and *edit_baton to an editor that, when driven by a driver such as svn_repos_replay2(), builds an svn_repos_node_t * tree representing the delta from base_root to root in repos&#39;s filesystem.">svn_repos_node_editor</a>(<span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> **editor,
<a name="l02318"></a>02318                       <span class="keywordtype">void</span> **edit_baton,
<a name="l02319"></a>02319                       <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02320"></a>02320                       <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *base_root,
<a name="l02321"></a>02321                       <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l02322"></a>02322                       apr_pool_t *node_pool,
<a name="l02323"></a>02323                       apr_pool_t *pool);
<a name="l02324"></a>02324 <span class="comment"></span>
<a name="l02325"></a>02325 <span class="comment">/** Return the root node of the linked-list tree generated by driving the</span>
<a name="l02326"></a>02326 <span class="comment"> * editor (associated with @a edit_baton) created by svn_repos_node_editor().</span>
<a name="l02327"></a>02327 <span class="comment"> * This is only really useful if used *after* the editor drive is completed.</span>
<a name="l02328"></a>02328 <span class="comment"> */</span>
<a name="l02329"></a>02329 <a class="code" href="structsvn__repos__node__t.html" title="A node in the repository.">svn_repos_node_t</a> *
<a name="l02330"></a>02330 <a class="code" href="group__svn__repos__inspection.html#ga6386ed4e07ce0ee54ddda4712834b55c" title="Return the root node of the linked-list tree generated by driving the editor (associated with edit_ba...">svn_repos_node_from_baton</a>(<span class="keywordtype">void</span> *edit_baton);
<a name="l02331"></a>02331 <span class="comment"></span>
<a name="l02332"></a>02332 <span class="comment">/** @} */</span>
<a name="l02333"></a>02333 
<a name="l02334"></a>02334 <span class="comment">/* ---------------------------------------------------------------*/</span>
<a name="l02335"></a>02335 <span class="comment"></span>
<a name="l02336"></a>02336 <span class="comment">/**</span>
<a name="l02337"></a>02337 <span class="comment"> * @defgroup svn_repos_dump_load Dumping and loading filesystem data</span>
<a name="l02338"></a>02338 <span class="comment"> * @{</span>
<a name="l02339"></a>02339 <span class="comment"> *</span>
<a name="l02340"></a>02340 <span class="comment"> * The filesystem &#39;dump&#39; format contains nothing but the abstract</span>
<a name="l02341"></a>02341 <span class="comment"> * structure of the filesystem -- independent of any internal node-id</span>
<a name="l02342"></a>02342 <span class="comment"> * schema or database back-end.  All of the data in the dumpfile is</span>
<a name="l02343"></a>02343 <span class="comment"> * acquired by public function calls into svn_fs.h.  Similarly, the</span>
<a name="l02344"></a>02344 <span class="comment"> * parser which reads the dumpfile is able to reconstruct the</span>
<a name="l02345"></a>02345 <span class="comment"> * filesystem using only public svn_fs.h routines.</span>
<a name="l02346"></a>02346 <span class="comment"> *</span>
<a name="l02347"></a>02347 <span class="comment"> * Thus the dump/load feature&#39;s main purpose is for *migrating* data</span>
<a name="l02348"></a>02348 <span class="comment"> * from one svn filesystem to another -- presumably two filesystems</span>
<a name="l02349"></a>02349 <span class="comment"> * which have different internal implementations.</span>
<a name="l02350"></a>02350 <span class="comment"> *</span>
<a name="l02351"></a>02351 <span class="comment"> * If you simply want to backup your filesystem, you&#39;re probably</span>
<a name="l02352"></a>02352 <span class="comment"> * better off using the built-in facilities of the DB backend (using</span>
<a name="l02353"></a>02353 <span class="comment"> * Berkeley DB&#39;s hot-backup feature, for example.)</span>
<a name="l02354"></a>02354 <span class="comment"> *</span>
<a name="l02355"></a>02355 <span class="comment"> * For a description of the dumpfile format, see</span>
<a name="l02356"></a>02356 <span class="comment"> * /trunk/notes/fs_dumprestore.txt.</span>
<a name="l02357"></a>02357 <span class="comment"> */</span>
<a name="l02358"></a>02358 
<a name="l02359"></a>02359 <span class="comment">/* The RFC822-style headers in our dumpfile format. */</span>
<a name="l02360"></a>02360 <span class="preprocessor">#define SVN_REPOS_DUMPFILE_MAGIC_HEADER            &quot;SVN-fs-dump-format-version&quot;</span>
<a name="l02361"></a>02361 <span class="preprocessor"></span><span class="preprocessor">#define SVN_REPOS_DUMPFILE_FORMAT_VERSION           3</span>
<a name="l02362"></a>02362 <span class="preprocessor"></span><span class="preprocessor">#define SVN_REPOS_DUMPFILE_UUID                      &quot;UUID&quot;</span>
<a name="l02363"></a>02363 <span class="preprocessor"></span><span class="preprocessor">#define SVN_REPOS_DUMPFILE_CONTENT_LENGTH            &quot;Content-length&quot;</span>
<a name="l02364"></a>02364 <span class="preprocessor"></span>
<a name="l02365"></a>02365 <span class="preprocessor">#define SVN_REPOS_DUMPFILE_REVISION_NUMBER           &quot;Revision-number&quot;</span>
<a name="l02366"></a>02366 <span class="preprocessor"></span>
<a name="l02367"></a>02367 <span class="preprocessor">#define SVN_REPOS_DUMPFILE_NODE_PATH                 &quot;Node-path&quot;</span>
<a name="l02368"></a>02368 <span class="preprocessor"></span><span class="preprocessor">#define SVN_REPOS_DUMPFILE_NODE_KIND                 &quot;Node-kind&quot;</span>
<a name="l02369"></a>02369 <span class="preprocessor"></span><span class="preprocessor">#define SVN_REPOS_DUMPFILE_NODE_ACTION               &quot;Node-action&quot;</span>
<a name="l02370"></a>02370 <span class="preprocessor"></span><span class="preprocessor">#define SVN_REPOS_DUMPFILE_NODE_COPYFROM_PATH        &quot;Node-copyfrom-path&quot;</span>
<a name="l02371"></a>02371 <span class="preprocessor"></span><span class="preprocessor">#define SVN_REPOS_DUMPFILE_NODE_COPYFROM_REV         &quot;Node-copyfrom-rev&quot;</span>
<a name="l02372"></a>02372 <span class="preprocessor"></span><span class="comment">/** @since New in 1.6. */</span>
<a name="l02373"></a><a class="code" href="group__svn__repos__dump__load.html#ga3dacc07dd2aa575d557b5ae3d693fcce">02373</a> <span class="preprocessor">#define SVN_REPOS_DUMPFILE_TEXT_COPY_SOURCE_MD5      &quot;Text-copy-source-md5&quot;</span>
<a name="l02374"></a>02374 <span class="preprocessor"></span><span class="comment">/** @since New in 1.6. */</span>
<a name="l02375"></a><a class="code" href="group__svn__repos__dump__load.html#ga72e1e1d52bbab024210848d93193d1bf">02375</a> <span class="preprocessor">#define SVN_REPOS_DUMPFILE_TEXT_COPY_SOURCE_SHA1     &quot;Text-copy-source-sha1&quot;</span>
<a name="l02376"></a>02376 <span class="preprocessor"></span><span class="preprocessor">#define SVN_REPOS_DUMPFILE_TEXT_COPY_SOURCE_CHECKSUM \</span>
<a name="l02377"></a>02377 <span class="preprocessor">                                        SVN_REPOS_DUMPFILE_TEXT_COPY_SOURCE_MD5</span>
<a name="l02378"></a>02378 <span class="preprocessor"></span><span class="comment">/** @since New in 1.6. */</span>
<a name="l02379"></a><a class="code" href="group__svn__repos__dump__load.html#gadebde7ef107bbeff3bf5cba8bbe8d2f6">02379</a> <span class="preprocessor">#define SVN_REPOS_DUMPFILE_TEXT_CONTENT_MD5          &quot;Text-content-md5&quot;</span>
<a name="l02380"></a>02380 <span class="preprocessor"></span><span class="comment">/** @since New in 1.6. */</span>
<a name="l02381"></a><a class="code" href="group__svn__repos__dump__load.html#ga6d8bb5dedc1e722c941d4ae1baec8e6b">02381</a> <span class="preprocessor">#define SVN_REPOS_DUMPFILE_TEXT_CONTENT_SHA1         &quot;Text-content-sha1&quot;</span>
<a name="l02382"></a>02382 <span class="preprocessor"></span><span class="preprocessor">#define SVN_REPOS_DUMPFILE_TEXT_CONTENT_CHECKSUM     \</span>
<a name="l02383"></a>02383 <span class="preprocessor">                                        SVN_REPOS_DUMPFILE_TEXT_CONTENT_MD5</span>
<a name="l02384"></a>02384 <span class="preprocessor"></span>
<a name="l02385"></a>02385 <span class="preprocessor">#define SVN_REPOS_DUMPFILE_PROP_CONTENT_LENGTH       &quot;Prop-content-length&quot;</span>
<a name="l02386"></a>02386 <span class="preprocessor"></span><span class="preprocessor">#define SVN_REPOS_DUMPFILE_TEXT_CONTENT_LENGTH       &quot;Text-content-length&quot;</span>
<a name="l02387"></a>02387 <span class="preprocessor"></span><span class="comment"></span>
<a name="l02388"></a>02388 <span class="comment">/** @since New in 1.1. */</span>
<a name="l02389"></a><a class="code" href="group__svn__repos__dump__load.html#gae55aa05a65b2fefeaf62c0ec5d5871b7">02389</a> <span class="preprocessor">#define SVN_REPOS_DUMPFILE_PROP_DELTA                &quot;Prop-delta&quot;</span>
<a name="l02390"></a>02390 <span class="preprocessor"></span><span class="comment">/** @since New in 1.1. */</span>
<a name="l02391"></a><a class="code" href="group__svn__repos__dump__load.html#ga87121466d49a1b73498b6d663caff3df">02391</a> <span class="preprocessor">#define SVN_REPOS_DUMPFILE_TEXT_DELTA                &quot;Text-delta&quot;</span>
<a name="l02392"></a>02392 <span class="preprocessor"></span><span class="comment">/** @since New in 1.6. */</span>
<a name="l02393"></a><a class="code" href="group__svn__repos__dump__load.html#ga7ccb91bebc77544d7b8be28bd86641fd">02393</a> <span class="preprocessor">#define SVN_REPOS_DUMPFILE_TEXT_DELTA_BASE_MD5       &quot;Text-delta-base-md5&quot;</span>
<a name="l02394"></a>02394 <span class="preprocessor"></span><span class="comment">/** @since New in 1.6. */</span>
<a name="l02395"></a><a class="code" href="group__svn__repos__dump__load.html#ga14d9009204e6c5788c8aaa328e4c6370">02395</a> <span class="preprocessor">#define SVN_REPOS_DUMPFILE_TEXT_DELTA_BASE_SHA1      &quot;Text-delta-base-sha1&quot;</span>
<a name="l02396"></a>02396 <span class="preprocessor"></span><span class="comment">/** @since New in 1.5. */</span>
<a name="l02397"></a><a class="code" href="group__svn__repos__dump__load.html#gaaa5c18f984678fd4592eb4c286f7dc54">02397</a> <span class="preprocessor">#define SVN_REPOS_DUMPFILE_TEXT_DELTA_BASE_CHECKSUM  \</span>
<a name="l02398"></a>02398 <span class="preprocessor">                                        SVN_REPOS_DUMPFILE_TEXT_DELTA_BASE_MD5</span>
<a name="l02399"></a>02399 <span class="preprocessor"></span><span class="comment"></span>
<a name="l02400"></a>02400 <span class="comment">/**</span>
<a name="l02401"></a>02401 <span class="comment"> * Verify the contents of the file system in @a repos.</span>
<a name="l02402"></a>02402 <span class="comment"> *</span>
<a name="l02403"></a>02403 <span class="comment"> * If @a feedback_stream is not @c NULL, write feedback to it (lines of</span>
<a name="l02404"></a>02404 <span class="comment"> * the form &quot;* Verified revision %ld\n&quot;).</span>
<a name="l02405"></a>02405 <span class="comment"> *</span>
<a name="l02406"></a>02406 <span class="comment"> * If @a start_rev is #SVN_INVALID_REVNUM, then start verifying at</span>
<a name="l02407"></a>02407 <span class="comment"> * revision 0.  If @a end_rev is #SVN_INVALID_REVNUM, then verify</span>
<a name="l02408"></a>02408 <span class="comment"> * through the @c HEAD revision.</span>
<a name="l02409"></a>02409 <span class="comment"> *</span>
<a name="l02410"></a>02410 <span class="comment"> * For every verified revision call @a notify_func with @a rev set to</span>
<a name="l02411"></a>02411 <span class="comment"> * the verified revision and @a warning_text @c NULL. For warnings call @a</span>
<a name="l02412"></a>02412 <span class="comment"> * notify_func with @a warning_text set.</span>
<a name="l02413"></a>02413 <span class="comment"> *</span>
<a name="l02414"></a>02414 <span class="comment"> * If @a cancel_func is not @c NULL, call it periodically with @a</span>
<a name="l02415"></a>02415 <span class="comment"> * cancel_baton as argument to see if the caller wishes to cancel the</span>
<a name="l02416"></a>02416 <span class="comment"> * verification.</span>
<a name="l02417"></a>02417 <span class="comment"> *</span>
<a name="l02418"></a>02418 <span class="comment"> * @since New in 1.7.</span>
<a name="l02419"></a>02419 <span class="comment"> */</span>
<a name="l02420"></a>02420 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02421"></a>02421 <a class="code" href="group__svn__repos__dump__load.html#gaa03411f59dbccf0eced1b0d0f83d2ec9" title="Verify the contents of the file system in repos.">svn_repos_verify_fs2</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02422"></a>02422                      <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> start_rev,
<a name="l02423"></a>02423                      <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> end_rev,
<a name="l02424"></a>02424                      <a class="code" href="svn__repos_8h.html#a387f44a9ac5041bceee3f105c7f197fe" title="Callback for providing notification from the repository.">svn_repos_notify_func_t</a> notify_func,
<a name="l02425"></a>02425                      <span class="keywordtype">void</span> *notify_baton,
<a name="l02426"></a>02426                      <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel,
<a name="l02427"></a>02427                      <span class="keywordtype">void</span> *cancel_baton,
<a name="l02428"></a>02428                      apr_pool_t *scratch_pool);
<a name="l02429"></a>02429 <span class="comment"></span>
<a name="l02430"></a>02430 <span class="comment">/**</span>
<a name="l02431"></a>02431 <span class="comment"> * Similar to svn_repos_verify_fs2(), but with a feedback_stream instead of</span>
<a name="l02432"></a>02432 <span class="comment"> * handling feedback via the notify_func handler</span>
<a name="l02433"></a>02433 <span class="comment"> *</span>
<a name="l02434"></a>02434 <span class="comment"> * @since New in 1.5.</span>
<a name="l02435"></a>02435 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l02436"></a>02436 <span class="comment"> */</span>
<a name="l02437"></a>02437 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l02438"></a>02438 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02439"></a>02439 <a class="code" href="group__svn__repos__dump__load.html#ga4e92b908f1c85cdacce5a1cf20a18896" title="Similar to svn_repos_verify_fs2(), but with a feedback_stream instead of handling feedback via the no...">svn_repos_verify_fs</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02440"></a>02440                     <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *feedback_stream,
<a name="l02441"></a>02441                     <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> start_rev,
<a name="l02442"></a>02442                     <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> end_rev,
<a name="l02443"></a>02443                     <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l02444"></a>02444                     <span class="keywordtype">void</span> *cancel_baton,
<a name="l02445"></a>02445                     apr_pool_t *pool);
<a name="l02446"></a>02446 <span class="comment"></span>
<a name="l02447"></a>02447 <span class="comment">/**</span>
<a name="l02448"></a>02448 <span class="comment"> * Dump the contents of the filesystem within already-open @a repos into</span>
<a name="l02449"></a>02449 <span class="comment"> * writable @a dumpstream.  Begin at revision @a start_rev, and dump every</span>
<a name="l02450"></a>02450 <span class="comment"> * revision up through @a end_rev.  Use @a pool for all allocation.  If</span>
<a name="l02451"></a>02451 <span class="comment"> * non-@c NULL, send feedback to @a feedback_stream.  If @a dumpstream is</span>
<a name="l02452"></a>02452 <span class="comment"> * @c NULL, this is effectively a primitive verify.  It is not complete,</span>
<a name="l02453"></a>02453 <span class="comment"> * however; see svn_fs_verify instead.</span>
<a name="l02454"></a>02454 <span class="comment"> *</span>
<a name="l02455"></a>02455 <span class="comment"> * If @a start_rev is #SVN_INVALID_REVNUM, then start dumping at revision</span>
<a name="l02456"></a>02456 <span class="comment"> * 0.  If @a end_rev is #SVN_INVALID_REVNUM, then dump through the @c HEAD</span>
<a name="l02457"></a>02457 <span class="comment"> * revision.</span>
<a name="l02458"></a>02458 <span class="comment"> *</span>
<a name="l02459"></a>02459 <span class="comment"> * If @a incremental is @c TRUE, the first revision dumped will be a diff</span>
<a name="l02460"></a>02460 <span class="comment"> * against the previous revision (usually it looks like a full dump of</span>
<a name="l02461"></a>02461 <span class="comment"> * the tree).</span>
<a name="l02462"></a>02462 <span class="comment"> *</span>
<a name="l02463"></a>02463 <span class="comment"> * If @a use_deltas is @c TRUE, output only node properties which have</span>
<a name="l02464"></a>02464 <span class="comment"> * changed relative to the previous contents, and output text contents</span>
<a name="l02465"></a>02465 <span class="comment"> * as svndiff data against the previous contents.  Regardless of how</span>
<a name="l02466"></a>02466 <span class="comment"> * this flag is set, the first revision of a non-incremental dump will</span>
<a name="l02467"></a>02467 <span class="comment"> * be done with full plain text.  A dump with @a use_deltas set cannot</span>
<a name="l02468"></a>02468 <span class="comment"> * be loaded by Subversion 1.0.x.</span>
<a name="l02469"></a>02469 <span class="comment"> *</span>
<a name="l02470"></a>02470 <span class="comment"> * If @a notify_func is not @c NULL, then for every dumped revision call</span>
<a name="l02471"></a>02471 <span class="comment"> * @a notify_func with @a rev set to the dumped revision and @a warning_text</span>
<a name="l02472"></a>02472 <span class="comment"> * @c NULL. For warnings call @a notify_func with @a warning_text.</span>
<a name="l02473"></a>02473 <span class="comment"> *</span>
<a name="l02474"></a>02474 <span class="comment"> * If @a cancel_func is not @c NULL, it is called periodically with</span>
<a name="l02475"></a>02475 <span class="comment"> * @a cancel_baton as argument to see if the client wishes to cancel</span>
<a name="l02476"></a>02476 <span class="comment"> * the dump.</span>
<a name="l02477"></a>02477 <span class="comment"> *</span>
<a name="l02478"></a>02478 <span class="comment"> * @since New in 1.7.</span>
<a name="l02479"></a>02479 <span class="comment"> */</span>
<a name="l02480"></a>02480 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02481"></a>02481 <a class="code" href="group__svn__repos__dump__load.html#gad8eda99e1105b33c4dd3ff1777dbe8ec" title="Dump the contents of the filesystem within already-open repos into writable dumpstream.">svn_repos_dump_fs3</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02482"></a>02482                    <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *dumpstream,
<a name="l02483"></a>02483                    <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> start_rev,
<a name="l02484"></a>02484                    <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> end_rev,
<a name="l02485"></a>02485                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> incremental,
<a name="l02486"></a>02486                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> use_deltas,
<a name="l02487"></a>02487                    <a class="code" href="svn__repos_8h.html#a387f44a9ac5041bceee3f105c7f197fe" title="Callback for providing notification from the repository.">svn_repos_notify_func_t</a> notify_func,
<a name="l02488"></a>02488                    <span class="keywordtype">void</span> *notify_baton,
<a name="l02489"></a>02489                    <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l02490"></a>02490                    <span class="keywordtype">void</span> *cancel_baton,
<a name="l02491"></a>02491                    apr_pool_t *scratch_pool);
<a name="l02492"></a>02492 <span class="comment"></span>
<a name="l02493"></a>02493 <span class="comment">/**</span>
<a name="l02494"></a>02494 <span class="comment"> * Similar to svn_repos_dump_fs3(), but with a feedback_stream instead of</span>
<a name="l02495"></a>02495 <span class="comment"> * handling feedback via the notify_func handler</span>
<a name="l02496"></a>02496 <span class="comment"> *</span>
<a name="l02497"></a>02497 <span class="comment"> * @since New in 1.1.</span>
<a name="l02498"></a>02498 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l02499"></a>02499 <span class="comment"> */</span>
<a name="l02500"></a>02500 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l02501"></a>02501 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02502"></a>02502 <a class="code" href="group__svn__repos__dump__load.html#ga197042c66a63ee85b19bd4186bea97d8" title="Similar to svn_repos_dump_fs3(), but with a feedback_stream instead of handling feedback via the noti...">svn_repos_dump_fs2</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02503"></a>02503                    <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *dumpstream,
<a name="l02504"></a>02504                    <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *feedback_stream,
<a name="l02505"></a>02505                    <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> start_rev,
<a name="l02506"></a>02506                    <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> end_rev,
<a name="l02507"></a>02507                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> incremental,
<a name="l02508"></a>02508                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> use_deltas,
<a name="l02509"></a>02509                    <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l02510"></a>02510                    <span class="keywordtype">void</span> *cancel_baton,
<a name="l02511"></a>02511                    apr_pool_t *pool);
<a name="l02512"></a>02512 <span class="comment"></span>
<a name="l02513"></a>02513 <span class="comment">/**</span>
<a name="l02514"></a>02514 <span class="comment"> * Similar to svn_repos_dump_fs2(), but with the @a use_deltas</span>
<a name="l02515"></a>02515 <span class="comment"> * parameter always set to @c FALSE.</span>
<a name="l02516"></a>02516 <span class="comment"> *</span>
<a name="l02517"></a>02517 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.0 API.</span>
<a name="l02518"></a>02518 <span class="comment"> */</span>
<a name="l02519"></a>02519 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l02520"></a>02520 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02521"></a>02521 <a class="code" href="group__svn__repos__dump__load.html#ga4cbd1b87289a2cff7bf1e114537a040a" title="Similar to svn_repos_dump_fs2(), but with the use_deltas parameter always set to FALSE.">svn_repos_dump_fs</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02522"></a>02522                   <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *dumpstream,
<a name="l02523"></a>02523                   <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *feedback_stream,
<a name="l02524"></a>02524                   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> start_rev,
<a name="l02525"></a>02525                   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> end_rev,
<a name="l02526"></a>02526                   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> incremental,
<a name="l02527"></a>02527                   <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l02528"></a>02528                   <span class="keywordtype">void</span> *cancel_baton,
<a name="l02529"></a>02529                   apr_pool_t *pool);
<a name="l02530"></a>02530 
<a name="l02531"></a>02531 <span class="comment"></span>
<a name="l02532"></a>02532 <span class="comment">/**</span>
<a name="l02533"></a>02533 <span class="comment"> * Read and parse dumpfile-formatted @a dumpstream, reconstructing</span>
<a name="l02534"></a>02534 <span class="comment"> * filesystem revisions in already-open @a repos, handling uuids in</span>
<a name="l02535"></a>02535 <span class="comment"> * accordance with @a uuid_action.  Use @a pool for all allocation.</span>
<a name="l02536"></a>02536 <span class="comment"> *</span>
<a name="l02537"></a>02537 <span class="comment"> * If the dumpstream contains copy history that is unavailable in the</span>
<a name="l02538"></a>02538 <span class="comment"> * repository, an error will be thrown.</span>
<a name="l02539"></a>02539 <span class="comment"> *</span>
<a name="l02540"></a>02540 <span class="comment"> * The repository&#39;s UUID will be updated iff</span>
<a name="l02541"></a>02541 <span class="comment"> *   the dumpstream contains a UUID and</span>
<a name="l02542"></a>02542 <span class="comment"> *   @a uuid_action is not equal to #svn_repos_load_uuid_ignore and</span>
<a name="l02543"></a>02543 <span class="comment"> *   either the repository contains no revisions or</span>
<a name="l02544"></a>02544 <span class="comment"> *          @a uuid_action is equal to #svn_repos_load_uuid_force.</span>
<a name="l02545"></a>02545 <span class="comment"> *</span>
<a name="l02546"></a>02546 <span class="comment"> * If the dumpstream contains no UUID, then @a uuid_action is</span>
<a name="l02547"></a>02547 <span class="comment"> * ignored and the repository UUID is not touched.</span>
<a name="l02548"></a>02548 <span class="comment"> *</span>
<a name="l02549"></a>02549 <span class="comment"> * If @a parent_dir is not NULL, then the parser will reparent all the</span>
<a name="l02550"></a>02550 <span class="comment"> * loaded nodes, from root to @a parent_dir.  The directory @a parent_dir</span>
<a name="l02551"></a>02551 <span class="comment"> * must be an existing directory in the repository.</span>
<a name="l02552"></a>02552 <span class="comment"> *</span>
<a name="l02553"></a>02553 <span class="comment"> * If @a use_pre_commit_hook is set, call the repository&#39;s pre-commit</span>
<a name="l02554"></a>02554 <span class="comment"> * hook before committing each loaded revision.</span>
<a name="l02555"></a>02555 <span class="comment"> *</span>
<a name="l02556"></a>02556 <span class="comment"> * If @a use_post_commit_hook is set, call the repository&#39;s</span>
<a name="l02557"></a>02557 <span class="comment"> * post-commit hook after committing each loaded revision.</span>
<a name="l02558"></a>02558 <span class="comment"> *</span>
<a name="l02559"></a>02559 <span class="comment"> * If @a validate_props is set, then validate Subversion revision and</span>
<a name="l02560"></a>02560 <span class="comment"> * node properties (those in the svn: namespace) against established</span>
<a name="l02561"></a>02561 <span class="comment"> * rules for those things.</span>
<a name="l02562"></a>02562 <span class="comment"> *</span>
<a name="l02563"></a>02563 <span class="comment"> * If non-NULL, use @a notify_func and @a notify_baton to send notification</span>
<a name="l02564"></a>02564 <span class="comment"> * of events to the caller.</span>
<a name="l02565"></a>02565 <span class="comment"> *</span>
<a name="l02566"></a>02566 <span class="comment"> * If @a cancel_func is not @c NULL, it is called periodically with</span>
<a name="l02567"></a>02567 <span class="comment"> * @a cancel_baton as argument to see if the client wishes to cancel</span>
<a name="l02568"></a>02568 <span class="comment"> * the load.</span>
<a name="l02569"></a>02569 <span class="comment"> *</span>
<a name="l02570"></a>02570 <span class="comment"> * @since New in 1.7.</span>
<a name="l02571"></a>02571 <span class="comment"> */</span>
<a name="l02572"></a>02572 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02573"></a>02573 <a class="code" href="group__svn__repos__dump__load.html#ga68ee91da669943b091b62e77a0811cd1" title="Read and parse dumpfile-formatted dumpstream, reconstructing filesystem revisions in already-open rep...">svn_repos_load_fs3</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02574"></a>02574                    <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *dumpstream,
<a name="l02575"></a>02575                    <span class="keyword">enum</span> <a class="code" href="svn__repos_8h.html#a3f25f6afc6c9fc6de9327ea8960a5360" title="The different policies for processing the UUID in the dumpfile.">svn_repos_load_uuid</a> uuid_action,
<a name="l02576"></a>02576                    <span class="keyword">const</span> <span class="keywordtype">char</span> *parent_dir,
<a name="l02577"></a>02577                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> use_pre_commit_hook,
<a name="l02578"></a>02578                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> use_post_commit_hook,
<a name="l02579"></a>02579                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> validate_props,
<a name="l02580"></a>02580                    <a class="code" href="svn__repos_8h.html#a387f44a9ac5041bceee3f105c7f197fe" title="Callback for providing notification from the repository.">svn_repos_notify_func_t</a> notify_func,
<a name="l02581"></a>02581                    <span class="keywordtype">void</span> *notify_baton,
<a name="l02582"></a>02582                    <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l02583"></a>02583                    <span class="keywordtype">void</span> *cancel_baton,
<a name="l02584"></a>02584                    apr_pool_t *pool);
<a name="l02585"></a>02585 <span class="comment"></span>
<a name="l02586"></a>02586 <span class="comment">/**</span>
<a name="l02587"></a>02587 <span class="comment"> * Similar to svn_repos_load_fs3(), but with @a feedback_stream in</span>
<a name="l02588"></a>02588 <span class="comment"> * place of the #svn_repos_notify_func_t and baton and with</span>
<a name="l02589"></a>02589 <span class="comment"> * @a validate_props always FALSE.</span>
<a name="l02590"></a>02590 <span class="comment"> *</span>
<a name="l02591"></a>02591 <span class="comment"> * @since New in 1.2.</span>
<a name="l02592"></a>02592 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l02593"></a>02593 <span class="comment"> */</span>
<a name="l02594"></a>02594 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l02595"></a>02595 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02596"></a>02596 <a class="code" href="group__svn__repos__dump__load.html#gaaa3af3c924339279ba9a528f441210ea" title="Similar to svn_repos_load_fs3(), but with feedback_stream in place of the svn_repos_notify_func_t and...">svn_repos_load_fs2</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02597"></a>02597                    <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *dumpstream,
<a name="l02598"></a>02598                    <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *feedback_stream,
<a name="l02599"></a>02599                    <span class="keyword">enum</span> <a class="code" href="svn__repos_8h.html#a3f25f6afc6c9fc6de9327ea8960a5360" title="The different policies for processing the UUID in the dumpfile.">svn_repos_load_uuid</a> uuid_action,
<a name="l02600"></a>02600                    <span class="keyword">const</span> <span class="keywordtype">char</span> *parent_dir,
<a name="l02601"></a>02601                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> use_pre_commit_hook,
<a name="l02602"></a>02602                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> use_post_commit_hook,
<a name="l02603"></a>02603                    <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l02604"></a>02604                    <span class="keywordtype">void</span> *cancel_baton,
<a name="l02605"></a>02605                    apr_pool_t *pool);
<a name="l02606"></a>02606 <span class="comment"></span>
<a name="l02607"></a>02607 <span class="comment">/**</span>
<a name="l02608"></a>02608 <span class="comment"> * Similar to svn_repos_load_fs2(), but with @a use_pre_commit_hook and</span>
<a name="l02609"></a>02609 <span class="comment"> * @a use_post_commit_hook always @c FALSE.</span>
<a name="l02610"></a>02610 <span class="comment"> *</span>
<a name="l02611"></a>02611 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.1 API.</span>
<a name="l02612"></a>02612 <span class="comment"> */</span>
<a name="l02613"></a>02613 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l02614"></a>02614 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02615"></a>02615 <a class="code" href="group__svn__repos__dump__load.html#ga3f159b7efd59c845860e99a734841285" title="Similar to svn_repos_load_fs2(), but with use_pre_commit_hook and use_post_commit_hook always FALSE...">svn_repos_load_fs</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02616"></a>02616                   <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *dumpstream,
<a name="l02617"></a>02617                   <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *feedback_stream,
<a name="l02618"></a>02618                   <span class="keyword">enum</span> <a class="code" href="svn__repos_8h.html#a3f25f6afc6c9fc6de9327ea8960a5360" title="The different policies for processing the UUID in the dumpfile.">svn_repos_load_uuid</a> uuid_action,
<a name="l02619"></a>02619                   <span class="keyword">const</span> <span class="keywordtype">char</span> *parent_dir,
<a name="l02620"></a>02620                   <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l02621"></a>02621                   <span class="keywordtype">void</span> *cancel_baton,
<a name="l02622"></a>02622                   apr_pool_t *pool);
<a name="l02623"></a>02623 
<a name="l02624"></a>02624 <span class="comment"></span>
<a name="l02625"></a>02625 <span class="comment">/**</span>
<a name="l02626"></a>02626 <span class="comment"> * A vtable that is driven by svn_repos_parse_dumpstream2().</span>
<a name="l02627"></a>02627 <span class="comment"> *</span>
<a name="l02628"></a>02628 <span class="comment"> * @since New in 1.1.</span>
<a name="l02629"></a>02629 <span class="comment"> */</span>
<a name="l02630"></a><a class="code" href="structsvn__repos__parse__fns2__t.html">02630</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__repos__parse__fns2__t.html" title="A vtable that is driven by svn_repos_parse_dumpstream2().">svn_repos_parse_fns2_t</a>
<a name="l02631"></a>02631 {<span class="comment"></span>
<a name="l02632"></a>02632 <span class="comment">  /** The parser has discovered a new revision record within the</span>
<a name="l02633"></a>02633 <span class="comment">   * parsing session represented by @a parse_baton.  All the headers are</span>
<a name="l02634"></a>02634 <span class="comment">   * placed in @a headers (allocated in @a pool), which maps &lt;tt&gt;const</span>
<a name="l02635"></a>02635 <span class="comment">   * char *&lt;/tt&gt; header-name ==&gt; &lt;tt&gt;const char *&lt;/tt&gt; header-value.</span>
<a name="l02636"></a>02636 <span class="comment">   * The @a revision_baton received back (also allocated in @a pool)</span>
<a name="l02637"></a>02637 <span class="comment">   * represents the revision.</span>
<a name="l02638"></a>02638 <span class="comment">   */</span>
<a name="l02639"></a><a class="code" href="structsvn__repos__parse__fns2__t.html#ad617eeff5bbe130a22fdf432fbd76188">02639</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*new_revision_record)(<span class="keywordtype">void</span> **revision_baton,
<a name="l02640"></a>02640                                       apr_hash_t *headers,
<a name="l02641"></a>02641                                       <span class="keywordtype">void</span> *parse_baton,
<a name="l02642"></a>02642                                       apr_pool_t *pool);
<a name="l02643"></a>02643 <span class="comment"></span>
<a name="l02644"></a>02644 <span class="comment">  /** The parser has discovered a new uuid record within the parsing</span>
<a name="l02645"></a>02645 <span class="comment">   * session represented by @a parse_baton.  The uuid&#39;s value is</span>
<a name="l02646"></a>02646 <span class="comment">   * @a uuid, and it is allocated in @a pool.</span>
<a name="l02647"></a>02647 <span class="comment">   */</span>
<a name="l02648"></a><a class="code" href="structsvn__repos__parse__fns2__t.html#ad115de865662f374e5b8ea853a749d2f">02648</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*uuid_record)(<span class="keyword">const</span> <span class="keywordtype">char</span> *uuid,
<a name="l02649"></a>02649                               <span class="keywordtype">void</span> *parse_baton,
<a name="l02650"></a>02650                               apr_pool_t *pool);
<a name="l02651"></a>02651 <span class="comment"></span>
<a name="l02652"></a>02652 <span class="comment">  /** The parser has discovered a new node record within the current</span>
<a name="l02653"></a>02653 <span class="comment">   * revision represented by @a revision_baton.  All the headers are</span>
<a name="l02654"></a>02654 <span class="comment">   * placed in @a headers (as with @c new_revision_record), allocated in</span>
<a name="l02655"></a>02655 <span class="comment">   * @a pool.  The @a node_baton received back is allocated in @a pool</span>
<a name="l02656"></a>02656 <span class="comment">   * and represents the node.</span>
<a name="l02657"></a>02657 <span class="comment">   */</span>
<a name="l02658"></a><a class="code" href="structsvn__repos__parse__fns2__t.html#aaf4ebf625152e5f9f8ab45eada90ce44">02658</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*new_node_record)(<span class="keywordtype">void</span> **node_baton,
<a name="l02659"></a>02659                                   apr_hash_t *headers,
<a name="l02660"></a>02660                                   <span class="keywordtype">void</span> *revision_baton,
<a name="l02661"></a>02661                                   apr_pool_t *pool);
<a name="l02662"></a>02662 <span class="comment"></span>
<a name="l02663"></a>02663 <span class="comment">  /** For a given @a revision_baton, set a property @a name to @a value. */</span>
<a name="l02664"></a><a class="code" href="structsvn__repos__parse__fns2__t.html#a77531fad440a16bbe2bc0ffab69f471a">02664</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*set_revision_property)(<span class="keywordtype">void</span> *revision_baton,
<a name="l02665"></a>02665                                         <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l02666"></a>02666                                         <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *value);
<a name="l02667"></a>02667 <span class="comment"></span>
<a name="l02668"></a>02668 <span class="comment">  /** For a given @a node_baton, set a property @a name to @a value. */</span>
<a name="l02669"></a><a class="code" href="structsvn__repos__parse__fns2__t.html#a7607891a8598ff7cfdc3076f8d937815">02669</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*set_node_property)(<span class="keywordtype">void</span> *node_baton,
<a name="l02670"></a>02670                                     <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l02671"></a>02671                                     <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *value);
<a name="l02672"></a>02672 <span class="comment"></span>
<a name="l02673"></a>02673 <span class="comment">  /** For a given @a node_baton, delete property @a name. */</span>
<a name="l02674"></a><a class="code" href="structsvn__repos__parse__fns2__t.html#ab0e233defd628b0e0eed605f8c01764c">02674</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*delete_node_property)(<span class="keywordtype">void</span> *node_baton, <span class="keyword">const</span> <span class="keywordtype">char</span> *name);
<a name="l02675"></a>02675 <span class="comment"></span>
<a name="l02676"></a>02676 <span class="comment">  /** For a given @a node_baton, remove all properties. */</span>
<a name="l02677"></a><a class="code" href="structsvn__repos__parse__fns2__t.html#ac2a107d120d111813380ae92044c7273">02677</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*remove_node_props)(<span class="keywordtype">void</span> *node_baton);
<a name="l02678"></a>02678 <span class="comment"></span>
<a name="l02679"></a>02679 <span class="comment">  /** For a given @a node_baton, receive a writable @a stream capable of</span>
<a name="l02680"></a>02680 <span class="comment">   * receiving the node&#39;s fulltext.  After writing the fulltext, call</span>
<a name="l02681"></a>02681 <span class="comment">   * the stream&#39;s close() function.</span>
<a name="l02682"></a>02682 <span class="comment">   *</span>
<a name="l02683"></a>02683 <span class="comment">   * If a @c NULL is returned instead of a stream, the vtable is</span>
<a name="l02684"></a>02684 <span class="comment">   * indicating that no text is desired, and the parser will not</span>
<a name="l02685"></a>02685 <span class="comment">   * attempt to send it.</span>
<a name="l02686"></a>02686 <span class="comment">   */</span>
<a name="l02687"></a><a class="code" href="structsvn__repos__parse__fns2__t.html#aa4b91379f29eb665bdb6184bac71d632">02687</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*set_fulltext)(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> **stream,
<a name="l02688"></a>02688                                <span class="keywordtype">void</span> *node_baton);
<a name="l02689"></a>02689 <span class="comment"></span>
<a name="l02690"></a>02690 <span class="comment">  /** For a given @a node_baton, set @a handler and @a handler_baton</span>
<a name="l02691"></a>02691 <span class="comment">   * to a window handler and baton capable of receiving a delta</span>
<a name="l02692"></a>02692 <span class="comment">   * against the node&#39;s previous contents.  A NULL window will be</span>
<a name="l02693"></a>02693 <span class="comment">   * sent to the handler after all the windows are sent.</span>
<a name="l02694"></a>02694 <span class="comment">   *</span>
<a name="l02695"></a>02695 <span class="comment">   * If a @c NULL is returned instead of a handler, the vtable is</span>
<a name="l02696"></a>02696 <span class="comment">   * indicating that no delta is desired, and the parser will not</span>
<a name="l02697"></a>02697 <span class="comment">   * attempt to send it.</span>
<a name="l02698"></a>02698 <span class="comment">   */</span>
<a name="l02699"></a><a class="code" href="structsvn__repos__parse__fns2__t.html#a8fce3d6c2b8a379002e7812647826cdf">02699</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*apply_textdelta)(<a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> *handler,
<a name="l02700"></a>02700                                   <span class="keywordtype">void</span> **handler_baton,
<a name="l02701"></a>02701                                   <span class="keywordtype">void</span> *node_baton);
<a name="l02702"></a>02702 <span class="comment"></span>
<a name="l02703"></a>02703 <span class="comment">  /** The parser has reached the end of the current node represented by</span>
<a name="l02704"></a>02704 <span class="comment">   * @a node_baton, it can be freed.</span>
<a name="l02705"></a>02705 <span class="comment">   */</span>
<a name="l02706"></a><a class="code" href="structsvn__repos__parse__fns2__t.html#a23a54c9a6d63d62636cfe493d78bbe24">02706</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*close_node)(<span class="keywordtype">void</span> *node_baton);
<a name="l02707"></a>02707 <span class="comment"></span>
<a name="l02708"></a>02708 <span class="comment">  /** The parser has reached the end of the current revision</span>
<a name="l02709"></a>02709 <span class="comment">   * represented by @a revision_baton.  In other words, there are no more</span>
<a name="l02710"></a>02710 <span class="comment">   * changed nodes within the revision.  The baton can be freed.</span>
<a name="l02711"></a>02711 <span class="comment">   */</span>
<a name="l02712"></a><a class="code" href="structsvn__repos__parse__fns2__t.html#a26c539774ad5996e84c3c467694c891a">02712</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*close_revision)(<span class="keywordtype">void</span> *revision_baton);
<a name="l02713"></a>02713 
<a name="l02714"></a>02714 } <a class="code" href="group__svn__repos__dump__load.html#gadd77d65bf6708f7115532af4b3fbd70b" title="A vtable that is driven by svn_repos_parse_dumpstream2().">svn_repos_parse_fns2_t</a>;
<a name="l02715"></a>02715 <span class="comment"></span>
<a name="l02716"></a>02716 <span class="comment">/** @deprecated Provided for backward compatibility with the 1.2 API. */</span>
<a name="l02717"></a><a class="code" href="group__svn__repos__dump__load.html#gaed00d258abbe1a0fdc2cc4f89b420daf">02717</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__repos__parse__fns2__t.html" title="A vtable that is driven by svn_repos_parse_dumpstream2().">svn_repos_parse_fns2_t</a> <a class="code" href="group__svn__repos__dump__load.html#gaed00d258abbe1a0fdc2cc4f89b420daf">svn_repos_parser_fns2_t</a>;
<a name="l02718"></a>02718 
<a name="l02719"></a>02719 <span class="comment"></span>
<a name="l02720"></a>02720 <span class="comment">/**</span>
<a name="l02721"></a>02721 <span class="comment"> * Read and parse dumpfile-formatted @a stream, calling callbacks in</span>
<a name="l02722"></a>02722 <span class="comment"> * @a parse_fns/@a parse_baton, and using @a pool for allocations.</span>
<a name="l02723"></a>02723 <span class="comment"> *</span>
<a name="l02724"></a>02724 <span class="comment"> * If @a cancel_func is not @c NULL, it is called periodically with</span>
<a name="l02725"></a>02725 <span class="comment"> * @a cancel_baton as argument to see if the client wishes to cancel</span>
<a name="l02726"></a>02726 <span class="comment"> * the dump.</span>
<a name="l02727"></a>02727 <span class="comment"> *</span>
<a name="l02728"></a>02728 <span class="comment"> * This parser has built-in knowledge of the dumpfile format, but only</span>
<a name="l02729"></a>02729 <span class="comment"> * in a general sense:</span>
<a name="l02730"></a>02730 <span class="comment"> *</span>
<a name="l02731"></a>02731 <span class="comment"> *    * it recognizes revision and node records by looking for either</span>
<a name="l02732"></a>02732 <span class="comment"> *      a REVISION_NUMBER or NODE_PATH headers.</span>
<a name="l02733"></a>02733 <span class="comment"> *</span>
<a name="l02734"></a>02734 <span class="comment"> *    * it recognizes the CONTENT-LENGTH headers, so it knows if and</span>
<a name="l02735"></a>02735 <span class="comment"> *      how to suck up the content body.</span>
<a name="l02736"></a>02736 <span class="comment"> *</span>
<a name="l02737"></a>02737 <span class="comment"> *    * it knows how to parse a content body into two parts:  props</span>
<a name="l02738"></a>02738 <span class="comment"> *      and text, and pass the pieces to the vtable.</span>
<a name="l02739"></a>02739 <span class="comment"> *</span>
<a name="l02740"></a>02740 <span class="comment"> * This is enough knowledge to make it easy on vtable implementors,</span>
<a name="l02741"></a>02741 <span class="comment"> * but still allow expansion of the format:  most headers are ignored.</span>
<a name="l02742"></a>02742 <span class="comment"> *</span>
<a name="l02743"></a>02743 <span class="comment"> * @since New in 1.1.</span>
<a name="l02744"></a>02744 <span class="comment"> */</span>
<a name="l02745"></a>02745 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02746"></a>02746 <a class="code" href="group__svn__repos__dump__load.html#ga9bf944dbcffb79e1afe8bda810e1b85a" title="Read and parse dumpfile-formatted stream, calling callbacks in parse_fns/parse_baton, and using pool for allocations.">svn_repos_parse_dumpstream2</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l02747"></a>02747                             <span class="keyword">const</span> <a class="code" href="structsvn__repos__parse__fns2__t.html" title="A vtable that is driven by svn_repos_parse_dumpstream2().">svn_repos_parse_fns2_t</a> *parse_fns,
<a name="l02748"></a>02748                             <span class="keywordtype">void</span> *parse_baton,
<a name="l02749"></a>02749                             <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l02750"></a>02750                             <span class="keywordtype">void</span> *cancel_baton,
<a name="l02751"></a>02751                             apr_pool_t *pool);
<a name="l02752"></a>02752 
<a name="l02753"></a>02753 <span class="comment"></span>
<a name="l02754"></a>02754 <span class="comment">/**</span>
<a name="l02755"></a>02755 <span class="comment"> * Set @a *parser and @a *parse_baton to a vtable parser which commits new</span>
<a name="l02756"></a>02756 <span class="comment"> * revisions to the fs in @a repos.  The constructed parser will treat</span>
<a name="l02757"></a>02757 <span class="comment"> * UUID records in a manner consistent with @a uuid_action.  Use @a pool</span>
<a name="l02758"></a>02758 <span class="comment"> * to operate on the fs.</span>
<a name="l02759"></a>02759 <span class="comment"> *</span>
<a name="l02760"></a>02760 <span class="comment"> * If @a use_history is set, then the parser will require relative</span>
<a name="l02761"></a>02761 <span class="comment"> * &#39;copyfrom&#39; history to exist in the repository when it encounters</span>
<a name="l02762"></a>02762 <span class="comment"> * nodes that are added-with-history.</span>
<a name="l02763"></a>02763 <span class="comment"> *</span>
<a name="l02764"></a>02764 <span class="comment"> * If @a validate_props is set, then validate Subversion revision and</span>
<a name="l02765"></a>02765 <span class="comment"> * node properties (those in the svn: namespace) against established</span>
<a name="l02766"></a>02766 <span class="comment"> * rules for those things.</span>
<a name="l02767"></a>02767 <span class="comment"> *</span>
<a name="l02768"></a>02768 <span class="comment"> * If @a parent_dir is not NULL, then the parser will reparent all the</span>
<a name="l02769"></a>02769 <span class="comment"> * loaded nodes, from root to @a parent_dir.  The directory @a parent_dir</span>
<a name="l02770"></a>02770 <span class="comment"> * must be an existing directory in the repository.</span>
<a name="l02771"></a>02771 <span class="comment"> *</span>
<a name="l02772"></a>02772 <span class="comment"> * Print all parsing feedback to @a outstream (if non-@c NULL).</span>
<a name="l02773"></a>02773 <span class="comment"> *</span>
<a name="l02774"></a>02774 <span class="comment"> * @since New in 1.7.</span>
<a name="l02775"></a>02775 <span class="comment"> */</span>
<a name="l02776"></a>02776 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02777"></a>02777 <a class="code" href="group__svn__repos__dump__load.html#gabe145ff80070adc54f6f2f45f0217d5f" title="Set *parser and *parse_baton to a vtable parser which commits new revisions to the fs in repos...">svn_repos_get_fs_build_parser3</a>(<span class="keyword">const</span> <a class="code" href="structsvn__repos__parse__fns2__t.html" title="A vtable that is driven by svn_repos_parse_dumpstream2().">svn_repos_parse_fns2_t</a> **parser,
<a name="l02778"></a>02778                                <span class="keywordtype">void</span> **parse_baton,
<a name="l02779"></a>02779                                <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02780"></a>02780                                <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> use_history,
<a name="l02781"></a>02781                                <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> validate_props,
<a name="l02782"></a>02782                                <span class="keyword">enum</span> <a class="code" href="svn__repos_8h.html#a3f25f6afc6c9fc6de9327ea8960a5360" title="The different policies for processing the UUID in the dumpfile.">svn_repos_load_uuid</a> uuid_action,
<a name="l02783"></a>02783                                <span class="keyword">const</span> <span class="keywordtype">char</span> *parent_dir,
<a name="l02784"></a>02784                                <a class="code" href="svn__repos_8h.html#a387f44a9ac5041bceee3f105c7f197fe" title="Callback for providing notification from the repository.">svn_repos_notify_func_t</a> notify_func,
<a name="l02785"></a>02785                                <span class="keywordtype">void</span> *notify_baton,
<a name="l02786"></a>02786                                apr_pool_t *pool);
<a name="l02787"></a>02787 <span class="comment"></span>
<a name="l02788"></a>02788 <span class="comment">/**</span>
<a name="l02789"></a>02789 <span class="comment"> * Similar to svn_repos_get_fs_build_parser3(), but with @a outstream</span>
<a name="l02790"></a>02790 <span class="comment"> * in place if a #svn_repos_notify_func_t and baton and with</span>
<a name="l02791"></a>02791 <span class="comment"> * @a validate_props always FALSE.</span>
<a name="l02792"></a>02792 <span class="comment"> *</span>
<a name="l02793"></a>02793 <span class="comment"> * @since New in 1.1.</span>
<a name="l02794"></a>02794 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l02795"></a>02795 <span class="comment"> */</span>
<a name="l02796"></a>02796 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l02797"></a>02797 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02798"></a>02798 <a class="code" href="group__svn__repos__dump__load.html#ga77d6f795abc868bb0321b0e1f1f4005f" title="Similar to svn_repos_get_fs_build_parser3(), but with outstream in place if a svn_repos_notify_func_t...">svn_repos_get_fs_build_parser2</a>(<span class="keyword">const</span> <a class="code" href="structsvn__repos__parse__fns2__t.html" title="A vtable that is driven by svn_repos_parse_dumpstream2().">svn_repos_parse_fns2_t</a> **parser,
<a name="l02799"></a>02799                                <span class="keywordtype">void</span> **parse_baton,
<a name="l02800"></a>02800                                <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02801"></a>02801                                <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> use_history,
<a name="l02802"></a>02802                                <span class="keyword">enum</span> <a class="code" href="svn__repos_8h.html#a3f25f6afc6c9fc6de9327ea8960a5360" title="The different policies for processing the UUID in the dumpfile.">svn_repos_load_uuid</a> uuid_action,
<a name="l02803"></a>02803                                <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *outstream,
<a name="l02804"></a>02804                                <span class="keyword">const</span> <span class="keywordtype">char</span> *parent_dir,
<a name="l02805"></a>02805                                apr_pool_t *pool);
<a name="l02806"></a>02806 <span class="comment"></span>
<a name="l02807"></a>02807 <span class="comment">/**</span>
<a name="l02808"></a>02808 <span class="comment"> * A vtable that is driven by svn_repos_parse_dumpstream().</span>
<a name="l02809"></a>02809 <span class="comment"> * Similar to #svn_repos_parse_fns2_t except that it lacks</span>
<a name="l02810"></a>02810 <span class="comment"> * the delete_node_property and apply_textdelta callbacks.</span>
<a name="l02811"></a>02811 <span class="comment"> *</span>
<a name="l02812"></a>02812 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.0 API.</span>
<a name="l02813"></a>02813 <span class="comment"> */</span>
<a name="l02814"></a><a class="code" href="structsvn__repos__parse__fns__t.html">02814</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__repos__parse__fns__t.html" title="A vtable that is driven by svn_repos_parse_dumpstream().">svn_repos_parse_fns_t</a>
<a name="l02815"></a>02815 {<span class="comment"></span>
<a name="l02816"></a>02816 <span class="comment">  /** Same as #svn_repos_parse_fns2_t.new_revision_record. */</span>
<a name="l02817"></a><a class="code" href="structsvn__repos__parse__fns__t.html#a0a054db19150005e06aff93cf708cf54">02817</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*new_revision_record)(<span class="keywordtype">void</span> **revision_baton,
<a name="l02818"></a>02818                                       apr_hash_t *headers,
<a name="l02819"></a>02819                                       <span class="keywordtype">void</span> *parse_baton,
<a name="l02820"></a>02820                                       apr_pool_t *pool);<span class="comment"></span>
<a name="l02821"></a>02821 <span class="comment">  /** Same as #svn_repos_parse_fns2_t.uuid_record. */</span>
<a name="l02822"></a><a class="code" href="structsvn__repos__parse__fns__t.html#af1707fc24b7b29531cf583a5e2d6963c">02822</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*uuid_record)(<span class="keyword">const</span> <span class="keywordtype">char</span> *uuid,
<a name="l02823"></a>02823                               <span class="keywordtype">void</span> *parse_baton,
<a name="l02824"></a>02824                               apr_pool_t *pool);<span class="comment"></span>
<a name="l02825"></a>02825 <span class="comment">  /** Same as #svn_repos_parse_fns2_t.new_node_record. */</span>
<a name="l02826"></a><a class="code" href="structsvn__repos__parse__fns__t.html#ad8cae4c394f803da5787530a17762750">02826</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*new_node_record)(<span class="keywordtype">void</span> **node_baton,
<a name="l02827"></a>02827                                   apr_hash_t *headers,
<a name="l02828"></a>02828                                   <span class="keywordtype">void</span> *revision_baton,
<a name="l02829"></a>02829                                   apr_pool_t *pool);<span class="comment"></span>
<a name="l02830"></a>02830 <span class="comment">  /** Same as #svn_repos_parse_fns2_t.set_revision_property. */</span>
<a name="l02831"></a><a class="code" href="structsvn__repos__parse__fns__t.html#ab03716a46850571a1b94fe5677539f34">02831</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*set_revision_property)(<span class="keywordtype">void</span> *revision_baton,
<a name="l02832"></a>02832                                         <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l02833"></a>02833                                         <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *value);<span class="comment"></span>
<a name="l02834"></a>02834 <span class="comment">  /** Same as #svn_repos_parse_fns2_t.set_node_property. */</span>
<a name="l02835"></a><a class="code" href="structsvn__repos__parse__fns__t.html#a0782574eb7c3362e1bcf4348ad6391f1">02835</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*set_node_property)(<span class="keywordtype">void</span> *node_baton,
<a name="l02836"></a>02836                                     <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l02837"></a>02837                                     <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *value);<span class="comment"></span>
<a name="l02838"></a>02838 <span class="comment">  /** Same as #svn_repos_parse_fns2_t.remove_node_props. */</span>
<a name="l02839"></a><a class="code" href="structsvn__repos__parse__fns__t.html#afb926b79d28900a875d691d17dda0362">02839</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*remove_node_props)(<span class="keywordtype">void</span> *node_baton);<span class="comment"></span>
<a name="l02840"></a>02840 <span class="comment">  /** Same as #svn_repos_parse_fns2_t.set_fulltext. */</span>
<a name="l02841"></a><a class="code" href="structsvn__repos__parse__fns__t.html#af1c272c0b0efc07385c0a3b899c2b0dd">02841</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*set_fulltext)(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> **stream,
<a name="l02842"></a>02842                                <span class="keywordtype">void</span> *node_baton);<span class="comment"></span>
<a name="l02843"></a>02843 <span class="comment">  /** Same as #svn_repos_parse_fns2_t.close_node. */</span>
<a name="l02844"></a><a class="code" href="structsvn__repos__parse__fns__t.html#abe68ab59cc60bee984ca63b2863d358f">02844</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*close_node)(<span class="keywordtype">void</span> *node_baton);<span class="comment"></span>
<a name="l02845"></a>02845 <span class="comment">  /** Same as #svn_repos_parse_fns2_t.close_revision. */</span>
<a name="l02846"></a><a class="code" href="structsvn__repos__parse__fns__t.html#ab5013215d4e8bbd7309557d1d71fbf53">02846</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*close_revision)(<span class="keywordtype">void</span> *revision_baton);
<a name="l02847"></a>02847 } <a class="code" href="group__svn__repos__dump__load.html#ga03b3b5fdffc4cd7b7ce052542562f131" title="A vtable that is driven by svn_repos_parse_dumpstream().">svn_repos_parser_fns_t</a>;
<a name="l02848"></a>02848 
<a name="l02849"></a>02849 <span class="comment"></span>
<a name="l02850"></a>02850 <span class="comment">/**</span>
<a name="l02851"></a>02851 <span class="comment"> * Similar to svn_repos_parse_dumpstream2(), but uses the more limited</span>
<a name="l02852"></a>02852 <span class="comment"> * #svn_repos_parser_fns_t vtable type.</span>
<a name="l02853"></a>02853 <span class="comment"> *</span>
<a name="l02854"></a>02854 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.0 API.</span>
<a name="l02855"></a>02855 <span class="comment"> */</span>
<a name="l02856"></a>02856 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l02857"></a>02857 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02858"></a>02858 <a class="code" href="group__svn__repos__dump__load.html#ga62a01bf6688524b7ac598ee8c7b0290a" title="Similar to svn_repos_parse_dumpstream2(), but uses the more limited svn_repos_parser_fns_t vtable typ...">svn_repos_parse_dumpstream</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l02859"></a>02859                            <span class="keyword">const</span> <a class="code" href="structsvn__repos__parse__fns__t.html" title="A vtable that is driven by svn_repos_parse_dumpstream().">svn_repos_parser_fns_t</a> *parse_fns,
<a name="l02860"></a>02860                            <span class="keywordtype">void</span> *parse_baton,
<a name="l02861"></a>02861                            <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l02862"></a>02862                            <span class="keywordtype">void</span> *cancel_baton,
<a name="l02863"></a>02863                            apr_pool_t *pool);
<a name="l02864"></a>02864 
<a name="l02865"></a>02865 <span class="comment"></span>
<a name="l02866"></a>02866 <span class="comment">/**</span>
<a name="l02867"></a>02867 <span class="comment"> * Similar to svn_repos_get_fs_build_parser2(), but yields the more</span>
<a name="l02868"></a>02868 <span class="comment"> * limited svn_repos_parser_fns_t vtable type.</span>
<a name="l02869"></a>02869 <span class="comment"> *</span>
<a name="l02870"></a>02870 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.0 API.</span>
<a name="l02871"></a>02871 <span class="comment"> */</span>
<a name="l02872"></a>02872 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l02873"></a>02873 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02874"></a>02874 <a class="code" href="group__svn__repos__dump__load.html#gadf1ab8b01abc03d1b045d090cd78ad8b" title="Similar to svn_repos_get_fs_build_parser2(), but yields the more limited svn_repos_parser_fns_t vtabl...">svn_repos_get_fs_build_parser</a>(<span class="keyword">const</span> <a class="code" href="structsvn__repos__parse__fns__t.html" title="A vtable that is driven by svn_repos_parse_dumpstream().">svn_repos_parser_fns_t</a> **parser,
<a name="l02875"></a>02875                               <span class="keywordtype">void</span> **parse_baton,
<a name="l02876"></a>02876                               <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l02877"></a>02877                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> use_history,
<a name="l02878"></a>02878                               <span class="keyword">enum</span> <a class="code" href="svn__repos_8h.html#a3f25f6afc6c9fc6de9327ea8960a5360" title="The different policies for processing the UUID in the dumpfile.">svn_repos_load_uuid</a> uuid_action,
<a name="l02879"></a>02879                               <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *outstream,
<a name="l02880"></a>02880                               <span class="keyword">const</span> <span class="keywordtype">char</span> *parent_dir,
<a name="l02881"></a>02881                               apr_pool_t *pool);
<a name="l02882"></a>02882 
<a name="l02883"></a>02883 <span class="comment"></span>
<a name="l02884"></a>02884 <span class="comment">/** @} */</span>
<a name="l02885"></a>02885 <span class="comment"></span>
<a name="l02886"></a>02886 <span class="comment">/** A data type which stores the authz information.</span>
<a name="l02887"></a>02887 <span class="comment"> *</span>
<a name="l02888"></a>02888 <span class="comment"> * @since New in 1.3.</span>
<a name="l02889"></a>02889 <span class="comment"> */</span>
<a name="l02890"></a><a class="code" href="svn__repos_8h.html#a5fce42c096e640743076b32e1f92637a">02890</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="svn__repos_8h.html#a5fce42c096e640743076b32e1f92637a" title="A data type which stores the authz information.">svn_authz_t</a> <a class="code" href="svn__repos_8h.html#a5fce42c096e640743076b32e1f92637a" title="A data type which stores the authz information.">svn_authz_t</a>;
<a name="l02891"></a>02891 <span class="comment"></span>
<a name="l02892"></a>02892 <span class="comment">/** Read authz configuration data from @a file (a file or registry</span>
<a name="l02893"></a>02893 <span class="comment"> * path) into @a *authz_p, allocated in @a pool.</span>
<a name="l02894"></a>02894 <span class="comment"> *</span>
<a name="l02895"></a>02895 <span class="comment"> * If @a file is not a valid authz rule file, then return</span>
<a name="l02896"></a>02896 <span class="comment"> * SVN_AUTHZ_INVALID_CONFIG.  The contents of @a *authz_p is then</span>
<a name="l02897"></a>02897 <span class="comment"> * undefined.  If @a must_exist is TRUE, a missing authz file is also</span>
<a name="l02898"></a>02898 <span class="comment"> * an error.</span>
<a name="l02899"></a>02899 <span class="comment"> *</span>
<a name="l02900"></a>02900 <span class="comment"> * @since New in 1.3.</span>
<a name="l02901"></a>02901 <span class="comment"> */</span>
<a name="l02902"></a>02902 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02903"></a>02903 <a class="code" href="svn__repos_8h.html#af84d37ff02c7c85b0a9d8f77adcffb07" title="Read authz configuration data from file (a file or registry path) into *authz_p, allocated in pool...">svn_repos_authz_read</a>(<a class="code" href="svn__repos_8h.html#a5fce42c096e640743076b32e1f92637a" title="A data type which stores the authz information.">svn_authz_t</a> **authz_p,
<a name="l02904"></a>02904                      <span class="keyword">const</span> <span class="keywordtype">char</span> *file,
<a name="l02905"></a>02905                      <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> must_exist,
<a name="l02906"></a>02906                      apr_pool_t *pool);
<a name="l02907"></a>02907 <span class="comment"></span>
<a name="l02908"></a>02908 <span class="comment">/**</span>
<a name="l02909"></a>02909 <span class="comment"> * Check whether @a user can access @a path in the repository @a</span>
<a name="l02910"></a>02910 <span class="comment"> * repos_name with the @a required_access.  @a authz lists the ACLs to</span>
<a name="l02911"></a>02911 <span class="comment"> * check against.  Set @a *access_granted to indicate if the requested</span>
<a name="l02912"></a>02912 <span class="comment"> * access is granted.</span>
<a name="l02913"></a>02913 <span class="comment"> *</span>
<a name="l02914"></a>02914 <span class="comment"> * If @a path is NULL, then check whether @a user has the @a</span>
<a name="l02915"></a>02915 <span class="comment"> * required_access anywhere in the repository.  Set @a *access_granted</span>
<a name="l02916"></a>02916 <span class="comment"> * to TRUE if at least one path is accessible with the @a</span>
<a name="l02917"></a>02917 <span class="comment"> * required_access.</span>
<a name="l02918"></a>02918 <span class="comment"> *</span>
<a name="l02919"></a>02919 <span class="comment"> * For compatibility with 1.6, and earlier, @a repos_name can be NULL</span>
<a name="l02920"></a>02920 <span class="comment"> * in which case it is equivalent to a @a repos_name of &quot;&quot;.</span>
<a name="l02921"></a>02921 <span class="comment"> *</span>
<a name="l02922"></a>02922 <span class="comment"> * @since New in 1.3.</span>
<a name="l02923"></a>02923 <span class="comment"> */</span>
<a name="l02924"></a>02924 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02925"></a>02925 <a class="code" href="svn__repos_8h.html#a407a6d4ba1171c379dca152a62ede1df" title="Check whether user can access path in the repository repos_name with the required_access.">svn_repos_authz_check_access</a>(<a class="code" href="svn__repos_8h.html#a5fce42c096e640743076b32e1f92637a" title="A data type which stores the authz information.">svn_authz_t</a> *authz,
<a name="l02926"></a>02926                              <span class="keyword">const</span> <span class="keywordtype">char</span> *repos_name,
<a name="l02927"></a>02927                              <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l02928"></a>02928                              <span class="keyword">const</span> <span class="keywordtype">char</span> *user,
<a name="l02929"></a>02929                              <a class="code" href="svn__repos_8h.html#a90d4f1b918bc84e87963fc5fed5dcb26" title="An enum defining the kinds of access authz looks up.">svn_repos_authz_access_t</a> required_access,
<a name="l02930"></a>02930                              <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *access_granted,
<a name="l02931"></a>02931                              apr_pool_t *pool);
<a name="l02932"></a>02932 
<a name="l02933"></a>02933 
<a name="l02934"></a>02934 <span class="comment"></span>
<a name="l02935"></a>02935 <span class="comment">/** Revision Access Levels</span>
<a name="l02936"></a>02936 <span class="comment"> *</span>
<a name="l02937"></a>02937 <span class="comment"> * Like most version control systems, access to versioned objects in</span>
<a name="l02938"></a>02938 <span class="comment"> * Subversion is determined on primarily path-based system.  Users either</span>
<a name="l02939"></a>02939 <span class="comment"> * do or don&#39;t have the ability to read a given path.</span>
<a name="l02940"></a>02940 <span class="comment"> *</span>
<a name="l02941"></a>02941 <span class="comment"> * However, unlike many version control systems where versioned objects</span>
<a name="l02942"></a>02942 <span class="comment"> * maintain their own distinct version information (revision numbers,</span>
<a name="l02943"></a>02943 <span class="comment"> * authors, log messages, change timestamps, etc.), Subversion binds</span>
<a name="l02944"></a>02944 <span class="comment"> * multiple paths changed as part of a single commit operation into a</span>
<a name="l02945"></a>02945 <span class="comment"> * set, calls the whole thing a revision, and hangs commit metadata</span>
<a name="l02946"></a>02946 <span class="comment"> * (author, date, log message, etc.) off of that revision.  So, commit</span>
<a name="l02947"></a>02947 <span class="comment"> * metadata is shared across all the paths changed as part of a given</span>
<a name="l02948"></a>02948 <span class="comment"> * commit operation.</span>
<a name="l02949"></a>02949 <span class="comment"> *</span>
<a name="l02950"></a>02950 <span class="comment"> * It is common (or, at least, we hope it is) for log messages to give</span>
<a name="l02951"></a>02951 <span class="comment"> * detailed information about changes made in the commit to which the log</span>
<a name="l02952"></a>02952 <span class="comment"> * message is attached.  Such information might include a mention of all</span>
<a name="l02953"></a>02953 <span class="comment"> * the files changed, what was changed in them, and so on.  But this</span>
<a name="l02954"></a>02954 <span class="comment"> * causes a problem when presenting information to readers who aren&#39;t</span>
<a name="l02955"></a>02955 <span class="comment"> * authorized to read every path in the repository.  Simply knowing that</span>
<a name="l02956"></a>02956 <span class="comment"> * a given path exists may be a security leak, even if the user can&#39;t see</span>
<a name="l02957"></a>02957 <span class="comment"> * the contents of the data located at that path.</span>
<a name="l02958"></a>02958 <span class="comment"> *</span>
<a name="l02959"></a>02959 <span class="comment"> * So Subversion does what it reasonably can to prevent the leak of this</span>
<a name="l02960"></a>02960 <span class="comment"> * information, and does so via a staged revision access policy.  A</span>
<a name="l02961"></a>02961 <span class="comment"> * reader can be said to have one of three levels of access to a given</span>
<a name="l02962"></a>02962 <span class="comment"> * revision&#39;s metadata, based solely on the reader&#39;s access rights to the</span>
<a name="l02963"></a>02963 <span class="comment"> * paths changed or copied in that revision:</span>
<a name="l02964"></a>02964 <span class="comment"> *</span>
<a name="l02965"></a>02965 <span class="comment"> *   &#39;full access&#39; -- Granted when the reader has access to all paths</span>
<a name="l02966"></a>02966 <span class="comment"> *      changed or copied in the revision, or when no paths were</span>
<a name="l02967"></a>02967 <span class="comment"> *      changed in the revision at all, this access level permits</span>
<a name="l02968"></a>02968 <span class="comment"> *      full visibility of all revision property names and values,</span>
<a name="l02969"></a>02969 <span class="comment"> *      and the full changed-paths information.</span>
<a name="l02970"></a>02970 <span class="comment"> *</span>
<a name="l02971"></a>02971 <span class="comment"> *   &#39;no access&#39; -- Granted when the reader does not have access to any</span>
<a name="l02972"></a>02972 <span class="comment"> *      paths changed or copied in the revision, this access level</span>
<a name="l02973"></a>02973 <span class="comment"> *      denies the reader access to all revision properties and all</span>
<a name="l02974"></a>02974 <span class="comment"> *      changed-paths information.</span>
<a name="l02975"></a>02975 <span class="comment"> *</span>
<a name="l02976"></a>02976 <span class="comment"> *   &#39;partial access&#39; -- Granted when the reader has access to at least</span>
<a name="l02977"></a>02977 <span class="comment"> *      one, but not all, of the paths changed or copied in the revision,</span>
<a name="l02978"></a>02978 <span class="comment"> *      this access level permits visibility of the svn:date and</span>
<a name="l02979"></a>02979 <span class="comment"> *      svn:author revision properties and only the paths of the</span>
<a name="l02980"></a>02980 <span class="comment"> *      changed-paths information to which the reader has access.</span>
<a name="l02981"></a>02981 <span class="comment"> *</span>
<a name="l02982"></a>02982 <span class="comment"> */</span>
<a name="l02983"></a>02983 
<a name="l02984"></a>02984 <span class="comment"></span>
<a name="l02985"></a>02985 <span class="comment">/** An enum defining levels of revision access.</span>
<a name="l02986"></a>02986 <span class="comment"> *</span>
<a name="l02987"></a>02987 <span class="comment"> * @since New in 1.5.</span>
<a name="l02988"></a>02988 <span class="comment"> */</span>
<a name="l02989"></a><a class="code" href="svn__repos_8h.html#a15467fb538a4afb76469ad37d39adeb8">02989</a> <span class="keyword">typedef</span> <span class="keyword">enum</span> <a class="code" href="svn__repos_8h.html#a15467fb538a4afb76469ad37d39adeb8" title="Revision Access Levels.">svn_repos_revision_access_level_t</a>
<a name="l02990"></a>02990 {
<a name="l02991"></a>02991   svn_repos_revision_access_none,
<a name="l02992"></a>02992   svn_repos_revision_access_partial,
<a name="l02993"></a>02993   svn_repos_revision_access_full
<a name="l02994"></a>02994 }
<a name="l02995"></a>02995 <a class="code" href="svn__repos_8h.html#a15467fb538a4afb76469ad37d39adeb8" title="Revision Access Levels.">svn_repos_revision_access_level_t</a>;
<a name="l02996"></a>02996 
<a name="l02997"></a>02997 <span class="comment"></span>
<a name="l02998"></a>02998 <span class="comment">/**</span>
<a name="l02999"></a>02999 <span class="comment"> * Set @a access to the access level granted for @a revision in @a</span>
<a name="l03000"></a>03000 <span class="comment"> * repos, as determined by consulting the @a authz_read_func callback</span>
<a name="l03001"></a>03001 <span class="comment"> * function and its associated @a authz_read_baton.</span>
<a name="l03002"></a>03002 <span class="comment"> *</span>
<a name="l03003"></a>03003 <span class="comment"> * @a authz_read_func may be @c NULL, in which case @a access will be</span>
<a name="l03004"></a>03004 <span class="comment"> * set to #svn_repos_revision_access_full.</span>
<a name="l03005"></a>03005 <span class="comment"> *</span>
<a name="l03006"></a>03006 <span class="comment"> * @since New in 1.5.</span>
<a name="l03007"></a>03007 <span class="comment"> */</span>
<a name="l03008"></a>03008 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l03009"></a>03009 <a class="code" href="svn__repos_8h.html#a64d482af56380b60017fe6d8008822b1" title="Set access to the access level granted for revision in repos, as determined by consulting the authz_r...">svn_repos_check_revision_access</a>(<a class="code" href="svn__repos_8h.html#a15467fb538a4afb76469ad37d39adeb8" title="Revision Access Levels.">svn_repos_revision_access_level_t</a> *access_level,
<a name="l03010"></a>03010                                 <a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l03011"></a>03011                                 <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> revision,
<a name="l03012"></a>03012                                 <a class="code" href="svn__repos_8h.html#ad36e1f3f846af40f17422af70f08ccf8" title="Callback type for checking authorization on paths produced by (at least) svn_repos_dir_delta2().">svn_repos_authz_func_t</a> authz_read_func,
<a name="l03013"></a>03013                                 <span class="keywordtype">void</span> *authz_read_baton,
<a name="l03014"></a>03014                                 apr_pool_t *pool);
<a name="l03015"></a>03015 
<a name="l03016"></a>03016 
<a name="l03017"></a>03017 <span class="comment"></span>
<a name="l03018"></a>03018 <span class="comment">/** Capabilities **/</span>
<a name="l03019"></a>03019 <span class="comment"></span>
<a name="l03020"></a>03020 <span class="comment">/**</span>
<a name="l03021"></a>03021 <span class="comment"> * Store in @a repos the client-reported capabilities @a capabilities,</span>
<a name="l03022"></a>03022 <span class="comment"> * which must be allocated in memory at least as long-lived as @a repos.</span>
<a name="l03023"></a>03023 <span class="comment"> *</span>
<a name="l03024"></a>03024 <span class="comment"> * The elements of @a capabilities are &#39;const char *&#39;, a subset of</span>
<a name="l03025"></a>03025 <span class="comment"> * the constants beginning with @c SVN_RA_CAPABILITY_.</span>
<a name="l03026"></a>03026 <span class="comment"> * @a capabilities is not copied, so changing it later will affect</span>
<a name="l03027"></a>03027 <span class="comment"> * what is remembered by @a repos.</span>
<a name="l03028"></a>03028 <span class="comment"> *</span>
<a name="l03029"></a>03029 <span class="comment"> * @note The capabilities are passed along to the start-commit hook;</span>
<a name="l03030"></a>03030 <span class="comment"> * see that hook&#39;s template for details.</span>
<a name="l03031"></a>03031 <span class="comment"> *</span>
<a name="l03032"></a>03032 <span class="comment"> * @note As of Subversion 1.5, there are no error conditions defined,</span>
<a name="l03033"></a>03033 <span class="comment"> * so this always returns SVN_NO_ERROR.  In future releases it may</span>
<a name="l03034"></a>03034 <span class="comment"> * return error, however, so callers should check.</span>
<a name="l03035"></a>03035 <span class="comment"> *</span>
<a name="l03036"></a>03036 <span class="comment"> * @since New in 1.5.</span>
<a name="l03037"></a>03037 <span class="comment"> */</span>
<a name="l03038"></a>03038 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l03039"></a>03039 <a class="code" href="svn__repos_8h.html#a2af80904bc2a2a8aa30c6de838819180" title="Capabilities.">svn_repos_remember_client_capabilities</a>(<a class="code" href="svn__repos_8h.html#aab0243728cac2a99eeaa18d7e72f77de" title="The repository object.">svn_repos_t</a> *repos,
<a name="l03040"></a>03040                                        <span class="keyword">const</span> apr_array_header_t *capabilities);
<a name="l03041"></a>03041 
<a name="l03042"></a>03042 
<a name="l03043"></a>03043 
<a name="l03044"></a>03044 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l03045"></a>03045 <span class="preprocessor"></span>}
<a name="l03046"></a>03046 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l03047"></a>03047 
<a name="l03048"></a>03048 <span class="preprocessor">#endif </span><span class="comment">/* SVN_REPOS_H */</span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Fri Dec 23 2011 09:20:37 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>
