<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Subversion: svn_error.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">svn_error.h</div>  </div>
</div>
<div class="contents">
<a href="svn__error_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**</span>
<a name="l00002"></a>00002 <span class="comment"> * @copyright</span>
<a name="l00003"></a>00003 <span class="comment"> * ====================================================================</span>
<a name="l00004"></a>00004 <span class="comment"> *    Licensed to the Apache Software Foundation (ASF) under one</span>
<a name="l00005"></a>00005 <span class="comment"> *    or more contributor license agreements.  See the NOTICE file</span>
<a name="l00006"></a>00006 <span class="comment"> *    distributed with this work for additional information</span>
<a name="l00007"></a>00007 <span class="comment"> *    regarding copyright ownership.  The ASF licenses this file</span>
<a name="l00008"></a>00008 <span class="comment"> *    to you under the Apache License, Version 2.0 (the</span>
<a name="l00009"></a>00009 <span class="comment"> *    &quot;License&quot;); you may not use this file except in compliance</span>
<a name="l00010"></a>00010 <span class="comment"> *    with the License.  You may obtain a copy of the License at</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00013"></a>00013 <span class="comment"> *</span>
<a name="l00014"></a>00014 <span class="comment"> *    Unless required by applicable law or agreed to in writing,</span>
<a name="l00015"></a>00015 <span class="comment"> *    software distributed under the License is distributed on an</span>
<a name="l00016"></a>00016 <span class="comment"> *    &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span>
<a name="l00017"></a>00017 <span class="comment"> *    KIND, either express or implied.  See the License for the</span>
<a name="l00018"></a>00018 <span class="comment"> *    specific language governing permissions and limitations</span>
<a name="l00019"></a>00019 <span class="comment"> *    under the License.</span>
<a name="l00020"></a>00020 <span class="comment"> * ====================================================================</span>
<a name="l00021"></a>00021 <span class="comment"> * @endcopyright</span>
<a name="l00022"></a>00022 <span class="comment"> *</span>
<a name="l00023"></a>00023 <span class="comment"> * @file svn_error.h</span>
<a name="l00024"></a>00024 <span class="comment"> * @brief Common exception handling for Subversion.</span>
<a name="l00025"></a>00025 <span class="comment"> */</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef SVN_ERROR_H</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define SVN_ERROR_H</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;apr.h&gt;</span>        <span class="comment">/* for apr_size_t */</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;apr_errno.h&gt;</span>  <span class="comment">/* APR&#39;s error system */</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;apr_pools.h&gt;</span>  <span class="comment">/* for apr_pool_t */</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#ifndef DOXYGEN_SHOULD_SKIP_THIS</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span><span class="preprocessor">#define APR_WANT_STDIO</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00037"></a>00037 <span class="preprocessor"></span><span class="preprocessor">#include &lt;apr_want.h&gt;</span>   <span class="comment">/* for FILE* */</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="svn__types_8h.html" title="Subversion&#39;s data types.">svn_types.h</a>&quot;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {
<a name="l00043"></a>00043 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="comment">/* For the Subversion developers, this #define turns on extended &quot;stack</span>
<a name="l00047"></a>00047 <span class="comment">   traces&quot; of any errors that get thrown. See the SVN_ERR() macro.  */</span>
<a name="l00048"></a>00048 <span class="preprocessor">#ifdef SVN_DEBUG</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">#define SVN_ERR__TRACING</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span>
<a name="l00052"></a>00052 <span class="comment"></span>
<a name="l00053"></a>00053 <span class="comment">/** the best kind of (@c svn_error_t *) ! */</span>
<a name="l00054"></a><a class="code" href="svn__error_8h.html#a657398222a237c3c8cc77dcabf427f63">00054</a> <span class="preprocessor">#define SVN_NO_ERROR   0</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span>
<a name="l00056"></a>00056 <span class="comment">/* The actual error codes are kept in a separate file; see comments</span>
<a name="l00057"></a>00057 <span class="comment">   there for the reasons why. */</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &quot;<a class="code" href="svn__error__codes_8h.html" title="Subversion error codes.">svn_error_codes.h</a>&quot;</span>
<a name="l00059"></a>00059 <span class="comment"></span>
<a name="l00060"></a>00060 <span class="comment">/** Put an English description of @a statcode into @a buf and return @a buf,</span>
<a name="l00061"></a>00061 <span class="comment"> * NULL-terminated. @a statcode is either an svn error or apr error.</span>
<a name="l00062"></a>00062 <span class="comment"> */</span>
<a name="l00063"></a>00063 <span class="keywordtype">char</span> *
<a name="l00064"></a>00064 <a class="code" href="svn__error_8h.html#ae47ab028b9c77e76979ad8cb5b1d017c" title="Put an English description of statcode into buf and return buf, NULL-terminated.">svn_strerror</a>(apr_status_t statcode,
<a name="l00065"></a>00065              <span class="keywordtype">char</span> *buf,
<a name="l00066"></a>00066              apr_size_t bufsize);
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 <span class="comment"></span>
<a name="l00069"></a>00069 <span class="comment">/** If @a err has a custom error message, return that, otherwise</span>
<a name="l00070"></a>00070 <span class="comment"> * store the generic error string associated with @a err-&gt;apr_err into</span>
<a name="l00071"></a>00071 <span class="comment"> * @a buf (terminating with NULL) and return @a buf.</span>
<a name="l00072"></a>00072 <span class="comment"> *</span>
<a name="l00073"></a>00073 <span class="comment"> * @since New in 1.4.</span>
<a name="l00074"></a>00074 <span class="comment"> *</span>
<a name="l00075"></a>00075 <span class="comment"> * @note @a buf and @a bufsize are provided in the interface so that</span>
<a name="l00076"></a>00076 <span class="comment"> * this function is thread-safe and yet does no allocation.</span>
<a name="l00077"></a>00077 <span class="comment"> */</span>
<a name="l00078"></a>00078 <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="svn__error_8h.html#a1b3b6a34086d2fff18e88906fa756f73" title="If err has a custom error message, return that, otherwise store the generic error string associated w...">svn_err_best_message</a>(<a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *err,
<a name="l00079"></a>00079                                  <span class="keywordtype">char</span> *buf,
<a name="l00080"></a>00080                                  apr_size_t bufsize);
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="comment"></span>
<a name="l00084"></a>00084 <span class="comment">/** SVN error creation and destruction.</span>
<a name="l00085"></a>00085 <span class="comment"> *</span>
<a name="l00086"></a>00086 <span class="comment"> * @defgroup svn_error_error_creation_destroy Error creation and destruction</span>
<a name="l00087"></a>00087 <span class="comment"> * @{</span>
<a name="l00088"></a>00088 <span class="comment"> */</span>
<a name="l00089"></a>00089 <span class="comment"></span>
<a name="l00090"></a>00090 <span class="comment">/** Create a nested exception structure.</span>
<a name="l00091"></a>00091 <span class="comment"> *</span>
<a name="l00092"></a>00092 <span class="comment"> * Input:  an APR or SVN custom error code,</span>
<a name="l00093"></a>00093 <span class="comment"> *         a &quot;child&quot; error to wrap,</span>
<a name="l00094"></a>00094 <span class="comment"> *         a specific message</span>
<a name="l00095"></a>00095 <span class="comment"> *</span>
<a name="l00096"></a>00096 <span class="comment"> * Returns:  a new error structure (containing the old one).</span>
<a name="l00097"></a>00097 <span class="comment"> *</span>
<a name="l00098"></a>00098 <span class="comment"> * @note Errors are always allocated in a subpool of the global pool,</span>
<a name="l00099"></a>00099 <span class="comment"> *        since an error&#39;s lifetime is generally not related to the</span>
<a name="l00100"></a>00100 <span class="comment"> *        lifetime of any convenient pool.  Errors must be freed</span>
<a name="l00101"></a>00101 <span class="comment"> *        with svn_error_clear().  The specific message should be @c NULL</span>
<a name="l00102"></a>00102 <span class="comment"> *        if there is nothing to add to the general message associated</span>
<a name="l00103"></a>00103 <span class="comment"> *        with the error code.</span>
<a name="l00104"></a>00104 <span class="comment"> *</span>
<a name="l00105"></a>00105 <span class="comment"> *        If creating the &quot;bottommost&quot; error in a chain, pass @c NULL for</span>
<a name="l00106"></a>00106 <span class="comment"> *        the child argument.</span>
<a name="l00107"></a>00107 <span class="comment"> */</span>
<a name="l00108"></a>00108 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00109"></a>00109 <a class="code" href="group__svn__error__error__creation__destroy.html#ga63cac13b078a6d0af98e74d61f7e355b" title="Create a nested exception structure.">svn_error_create</a>(apr_status_t apr_err,
<a name="l00110"></a>00110                  <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *child,
<a name="l00111"></a>00111                  <span class="keyword">const</span> <span class="keywordtype">char</span> *message);
<a name="l00112"></a>00112 <span class="comment"></span>
<a name="l00113"></a>00113 <span class="comment">/** Create an error structure with the given @a apr_err and @a child,</span>
<a name="l00114"></a>00114 <span class="comment"> * with a printf-style error message produced by passing @a fmt, using</span>
<a name="l00115"></a>00115 <span class="comment"> * apr_psprintf().</span>
<a name="l00116"></a>00116 <span class="comment"> */</span>
<a name="l00117"></a>00117 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00118"></a>00118 <a class="code" href="group__svn__error__error__creation__destroy.html#ga3b21968b79922680a90fc13314d70789" title="Create an error structure with the given apr_err and child, with a printf-style error message produce...">svn_error_createf</a>(apr_status_t apr_err,
<a name="l00119"></a>00119                   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *child,
<a name="l00120"></a>00120                   <span class="keyword">const</span> <span class="keywordtype">char</span> *fmt,
<a name="l00121"></a>00121                   ...)
<a name="l00122"></a>00122   __attribute__ ((format(printf, 3, 4)));
<a name="l00123"></a>00123 <span class="comment"></span>
<a name="l00124"></a>00124 <span class="comment">/** Wrap a @a status from an APR function.  If @a fmt is NULL, this is</span>
<a name="l00125"></a>00125 <span class="comment"> * equivalent to svn_error_create(status,NULL,NULL).  Otherwise,</span>
<a name="l00126"></a>00126 <span class="comment"> * the error message is constructed by formatting @a fmt and the</span>
<a name="l00127"></a>00127 <span class="comment"> * following arguments according to apr_psprintf(), and then</span>
<a name="l00128"></a>00128 <span class="comment"> * appending &quot;: &quot; and the error message corresponding to @a status.</span>
<a name="l00129"></a>00129 <span class="comment"> * (If UTF-8 translation of the APR error message fails, the &quot;: &quot; and</span>
<a name="l00130"></a>00130 <span class="comment"> * APR error are not appended to the error message.)</span>
<a name="l00131"></a>00131 <span class="comment"> */</span>
<a name="l00132"></a>00132 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00133"></a>00133 <a class="code" href="group__svn__error__error__creation__destroy.html#ga592eecb0b768f46e1183f4eabc348676" title="Wrap a status from an APR function.">svn_error_wrap_apr</a>(apr_status_t status,
<a name="l00134"></a>00134                    const <span class="keywordtype">char</span> *fmt,
<a name="l00135"></a>00135                    ...)
<a name="l00136"></a>00136        __attribute__((format(printf, 2, 3)));
<a name="l00137"></a>00137 <span class="comment"></span>
<a name="l00138"></a>00138 <span class="comment">/** A quick n&#39; easy way to create a wrapped exception with your own</span>
<a name="l00139"></a>00139 <span class="comment"> * message, before throwing it up the stack.  (It uses all of the</span>
<a name="l00140"></a>00140 <span class="comment"> * @a child&#39;s fields.)</span>
<a name="l00141"></a>00141 <span class="comment"> */</span>
<a name="l00142"></a>00142 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00143"></a>00143 <a class="code" href="group__svn__error__error__creation__destroy.html#ga9a02d9052446ffc08ecece578d1a3c2f" title="A quick n&#39; easy way to create a wrapped exception with your own message, before throwing it up the st...">svn_error_quick_wrap</a>(<a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *child,
<a name="l00144"></a>00144                      const <span class="keywordtype">char</span> *new_msg);
<a name="l00145"></a>00145 <span class="comment"></span>
<a name="l00146"></a>00146 <span class="comment">/** Compose two errors, returning the composition as a brand new error</span>
<a name="l00147"></a>00147 <span class="comment"> * and consuming the original errors.  Either or both of @a err1 and</span>
<a name="l00148"></a>00148 <span class="comment"> * @a err2 may be @c SVN_NO_ERROR.  If both are not @c SVN_NO_ERROR,</span>
<a name="l00149"></a>00149 <span class="comment"> * @a err2 will follow @a err1 in the chain of the returned error.</span>
<a name="l00150"></a>00150 <span class="comment"> *</span>
<a name="l00151"></a>00151 <span class="comment"> * Either @a err1 or @a err2 can be functions that return svn_error_t*</span>
<a name="l00152"></a>00152 <span class="comment"> * but if both are functions they can be evaluated in either order as</span>
<a name="l00153"></a>00153 <span class="comment"> * per the C language rules.</span>
<a name="l00154"></a>00154 <span class="comment"> *</span>
<a name="l00155"></a>00155 <span class="comment"> * @since New in 1.6.</span>
<a name="l00156"></a>00156 <span class="comment"> */</span>
<a name="l00157"></a>00157 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00158"></a>00158 <a class="code" href="group__svn__error__error__creation__destroy.html#ga3478fc47db9ca31d169138aa6ef7daee" title="Compose two errors, returning the composition as a brand new error and consuming the original errors...">svn_error_compose_create</a>(<a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *err1,
<a name="l00159"></a>00159                          <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *err2);
<a name="l00160"></a>00160 <span class="comment"></span>
<a name="l00161"></a>00161 <span class="comment">/** Add @a new_err to the end of @a chain&#39;s chain of errors.  The @a new_err</span>
<a name="l00162"></a>00162 <span class="comment"> * chain will be copied into @a chain&#39;s pool and destroyed, so @a new_err</span>
<a name="l00163"></a>00163 <span class="comment"> * itself becomes invalid after this function.</span>
<a name="l00164"></a>00164 <span class="comment"> *</span>
<a name="l00165"></a>00165 <span class="comment"> * Either @a chain or @a new_err can be functions that return svn_error_t*</span>
<a name="l00166"></a>00166 <span class="comment"> * but if both are functions they can be evaluated in either order as</span>
<a name="l00167"></a>00167 <span class="comment"> * per the C language rules.</span>
<a name="l00168"></a>00168 <span class="comment"> */</span>
<a name="l00169"></a>00169 <span class="keywordtype">void</span>
<a name="l00170"></a>00170 <a class="code" href="group__svn__error__error__creation__destroy.html#ga0617c02787a33ecbf68dcf752fe17b34" title="Add new_err to the end of chain&#39;s chain of errors.">svn_error_compose</a>(<a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *chain,
<a name="l00171"></a>00171                   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *new_err);
<a name="l00172"></a>00172 <span class="comment"></span>
<a name="l00173"></a>00173 <span class="comment">/** Return the root cause of @a err by finding the last error in its</span>
<a name="l00174"></a>00174 <span class="comment"> * chain (e.g. it or its children).  @a err may be @c SVN_NO_ERROR, in</span>
<a name="l00175"></a>00175 <span class="comment"> * which case @c SVN_NO_ERROR is returned.</span>
<a name="l00176"></a>00176 <span class="comment"> *</span>
<a name="l00177"></a>00177 <span class="comment"> * @since New in 1.5.</span>
<a name="l00178"></a>00178 <span class="comment"> */</span>
<a name="l00179"></a>00179 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00180"></a>00180 <a class="code" href="group__svn__error__error__creation__destroy.html#ga963dd4ae636823a71c36f4a1abec70f7" title="Return the root cause of err by finding the last error in its chain (e.g.">svn_error_root_cause</a>(<a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *err);
<a name="l00181"></a>00181 <span class="comment"></span>
<a name="l00182"></a>00182 <span class="comment">/** Return the first error in @a err&#39;s chain that has an error code @a</span>
<a name="l00183"></a>00183 <span class="comment"> * apr_err or #SVN_NO_ERROR if there is no error with that code.  The</span>
<a name="l00184"></a>00184 <span class="comment"> * returned error should @em not be cleared as it shares memory with @a err.</span>
<a name="l00185"></a>00185 <span class="comment"> *</span>
<a name="l00186"></a>00186 <span class="comment"> * If @a err is #SVN_NO_ERROR, return #SVN_NO_ERROR.</span>
<a name="l00187"></a>00187 <span class="comment"> *</span>
<a name="l00188"></a>00188 <span class="comment"> * @since New in 1.7.</span>
<a name="l00189"></a>00189 <span class="comment"> */</span>
<a name="l00190"></a>00190 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00191"></a>00191 <a class="code" href="group__svn__error__error__creation__destroy.html#gac7330fec4b094a825fe32ba6ca9b4ad2" title="Return the first error in err&#39;s chain that has an error code apr_err or SVN_NO_ERROR if there is no e...">svn_error_find_cause</a>(<a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *err, apr_status_t apr_err);
<a name="l00192"></a>00192 <span class="comment"></span>
<a name="l00193"></a>00193 <span class="comment">/** Create a new error that is a deep copy of @a err and return it.</span>
<a name="l00194"></a>00194 <span class="comment"> *</span>
<a name="l00195"></a>00195 <span class="comment"> * @since New in 1.2.</span>
<a name="l00196"></a>00196 <span class="comment"> */</span>
<a name="l00197"></a>00197 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00198"></a>00198 <a class="code" href="group__svn__error__error__creation__destroy.html#gabbe0febe6b533b445347f8b7eaca448b" title="Create a new error that is a deep copy of err and return it.">svn_error_dup</a>(<a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *err);
<a name="l00199"></a>00199 <span class="comment"></span>
<a name="l00200"></a>00200 <span class="comment">/** Free the memory used by @a error, as well as all ancestors and</span>
<a name="l00201"></a>00201 <span class="comment"> * descendants of @a error.</span>
<a name="l00202"></a>00202 <span class="comment"> *</span>
<a name="l00203"></a>00203 <span class="comment"> * Unlike other Subversion objects, errors are managed explicitly; you</span>
<a name="l00204"></a>00204 <span class="comment"> * MUST clear an error if you are ignoring it, or you are leaking memory.</span>
<a name="l00205"></a>00205 <span class="comment"> * For convenience, @a error may be @c NULL, in which case this function does</span>
<a name="l00206"></a>00206 <span class="comment"> * nothing; thus, svn_error_clear(svn_foo(...)) works as an idiom to</span>
<a name="l00207"></a>00207 <span class="comment"> * ignore errors.</span>
<a name="l00208"></a>00208 <span class="comment"> */</span>
<a name="l00209"></a>00209 <span class="keywordtype">void</span>
<a name="l00210"></a>00210 <a class="code" href="group__svn__error__error__creation__destroy.html#gac8bb06e98118a482ccf534fe38c33495" title="Free the memory used by error, as well as all ancestors and descendants of error.">svn_error_clear</a>(<a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *error);
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 <span class="preprocessor">#if defined(SVN_DEBUG)</span>
<a name="l00214"></a>00214 <span class="preprocessor"></span><span class="comment">/** Set the error location for debug mode. */</span>
<a name="l00215"></a>00215 <span class="keywordtype">void</span>
<a name="l00216"></a>00216 svn_error__locate(<span class="keyword">const</span> <span class="keywordtype">char</span> *file,
<a name="l00217"></a>00217                   <span class="keywordtype">long</span> line);
<a name="l00218"></a>00218 
<a name="l00219"></a>00219 <span class="comment">/* Wrapper macros to collect file and line information */</span>
<a name="l00220"></a>00220 <span class="preprocessor">#define svn_error_create \</span>
<a name="l00221"></a>00221 <span class="preprocessor">  (svn_error__locate(__FILE__,__LINE__), (svn_error_create))</span>
<a name="l00222"></a>00222 <span class="preprocessor"></span><span class="preprocessor">#define svn_error_createf \</span>
<a name="l00223"></a>00223 <span class="preprocessor">  (svn_error__locate(__FILE__,__LINE__), (svn_error_createf))</span>
<a name="l00224"></a>00224 <span class="preprocessor"></span><span class="preprocessor">#define svn_error_wrap_apr \</span>
<a name="l00225"></a>00225 <span class="preprocessor">  (svn_error__locate(__FILE__,__LINE__), (svn_error_wrap_apr))</span>
<a name="l00226"></a>00226 <span class="preprocessor"></span><span class="preprocessor">#define svn_error_quick_wrap \</span>
<a name="l00227"></a>00227 <span class="preprocessor">  (svn_error__locate(__FILE__,__LINE__), (svn_error_quick_wrap))</span>
<a name="l00228"></a>00228 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00229"></a>00229 <span class="preprocessor"></span>
<a name="l00230"></a>00230 <span class="comment"></span>
<a name="l00231"></a>00231 <span class="comment">/**</span>
<a name="l00232"></a>00232 <span class="comment"> * Very basic default error handler: print out error stack @a error to the</span>
<a name="l00233"></a>00233 <span class="comment"> * stdio stream @a stream, with each error prefixed by @a prefix; quit and</span>
<a name="l00234"></a>00234 <span class="comment"> * clear @a error iff the @a fatal flag is set.  Allocations are performed</span>
<a name="l00235"></a>00235 <span class="comment"> * in the @a error&#39;s pool.</span>
<a name="l00236"></a>00236 <span class="comment"> *</span>
<a name="l00237"></a>00237 <span class="comment"> * If you&#39;re not sure what prefix to pass, just pass &quot;svn: &quot;.  That&#39;s</span>
<a name="l00238"></a>00238 <span class="comment"> * what code that used to call svn_handle_error() and now calls</span>
<a name="l00239"></a>00239 <span class="comment"> * svn_handle_error2() does.</span>
<a name="l00240"></a>00240 <span class="comment"> *</span>
<a name="l00241"></a>00241 <span class="comment"> * @since New in 1.2.</span>
<a name="l00242"></a>00242 <span class="comment"> */</span>
<a name="l00243"></a>00243 <span class="keywordtype">void</span>
<a name="l00244"></a>00244 <a class="code" href="group__svn__error__error__creation__destroy.html#gaf9008085ded8f0af940f38a3cad6edb1" title="Very basic default error handler: print out error stack error to the stdio stream stream...">svn_handle_error2</a>(<a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *error,
<a name="l00245"></a>00245                   FILE *stream,
<a name="l00246"></a>00246                   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> fatal,
<a name="l00247"></a>00247                   <span class="keyword">const</span> <span class="keywordtype">char</span> *prefix);
<a name="l00248"></a>00248 <span class="comment"></span>
<a name="l00249"></a>00249 <span class="comment">/** Like svn_handle_error2() but with @c prefix set to &quot;svn: &quot;</span>
<a name="l00250"></a>00250 <span class="comment"> *</span>
<a name="l00251"></a>00251 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.1 API.</span>
<a name="l00252"></a>00252 <span class="comment"> */</span>
<a name="l00253"></a>00253 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00254"></a>00254 <span class="keywordtype">void</span>
<a name="l00255"></a>00255 <a class="code" href="group__svn__error__error__creation__destroy.html#ga9eb04d5b9b6f6ad76132a7fb822aa77f" title="Like svn_handle_error2() but with prefix set to &quot;svn: &quot;.">svn_handle_error</a>(<a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *error,
<a name="l00256"></a>00256                  FILE *stream,
<a name="l00257"></a>00257                  <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> fatal);
<a name="l00258"></a>00258 <span class="comment"></span>
<a name="l00259"></a>00259 <span class="comment">/**</span>
<a name="l00260"></a>00260 <span class="comment"> * Very basic default warning handler: print out the error @a error to the</span>
<a name="l00261"></a>00261 <span class="comment"> * stdio stream @a stream, prefixed by @a prefix.  Allocations are</span>
<a name="l00262"></a>00262 <span class="comment"> * performed in the error&#39;s pool.</span>
<a name="l00263"></a>00263 <span class="comment"> *</span>
<a name="l00264"></a>00264 <span class="comment"> * @a error may not be @c NULL.</span>
<a name="l00265"></a>00265 <span class="comment"> *</span>
<a name="l00266"></a>00266 <span class="comment"> * @since New in 1.2.</span>
<a name="l00267"></a>00267 <span class="comment"> */</span>
<a name="l00268"></a>00268 <span class="keywordtype">void</span>
<a name="l00269"></a>00269 <a class="code" href="group__svn__error__error__creation__destroy.html#ga34f08713630352a0546038088ffa6479" title="Very basic default warning handler: print out the error error to the stdio stream stream...">svn_handle_warning2</a>(FILE *stream,
<a name="l00270"></a>00270                     <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *error,
<a name="l00271"></a>00271                     <span class="keyword">const</span> <span class="keywordtype">char</span> *prefix);
<a name="l00272"></a>00272 <span class="comment"></span>
<a name="l00273"></a>00273 <span class="comment">/** Like svn_handle_warning2() but with @c prefix set to &quot;svn: &quot;</span>
<a name="l00274"></a>00274 <span class="comment"> *</span>
<a name="l00275"></a>00275 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.1 API.</span>
<a name="l00276"></a>00276 <span class="comment"> */</span>
<a name="l00277"></a>00277 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00278"></a>00278 <span class="keywordtype">void</span>
<a name="l00279"></a>00279 <a class="code" href="group__svn__error__error__creation__destroy.html#ga34bb30baf6f2da4abad396082111d671" title="Like svn_handle_warning2() but with prefix set to &quot;svn: &quot;.">svn_handle_warning</a>(FILE *stream,
<a name="l00280"></a>00280                    <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *error);
<a name="l00281"></a>00281 
<a name="l00282"></a>00282 <span class="comment"></span>
<a name="l00283"></a>00283 <span class="comment">/** A statement macro for checking error values.</span>
<a name="l00284"></a>00284 <span class="comment"> *</span>
<a name="l00285"></a>00285 <span class="comment"> * Evaluate @a expr.  If it yields an error, return that error from the</span>
<a name="l00286"></a>00286 <span class="comment"> * current function.  Otherwise, continue.</span>
<a name="l00287"></a>00287 <span class="comment"> *</span>
<a name="l00288"></a>00288 <span class="comment"> * The &lt;tt&gt;do { ... } while (0)&lt;/tt&gt; wrapper has no semantic effect,</span>
<a name="l00289"></a>00289 <span class="comment"> * but it makes this macro syntactically equivalent to the expression</span>
<a name="l00290"></a>00290 <span class="comment"> * statement it resembles.  Without it, statements like</span>
<a name="l00291"></a>00291 <span class="comment"> *</span>
<a name="l00292"></a>00292 <span class="comment"> * @code</span>
<a name="l00293"></a>00293 <span class="comment"> *   if (a)</span>
<a name="l00294"></a>00294 <span class="comment"> *     SVN_ERR(some operation);</span>
<a name="l00295"></a>00295 <span class="comment"> *   else</span>
<a name="l00296"></a>00296 <span class="comment"> *     foo;</span>
<a name="l00297"></a>00297 <span class="comment"> * @endcode</span>
<a name="l00298"></a>00298 <span class="comment"> *</span>
<a name="l00299"></a>00299 <span class="comment"> * would not mean what they appear to.</span>
<a name="l00300"></a>00300 <span class="comment"> */</span>
<a name="l00301"></a><a class="code" href="group__svn__error__error__creation__destroy.html#ga2d4bba65866869939178e21df8e6fffb">00301</a> <span class="preprocessor">#define SVN_ERR(expr)                           \</span>
<a name="l00302"></a>00302 <span class="preprocessor">  do {                                          \</span>
<a name="l00303"></a>00303 <span class="preprocessor">    svn_error_t *svn_err__temp = (expr);        \</span>
<a name="l00304"></a>00304 <span class="preprocessor">    if (svn_err__temp)                          \</span>
<a name="l00305"></a>00305 <span class="preprocessor">      return svn_error_trace(svn_err__temp);    \</span>
<a name="l00306"></a>00306 <span class="preprocessor">  } while (0)</span>
<a name="l00307"></a>00307 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00308"></a>00308 <span class="comment">/**</span>
<a name="l00309"></a>00309 <span class="comment"> * A macro for wrapping an error in a source-location trace message.</span>
<a name="l00310"></a>00310 <span class="comment"> *</span>
<a name="l00311"></a>00311 <span class="comment"> * This macro can be used when directly returning an already created</span>
<a name="l00312"></a>00312 <span class="comment"> * error (when not using SVN_ERR, svn_error_create(), etc.) to ensure</span>
<a name="l00313"></a>00313 <span class="comment"> * that the call stack is recorded correctly.</span>
<a name="l00314"></a>00314 <span class="comment"> *</span>
<a name="l00315"></a>00315 <span class="comment"> * @since New in 1.7.</span>
<a name="l00316"></a>00316 <span class="comment"> */</span>
<a name="l00317"></a>00317 <span class="preprocessor">#ifdef SVN_ERR__TRACING</span>
<a name="l00318"></a>00318 <span class="preprocessor"></span><span class="preprocessor">#define SVN_ERR__TRACED &quot;traced call&quot;</span>
<a name="l00319"></a>00319 <span class="preprocessor"></span>
<a name="l00320"></a>00320 <span class="preprocessor">#define svn_error_trace(expr)  svn_error_quick_wrap((expr), SVN_ERR__TRACED)</span>
<a name="l00321"></a>00321 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00322"></a><a class="code" href="group__svn__error__error__creation__destroy.html#gaebf3a4b9b88c5ac6f6eec7d9792a2288">00322</a> <span class="preprocessor"></span><span class="preprocessor">#define svn_error_trace(expr)  (expr)</span>
<a name="l00323"></a>00323 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00324"></a>00324 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00325"></a>00325 <span class="comment">/**</span>
<a name="l00326"></a>00326 <span class="comment"> * Returns an error chain that is based on @a err&#39;s error chain but</span>
<a name="l00327"></a>00327 <span class="comment"> * does not include any error tracing placeholders.  @a err is not</span>
<a name="l00328"></a>00328 <span class="comment"> * modified, except for any allocations using its pool.</span>
<a name="l00329"></a>00329 <span class="comment"> *</span>
<a name="l00330"></a>00330 <span class="comment"> * The returned error chain is allocated from @a err&#39;s pool and shares</span>
<a name="l00331"></a>00331 <span class="comment"> * its message and source filename character arrays.  The returned</span>
<a name="l00332"></a>00332 <span class="comment"> * error chain should *not* be cleared because it is not a fully</span>
<a name="l00333"></a>00333 <span class="comment"> * fledged error chain, only clearing @a err should be done to clear</span>
<a name="l00334"></a>00334 <span class="comment"> * the returned error chain.  If @a err is cleared, then the returned</span>
<a name="l00335"></a>00335 <span class="comment"> * error chain is unusable.</span>
<a name="l00336"></a>00336 <span class="comment"> *</span>
<a name="l00337"></a>00337 <span class="comment"> * @a err can be #SVN_NO_ERROR.  If @a err is not #SVN_NO_ERROR, then</span>
<a name="l00338"></a>00338 <span class="comment"> * the last link in the error chain must be a non-tracing error, i.e,</span>
<a name="l00339"></a>00339 <span class="comment"> * a real error.</span>
<a name="l00340"></a>00340 <span class="comment"> *</span>
<a name="l00341"></a>00341 <span class="comment"> * @since New in 1.7.</span>
<a name="l00342"></a>00342 <span class="comment"> */</span>
<a name="l00343"></a>00343 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *<a class="code" href="group__svn__error__error__creation__destroy.html#ga50fb6a28adf05e66b42993b2e89eb098" title="Returns an error chain that is based on err&#39;s error chain but does not include any error tracing plac...">svn_error_purge_tracing</a>(<a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *err);
<a name="l00344"></a>00344 
<a name="l00345"></a>00345 <span class="comment"></span>
<a name="l00346"></a>00346 <span class="comment">/** A statement macro, very similar to @c SVN_ERR.</span>
<a name="l00347"></a>00347 <span class="comment"> *</span>
<a name="l00348"></a>00348 <span class="comment"> * This macro will wrap the error with the specified text before</span>
<a name="l00349"></a>00349 <span class="comment"> * returning the error.</span>
<a name="l00350"></a>00350 <span class="comment"> */</span>
<a name="l00351"></a><a class="code" href="group__svn__error__error__creation__destroy.html#gab25a91cd83a69c02997d636778652924">00351</a> <span class="preprocessor">#define SVN_ERR_W(expr, wrap_msg)                           \</span>
<a name="l00352"></a>00352 <span class="preprocessor">  do {                                                      \</span>
<a name="l00353"></a>00353 <span class="preprocessor">    svn_error_t *svn_err__temp = (expr);                    \</span>
<a name="l00354"></a>00354 <span class="preprocessor">    if (svn_err__temp)                                      \</span>
<a name="l00355"></a>00355 <span class="preprocessor">      return svn_error_quick_wrap(svn_err__temp, wrap_msg); \</span>
<a name="l00356"></a>00356 <span class="preprocessor">  } while (0)</span>
<a name="l00357"></a>00357 <span class="preprocessor"></span>
<a name="l00358"></a>00358 <span class="comment"></span>
<a name="l00359"></a>00359 <span class="comment">/** A statement macro, similar to @c SVN_ERR, but returns an integer.</span>
<a name="l00360"></a>00360 <span class="comment"> *</span>
<a name="l00361"></a>00361 <span class="comment"> * Evaluate @a expr. If it yields an error, handle that error and</span>
<a name="l00362"></a>00362 <span class="comment"> * return @c EXIT_FAILURE.</span>
<a name="l00363"></a>00363 <span class="comment"> */</span>
<a name="l00364"></a><a class="code" href="group__svn__error__error__creation__destroy.html#gab5f98501379447f3b996418cec2a9e83">00364</a> <span class="preprocessor">#define SVN_INT_ERR(expr)                                        \</span>
<a name="l00365"></a>00365 <span class="preprocessor">  do {                                                           \</span>
<a name="l00366"></a>00366 <span class="preprocessor">    svn_error_t *svn_err__temp = (expr);                         \</span>
<a name="l00367"></a>00367 <span class="preprocessor">    if (svn_err__temp) {                                         \</span>
<a name="l00368"></a>00368 <span class="preprocessor">      svn_handle_error2(svn_err__temp, stderr, FALSE, &quot;svn: &quot;);  \</span>
<a name="l00369"></a>00369 <span class="preprocessor">      svn_error_clear(svn_err__temp);                            \</span>
<a name="l00370"></a>00370 <span class="preprocessor">      return EXIT_FAILURE; }                                     \</span>
<a name="l00371"></a>00371 <span class="preprocessor">  } while (0)</span>
<a name="l00372"></a>00372 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00373"></a>00373 <span class="comment">/** @} */</span>
<a name="l00374"></a>00374 
<a name="l00375"></a>00375 <span class="comment"></span>
<a name="l00376"></a>00376 <span class="comment">/** Error groups</span>
<a name="l00377"></a>00377 <span class="comment"> *</span>
<a name="l00378"></a>00378 <span class="comment"> * @defgroup svn_error_error_groups Error groups</span>
<a name="l00379"></a>00379 <span class="comment"> * @{</span>
<a name="l00380"></a>00380 <span class="comment"> */</span>
<a name="l00381"></a>00381 <span class="comment"></span>
<a name="l00382"></a>00382 <span class="comment">/**</span>
<a name="l00383"></a>00383 <span class="comment"> * Return TRUE if @a err is an error specifically related to locking a</span>
<a name="l00384"></a>00384 <span class="comment"> * path in the repository, FALSE otherwise.</span>
<a name="l00385"></a>00385 <span class="comment"> *</span>
<a name="l00386"></a>00386 <span class="comment"> * SVN_ERR_FS_OUT_OF_DATE and SVN_ERR_FS_NOT_FOUND are in here because it&#39;s a</span>
<a name="l00387"></a>00387 <span class="comment"> * non-fatal error that can be thrown when attempting to lock an item.</span>
<a name="l00388"></a>00388 <span class="comment"> *</span>
<a name="l00389"></a>00389 <span class="comment"> * @since New in 1.2.</span>
<a name="l00390"></a>00390 <span class="comment"> */</span>
<a name="l00391"></a><a class="code" href="group__svn__error__error__groups.html#ga8f0bdaccdc1f8c5cd93f11cddf25ccf9">00391</a> <span class="preprocessor">#define SVN_ERR_IS_LOCK_ERROR(err)                          \</span>
<a name="l00392"></a>00392 <span class="preprocessor">  (err-&gt;apr_err == SVN_ERR_FS_PATH_ALREADY_LOCKED ||        \</span>
<a name="l00393"></a>00393 <span class="preprocessor">   err-&gt;apr_err == SVN_ERR_FS_NOT_FOUND           ||        \</span>
<a name="l00394"></a>00394 <span class="preprocessor">   err-&gt;apr_err == SVN_ERR_FS_OUT_OF_DATE         ||        \</span>
<a name="l00395"></a>00395 <span class="preprocessor">   err-&gt;apr_err == SVN_ERR_FS_BAD_LOCK_TOKEN)</span>
<a name="l00396"></a>00396 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00397"></a>00397 <span class="comment">/**</span>
<a name="l00398"></a>00398 <span class="comment"> * Return TRUE if @a err is an error specifically related to unlocking</span>
<a name="l00399"></a>00399 <span class="comment"> * a path in the repository, FALSE otherwise.</span>
<a name="l00400"></a>00400 <span class="comment"> *</span>
<a name="l00401"></a>00401 <span class="comment"> * @since New in 1.2.</span>
<a name="l00402"></a>00402 <span class="comment"> */</span>
<a name="l00403"></a><a class="code" href="group__svn__error__error__groups.html#ga810964f4b0cb3615a4006d515e0b947f">00403</a> <span class="preprocessor">#define SVN_ERR_IS_UNLOCK_ERROR(err)                        \</span>
<a name="l00404"></a>00404 <span class="preprocessor">  (err-&gt;apr_err == SVN_ERR_FS_PATH_NOT_LOCKED ||            \</span>
<a name="l00405"></a>00405 <span class="preprocessor">   err-&gt;apr_err == SVN_ERR_FS_BAD_LOCK_TOKEN ||             \</span>
<a name="l00406"></a>00406 <span class="preprocessor">   err-&gt;apr_err == SVN_ERR_FS_LOCK_OWNER_MISMATCH ||        \</span>
<a name="l00407"></a>00407 <span class="preprocessor">   err-&gt;apr_err == SVN_ERR_FS_NO_SUCH_LOCK ||               \</span>
<a name="l00408"></a>00408 <span class="preprocessor">   err-&gt;apr_err == SVN_ERR_RA_NOT_LOCKED ||                 \</span>
<a name="l00409"></a>00409 <span class="preprocessor">   err-&gt;apr_err == SVN_ERR_FS_LOCK_EXPIRED)</span>
<a name="l00410"></a>00410 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00411"></a>00411 <span class="comment">/** Evaluates to @c TRUE iff @a apr_err (of type #apr_status_t) is in the given</span>
<a name="l00412"></a>00412 <span class="comment"> * @a category, which should be one of the @c SVN_ERR_*_CATEGORY_START</span>
<a name="l00413"></a>00413 <span class="comment"> * constants.</span>
<a name="l00414"></a>00414 <span class="comment"> *</span>
<a name="l00415"></a>00415 <span class="comment"> * @since New in 1.7.</span>
<a name="l00416"></a>00416 <span class="comment"> */</span>
<a name="l00417"></a><a class="code" href="group__svn__error__error__groups.html#ga763e51bf7f175978a7e5f8d38f731b75">00417</a> <span class="preprocessor">#define SVN_ERROR_IN_CATEGORY(apr_err, category)            \</span>
<a name="l00418"></a>00418 <span class="preprocessor">    ((category) == ((apr_err) / SVN_ERR_CATEGORY_SIZE) * SVN_ERR_CATEGORY_SIZE)</span>
<a name="l00419"></a>00419 <span class="preprocessor"></span>
<a name="l00420"></a>00420 <span class="comment"></span>
<a name="l00421"></a>00421 <span class="comment">/** @} */</span>
<a name="l00422"></a>00422 
<a name="l00423"></a>00423 <span class="comment"></span>
<a name="l00424"></a>00424 <span class="comment">/** Internal malfunctions and assertions</span>
<a name="l00425"></a>00425 <span class="comment"> *</span>
<a name="l00426"></a>00426 <span class="comment"> * @defgroup svn_error_malfunction_assertion Malfunctions and assertions</span>
<a name="l00427"></a>00427 <span class="comment"> * @{</span>
<a name="l00428"></a>00428 <span class="comment"> */</span>
<a name="l00429"></a>00429 <span class="comment"></span>
<a name="l00430"></a>00430 <span class="comment">/** Report that an internal malfunction has occurred, and possibly terminate</span>
<a name="l00431"></a>00431 <span class="comment"> * the program.</span>
<a name="l00432"></a>00432 <span class="comment"> *</span>
<a name="l00433"></a>00433 <span class="comment"> * Act as determined by the current &quot;malfunction handler&quot; which may have</span>
<a name="l00434"></a>00434 <span class="comment"> * been specified by a call to svn_error_set_malfunction_handler() or else</span>
<a name="l00435"></a>00435 <span class="comment"> * is the default handler as specified in that function&#39;s documentation. If</span>
<a name="l00436"></a>00436 <span class="comment"> * the malfunction handler returns, then cause the function using this macro</span>
<a name="l00437"></a>00437 <span class="comment"> * to return the error object that it generated.</span>
<a name="l00438"></a>00438 <span class="comment"> *</span>
<a name="l00439"></a>00439 <span class="comment"> * @note The intended use of this macro is where execution reaches a point</span>
<a name="l00440"></a>00440 <span class="comment"> * that cannot possibly be reached unless there is a bug in the program.</span>
<a name="l00441"></a>00441 <span class="comment"> *</span>
<a name="l00442"></a>00442 <span class="comment"> * @since New in 1.6.</span>
<a name="l00443"></a>00443 <span class="comment"> */</span>
<a name="l00444"></a><a class="code" href="group__svn__error__malfunction__assertion.html#ga959223b3e45ed38fde9b239a69f2a472">00444</a> <span class="preprocessor">#define SVN_ERR_MALFUNCTION()                                      \</span>
<a name="l00445"></a>00445 <span class="preprocessor">  do {                                                             \</span>
<a name="l00446"></a>00446 <span class="preprocessor">    return svn_error_trace(svn_error__malfunction(                 \</span>
<a name="l00447"></a>00447 <span class="preprocessor">                                 TRUE, __FILE__, __LINE__, NULL)); \</span>
<a name="l00448"></a>00448 <span class="preprocessor">  } while (0)</span>
<a name="l00449"></a>00449 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00450"></a>00450 <span class="comment">/** Similar to SVN_ERR_MALFUNCTION(), but without the option of returning</span>
<a name="l00451"></a>00451 <span class="comment"> * an error to the calling function.</span>
<a name="l00452"></a>00452 <span class="comment"> *</span>
<a name="l00453"></a>00453 <span class="comment"> * If possible you should use SVN_ERR_MALFUNCTION() instead.</span>
<a name="l00454"></a>00454 <span class="comment"> *</span>
<a name="l00455"></a>00455 <span class="comment"> * @since New in 1.6.</span>
<a name="l00456"></a>00456 <span class="comment"> */</span>
<a name="l00457"></a><a class="code" href="group__svn__error__malfunction__assertion.html#ga18c3e150ee0b87c4eeb61acc72203e51">00457</a> <span class="preprocessor">#define SVN_ERR_MALFUNCTION_NO_RETURN()                      \</span>
<a name="l00458"></a>00458 <span class="preprocessor">  do {                                                       \</span>
<a name="l00459"></a>00459 <span class="preprocessor">    svn_error__malfunction(FALSE, __FILE__, __LINE__, NULL); \</span>
<a name="l00460"></a>00460 <span class="preprocessor">    abort();                                                 \</span>
<a name="l00461"></a>00461 <span class="preprocessor">  } while (1)</span>
<a name="l00462"></a>00462 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00463"></a>00463 <span class="comment">/** Check that a condition is true: if not, report an error and possibly</span>
<a name="l00464"></a>00464 <span class="comment"> * terminate the program.</span>
<a name="l00465"></a>00465 <span class="comment"> *</span>
<a name="l00466"></a>00466 <span class="comment"> * If the Boolean expression @a expr is true, do nothing. Otherwise,</span>
<a name="l00467"></a>00467 <span class="comment"> * act as determined by the current &quot;malfunction handler&quot; which may have</span>
<a name="l00468"></a>00468 <span class="comment"> * been specified by a call to svn_error_set_malfunction_handler() or else</span>
<a name="l00469"></a>00469 <span class="comment"> * is the default handler as specified in that function&#39;s documentation. If</span>
<a name="l00470"></a>00470 <span class="comment"> * the malfunction handler returns, then cause the function using this macro</span>
<a name="l00471"></a>00471 <span class="comment"> * to return the error object that it generated.</span>
<a name="l00472"></a>00472 <span class="comment"> *</span>
<a name="l00473"></a>00473 <span class="comment"> * @note The intended use of this macro is to check a condition that cannot</span>
<a name="l00474"></a>00474 <span class="comment"> * possibly be false unless there is a bug in the program.</span>
<a name="l00475"></a>00475 <span class="comment"> *</span>
<a name="l00476"></a>00476 <span class="comment"> * @note The condition to be checked should not be computationally expensive</span>
<a name="l00477"></a>00477 <span class="comment"> * if it is reached often, as, unlike traditional &quot;assert&quot; statements, the</span>
<a name="l00478"></a>00478 <span class="comment"> * evaluation of this expression is not compiled out in release-mode builds.</span>
<a name="l00479"></a>00479 <span class="comment"> *</span>
<a name="l00480"></a>00480 <span class="comment"> * @since New in 1.6.</span>
<a name="l00481"></a>00481 <span class="comment"> */</span>
<a name="l00482"></a><a class="code" href="group__svn__error__malfunction__assertion.html#ga0262f0dfe6997e2f27b46bf1996d4565">00482</a> <span class="preprocessor">#define SVN_ERR_ASSERT(expr)                                            \</span>
<a name="l00483"></a>00483 <span class="preprocessor">  do {                                                                  \</span>
<a name="l00484"></a>00484 <span class="preprocessor">    if (!(expr))                                                        \</span>
<a name="l00485"></a>00485 <span class="preprocessor">      SVN_ERR(svn_error__malfunction(TRUE, __FILE__, __LINE__, #expr)); \</span>
<a name="l00486"></a>00486 <span class="preprocessor">  } while (0)</span>
<a name="l00487"></a>00487 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00488"></a>00488 <span class="comment">/** Similar to SVN_ERR_ASSERT(), but without the option of returning</span>
<a name="l00489"></a>00489 <span class="comment"> * an error to the calling function.</span>
<a name="l00490"></a>00490 <span class="comment"> *</span>
<a name="l00491"></a>00491 <span class="comment"> * If possible you should use SVN_ERR_ASSERT() instead.</span>
<a name="l00492"></a>00492 <span class="comment"> *</span>
<a name="l00493"></a>00493 <span class="comment"> * @since New in 1.6.</span>
<a name="l00494"></a>00494 <span class="comment"> */</span>
<a name="l00495"></a><a class="code" href="group__svn__error__malfunction__assertion.html#gaf558fc819c1d0c4029a1503b34cdd589">00495</a> <span class="preprocessor">#define SVN_ERR_ASSERT_NO_RETURN(expr)                          \</span>
<a name="l00496"></a>00496 <span class="preprocessor">  do {                                                          \</span>
<a name="l00497"></a>00497 <span class="preprocessor">    if (!(expr)) {                                              \</span>
<a name="l00498"></a>00498 <span class="preprocessor">      svn_error__malfunction(FALSE, __FILE__, __LINE__, #expr); \</span>
<a name="l00499"></a>00499 <span class="preprocessor">      abort();                                                  \</span>
<a name="l00500"></a>00500 <span class="preprocessor">    }                                                           \</span>
<a name="l00501"></a>00501 <span class="preprocessor">  } while (0)</span>
<a name="l00502"></a>00502 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00503"></a>00503 <span class="comment">/** Report a &quot;Not implemented&quot; malfunction.  Internal use only. */</span>
<a name="l00504"></a><a class="code" href="group__svn__error__malfunction__assertion.html#ga615c96fd3cbc339deeffbed9d3c00d5e">00504</a> <span class="preprocessor">#define SVN__NOT_IMPLEMENTED() \</span>
<a name="l00505"></a>00505 <span class="preprocessor">  return svn_error__malfunction(TRUE, __FILE__, __LINE__, &quot;Not implemented.&quot;)</span>
<a name="l00506"></a>00506 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00507"></a>00507 <span class="comment">/** A helper function for the macros that report malfunctions. Handle a</span>
<a name="l00508"></a>00508 <span class="comment"> * malfunction by calling the current &quot;malfunction handler&quot; which may have</span>
<a name="l00509"></a>00509 <span class="comment"> * been specified by a call to svn_error_set_malfunction_handler() or else</span>
<a name="l00510"></a>00510 <span class="comment"> * is the default handler as specified in that function&#39;s documentation.</span>
<a name="l00511"></a>00511 <span class="comment"> *</span>
<a name="l00512"></a>00512 <span class="comment"> * Pass all of the parameters to the handler. The error occurred in the</span>
<a name="l00513"></a>00513 <span class="comment"> * source file @a file at line @a line, and was an assertion failure of the</span>
<a name="l00514"></a>00514 <span class="comment"> * expression @a expr, or, if @a expr is null, an unconditional error.</span>
<a name="l00515"></a>00515 <span class="comment"> *</span>
<a name="l00516"></a>00516 <span class="comment"> * If @a can_return is true, the handler can return an error object</span>
<a name="l00517"></a>00517 <span class="comment"> * that is returned by the caller. If @a can_return is false the</span>
<a name="l00518"></a>00518 <span class="comment"> * method should never return. (The caller will call abort())</span>
<a name="l00519"></a>00519 <span class="comment"> *</span>
<a name="l00520"></a>00520 <span class="comment"> * @since New in 1.6.</span>
<a name="l00521"></a>00521 <span class="comment"> */</span>
<a name="l00522"></a>00522 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00523"></a>00523 <a class="code" href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2" title="A helper function for the macros that report malfunctions.">svn_error__malfunction</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> can_return,
<a name="l00524"></a>00524                        <span class="keyword">const</span> <span class="keywordtype">char</span> *file,
<a name="l00525"></a>00525                        <span class="keywordtype">int</span> line,
<a name="l00526"></a>00526                        <span class="keyword">const</span> <span class="keywordtype">char</span> *expr);
<a name="l00527"></a>00527 <span class="comment"></span>
<a name="l00528"></a>00528 <span class="comment">/** A type of function that handles an assertion failure or other internal</span>
<a name="l00529"></a>00529 <span class="comment"> * malfunction detected within the Subversion libraries.</span>
<a name="l00530"></a>00530 <span class="comment"> *</span>
<a name="l00531"></a>00531 <span class="comment"> * The error occurred in the source file @a file at line @a line, and was an</span>
<a name="l00532"></a>00532 <span class="comment"> * assertion failure of the expression @a expr, or, if @a expr is null, an</span>
<a name="l00533"></a>00533 <span class="comment"> * unconditional error.</span>
<a name="l00534"></a>00534 <span class="comment"> *</span>
<a name="l00535"></a>00535 <span class="comment"> * If @a can_return is false a function of this type must never return.</span>
<a name="l00536"></a>00536 <span class="comment"> *</span>
<a name="l00537"></a>00537 <span class="comment"> * If @a can_return is true a function of this type must do one of:</span>
<a name="l00538"></a>00538 <span class="comment"> *   - Return an error object describing the error, using an error code in</span>
<a name="l00539"></a>00539 <span class="comment"> *     the category SVN_ERR_MALFUNC_CATEGORY_START.</span>
<a name="l00540"></a>00540 <span class="comment"> *   - Never return.</span>
<a name="l00541"></a>00541 <span class="comment"> *</span>
<a name="l00542"></a>00542 <span class="comment"> * The function may alter its behaviour according to compile-time</span>
<a name="l00543"></a>00543 <span class="comment"> * and run-time and even interactive conditions.</span>
<a name="l00544"></a>00544 <span class="comment"> *</span>
<a name="l00545"></a>00545 <span class="comment"> * @see SVN_ERROR_IN_CATEGORY()</span>
<a name="l00546"></a>00546 <span class="comment"> *</span>
<a name="l00547"></a>00547 <span class="comment"> * @since New in 1.6.</span>
<a name="l00548"></a>00548 <span class="comment"> */</span>
<a name="l00549"></a>00549 <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_error_malfunction_handler_t)
<a name="l00550"></a><a class="code" href="group__svn__error__malfunction__assertion.html#ga8eb40e32bbe9f2f5ceb621611d7f9fd9">00550</a>   (<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> can_return, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line, <span class="keyword">const</span> <span class="keywordtype">char</span> *expr);
<a name="l00551"></a>00551 <span class="comment"></span>
<a name="l00552"></a>00552 <span class="comment">/** Cause subsequent malfunctions to be handled by @a func.</span>
<a name="l00553"></a>00553 <span class="comment"> * Return the handler that was previously in effect.</span>
<a name="l00554"></a>00554 <span class="comment"> *</span>
<a name="l00555"></a>00555 <span class="comment"> * @a func may not be null.</span>
<a name="l00556"></a>00556 <span class="comment"> *</span>
<a name="l00557"></a>00557 <span class="comment"> * @note The default handler is svn_error_abort_on_malfunction().</span>
<a name="l00558"></a>00558 <span class="comment"> *</span>
<a name="l00559"></a>00559 <span class="comment"> * @note This function must be called in a single-threaded context.</span>
<a name="l00560"></a>00560 <span class="comment"> *</span>
<a name="l00561"></a>00561 <span class="comment"> * @since New in 1.6.</span>
<a name="l00562"></a>00562 <span class="comment"> */</span>
<a name="l00563"></a>00563 <a class="code" href="group__svn__error__malfunction__assertion.html#ga8eb40e32bbe9f2f5ceb621611d7f9fd9" title="A type of function that handles an assertion failure or other internal malfunction detected within th...">svn_error_malfunction_handler_t</a>
<a name="l00564"></a>00564 <a class="code" href="group__svn__error__malfunction__assertion.html#ga399ab33aa7fcea5cc776a62b56b7ad06" title="Cause subsequent malfunctions to be handled by func.">svn_error_set_malfunction_handler</a>(<a class="code" href="group__svn__error__malfunction__assertion.html#ga8eb40e32bbe9f2f5ceb621611d7f9fd9" title="A type of function that handles an assertion failure or other internal malfunction detected within th...">svn_error_malfunction_handler_t</a> func);
<a name="l00565"></a>00565 <span class="comment"></span>
<a name="l00566"></a>00566 <span class="comment">/** Handle a malfunction by returning an error object that describes it.</span>
<a name="l00567"></a>00567 <span class="comment"> *</span>
<a name="l00568"></a>00568 <span class="comment"> * When @a can_return is false, abort()</span>
<a name="l00569"></a>00569 <span class="comment"> *</span>
<a name="l00570"></a>00570 <span class="comment"> * This function implements @c svn_error_malfunction_handler_t.</span>
<a name="l00571"></a>00571 <span class="comment"> *</span>
<a name="l00572"></a>00572 <span class="comment"> * @since New in 1.6.</span>
<a name="l00573"></a>00573 <span class="comment"> */</span>
<a name="l00574"></a>00574 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00575"></a>00575 <a class="code" href="group__svn__error__malfunction__assertion.html#ga3ad3793da54e30aa57e708d2f9e997d1" title="Handle a malfunction by returning an error object that describes it.">svn_error_raise_on_malfunction</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> can_return,
<a name="l00576"></a>00576                                <span class="keyword">const</span> <span class="keywordtype">char</span> *file,
<a name="l00577"></a>00577                                <span class="keywordtype">int</span> line,
<a name="l00578"></a>00578                                <span class="keyword">const</span> <span class="keywordtype">char</span> *expr);
<a name="l00579"></a>00579 <span class="comment"></span>
<a name="l00580"></a>00580 <span class="comment">/** Handle a malfunction by printing a message to stderr and aborting.</span>
<a name="l00581"></a>00581 <span class="comment"> *</span>
<a name="l00582"></a>00582 <span class="comment"> * This function implements @c svn_error_malfunction_handler_t.</span>
<a name="l00583"></a>00583 <span class="comment"> *</span>
<a name="l00584"></a>00584 <span class="comment"> * @since New in 1.6.</span>
<a name="l00585"></a>00585 <span class="comment"> */</span>
<a name="l00586"></a>00586 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00587"></a>00587 <a class="code" href="group__svn__error__malfunction__assertion.html#ga17fc1ce5905f53d7b1107e6678459294" title="Handle a malfunction by printing a message to stderr and aborting.">svn_error_abort_on_malfunction</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> can_return,
<a name="l00588"></a>00588                                <span class="keyword">const</span> <span class="keywordtype">char</span> *file,
<a name="l00589"></a>00589                                <span class="keywordtype">int</span> line,
<a name="l00590"></a>00590                                <span class="keyword">const</span> <span class="keywordtype">char</span> *expr);
<a name="l00591"></a>00591 <span class="comment"></span>
<a name="l00592"></a>00592 <span class="comment">/** @} */</span>
<a name="l00593"></a>00593 
<a name="l00594"></a>00594 
<a name="l00595"></a>00595 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00596"></a>00596 <span class="preprocessor"></span>}
<a name="l00597"></a>00597 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l00598"></a>00598 
<a name="l00599"></a>00599 <span class="preprocessor">#endif </span><span class="comment">/* SVN_ERROR_H */</span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Fri Dec 23 2011 09:20:36 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>
