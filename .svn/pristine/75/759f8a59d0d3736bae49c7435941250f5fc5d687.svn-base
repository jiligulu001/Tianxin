<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Subversion: svn_ra.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">svn_ra.h File Reference</div>  </div>
</div>
<div class="contents">

<p>Repository Access.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &lt;apr.h&gt;</code><br/>
<code>#include &lt;apr_pools.h&gt;</code><br/>
<code>#include &lt;apr_hash.h&gt;</code><br/>
<code>#include &lt;apr_tables.h&gt;</code><br/>
<code>#include &lt;apr_time.h&gt;</code><br/>
<code>#include &lt;apr_file_io.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="svn__types_8h_source.html">svn_types.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="svn__string_8h_source.html">svn_string.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="svn__delta_8h_source.html">svn_delta.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="svn__auth_8h_source.html">svn_auth.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="svn__mergeinfo_8h_source.html">svn_mergeinfo.h</a>&quot;</code><br/>
</div>
<p><a href="svn__ra_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The update Reporter.  <a href="structsvn__ra__reporter3__t.html#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <code><a class="el" href="structsvn__ra__reporter3__t.html" title="The update Reporter.">svn_ra_reporter3_t</a></code>, but without support for depths.  <a href="structsvn__ra__reporter2__t.html#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__ra__reporter__t.html">svn_ra_reporter_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <code><a class="el" href="structsvn__ra__reporter2__t.html" title="Similar to svn_ra_reporter3_t, but without support for depths.">svn_ra_reporter2_t</a></code>, but without support for lock tokens.  <a href="structsvn__ra__reporter__t.html#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__ra__callbacks2__t.html">svn_ra_callbacks2_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A collection of callbacks implemented by libsvn_client which allows an RA layer to "pull" information from the client application, or possibly store information.  <a href="structsvn__ra__callbacks2__t.html#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__ra__callbacks__t.html">svn_ra_callbacks_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="structsvn__ra__callbacks2__t.html" title="A collection of callbacks implemented by libsvn_client which allows an RA layer to &quot;pull&quot; information...">svn_ra_callbacks2_t</a>, except that the progress notification function and baton is missing.  <a href="structsvn__ra__callbacks__t.html#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__ra__plugin__t.html">svn_ra_plugin_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Using this callback struct is similar to calling the newer public interface that is based on <code>svn_ra_session_t</code>.  <a href="structsvn__ra__plugin__t.html#details">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__Capabilities.html#ga8a6237bec371c11fc1a589b746decfb9">SVN_RA_CAPABILITY_DEPTH</a>&#160;&#160;&#160;&quot;depth&quot;</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The capability of understanding <code>svn_depth_t</code> (e.g., the server understands what the client means when the client describes the depth of a working copy to the server.)  <a href="group__Capabilities.html#ga8a6237bec371c11fc1a589b746decfb9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__Capabilities.html#gafa79cc5ee002d74e7c34171add51cef1">SVN_RA_CAPABILITY_MERGEINFO</a>&#160;&#160;&#160;&quot;mergeinfo&quot;</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The capability of doing the right thing with merge-tracking information.  <a href="group__Capabilities.html#gafa79cc5ee002d74e7c34171add51cef1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__Capabilities.html#ga3a07f7b8d6c72b7799aa5b3fcb6e33c5">SVN_RA_CAPABILITY_LOG_REVPROPS</a>&#160;&#160;&#160;&quot;log-revprops&quot;</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The capability of retrieving arbitrary revprops in svn_ra_get_log2.  <a href="group__Capabilities.html#ga3a07f7b8d6c72b7799aa5b3fcb6e33c5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__Capabilities.html#gac3126a31f6560717fdadaa8e2bb95625">SVN_RA_CAPABILITY_PARTIAL_REPLAY</a>&#160;&#160;&#160;&quot;partial-replay&quot;</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The capability of replaying a directory in the repository (partial replay).  <a href="group__Capabilities.html#gac3126a31f6560717fdadaa8e2bb95625"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__Capabilities.html#ga49fbe73c1d699d5425ed902d95bc351c">SVN_RA_CAPABILITY_COMMIT_REVPROPS</a>&#160;&#160;&#160;&quot;commit-revprops&quot;</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The capability of including revision properties in a commit.  <a href="group__Capabilities.html#ga49fbe73c1d699d5425ed902d95bc351c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__Capabilities.html#gaead8141f54c6a645fc4f1303071e3ac3">SVN_RA_CAPABILITY_ATOMIC_REVPROPS</a>&#160;&#160;&#160;&quot;atomic-revprops&quot;</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The capability of specifying (and atomically verifying) expected preexisting values when modifying revprops.  <a href="group__Capabilities.html#gaead8141f54c6a645fc4f1303071e3ac3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a8b30ced73cbe13f848ab443b522efa6a">SVN_RA_ABI_VERSION</a>&#160;&#160;&#160;2</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The current ABI (Application Binary Interface) version for the RA plugin model.  <a href="#a8b30ced73cbe13f848ab443b522efa6a"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a15b33a22fe98ed184398f19c849db763">svn_ra_get_wc_prop_func_t</a> )(void *baton, const char *path, const char *name, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> **value, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a function type which allows the RA layer to fetch working copy (WC) properties.  <a href="#a15b33a22fe98ed184398f19c849db763"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#afcc7f90103b9f382aac31013ff8ab15b">svn_ra_set_wc_prop_func_t</a> )(void *baton, const char *path, const char *name, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *value, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a function type which allows the RA layer to store new working copy properties during update-like operations.  <a href="#afcc7f90103b9f382aac31013ff8ab15b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a35cbc06754d5250e7ae63c33c833fb5a">svn_ra_push_wc_prop_func_t</a> )(void *baton, const char *path, const char *name, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *value, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a function type which allows the RA layer to store new working copy properties as part of a commit.  <a href="#a35cbc06754d5250e7ae63c33c833fb5a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#ad75aea6441172c03eabb6e414cd9806a">svn_ra_invalidate_wc_props_func_t</a> )(void *baton, const char *path, const char *name, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a function type which allows the RA layer to invalidate (i.e., remove) wcprops recursively.  <a href="#ad75aea6441172c03eabb6e414cd9806a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a18b5c7dfe3f6b5da0a5a2932edc5068f">svn_ra_get_latest_revnum_func_t</a> )(void *session_baton, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *latest_revnum)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A function type for retrieving the youngest revision from a repos.  <a href="#a18b5c7dfe3f6b5da0a5a2932edc5068f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a4129e53745805b6c0427e5e4209ffc35">svn_ra_get_client_string_func_t</a> )(void *baton, const char **name, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A function type which allows the RA layer to ask about any customizations to the client name string.  <a href="#a4129e53745805b6c0427e5e4209ffc35"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a2e7db10113b58c685fd2f77f612a953a">svn_ra_file_rev_handler_t</a> )(void *baton, const char *path, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> rev, apr_hash_t *rev_props, <a class="el" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219">svn_txdelta_window_handler_t</a> *delta_handler, void **delta_baton, apr_array_header_t *prop_diffs, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A callback function type for use in <code>get_file_revs</code>.  <a href="#a2e7db10113b58c685fd2f77f612a953a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a129ad53bc913318ef95c38dea5f740d8">svn_ra_lock_callback_t</a> )(void *baton, const char *path, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> do_lock, const <a class="el" href="structsvn__lock__t.html">svn_lock_t</a> *lock, <a class="el" href="structsvn__error__t.html">svn_error_t</a> *ra_err, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Callback function type for locking and unlocking actions.  <a href="#a129ad53bc913318ef95c38dea5f740d8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a44f6e7f50bf0acdee8ee9bdf1ce984c3">svn_ra_progress_notify_func_t</a> )(apr_off_t progress, apr_off_t total, void *baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Callback function type for progress notification.  <a href="#a44f6e7f50bf0acdee8ee9bdf1ce984c3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#aa55458ae9cf8156cbe9648c1151e685e">svn_ra_replay_revstart_callback_t</a> )(<a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, void *replay_baton, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> **editor, void **edit_baton, apr_hash_t *rev_props, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Callback function type for replay_range actions.  <a href="#aa55458ae9cf8156cbe9648c1151e685e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#aa815d4bdd7522061e89474fcbded072e">svn_ra_replay_revfinish_callback_t</a> )(<a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, void *replay_baton, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *editor, void *edit_baton, apr_hash_t *rev_props, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Callback function type for replay_range actions.  <a href="#aa815d4bdd7522061e89474fcbded072e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a9dd4c08bd97373d89cc24fbbd4ee21a3">svn_ra_reporter3_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The update Reporter.  <a href="#a9dd4c08bd97373d89cc24fbbd4ee21a3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#aaa1178090fba5cfd77e8d72b98c44c61">svn_ra_reporter2_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <code><a class="el" href="structsvn__ra__reporter3__t.html" title="The update Reporter.">svn_ra_reporter3_t</a></code>, but without support for depths.  <a href="#aaa1178090fba5cfd77e8d72b98c44c61"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structsvn__ra__reporter__t.html">svn_ra_reporter_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a4a0b95fef232c9b745a399f68d36b32b">svn_ra_reporter_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <code><a class="el" href="structsvn__ra__reporter2__t.html" title="Similar to svn_ra_reporter3_t, but without support for depths.">svn_ra_reporter2_t</a></code>, but without support for lock tokens.  <a href="#a4a0b95fef232c9b745a399f68d36b32b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structsvn__ra__callbacks2__t.html">svn_ra_callbacks2_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a0bb74293a6046c3ec3753b29656bf569">svn_ra_callbacks2_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A collection of callbacks implemented by libsvn_client which allows an RA layer to "pull" information from the client application, or possibly store information.  <a href="#a0bb74293a6046c3ec3753b29656bf569"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structsvn__ra__callbacks__t.html">svn_ra_callbacks_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a948e332ee6bde2879467b486e5d43e3f">svn_ra_callbacks_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="structsvn__ra__callbacks2__t.html" title="A collection of callbacks implemented by libsvn_client which allows an RA layer to &quot;pull&quot; information...">svn_ra_callbacks2_t</a>, except that the progress notification function and baton is missing.  <a href="#a948e332ee6bde2879467b486e5d43e3f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A repository access session.  <a href="#ac3a7f3c8f2562ed346c2431c4c94f507"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structsvn__ra__plugin__t.html">svn_ra_plugin_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a4eb0a5e00f2896a41ac6bfb48d9174d7">svn_ra_plugin_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Using this callback struct is similar to calling the newer public interface that is based on <code>svn_ra_session_t</code>.  <a href="#a4eb0a5e00f2896a41ac6bfb48d9174d7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#aae8924114d2893a2921afa53b59e533f">svn_ra_init_func_t</a> )(int abi_version, apr_pool_t *pool, apr_hash_t *hash)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">All "ra_FOO" implementations *must* export a function named svn_ra_FOO_init() of type <code>svn_ra_init_func_t</code>.  <a href="#aae8924114d2893a2921afa53b59e533f"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structsvn__version__t.html">svn_version_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#affddbb41c21901436e172f13db1c3715">svn_ra_version</a> (void)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get libsvn_ra version information.  <a href="#affddbb41c21901436e172f13db1c3715"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a79f2e38e49200c1e710c6c86300578f6">svn_ra_initialize</a> (apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the RA library.  <a href="#a79f2e38e49200c1e710c6c86300578f6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#af7b12897be1a0e7d380a114b954799cf">svn_ra_create_callbacks</a> (<a class="el" href="structsvn__ra__callbacks2__t.html">svn_ra_callbacks2_t</a> **callbacks, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize a callback structure.  <a href="#af7b12897be1a0e7d380a114b954799cf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a96145f7696ecf080a6d4a0a67d9d7127">svn_ra_open4</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> **session_p, const char **corrected_url, const char *repos_URL, const char *uuid, const <a class="el" href="structsvn__ra__callbacks2__t.html">svn_ra_callbacks2_t</a> *callbacks, void *callback_baton, apr_hash_t *config, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Open a repository access session to the repository at <em>repos_URL</em>, or inform the caller regarding a correct URL by which to access that repository.  <a href="#a96145f7696ecf080a6d4a0a67d9d7127"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a2543ab564e75c55f801e6ad6dfbf1f7d">svn_ra_open3</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> **session_p, const char *repos_URL, const char *uuid, const <a class="el" href="structsvn__ra__callbacks2__t.html">svn_ra_callbacks2_t</a> *callbacks, void *callback_baton, apr_hash_t *config, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__ra_8h.html#a96145f7696ecf080a6d4a0a67d9d7127" title="Open a repository access session to the repository at repos_URL, or inform the caller regarding a cor...">svn_ra_open4()</a>, but with <em>corrected_url</em> always passed as <code>NULL</code>.  <a href="#a2543ab564e75c55f801e6ad6dfbf1f7d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#aa2d9f2c59e0079c00bd4745082e838ef">svn_ra_open2</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> **session_p, const char *repos_URL, const <a class="el" href="structsvn__ra__callbacks2__t.html">svn_ra_callbacks2_t</a> *callbacks, void *callback_baton, apr_hash_t *config, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__ra_8h.html#a2543ab564e75c55f801e6ad6dfbf1f7d" title="Similar to svn_ra_open4(), but with corrected_url always passed as NULL.">svn_ra_open3()</a>, but with <em>uuid</em> set to <code>NULL</code>.  <a href="#aa2d9f2c59e0079c00bd4745082e838ef"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a9ca356e05ca9ce35d672b62b5fd2e94c">svn_ra_open</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> **session_p, const char *repos_URL, const <a class="el" href="structsvn__ra__callbacks__t.html">svn_ra_callbacks_t</a> *callbacks, void *callback_baton, apr_hash_t *config, apr_pool_t *pool)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a7e9aa7286274bda5cf260c7fa694c7a5">svn_ra_reparent</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *ra_session, const char *url, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the root URL of an open <em>ra_session</em> to point to a new path in the same repository.  <a href="#a7e9aa7286274bda5cf260c7fa694c7a5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a71fad1aa0f6612260430f468846de8fd">svn_ra_get_session_url</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *ra_session, const char **url, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*url</em> to the repository URL to which <em>ra_session</em> was opened or most recently reparented.  <a href="#a71fad1aa0f6612260430f468846de8fd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a071b1b1fbb6791e65319a5ac690d3712">svn_ra_get_path_relative_to_session</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *ra_session, const char **rel_path, const char *url, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert <em>url</em> into a path relative to the URL at which <em>ra_session</em> is parented, setting <em>*rel_path</em> to that value.  <a href="#a071b1b1fbb6791e65319a5ac690d3712"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a60d73140b421a2bb5f5860108cecffd5">svn_ra_get_path_relative_to_root</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *ra_session, const char **rel_path, const char *url, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert <em>url</em> into a path relative to the repository root URL of the repository with which <em>ra_session</em> is associated, setting <em>*rel_path</em> to that value.  <a href="#a60d73140b421a2bb5f5860108cecffd5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a483f8d91fb6f312d96659180fc4b5b71">svn_ra_get_latest_revnum</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *latest_revnum, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the latest revision number from the repository of <em>session</em>.  <a href="#a483f8d91fb6f312d96659180fc4b5b71"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a2938be25ce7c3748d6b481c087c9a773">svn_ra_get_dated_revision</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *revision, apr_time_t tm, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the latest revision number at time <em>tm</em> in the repository of <em>session</em>.  <a href="#a2938be25ce7c3748d6b481c087c9a773"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#ab8d3b20527a836b2b1bca65ba797f137">svn_ra_change_rev_prop2</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> rev, const char *name, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *const *old_value_p, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *value, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the property <em>name</em> to <em>value</em> on revision <em>rev</em> in the repository of <em>session</em>.  <a href="#ab8d3b20527a836b2b1bca65ba797f137"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a302cc325129b7ee4d703eb40c8f6479d">svn_ra_change_rev_prop</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> rev, const char *name, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *value, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__ra_8h.html#ab8d3b20527a836b2b1bca65ba797f137" title="Set the property name to value on revision rev in the repository of session.">svn_ra_change_rev_prop2()</a>, but with <em>old_value_p</em> set to <code>NULL</code>.  <a href="#a302cc325129b7ee4d703eb40c8f6479d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a68debc38add97c9bd897278b9e4cc018">svn_ra_rev_proplist</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> rev, apr_hash_t **props, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*props</em> to the list of unversioned properties attached to revision <em>rev</em> in the repository of <em>session</em>.  <a href="#a68debc38add97c9bd897278b9e4cc018"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a6a19b601d84c1507a95f301f63b7fd25">svn_ra_rev_prop</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> rev, const char *name, <a class="el" href="structsvn__string__t.html">svn_string_t</a> **value, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*value</em> to the value of unversioned property <em>name</em> attached to revision <em>rev</em> in the repository of <em>session</em>.  <a href="#a6a19b601d84c1507a95f301f63b7fd25"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a5b0aff2522a3008fba26af0da66d3de9">svn_ra_get_commit_editor3</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> **editor, void **edit_baton, apr_hash_t *revprop_table, <a class="el" href="svn__types_8h.html#a5aca95325ba984f70a316d7d9966e1df">svn_commit_callback2_t</a> callback, void *callback_baton, apr_hash_t *lock_tokens, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> keep_locks, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*editor</em> and <em>*edit_baton</em> to an editor for committing changes to the repository of <em>session</em>, setting the revision properties from <em>revprop_table</em>.  <a href="#a5b0aff2522a3008fba26af0da66d3de9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a6b06410f67faedce2d58a0db7383f2b8">svn_ra_get_commit_editor2</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> **editor, void **edit_baton, const char *log_msg, <a class="el" href="svn__types_8h.html#a5aca95325ba984f70a316d7d9966e1df">svn_commit_callback2_t</a> callback, void *callback_baton, apr_hash_t *lock_tokens, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> keep_locks, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="svn__ra_8h.html#a5b0aff2522a3008fba26af0da66d3de9" title="Set *editor and *edit_baton to an editor for committing changes to the repository of session...">svn_ra_get_commit_editor3()</a>, but with <code>revprop_table</code> set to a hash containing the <code>SVN_PROP_REVISION_LOG</code> property set to the value of <em>log_msg</em>.  <a href="#a6b06410f67faedce2d58a0db7383f2b8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a03d9f63044f94d4defbf79246af806b4">svn_ra_get_commit_editor</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> **editor, void **edit_baton, const char *log_msg, <a class="el" href="svn__types_8h.html#abc95cfed422bd097099537e4bde98d6d">svn_commit_callback_t</a> callback, void *callback_baton, apr_hash_t *lock_tokens, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> keep_locks, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="svn__ra_8h.html#a6b06410f67faedce2d58a0db7383f2b8" title="Same as svn_ra_get_commit_editor3(), but with revprop_table set to a hash containing the SVN_PROP_REV...">svn_ra_get_commit_editor2()</a>, but uses <code>svn_commit_callback_t</code>.  <a href="#a03d9f63044f94d4defbf79246af806b4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a74f0cb209ce1bc2a4813b5572ad98582">svn_ra_get_file</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const char *path, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, <a class="el" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af">svn_stream_t</a> *stream, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *fetched_rev, apr_hash_t **props, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Fetch the contents and properties of file <em>path</em> at <em>revision</em>.  <a href="#a74f0cb209ce1bc2a4813b5572ad98582"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#ac1fb454bedcb76ac56ce74606b77c53a">svn_ra_get_dir2</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, apr_hash_t **dirents, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *fetched_rev, apr_hash_t **props, const char *path, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, apr_uint32_t dirent_fields, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">If <em>dirents</em> is non <code>NULL</code>, set <em>*dirents</em> to contain all the entries of directory <em>path</em> at <em>revision</em>.  <a href="#ac1fb454bedcb76ac56ce74606b77c53a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a7da17be4ef997b8363d2c2aba6de4bc6">svn_ra_get_dir</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const char *path, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, apr_hash_t **dirents, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *fetched_rev, apr_hash_t **props, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <code>svn_ra_get_dir2</code>, but with <code>SVN_DIRENT_ALL</code> for the <em>dirent_fields</em> parameter.  <a href="#a7da17be4ef997b8363d2c2aba6de4bc6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a5fed0d7f4e7c3129788b4459afe9867d">svn_ra_get_mergeinfo</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, svn_mergeinfo_catalog_t *catalog, const apr_array_header_t *paths, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, <a class="el" href="svn__mergeinfo_8h.html#acd81e9d0f5bcc4eec4df7b8a140f435c">svn_mergeinfo_inheritance_t</a> inherit, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> include_descendants, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*catalog</em> to a mergeinfo catalog for the paths in <em>paths</em>.  <a href="#a5fed0d7f4e7c3129788b4459afe9867d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a72c4b3e8552a3cb85994d76d646ff6b0">svn_ra_do_update2</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a> **reporter, void **report_baton, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision_to_update_to, const char *update_target, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> send_copyfrom_args, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *update_editor, void *update_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Ask the RA layer to update a working copy.  <a href="#a72c4b3e8552a3cb85994d76d646ff6b0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#aa941ae82dab9dda11d546208b9e19c58">svn_ra_do_update</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const <a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a> **reporter, void **report_baton, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision_to_update_to, const char *update_target, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *update_editor, void *update_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__ra_8h.html#a72c4b3e8552a3cb85994d76d646ff6b0" title="Ask the RA layer to update a working copy.">svn_ra_do_update2()</a>, but taking <code><a class="el" href="structsvn__ra__reporter2__t.html" title="Similar to svn_ra_reporter3_t, but without support for depths.">svn_ra_reporter2_t</a></code> instead of <code><a class="el" href="structsvn__ra__reporter3__t.html" title="The update Reporter.">svn_ra_reporter3_t</a></code>; if <em>recurse</em> is true, pass <code>svn_depth_infinity</code> for <em>depth</em>, else pass <code>svn_depth_files</code>; and with <em>send_copyfrom_args</em> always false.  <a href="#aa941ae82dab9dda11d546208b9e19c58"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a9e5b7de1fc9cad57874b3a30f4068c0b">svn_ra_do_switch2</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a> **reporter, void **report_baton, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision_to_switch_to, const char *switch_target, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, const char *switch_url, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *switch_editor, void *switch_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Ask the RA layer to 'switch' a working copy to a new <em>switch_url</em>; it's another form of <a class="el" href="svn__ra_8h.html#aa941ae82dab9dda11d546208b9e19c58" title="Similar to svn_ra_do_update2(), but taking svn_ra_reporter2_t instead of svn_ra_reporter3_t; if recur...">svn_ra_do_update()</a>.  <a href="#a9e5b7de1fc9cad57874b3a30f4068c0b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#ab473c714e0b782e1d589b0835ff8dc4a">svn_ra_do_switch</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const <a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a> **reporter, void **report_baton, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision_to_switch_to, const char *switch_target, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, const char *switch_url, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *switch_editor, void *switch_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__ra_8h.html#a9e5b7de1fc9cad57874b3a30f4068c0b" title="Ask the RA layer to &#39;switch&#39; a working copy to a new switch_url; it&#39;s another form of svn_ra_do_updat...">svn_ra_do_switch2()</a>, but taking <code><a class="el" href="structsvn__ra__reporter2__t.html" title="Similar to svn_ra_reporter3_t, but without support for depths.">svn_ra_reporter2_t</a></code> instead of <code><a class="el" href="structsvn__ra__reporter3__t.html" title="The update Reporter.">svn_ra_reporter3_t</a></code>, and therefore only able to report <code>svn_depth_infinity</code> for depths.  <a href="#ab473c714e0b782e1d589b0835ff8dc4a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#aab22b961b17ac2e842a2d737ad09b066">svn_ra_do_status2</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a> **reporter, void **report_baton, const char *status_target, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *status_editor, void *status_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Ask the RA layer to describe the status of a working copy with respect to <em>revision</em> of the repository (or HEAD, if <em>revision</em> is invalid).  <a href="#aab22b961b17ac2e842a2d737ad09b066"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a17e36dc753c7c2e6f806b22867db2eea">svn_ra_do_status</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const <a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a> **reporter, void **report_baton, const char *status_target, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *status_editor, void *status_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__ra_8h.html#aab22b961b17ac2e842a2d737ad09b066" title="Ask the RA layer to describe the status of a working copy with respect to revision of the repository ...">svn_ra_do_status2()</a>, but taking <code><a class="el" href="structsvn__ra__reporter2__t.html" title="Similar to svn_ra_reporter3_t, but without support for depths.">svn_ra_reporter2_t</a></code> instead of <code><a class="el" href="structsvn__ra__reporter3__t.html" title="The update Reporter.">svn_ra_reporter3_t</a></code>, and therefore only able to report <code>svn_depth_infinity</code> for depths.  <a href="#a17e36dc753c7c2e6f806b22867db2eea"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a28f808ad78e04eaf2cabe76e67c2a0fb">svn_ra_do_diff3</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a> **reporter, void **report_baton, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, const char *diff_target, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> ignore_ancestry, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> text_deltas, const char *versus_url, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *diff_editor, void *diff_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Ask the RA layer to 'diff' a working copy against <em>versus_url</em>; it's another form of <a class="el" href="svn__ra_8h.html#a72c4b3e8552a3cb85994d76d646ff6b0" title="Ask the RA layer to update a working copy.">svn_ra_do_update2()</a>.  <a href="#a28f808ad78e04eaf2cabe76e67c2a0fb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a34b8009fc0599404392716d8bee72dc2">svn_ra_do_diff2</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const <a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a> **reporter, void **report_baton, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, const char *diff_target, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> ignore_ancestry, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> text_deltas, const char *versus_url, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *diff_editor, void *diff_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__ra_8h.html#a28f808ad78e04eaf2cabe76e67c2a0fb" title="Ask the RA layer to &#39;diff&#39; a working copy against versus_url; it&#39;s another form of svn_ra_do_update2(...">svn_ra_do_diff3()</a>, but taking <code><a class="el" href="structsvn__ra__reporter2__t.html" title="Similar to svn_ra_reporter3_t, but without support for depths.">svn_ra_reporter2_t</a></code> instead of <code><a class="el" href="structsvn__ra__reporter3__t.html" title="The update Reporter.">svn_ra_reporter3_t</a></code>, and therefore only able to report <code>svn_depth_infinity</code> for depths.  <a href="#a34b8009fc0599404392716d8bee72dc2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a2d2c514752466c5092e26ba4fdc51ae8">svn_ra_do_diff</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const <a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a> **reporter, void **report_baton, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, const char *diff_target, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> ignore_ancestry, const char *versus_url, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *diff_editor, void *diff_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__ra_8h.html#a34b8009fc0599404392716d8bee72dc2" title="Similar to svn_ra_do_diff3(), but taking svn_ra_reporter2_t instead of svn_ra_reporter3_t, and therefore only able to report svn_depth_infinity for depths.">svn_ra_do_diff2()</a>, but with <em>text_deltas</em> set to <code>TRUE</code>.  <a href="#a2d2c514752466c5092e26ba4fdc51ae8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a366d8ab12ae02fcade47bcbda7078f0a">svn_ra_get_log2</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const apr_array_header_t *paths, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> start, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> end, int limit, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> discover_changed_paths, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> strict_node_history, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> include_merged_revisions, const apr_array_header_t *revprops, <a class="el" href="svn__types_8h.html#afb30054d6301afbcd8b00d8dc11d7ddb">svn_log_entry_receiver_t</a> receiver, void *receiver_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Invoke <em>receiver</em> with <em>receiver_baton</em> on each log message from <em>start</em> to <em>end</em>.  <a href="#a366d8ab12ae02fcade47bcbda7078f0a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a7d484515cd6a1abbae0b888a91de5074">svn_ra_get_log</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const apr_array_header_t *paths, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> start, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> end, int limit, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> discover_changed_paths, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> strict_node_history, <a class="el" href="svn__types_8h.html#a6aa9147b67a7778294a52399de5c0b33">svn_log_message_receiver_t</a> receiver, void *receiver_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__ra_8h.html#a366d8ab12ae02fcade47bcbda7078f0a" title="Invoke receiver with receiver_baton on each log message from start to end.">svn_ra_get_log2()</a>, but uses <code>svn_log_message_receiver_t</code> instead of <code>svn_log_entry_receiver_t</code>.  <a href="#a7d484515cd6a1abbae0b888a91de5074"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#ac648f6873d7020414527cc5aa350fcc1">svn_ra_check_path</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const char *path, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, <a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a">svn_node_kind_t</a> *kind, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*kind</em> to the node kind associated with <em>path</em> at <em>revision</em>.  <a href="#ac648f6873d7020414527cc5aa350fcc1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#abfe91a8afdd4cde0b12688dc588b8ebd">svn_ra_stat</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const char *path, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, <a class="el" href="structsvn__dirent__t.html">svn_dirent_t</a> **dirent, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*dirent</em> to an <code><a class="el" href="structsvn__dirent__t.html" title="A general subversion directory entry.">svn_dirent_t</a></code> associated with <em>path</em> at <em>revision</em>.  <a href="#abfe91a8afdd4cde0b12688dc588b8ebd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a54eb10c177f8a634d30569e75e665f6c">svn_ra_get_uuid2</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const char **uuid, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*uuid</em> to the repository's UUID, allocated in <em>pool</em>.  <a href="#a54eb10c177f8a634d30569e75e665f6c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a1b9e28e42765b63d24ae93f83272e1b9">svn_ra_get_uuid</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const char **uuid, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__ra_8h.html#a54eb10c177f8a634d30569e75e665f6c" title="Set *uuid to the repository&#39;s UUID, allocated in pool.">svn_ra_get_uuid2()</a>, but returns the value allocated in <em>session's</em> pool.  <a href="#a1b9e28e42765b63d24ae93f83272e1b9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a3532a49244b7e7057471cd0bb221624b">svn_ra_get_repos_root2</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const char **url, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*url</em> to the repository's root URL, allocated in <em>pool</em>.  <a href="#a3532a49244b7e7057471cd0bb221624b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#af9ede44af4d4be1f8a52ed4a56c26495">svn_ra_get_repos_root</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const char **url, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__ra_8h.html#a3532a49244b7e7057471cd0bb221624b" title="Set *url to the repository&#39;s root URL, allocated in pool.">svn_ra_get_repos_root2()</a>, but returns the value allocated in <em>session's</em> pool.  <a href="#af9ede44af4d4be1f8a52ed4a56c26495"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a4cfbcda21199a7debf645d2faad89e68">svn_ra_get_locations</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, apr_hash_t **locations, const char *path, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> peg_revision, const apr_array_header_t *location_revisions, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*locations</em> to the locations (at the repository revisions <em>location_revisions</em>) of the file identified by <em>path</em> in <em>peg_revision</em>.  <a href="#a4cfbcda21199a7debf645d2faad89e68"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a7c1fb82956eb3a3703022de10344acd1">svn_ra_get_location_segments</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const char *path, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> peg_revision, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> start_rev, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> end_rev, <a class="el" href="group__node__location__seg__reporting.html#gacd495df85498f9d4aedf4f2c26d5b46d">svn_location_segment_receiver_t</a> receiver, void *receiver_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Call <em>receiver</em> (with <em>receiver_baton</em>) for each segment in the location history of <em>path</em> in <em>peg_revision</em>, working backwards in time from <em>start_rev</em> to <em>end_rev</em>.  <a href="#a7c1fb82956eb3a3703022de10344acd1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#aa41da79d2c0faa074122e0ff00c0abbb">svn_ra_get_file_revs2</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const char *path, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> start, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> end, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> include_merged_revisions, <a class="el" href="group__delta__support.html#ga31e5b4fa524d2ee126ca8f7e7b49eece">svn_file_rev_handler_t</a> handler, void *handler_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve a subset of the interesting revisions of a file <em>path</em> as seen in revision <em>end</em> (see <a class="el" href="group__fs__handling.html#ga58dd5d7dc74bef946a4dc1129c342038" title="Set *prev_history_p to an opaque node history object which represents the previous (or &quot;next oldest&quot;)...">svn_fs_history_prev()</a> for a definition of "interesting revisions").  <a href="#aa41da79d2c0faa074122e0ff00c0abbb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#af06b70c8a7099a521a5dfbab0392c13f">svn_ra_get_file_revs</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const char *path, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> start, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> end, <a class="el" href="svn__ra_8h.html#a2e7db10113b58c685fd2f77f612a953a">svn_ra_file_rev_handler_t</a> handler, void *handler_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__ra_8h.html#aa41da79d2c0faa074122e0ff00c0abbb" title="Retrieve a subset of the interesting revisions of a file path as seen in revision end (see svn_fs_his...">svn_ra_get_file_revs2()</a>, but with <em>include_merged_revisions</em> set to FALSE.  <a href="#af06b70c8a7099a521a5dfbab0392c13f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a2b4233224aec6229944988d1e2d40ee2">svn_ra_lock</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, apr_hash_t *path_revs, const char *comment, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> steal_lock, <a class="el" href="svn__ra_8h.html#a129ad53bc913318ef95c38dea5f740d8">svn_ra_lock_callback_t</a> lock_func, void *lock_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Lock each path in <em>path_revs</em>, which is a hash whose keys are the paths to be locked, and whose values are the corresponding base revisions for each path.  <a href="#a2b4233224aec6229944988d1e2d40ee2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a03222b1947a2eda17f99c8e0acdb4cca">svn_ra_unlock</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, apr_hash_t *path_tokens, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> break_lock, <a class="el" href="svn__ra_8h.html#a129ad53bc913318ef95c38dea5f740d8">svn_ra_lock_callback_t</a> lock_func, void *lock_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove the repository lock for each path in <em>path_tokens</em>.  <a href="#a03222b1947a2eda17f99c8e0acdb4cca"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a20f30bdad25af7b62ed46eb3e0ce927c">svn_ra_get_lock</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, <a class="el" href="structsvn__lock__t.html">svn_lock_t</a> **lock, const char *path, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">If <em>path</em> is locked, set <em>*lock</em> to an <a class="el" href="structsvn__lock__t.html" title="A lock object, for client &amp; server to share.">svn_lock_t</a> which represents the lock, allocated in <em>pool</em>.  <a href="#a20f30bdad25af7b62ed46eb3e0ce927c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a56d30cc181a2b9b1c537e6c5425ae4ca">svn_ra_get_locks2</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, apr_hash_t **locks, const char *path, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*locks</em> to a hashtable which represents all locks on or below <em>path</em>.  <a href="#a56d30cc181a2b9b1c537e6c5425ae4ca"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a58724daf905e6c1b72690169dcb18efa">svn_ra_get_locks</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, apr_hash_t **locks, const char *path, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__ra_8h.html#a56d30cc181a2b9b1c537e6c5425ae4ca" title="Set *locks to a hashtable which represents all locks on or below path.">svn_ra_get_locks2()</a>, but with <em>depth</em> always passed as <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D).">svn_depth_infinity</a>.  <a href="#a58724daf905e6c1b72690169dcb18efa"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a9fbcde06ba0b9ddb331631852f3277bd">svn_ra_replay_range</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> start_revision, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> end_revision, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> low_water_mark, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> send_deltas, <a class="el" href="svn__ra_8h.html#aa55458ae9cf8156cbe9648c1151e685e">svn_ra_replay_revstart_callback_t</a> revstart_func, <a class="el" href="svn__ra_8h.html#aa815d4bdd7522061e89474fcbded072e">svn_ra_replay_revfinish_callback_t</a> revfinish_func, void *replay_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Replay the changes from a range of revisions between <em>start_revision</em> and <em>end_revision</em>.  <a href="#a9fbcde06ba0b9ddb331631852f3277bd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#ad79d196db14e261a932f3207f41da5ae">svn_ra_replay</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> low_water_mark, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> send_deltas, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *editor, void *edit_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Replay the changes from <em>revision</em> through <em>editor</em> and <em>edit_baton</em>.  <a href="#ad79d196db14e261a932f3207f41da5ae"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a47420d083621d641f5d55272cc125d74">svn_ra_get_deleted_rev</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, const char *path, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> peg_revision, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> end_revision, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *revision_deleted, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Given <em>path</em> at revision <em>peg_revision</em>, set <em>*revision_deleted</em> to the revision <em>path</em> was first deleted, within the inclusive revision range defined by <em>peg_revision</em> and <em>end_revision</em>.  <a href="#a47420d083621d641f5d55272cc125d74"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__Capabilities.html#ga98f829e080652aaf06e78bf33b61c4d0">svn_ra_has_capability</a> (<a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *session, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *has, const char *capability, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*has</em> to TRUE if the server represented by <em>session</em> has <em>capability</em> (one of the capabilities beginning with <code>"SVN_RA_CAPABILITY_"</code>), else set <em>*has</em> to FALSE.  <a href="group__Capabilities.html#ga98f829e080652aaf06e78bf33b61c4d0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a54da5fc271cb9242a5c6e32d4e63f172">svn_ra_print_modules</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *output, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Append a textual list of all available RA modules to the stringbuf <em>output</em>.  <a href="#a54da5fc271cb9242a5c6e32d4e63f172"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#ad88372f65c1d64451d3d782a5a22c587">svn_ra_print_ra_libraries</a> (<a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> **descriptions, void *ra_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__ra_8h.html#a54da5fc271cb9242a5c6e32d4e63f172" title="Append a textual list of all available RA modules to the stringbuf output.">svn_ra_print_modules()</a>.  <a href="#ad88372f65c1d64451d3d782a5a22c587"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a7a65dbfb735fcd81930474d65e852da2">svn_ra_dav_init</a> (int abi_version, apr_pool_t *pool, apr_hash_t *hash)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize libsvn_ra_neon.  <a href="#a7a65dbfb735fcd81930474d65e852da2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#aada4d384aa1b3f044962fe7f1a1e4995">svn_ra_local_init</a> (int abi_version, apr_pool_t *pool, apr_hash_t *hash)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize libsvn_ra_local.  <a href="#aada4d384aa1b3f044962fe7f1a1e4995"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#ac18324af265efd7a44d0c031483fb208">svn_ra_svn_init</a> (int abi_version, apr_pool_t *pool, apr_hash_t *hash)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize libsvn_ra_svn.  <a href="#ac18324af265efd7a44d0c031483fb208"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#ad39893f2a04a980d26936b0d85223c52">svn_ra_serf_init</a> (int abi_version, apr_pool_t *pool, apr_hash_t *hash)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize libsvn_ra_serf.  <a href="#ad39893f2a04a980d26936b0d85223c52"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a9262a57b401223ea5628923988ff50bb">svn_ra_init_ra_libs</a> (void **ra_baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the compatibility wrapper, using <em>pool</em> for any allocations.  <a href="#a9262a57b401223ea5628923988ff50bb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__ra_8h.html#a7227450e16da09eeabf044461307985d">svn_ra_get_ra_library</a> (<a class="el" href="structsvn__ra__plugin__t.html">svn_ra_plugin_t</a> **library, void *ra_baton, const char *url, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an RA vtable-<em>library</em> which can handle URL.  <a href="#a7227450e16da09eeabf044461307985d"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Repository Access. </p>

<p>Definition in file <a class="el" href="svn__ra_8h_source.html">svn_ra.h</a>.</p>
</div><hr/><h2>Define Documentation</h2>
<a class="anchor" id="a8b30ced73cbe13f848ab443b522efa6a"></a><!-- doxytag: member="svn_ra.h::SVN_RA_ABI_VERSION" ref="a8b30ced73cbe13f848ab443b522efa6a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_RA_ABI_VERSION&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The current ABI (Application Binary Interface) version for the RA plugin model. </p>
<p>This version number will change when the ABI between the SVN core (e.g. libsvn_client) and the RA plugin changes.</p>
<p>An RA plugin should verify that the passed version number is acceptable before accessing the rest of the parameters, and before returning any information.</p>
<p>It is entirely acceptable for an RA plugin to accept multiple ABI versions. It can simply interpret the parameters based on the version, and it can return different plugin structures.</p>
<pre>
 VSN  DATE        REASON FOR CHANGE
 ---  ----------  ------------------------------------------------
   1  2001-02-17  Initial revision.
   2  2004-06-29  Preparing for svn 1.1, which adds new RA vtable funcs.
      2005-01-19  Rework the plugin interface and don't provide the vtable
                  to the client.  Separate ABI versions are no longer used.
 </pre><dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000267">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.0 API. </dd></dl>

<p>Definition at line <a class="el" href="svn__ra_8h_source.html#l02275">2275</a> of file <a class="el" href="svn__ra_8h_source.html">svn_ra.h</a>.</p>

</div>
</div>
<hr/><h2>Typedef Documentation</h2>
<a class="anchor" id="a0bb74293a6046c3ec3753b29656bf569"></a><!-- doxytag: member="svn_ra.h::svn_ra_callbacks2_t" ref="a0bb74293a6046c3ec3753b29656bf569" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__ra__callbacks2__t.html">svn_ra_callbacks2_t</a>  <a class="el" href="structsvn__ra__callbacks2__t.html">svn_ra_callbacks2_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A collection of callbacks implemented by libsvn_client which allows an RA layer to "pull" information from the client application, or possibly store information. </p>
<p>libsvn_client passes this vtable to <a class="el" href="svn__ra_8h.html#a96145f7696ecf080a6d4a0a67d9d7127" title="Open a repository access session to the repository at repos_URL, or inform the caller regarding a cor...">svn_ra_open4()</a>.</p>
<p>Each routine takes a <em>callback_baton</em> originally provided with the vtable.</p>
<p>Clients must use <a class="el" href="svn__ra_8h.html#af7b12897be1a0e7d380a114b954799cf" title="Initialize a callback structure.">svn_ra_create_callbacks()</a> to allocate and initialize this structure.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.3. </dd></dl>

</div>
</div>
<a class="anchor" id="a948e332ee6bde2879467b486e5d43e3f"></a><!-- doxytag: member="svn_ra.h::svn_ra_callbacks_t" ref="a948e332ee6bde2879467b486e5d43e3f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__ra__callbacks__t.html">svn_ra_callbacks_t</a>  <a class="el" href="structsvn__ra__callbacks__t.html">svn_ra_callbacks_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="structsvn__ra__callbacks2__t.html" title="A collection of callbacks implemented by libsvn_client which allows an RA layer to &quot;pull&quot; information...">svn_ra_callbacks2_t</a>, except that the progress notification function and baton is missing. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000246">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.2 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a2e7db10113b58c685fd2f77f612a953a"></a><!-- doxytag: member="svn_ra.h::svn_ra_file_rev_handler_t" ref="a2e7db10113b58c685fd2f77f612a953a" args=")(void *baton, const char *path, svn_revnum_t rev, apr_hash_t *rev_props, svn_txdelta_window_handler_t *delta_handler, void **delta_baton, apr_array_header_t *prop_diffs, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* <a class="el" href="svn__ra_8h.html#a2e7db10113b58c685fd2f77f612a953a">svn_ra_file_rev_handler_t</a>)(void *baton, const char *path, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> rev, apr_hash_t *rev_props, <a class="el" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219">svn_txdelta_window_handler_t</a> *delta_handler, void **delta_baton, apr_array_header_t *prop_diffs, apr_pool_t *pool)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A callback function type for use in <code>get_file_revs</code>. </p>
<p><em>baton</em> is provided by the caller, <em>path</em> is the pathname of the file in revision <em>rev</em> and <em>rev_props</em> are the revision properties. If <em>delta_handler</em> and <em>delta_baton</em> are non-NULL, they may be set to a handler/baton which will be called with the delta between the previous revision and this one after the return of this callback. They may be left as NULL/NULL. <em>prop_diffs</em> is an array of <a class="el" href="structsvn__prop__t.html" title="A general in-memory representation of a single property.">svn_prop_t</a> elements indicating the property delta for this and the previous revision. <em>pool</em> may be used for temporary allocations, but you can't rely on objects allocated to live outside of this particular call and the immediately following calls to <em>*delta_handler</em>, if any.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.1. </dd></dl>

<p>Definition at line <a class="el" href="svn__ra_8h_source.html#l00157">157</a> of file <a class="el" href="svn__ra_8h_source.html">svn_ra.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4129e53745805b6c0427e5e4209ffc35"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_client_string_func_t" ref="a4129e53745805b6c0427e5e4209ffc35" args=")(void *baton, const char **name, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* <a class="el" href="svn__ra_8h.html#a4129e53745805b6c0427e5e4209ffc35">svn_ra_get_client_string_func_t</a>)(void *baton, const char **name, apr_pool_t *pool)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A function type which allows the RA layer to ask about any customizations to the client name string. </p>
<p>This is primarily used by HTTP-based RA layers wishing to extend the string reported to Apache/mod_dav_svn via the User-agent HTTP header.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

<p>Definition at line <a class="el" href="svn__ra_8h_source.html#l00136">136</a> of file <a class="el" href="svn__ra_8h_source.html">svn_ra.h</a>.</p>

</div>
</div>
<a class="anchor" id="a18b5c7dfe3f6b5da0a5a2932edc5068f"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_latest_revnum_func_t" ref="a18b5c7dfe3f6b5da0a5a2932edc5068f" args=")(void *session_baton, svn_revnum_t *latest_revnum)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* <a class="el" href="svn__ra_8h.html#a18b5c7dfe3f6b5da0a5a2932edc5068f">svn_ra_get_latest_revnum_func_t</a>)(void *session_baton, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *latest_revnum)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A function type for retrieving the youngest revision from a repos. </p>

<p>Definition at line <a class="el" href="svn__ra_8h_source.html#l00125">125</a> of file <a class="el" href="svn__ra_8h_source.html">svn_ra.h</a>.</p>

</div>
</div>
<a class="anchor" id="a15b33a22fe98ed184398f19c849db763"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_wc_prop_func_t" ref="a15b33a22fe98ed184398f19c849db763" args=")(void *baton, const char *path, const char *name, const svn_string_t **value, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* <a class="el" href="svn__ra_8h.html#a15b33a22fe98ed184398f19c849db763">svn_ra_get_wc_prop_func_t</a>)(void *baton, const char *path, const char *name, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> **value, apr_pool_t *pool)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This is a function type which allows the RA layer to fetch working copy (WC) properties. </p>
<p>The <em>baton</em> is provided along with the function pointer and should be passed back in. This will be the <em>callback_baton</em> or the <em>close_baton</em> as appropriate.</p>
<p><em>path</em> is relative to the "root" of the session, defined by the <em>repos_URL</em> passed to <a class="el" href="svn__ra_8h.html#a96145f7696ecf080a6d4a0a67d9d7127" title="Open a repository access session to the repository at repos_URL, or inform the caller regarding a cor...">svn_ra_open4()</a> vtable call.</p>
<p><em>name</em> is the name of the property to fetch. If the property is present, then it is returned in <em>value</em>. Otherwise, <em>*value</em> is set to <code>NULL</code>. </p>

<p>Definition at line <a class="el" href="svn__ra_8h_source.html#l00073">73</a> of file <a class="el" href="svn__ra_8h_source.html">svn_ra.h</a>.</p>

</div>
</div>
<a class="anchor" id="aae8924114d2893a2921afa53b59e533f"></a><!-- doxytag: member="svn_ra.h::svn_ra_init_func_t" ref="aae8924114d2893a2921afa53b59e533f" args=")(int abi_version, apr_pool_t *pool, apr_hash_t *hash)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* <a class="el" href="svn__ra_8h.html#aae8924114d2893a2921afa53b59e533f">svn_ra_init_func_t</a>)(int abi_version, apr_pool_t *pool, apr_hash_t *hash)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>All "ra_FOO" implementations *must* export a function named svn_ra_FOO_init() of type <code>svn_ra_init_func_t</code>. </p>
<p>When called by libsvn_client, this routine adds an entry (or entries) to the hash table for any URL schemes it handles. The hash value must be of type (<code><code><a class="el" href="structsvn__ra__plugin__t.html" title="Using this callback struct is similar to calling the newer public interface that is based on svn_ra_s...">svn_ra_plugin_t</a></code> *</code>). <em>pool</em> is a pool for allocating configuration / one-time data.</p>
<p>This type is defined to use the "C Calling Conventions" to ensure that abi_version is the first parameter. The RA plugin must check that value before accessing the other parameters.</p>
<p>### need to force this to be __cdecl on Windows... how??</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000266">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

<p>Definition at line <a class="el" href="svn__ra_8h_source.html#l02246">2246</a> of file <a class="el" href="svn__ra_8h_source.html">svn_ra.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad75aea6441172c03eabb6e414cd9806a"></a><!-- doxytag: member="svn_ra.h::svn_ra_invalidate_wc_props_func_t" ref="ad75aea6441172c03eabb6e414cd9806a" args=")(void *baton, const char *path, const char *name, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* <a class="el" href="svn__ra_8h.html#ad75aea6441172c03eabb6e414cd9806a">svn_ra_invalidate_wc_props_func_t</a>)(void *baton, const char *path, const char *name, apr_pool_t *pool)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This is a function type which allows the RA layer to invalidate (i.e., remove) wcprops recursively. </p>
<p>See the documentation for <code>svn_ra_get_wc_prop_func_t</code> for <em>baton</em>, <em>path</em>, and <em>name</em>.</p>
<p>Unlike <code>svn_ra_push_wc_prop_func_t</code>, this has immediate effect. If it returns success, the wcprops have been removed. </p>

<p>Definition at line <a class="el" href="svn__ra_8h_source.html#l00118">118</a> of file <a class="el" href="svn__ra_8h_source.html">svn_ra.h</a>.</p>

</div>
</div>
<a class="anchor" id="a129ad53bc913318ef95c38dea5f740d8"></a><!-- doxytag: member="svn_ra.h::svn_ra_lock_callback_t" ref="a129ad53bc913318ef95c38dea5f740d8" args=")(void *baton, const char *path, svn_boolean_t do_lock, const svn_lock_t *lock, svn_error_t *ra_err, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* <a class="el" href="svn__ra_8h.html#a129ad53bc913318ef95c38dea5f740d8">svn_ra_lock_callback_t</a>)(void *baton, const char *path, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> do_lock, const <a class="el" href="structsvn__lock__t.html">svn_lock_t</a> *lock, <a class="el" href="structsvn__error__t.html">svn_error_t</a> *ra_err, apr_pool_t *pool)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Callback function type for locking and unlocking actions. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2.</dd></dl>
<p><em>do_lock</em> is TRUE when locking <em>path</em>, and FALSE otherwise.</p>
<p><em>lock</em> is a lock for <em>path</em> or NULL if <em>do_lock</em> is FALSE or <em>ra_err</em> is non-NULL.</p>
<p><em>ra_err</em> is NULL unless the ra layer encounters a locking related error which it passes back for notification purposes. The caller is responsible for clearing <em>ra_err</em> after the callback is run.</p>
<p><em>baton</em> is a closure object; it should be provided by the implementation, and passed by the caller. <em>pool</em> may be used for temporary allocation. </p>

<p>Definition at line <a class="el" href="svn__ra_8h_source.html#l00186">186</a> of file <a class="el" href="svn__ra_8h_source.html">svn_ra.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4eb0a5e00f2896a41ac6bfb48d9174d7"></a><!-- doxytag: member="svn_ra.h::svn_ra_plugin_t" ref="a4eb0a5e00f2896a41ac6bfb48d9174d7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__ra__plugin__t.html">svn_ra_plugin_t</a>  <a class="el" href="structsvn__ra__plugin__t.html">svn_ra_plugin_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Using this callback struct is similar to calling the newer public interface that is based on <code>svn_ra_session_t</code>. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000265">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a44f6e7f50bf0acdee8ee9bdf1ce984c3"></a><!-- doxytag: member="svn_ra.h::svn_ra_progress_notify_func_t" ref="a44f6e7f50bf0acdee8ee9bdf1ce984c3" args=")(apr_off_t progress, apr_off_t total, void *baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void(* <a class="el" href="svn__ra_8h.html#a44f6e7f50bf0acdee8ee9bdf1ce984c3">svn_ra_progress_notify_func_t</a>)(apr_off_t progress, apr_off_t total, void *baton, apr_pool_t *pool)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Callback function type for progress notification. </p>
<p><em>progress</em> is the number of bytes already transferred, <em>total</em> is the total number of bytes to transfer or -1 if it's not known, <em>baton</em> is the callback baton.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.3. </dd></dl>

<p>Definition at line <a class="el" href="svn__ra_8h_source.html#l00202">202</a> of file <a class="el" href="svn__ra_8h_source.html">svn_ra.h</a>.</p>

</div>
</div>
<a class="anchor" id="a35cbc06754d5250e7ae63c33c833fb5a"></a><!-- doxytag: member="svn_ra.h::svn_ra_push_wc_prop_func_t" ref="a35cbc06754d5250e7ae63c33c833fb5a" args=")(void *baton, const char *path, const char *name, const svn_string_t *value, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* <a class="el" href="svn__ra_8h.html#a35cbc06754d5250e7ae63c33c833fb5a">svn_ra_push_wc_prop_func_t</a>)(void *baton, const char *path, const char *name, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *value, apr_pool_t *pool)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This is a function type which allows the RA layer to store new working copy properties as part of a commit. </p>
<p>See the comments for <code>svn_ra_get_wc_prop_func_t</code> for <em>baton</em>, <em>path</em>, and <em>name</em>. The <em>value</em> is the value that will be stored for the property; a <code>NULL</code> <em>value</em> means the property will be deleted.</p>
<p>Note that this might not actually store the new property before returning, but instead schedule it to be changed as part of post-commit processing (in which case a successful commit means the properties got written). Thus, during the commit, it is possible to invoke this function to set a new value for a wc prop, then read the wc prop back from the working copy and get the *old* value. Callers beware. </p>

<p>Definition at line <a class="el" href="svn__ra_8h_source.html#l00105">105</a> of file <a class="el" href="svn__ra_8h_source.html">svn_ra.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa815d4bdd7522061e89474fcbded072e"></a><!-- doxytag: member="svn_ra.h::svn_ra_replay_revfinish_callback_t" ref="aa815d4bdd7522061e89474fcbded072e" args=")(svn_revnum_t revision, void *replay_baton, const svn_delta_editor_t *editor, void *edit_baton, apr_hash_t *rev_props, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* <a class="el" href="svn__ra_8h.html#aa815d4bdd7522061e89474fcbded072e">svn_ra_replay_revfinish_callback_t</a>)(<a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, void *replay_baton, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *editor, void *edit_baton, apr_hash_t *rev_props, apr_pool_t *pool)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Callback function type for replay_range actions. </p>
<p>This callback function should close the editor.</p>
<p><em>revision</em> is the target revision number of the received replay report.</p>
<p><em>editor</em> and <em>edit_baton</em> should provided by the callback implementation.</p>
<p><em>replay_baton</em> is the baton as originally passed to replay_range.</p>
<p><em>revprops</em> contains key/value pairs for each revision properties for this revision.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

<p>Definition at line <a class="el" href="svn__ra_8h_source.html#l00248">248</a> of file <a class="el" href="svn__ra_8h_source.html">svn_ra.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa55458ae9cf8156cbe9648c1151e685e"></a><!-- doxytag: member="svn_ra.h::svn_ra_replay_revstart_callback_t" ref="aa55458ae9cf8156cbe9648c1151e685e" args=")(svn_revnum_t revision, void *replay_baton, const svn_delta_editor_t **editor, void **edit_baton, apr_hash_t *rev_props, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* <a class="el" href="svn__ra_8h.html#aa55458ae9cf8156cbe9648c1151e685e">svn_ra_replay_revstart_callback_t</a>)(<a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, void *replay_baton, const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> **editor, void **edit_baton, apr_hash_t *rev_props, apr_pool_t *pool)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Callback function type for replay_range actions. </p>
<p>This callback function should provide replay_range with an editor which will be driven with the received replay reports from the master repository.</p>
<p><em>revision</em> is the target revision number of the received replay report.</p>
<p><em>editor</em> and <em>edit_baton</em> should provided by the callback implementation.</p>
<p><em>replay_baton</em> is the baton as originally passed to replay_range.</p>
<p><em>revprops</em> contains key/value pairs for each revision properties for this revision.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

<p>Definition at line <a class="el" href="svn__ra_8h_source.html#l00224">224</a> of file <a class="el" href="svn__ra_8h_source.html">svn_ra.h</a>.</p>

</div>
</div>
<a class="anchor" id="aaa1178090fba5cfd77e8d72b98c44c61"></a><!-- doxytag: member="svn_ra.h::svn_ra_reporter2_t" ref="aaa1178090fba5cfd77e8d72b98c44c61" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a>  <a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <code><a class="el" href="structsvn__ra__reporter3__t.html" title="The update Reporter.">svn_ra_reporter3_t</a></code>, but without support for depths. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000244">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a9dd4c08bd97373d89cc24fbbd4ee21a3"></a><!-- doxytag: member="svn_ra.h::svn_ra_reporter3_t" ref="a9dd4c08bd97373d89cc24fbbd4ee21a3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a>  <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The update Reporter. </p>
<p>A vtable structure which allows a working copy to describe a subset (or possibly all) of its working-copy to an RA layer, for the purposes of an update, switch, status, or diff operation.</p>
<p>Paths for report calls are relative to the target (not the anchor) of the operation. Report calls must be made in depth-first order: parents before children, all children of a parent before any siblings of the parent. The first report call must be a set_path with a <em>path</em> argument of "" and a valid revision. (If the target of the operation is locally deleted or missing, use the anchor's revision.) If the target of the operation is deleted or switched relative to the anchor, follow up the initial set_path call with a link_path or delete_path call with a <em>path</em> argument of "" to indicate that. In no other case may there be two report descriptions for the same path. If the target of the operation is a locally added file or directory (which previously did not exist), it may be reported as having revision 0 or as having the parent directory's revision.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a4a0b95fef232c9b745a399f68d36b32b"></a><!-- doxytag: member="svn_ra.h::svn_ra_reporter_t" ref="a4a0b95fef232c9b745a399f68d36b32b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__ra__reporter__t.html">svn_ra_reporter_t</a>  <a class="el" href="structsvn__ra__reporter__t.html">svn_ra_reporter_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <code><a class="el" href="structsvn__ra__reporter2__t.html" title="Similar to svn_ra_reporter3_t, but without support for depths.">svn_ra_reporter2_t</a></code>, but without support for lock tokens. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000245">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ac3a7f3c8f2562ed346c2431c4c94f507"></a><!-- doxytag: member="svn_ra.h::svn_ra_session_t" ref="ac3a7f3c8f2562ed346c2431c4c94f507" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> <a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A repository access session. </p>
<p>This object is used to perform requests to a repository, identified by an URL.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

<p>Definition at line <a class="el" href="svn__ra_8h_source.html#l00580">580</a> of file <a class="el" href="svn__ra_8h_source.html">svn_ra.h</a>.</p>

</div>
</div>
<a class="anchor" id="afcc7f90103b9f382aac31013ff8ab15b"></a><!-- doxytag: member="svn_ra.h::svn_ra_set_wc_prop_func_t" ref="afcc7f90103b9f382aac31013ff8ab15b" args=")(void *baton, const char *path, const char *name, const svn_string_t *value, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* <a class="el" href="svn__ra_8h.html#afcc7f90103b9f382aac31013ff8ab15b">svn_ra_set_wc_prop_func_t</a>)(void *baton, const char *path, const char *name, const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *value, apr_pool_t *pool)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This is a function type which allows the RA layer to store new working copy properties during update-like operations. </p>
<p>See the comments for <code>svn_ra_get_wc_prop_func_t</code> for <em>baton</em>, <em>path</em>, and <em>name</em>. The <em>value</em> is the value that will be stored for the property; a NULL <em>value</em> means the property will be deleted. </p>

<p>Definition at line <a class="el" href="svn__ra_8h_source.html#l00085">85</a> of file <a class="el" href="svn__ra_8h_source.html">svn_ra.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a302cc325129b7ee4d703eb40c8f6479d"></a><!-- doxytag: member="svn_ra.h::svn_ra_change_rev_prop" ref="a302cc325129b7ee4d703eb40c8f6479d" args="(svn_ra_session_t *session, svn_revnum_t rev, const char *name, const svn_string_t *value, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_change_rev_prop </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__ra_8h.html#ab8d3b20527a836b2b1bca65ba797f137" title="Set the property name to value on revision rev in the repository of session.">svn_ra_change_rev_prop2()</a>, but with <em>old_value_p</em> set to <code>NULL</code>. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000250">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ab8d3b20527a836b2b1bca65ba797f137"></a><!-- doxytag: member="svn_ra.h::svn_ra_change_rev_prop2" ref="ab8d3b20527a836b2b1bca65ba797f137" args="(svn_ra_session_t *session, svn_revnum_t rev, const char *name, const svn_string_t *const *old_value_p, const svn_string_t *value, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_change_rev_prop2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *const *&#160;</td>
          <td class="paramname"><em>old_value_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__string__t.html">svn_string_t</a> *&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the property <em>name</em> to <em>value</em> on revision <em>rev</em> in the repository of <em>session</em>. </p>
<p>If <em>value</em> is <code>NULL</code>, delete the named revision property.</p>
<p>If the server advertises the <a class="el" href="group__Capabilities.html#gaead8141f54c6a645fc4f1303071e3ac3" title="The capability of specifying (and atomically verifying) expected preexisting values when modifying re...">SVN_RA_CAPABILITY_ATOMIC_REVPROPS</a> capability and <em>old_value_p</em> is not <code>NULL</code>, then changing the property will fail with an error chain that contains <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a6dfc3b1c5aa7779e2a83373e735e1c88" title="&quot;Property value in filesystem differs from the provided &quot; &quot;base value&quot;">SVN_ERR_FS_PROP_BASEVALUE_MISMATCH</a> if the present value of the property is not <em>*old_value_p</em>. (This is an atomic test-and-set). <em>*old_value_p</em> may be <code>NULL</code>, representing that the property must be not already set.</p>
<p>If the capability is not advertised, then <em>old_value_p</em> MUST be <code>NULL</code>.</p>
<p>Please note that properties attached to revisions are <em>unversioned</em>.</p>
<p>Use <em>pool</em> for memory allocation.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__fs__handling.html#ga42e1c39fc4980da8c2f2f575fa7515ac" title="Change a revision&#39;s property&#39;s value, or add/delete a property.">svn_fs_change_rev_prop2()</a>, <a class="el" href="group__svn__error__error__creation__destroy.html#gac7330fec4b094a825fe32ba6ca9b4ad2" title="Return the first error in err&#39;s chain that has an error code apr_err or SVN_NO_ERROR if there is no e...">svn_error_find_cause()</a>.</dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ac648f6873d7020414527cc5aa350fcc1"></a><!-- doxytag: member="svn_ra.h::svn_ra_check_path" ref="ac648f6873d7020414527cc5aa350fcc1" args="(svn_ra_session_t *session, const char *path, svn_revnum_t revision, svn_node_kind_t *kind, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_check_path </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a">svn_node_kind_t</a> *&#160;</td>
          <td class="paramname"><em>kind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*kind</em> to the node kind associated with <em>path</em> at <em>revision</em>. </p>
<p>If <em>path</em> does not exist under <em>revision</em>, set <em>*kind</em> to <code>svn_node_none</code>. <em>path</em> is relative to the <em>session's</em> parent URL.</p>
<p>Use <em>pool</em> for memory allocation.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="af7b12897be1a0e7d380a114b954799cf"></a><!-- doxytag: member="svn_ra.h::svn_ra_create_callbacks" ref="af7b12897be1a0e7d380a114b954799cf" args="(svn_ra_callbacks2_t **callbacks, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_create_callbacks </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__ra__callbacks2__t.html">svn_ra_callbacks2_t</a> **&#160;</td>
          <td class="paramname"><em>callbacks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initialize a callback structure. </p>
<p>Set <em>*callbacks</em> to a ra callbacks object, allocated in <em>pool</em>.</p>
<p>Clients must use this function to allocate and initialize <code><a class="el" href="structsvn__ra__callbacks2__t.html" title="A collection of callbacks implemented by libsvn_client which allows an RA layer to &quot;pull&quot; information...">svn_ra_callbacks2_t</a></code> structures.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.3. </dd></dl>

</div>
</div>
<a class="anchor" id="a7a65dbfb735fcd81930474d65e852da2"></a><!-- doxytag: member="svn_ra.h::svn_ra_dav_init" ref="a7a65dbfb735fcd81930474d65e852da2" args="(int abi_version, apr_pool_t *pool, apr_hash_t *hash)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_dav_init </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>abi_version</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>hash</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initialize libsvn_ra_neon. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000268">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a2d2c514752466c5092e26ba4fdc51ae8"></a><!-- doxytag: member="svn_ra.h::svn_ra_do_diff" ref="a2d2c514752466c5092e26ba4fdc51ae8" args="(svn_ra_session_t *session, const svn_ra_reporter2_t **reporter, void **report_baton, svn_revnum_t revision, const char *diff_target, svn_boolean_t recurse, svn_boolean_t ignore_ancestry, const char *versus_url, const svn_delta_editor_t *diff_editor, void *diff_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_do_diff </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a> **&#160;</td>
          <td class="paramname"><em>reporter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>report_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>diff_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>ignore_ancestry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>versus_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *&#160;</td>
          <td class="paramname"><em>diff_editor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>diff_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__ra_8h.html#a34b8009fc0599404392716d8bee72dc2" title="Similar to svn_ra_do_diff3(), but taking svn_ra_reporter2_t instead of svn_ra_reporter3_t, and therefore only able to report svn_depth_infinity for depths.">svn_ra_do_diff2()</a>, but with <em>text_deltas</em> set to <code>TRUE</code>. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000258">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.3 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a34b8009fc0599404392716d8bee72dc2"></a><!-- doxytag: member="svn_ra.h::svn_ra_do_diff2" ref="a34b8009fc0599404392716d8bee72dc2" args="(svn_ra_session_t *session, const svn_ra_reporter2_t **reporter, void **report_baton, svn_revnum_t revision, const char *diff_target, svn_boolean_t recurse, svn_boolean_t ignore_ancestry, svn_boolean_t text_deltas, const char *versus_url, const svn_delta_editor_t *diff_editor, void *diff_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_do_diff2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a> **&#160;</td>
          <td class="paramname"><em>reporter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>report_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>diff_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>ignore_ancestry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>text_deltas</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>versus_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *&#160;</td>
          <td class="paramname"><em>diff_editor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>diff_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__ra_8h.html#a28f808ad78e04eaf2cabe76e67c2a0fb" title="Ask the RA layer to &#39;diff&#39; a working copy against versus_url; it&#39;s another form of svn_ra_do_update2(...">svn_ra_do_diff3()</a>, but taking <code><a class="el" href="structsvn__ra__reporter2__t.html" title="Similar to svn_ra_reporter3_t, but without support for depths.">svn_ra_reporter2_t</a></code> instead of <code><a class="el" href="structsvn__ra__reporter3__t.html" title="The update Reporter.">svn_ra_reporter3_t</a></code>, and therefore only able to report <code>svn_depth_infinity</code> for depths. </p>
<p>Perform the diff according to <em>recurse:</em> if TRUE, then <em>depth</em> is <code>svn_depth_infinity</code>, else it is <code>svn_depth_files</code>.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000257">Deprecated:</a></b></dt><dd>Provided for compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a28f808ad78e04eaf2cabe76e67c2a0fb"></a><!-- doxytag: member="svn_ra.h::svn_ra_do_diff3" ref="a28f808ad78e04eaf2cabe76e67c2a0fb" args="(svn_ra_session_t *session, const svn_ra_reporter3_t **reporter, void **report_baton, svn_revnum_t revision, const char *diff_target, svn_depth_t depth, svn_boolean_t ignore_ancestry, svn_boolean_t text_deltas, const char *versus_url, const svn_delta_editor_t *diff_editor, void *diff_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_do_diff3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a> **&#160;</td>
          <td class="paramname"><em>reporter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>report_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>diff_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>ignore_ancestry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>text_deltas</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>versus_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *&#160;</td>
          <td class="paramname"><em>diff_editor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>diff_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Ask the RA layer to 'diff' a working copy against <em>versus_url</em>; it's another form of <a class="el" href="svn__ra_8h.html#a72c4b3e8552a3cb85994d76d646ff6b0" title="Ask the RA layer to update a working copy.">svn_ra_do_update2()</a>. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>This function cannot be used to diff a single file, only a working copy directory. See the <a class="el" href="svn__ra_8h.html#a9e5b7de1fc9cad57874b3a30f4068c0b" title="Ask the RA layer to &#39;switch&#39; a working copy to a new switch_url; it&#39;s another form of svn_ra_do_updat...">svn_ra_do_switch2()</a> function for more details.</dd></dl>
<p>The client initially provides a <em>diff_editor/<em>diff_baton</em> to</em> the RA layer; this editor contains knowledge of where the common diff root is in the working copy (when open_root() is called).</p>
<p>In return, the client receives a <em>reporter/<em>report_baton</em>.</em> The client then describes its working copy by making calls into the <em>reporter</em>.</p>
<p>When finished, the client calls <em>reporter-&gt;finish_report()</em>. The RA layer then does a complete drive of <em>diff_editor</em>, ending with close_edit(), to transmit the diff.</p>
<p><em>diff_target</em> is an optional single path component will restrict the scope of the diff to an entry in the directory represented by the <em>session's</em> URL, or empty if the entire directory is meant to be one of the diff paths.</p>
<p>The working copy will be diffed against <em>versus_url</em> as it exists in revision <em>revision</em>, or as it is in head if <em>revision</em> is <code>SVN_INVALID_REVNUM</code>.</p>
<p>Use <em>ignore_ancestry</em> to control whether or not items being diffed will be checked for relatedness first. Unrelated items are typically transmitted to the editor as a deletion of one thing and the addition of another, but if this flag is <code>TRUE</code>, unrelated items will be diffed as if they were related.</p>
<p>Diff only as deeply as <em>depth</em> indicates.</p>
<p>The caller may not perform any RA operations using <em>session</em> before finishing the report, and may not perform any RA operations using <em>session</em> from within the editing operations of <em>diff_editor</em>.</p>
<p><em>text_deltas</em> instructs the driver of the <em>diff_editor</em> to enable the generation of text deltas. If <em>text_deltas</em> is FALSE the window handler returned by apply_textdelta will be called once with a NULL <code><a class="el" href="structsvn__txdelta__window__t.html" title="An svn_txdelta_window_t object describes how to reconstruct a contiguous section of the target string...">svn_txdelta_window_t</a></code> pointer.</p>
<p>Use <em>pool</em> for memory allocation.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>The reporter provided by this function does NOT supply copy- from information to the diff editor callbacks.</dd>
<dd>
In order to prevent pre-1.5 servers from doing more work than needed, and sending too much data back, a pre-1.5 'recurse' directive may be sent to the server, based on <em>depth</em>.</dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a17e36dc753c7c2e6f806b22867db2eea"></a><!-- doxytag: member="svn_ra.h::svn_ra_do_status" ref="a17e36dc753c7c2e6f806b22867db2eea" args="(svn_ra_session_t *session, const svn_ra_reporter2_t **reporter, void **report_baton, const char *status_target, svn_revnum_t revision, svn_boolean_t recurse, const svn_delta_editor_t *status_editor, void *status_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_do_status </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a> **&#160;</td>
          <td class="paramname"><em>reporter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>report_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>status_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *&#160;</td>
          <td class="paramname"><em>status_editor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>status_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__ra_8h.html#aab22b961b17ac2e842a2d737ad09b066" title="Ask the RA layer to describe the status of a working copy with respect to revision of the repository ...">svn_ra_do_status2()</a>, but taking <code><a class="el" href="structsvn__ra__reporter2__t.html" title="Similar to svn_ra_reporter3_t, but without support for depths.">svn_ra_reporter2_t</a></code> instead of <code><a class="el" href="structsvn__ra__reporter3__t.html" title="The update Reporter.">svn_ra_reporter3_t</a></code>, and therefore only able to report <code>svn_depth_infinity</code> for depths. </p>
<p>The status operation itself is performed according to <em>recurse:</em> if TRUE, then <em>depth</em> is <code>svn_depth_infinity</code>, else it is <code>svn_depth_immediates</code>.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000256">Deprecated:</a></b></dt><dd>Provided for compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="aab22b961b17ac2e842a2d737ad09b066"></a><!-- doxytag: member="svn_ra.h::svn_ra_do_status2" ref="aab22b961b17ac2e842a2d737ad09b066" args="(svn_ra_session_t *session, const svn_ra_reporter3_t **reporter, void **report_baton, const char *status_target, svn_revnum_t revision, svn_depth_t depth, const svn_delta_editor_t *status_editor, void *status_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_do_status2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a> **&#160;</td>
          <td class="paramname"><em>reporter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>report_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>status_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *&#160;</td>
          <td class="paramname"><em>status_editor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>status_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Ask the RA layer to describe the status of a working copy with respect to <em>revision</em> of the repository (or HEAD, if <em>revision</em> is invalid). </p>
<p>The client initially provides a <em>status_editor/<em>status_baton</em> to</em> the RA layer; this editor contains knowledge of where the change will begin in the working copy (when open_root() is called).</p>
<p>In return, the client receives a <em>reporter/<em>report_baton</em>.</em> The client then describes its working copy by making calls into the <em>reporter</em>.</p>
<p>When finished, the client calls <em>reporter-&gt;finish_report()</em>. The RA layer then does a complete drive of <em>status_editor</em>, ending with close_edit(), to report, essentially, what would be modified in the working copy were the client to call do_update(). <em>status_target</em> is an optional single path component will restrict the scope of the status report to an entry in the directory represented by the <em>session's</em> URL, or empty if the entire directory is meant to be examined.</p>
<p>Get status as deeply as <em>depth</em> indicates. If <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2cacf4538edb8e8823b0b9cdeaaac245ebf" title="Depth undetermined or ignored.">svn_depth_unknown</a>, get the status down to the ambient depth of the working copy. If <em>depth</em> is deeper than the working copy, include changes that would be needed to populate the working copy to that depth.</p>
<p>The caller may not perform any RA operations using <em>session</em> before finishing the report, and may not perform any RA operations using <em>session</em> from within the editing operations of <em>status_editor</em>.</p>
<p>Use <em>pool</em> for memory allocation.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>The reporter provided by this function does NOT supply copy- from information to the diff editor callbacks.</dd>
<dd>
In order to prevent pre-1.5 servers from doing more work than needed, and sending too much data back, a pre-1.5 'recurse' directive may be sent to the server, based on <em>depth</em>.</dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="ab473c714e0b782e1d589b0835ff8dc4a"></a><!-- doxytag: member="svn_ra.h::svn_ra_do_switch" ref="ab473c714e0b782e1d589b0835ff8dc4a" args="(svn_ra_session_t *session, const svn_ra_reporter2_t **reporter, void **report_baton, svn_revnum_t revision_to_switch_to, const char *switch_target, svn_boolean_t recurse, const char *switch_url, const svn_delta_editor_t *switch_editor, void *switch_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_do_switch </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a> **&#160;</td>
          <td class="paramname"><em>reporter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>report_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision_to_switch_to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>switch_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>switch_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *&#160;</td>
          <td class="paramname"><em>switch_editor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>switch_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__ra_8h.html#a9e5b7de1fc9cad57874b3a30f4068c0b" title="Ask the RA layer to &#39;switch&#39; a working copy to a new switch_url; it&#39;s another form of svn_ra_do_updat...">svn_ra_do_switch2()</a>, but taking <code><a class="el" href="structsvn__ra__reporter2__t.html" title="Similar to svn_ra_reporter3_t, but without support for depths.">svn_ra_reporter2_t</a></code> instead of <code><a class="el" href="structsvn__ra__reporter3__t.html" title="The update Reporter.">svn_ra_reporter3_t</a></code>, and therefore only able to report <code>svn_depth_infinity</code> for depths. </p>
<p>The switch itself is performed according to <em>recurse:</em> if TRUE, then use <code>svn_depth_infinity</code> for <em>depth</em>, else use <code>svn_depth_files</code>.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000255">Deprecated:</a></b></dt><dd>Provided for compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a9e5b7de1fc9cad57874b3a30f4068c0b"></a><!-- doxytag: member="svn_ra.h::svn_ra_do_switch2" ref="a9e5b7de1fc9cad57874b3a30f4068c0b" args="(svn_ra_session_t *session, const svn_ra_reporter3_t **reporter, void **report_baton, svn_revnum_t revision_to_switch_to, const char *switch_target, svn_depth_t depth, const char *switch_url, const svn_delta_editor_t *switch_editor, void *switch_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_do_switch2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a> **&#160;</td>
          <td class="paramname"><em>reporter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>report_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision_to_switch_to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>switch_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>switch_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *&#160;</td>
          <td class="paramname"><em>switch_editor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>switch_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Ask the RA layer to 'switch' a working copy to a new <em>switch_url</em>; it's another form of <a class="el" href="svn__ra_8h.html#aa941ae82dab9dda11d546208b9e19c58" title="Similar to svn_ra_do_update2(), but taking svn_ra_reporter2_t instead of svn_ra_reporter3_t; if recur...">svn_ra_do_update()</a>. </p>
<p>The client initially provides a <em>switch_editor/<em>switch_baton</em> to</em> the RA layer; this editor contains knowledge of where the change will begin in the working copy (when open_root() is called).</p>
<p>In return, the client receives a <em>reporter/<em>report_baton</em>.</em> The client then describes its working copy by making calls into the <em>reporter</em>.</p>
<p>When finished, the client calls <em>reporter-&gt;finish_report()</em>. The RA layer then does a complete drive of <em>switch_editor</em>, ending with close_edit(), to switch the working copy.</p>
<p><em>switch_target</em> is an optional single path component will restrict the scope of things affected by the switch to an entry in the directory represented by the <em>session's</em> URL, or empty if the entire directory is meant to be switched.</p>
<p>Switch the target only as deeply as <em>depth</em> indicates.</p>
<p>The working copy will be switched to <em>revision_to_switch_to</em>, or the "latest" revision if this arg is invalid.</p>
<p>The caller may not perform any RA operations using <em>session</em> before finishing the report, and may not perform any RA operations using <em>session</em> from within the editing operations of <em>switch_editor</em>.</p>
<p>Use <em>pool</em> for memory allocation.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>The reporter provided by this function does NOT supply copy- from information to the diff editor callbacks.</dd>
<dd>
In order to prevent pre-1.5 servers from doing more work than needed, and sending too much data back, a pre-1.5 'recurse' directive may be sent to the server, based on <em>depth</em>.</dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="aa941ae82dab9dda11d546208b9e19c58"></a><!-- doxytag: member="svn_ra.h::svn_ra_do_update" ref="aa941ae82dab9dda11d546208b9e19c58" args="(svn_ra_session_t *session, const svn_ra_reporter2_t **reporter, void **report_baton, svn_revnum_t revision_to_update_to, const char *update_target, svn_boolean_t recurse, const svn_delta_editor_t *update_editor, void *update_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_do_update </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a> **&#160;</td>
          <td class="paramname"><em>reporter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>report_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision_to_update_to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>update_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *&#160;</td>
          <td class="paramname"><em>update_editor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>update_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__ra_8h.html#a72c4b3e8552a3cb85994d76d646ff6b0" title="Ask the RA layer to update a working copy.">svn_ra_do_update2()</a>, but taking <code><a class="el" href="structsvn__ra__reporter2__t.html" title="Similar to svn_ra_reporter3_t, but without support for depths.">svn_ra_reporter2_t</a></code> instead of <code><a class="el" href="structsvn__ra__reporter3__t.html" title="The update Reporter.">svn_ra_reporter3_t</a></code>; if <em>recurse</em> is true, pass <code>svn_depth_infinity</code> for <em>depth</em>, else pass <code>svn_depth_files</code>; and with <em>send_copyfrom_args</em> always false. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000254">Deprecated:</a></b></dt><dd>Provided for compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a72c4b3e8552a3cb85994d76d646ff6b0"></a><!-- doxytag: member="svn_ra.h::svn_ra_do_update2" ref="a72c4b3e8552a3cb85994d76d646ff6b0" args="(svn_ra_session_t *session, const svn_ra_reporter3_t **reporter, void **report_baton, svn_revnum_t revision_to_update_to, const char *update_target, svn_depth_t depth, svn_boolean_t send_copyfrom_args, const svn_delta_editor_t *update_editor, void *update_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_do_update2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a> **&#160;</td>
          <td class="paramname"><em>reporter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>report_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision_to_update_to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>update_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>send_copyfrom_args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *&#160;</td>
          <td class="paramname"><em>update_editor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>update_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Ask the RA layer to update a working copy. </p>
<p>The client initially provides an <em>update_editor/<em>update_baton</em> to</em> the RA layer; this editor contains knowledge of where the change will begin in the working copy (when <code>open_root()</code> is called).</p>
<p>In return, the client receives a <em>reporter/<em>report_baton</em>.</em> The client then describes its working copy by making calls into the <em>reporter</em>.</p>
<p>When finished, the client calls <em>reporter-&gt;finish_report()</em>. The RA layer then does a complete drive of <em>update_editor</em>, ending with <em>update_editor-&gt;close_edit()</em>, to update the working copy.</p>
<p><em>update_target</em> is an optional single path component to restrict the scope of the update to just that entry (in the directory represented by the <em>session's</em> URL). If <em>update_target</em> is the empty string, the entire directory is updated.</p>
<p>Update the target only as deeply as <em>depth</em> indicates.</p>
<p>If <em>send_copyfrom_args</em> is TRUE, then ask the server to send copyfrom arguments to add_file() and add_directory() when possible. (Note: this means that any subsequent txdeltas coming from the server are presumed to apply against the copied file!)</p>
<p>The working copy will be updated to <em>revision_to_update_to</em>, or the "latest" revision if this arg is invalid.</p>
<p>The caller may not perform any RA operations using <em>session</em> before finishing the report, and may not perform any RA operations using <em>session</em> from within the editing operations of <em>update_editor</em>.</p>
<p>Use <em>pool</em> for memory allocation.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>The reporter provided by this function does NOT supply copy- from information to the diff editor callbacks.</dd>
<dd>
In order to prevent pre-1.5 servers from doing more work than needed, and sending too much data back, a pre-1.5 'recurse' directive may be sent to the server, based on <em>depth</em>.</dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a03d9f63044f94d4defbf79246af806b4"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_commit_editor" ref="a03d9f63044f94d4defbf79246af806b4" args="(svn_ra_session_t *session, const svn_delta_editor_t **editor, void **edit_baton, const char *log_msg, svn_commit_callback_t callback, void *callback_baton, apr_hash_t *lock_tokens, svn_boolean_t keep_locks, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_commit_editor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> **&#160;</td>
          <td class="paramname"><em>editor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>edit_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>log_msg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#abc95cfed422bd097099537e4bde98d6d">svn_commit_callback_t</a>&#160;</td>
          <td class="paramname"><em>callback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>callback_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>lock_tokens</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>keep_locks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Same as <a class="el" href="svn__ra_8h.html#a6b06410f67faedce2d58a0db7383f2b8" title="Same as svn_ra_get_commit_editor3(), but with revprop_table set to a hash containing the SVN_PROP_REV...">svn_ra_get_commit_editor2()</a>, but uses <code>svn_commit_callback_t</code>. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2.</dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000252">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.3 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a6b06410f67faedce2d58a0db7383f2b8"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_commit_editor2" ref="a6b06410f67faedce2d58a0db7383f2b8" args="(svn_ra_session_t *session, const svn_delta_editor_t **editor, void **edit_baton, const char *log_msg, svn_commit_callback2_t callback, void *callback_baton, apr_hash_t *lock_tokens, svn_boolean_t keep_locks, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_commit_editor2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> **&#160;</td>
          <td class="paramname"><em>editor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>edit_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>log_msg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a5aca95325ba984f70a316d7d9966e1df">svn_commit_callback2_t</a>&#160;</td>
          <td class="paramname"><em>callback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>callback_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>lock_tokens</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>keep_locks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Same as <a class="el" href="svn__ra_8h.html#a5b0aff2522a3008fba26af0da66d3de9" title="Set *editor and *edit_baton to an editor for committing changes to the repository of session...">svn_ra_get_commit_editor3()</a>, but with <code>revprop_table</code> set to a hash containing the <code>SVN_PROP_REVISION_LOG</code> property set to the value of <em>log_msg</em>. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.4.</dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000251">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a5b0aff2522a3008fba26af0da66d3de9"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_commit_editor3" ref="a5b0aff2522a3008fba26af0da66d3de9" args="(svn_ra_session_t *session, const svn_delta_editor_t **editor, void **edit_baton, apr_hash_t *revprop_table, svn_commit_callback2_t callback, void *callback_baton, apr_hash_t *lock_tokens, svn_boolean_t keep_locks, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_commit_editor3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> **&#160;</td>
          <td class="paramname"><em>editor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>edit_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>revprop_table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a5aca95325ba984f70a316d7d9966e1df">svn_commit_callback2_t</a>&#160;</td>
          <td class="paramname"><em>callback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>callback_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>lock_tokens</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>keep_locks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*editor</em> and <em>*edit_baton</em> to an editor for committing changes to the repository of <em>session</em>, setting the revision properties from <em>revprop_table</em>. </p>
<p>The revisions being committed against are passed to the editor functions, starting with the rev argument to <code>open_root</code>. The path root of the commit is the <em>session's</em> URL.</p>
<p><em>revprop_table</em> is a hash mapping <code>const char *</code> property names to <code><a class="el" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a></code> property values. The commit log message is expected to be in the <code>SVN_PROP_REVISION_LOG</code> element. <em>revprop_table</em> can not contain either of <code>SVN_PROP_REVISION_DATE</code> or <code>SVN_PROP_REVISION_AUTHOR</code>.</p>
<p>Before <code>close_edit</code> returns, but after the commit has succeeded, it will invoke <em>callback</em> (if non-NULL) with the new revision number, the commit date (as a <code>const char *</code>), commit author (as a <code>const char *</code>), and <em>callback_baton</em> as arguments. If <em>callback</em> returns an error, that error will be returned from <code>close_edit</code>, otherwise <code>close_edit</code> will return successfully (unless it encountered an error before invoking <em>callback</em>).</p>
<p>The callback will not be called if the commit was a no-op (i.e. nothing was committed);</p>
<p><em>lock_tokens</em>, if non-NULL, is a hash mapping <code>const char *</code> paths (relative to the URL of <em>session</em>) to <code> const char *</code> lock tokens. The server checks that the correct token is provided for each committed, locked path. <em>lock_tokens</em> must live during the whole commit operation.</p>
<p>If <em>keep_locks</em> is <code>TRUE</code>, then do not release locks on committed objects. Else, automatically release such locks.</p>
<p>The caller may not perform any RA operations using <em>session</em> before finishing the edit.</p>
<p>Use <em>pool</em> for memory allocation.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a2938be25ce7c3748d6b481c087c9a773"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_dated_revision" ref="a2938be25ce7c3748d6b481c087c9a773" args="(svn_ra_session_t *session, svn_revnum_t *revision, apr_time_t tm, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_dated_revision </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_time_t&#160;</td>
          <td class="paramname"><em>tm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the latest revision number at time <em>tm</em> in the repository of <em>session</em>. </p>
<p>Use <em>pool</em> for memory allocation.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="a47420d083621d641f5d55272cc125d74"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_deleted_rev" ref="a47420d083621d641f5d55272cc125d74" args="(svn_ra_session_t *session, const char *path, svn_revnum_t peg_revision, svn_revnum_t end_revision, svn_revnum_t *revision_deleted, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_deleted_rev </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>peg_revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>end_revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *&#160;</td>
          <td class="paramname"><em>revision_deleted</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Given <em>path</em> at revision <em>peg_revision</em>, set <em>*revision_deleted</em> to the revision <em>path</em> was first deleted, within the inclusive revision range defined by <em>peg_revision</em> and <em>end_revision</em>. </p>
<p><em>path</em> is relative to the URL in <em>session</em>.</p>
<p>If <em>path</em> does not exist at <em>peg_revision</em> or was not deleted within the specified range, then set <em>*revision_deleted</em> to <code>SVN_INVALID_REVNUM</code>. If <em>peg_revision</em> or <em>end_revision</em> are invalid or if <em>peg_revision</em> is greater than <em>end_revision</em>, then return <code>SVN_ERR_CLIENT_BAD_REVISION</code>.</p>
<p>Use <em>pool</em> for all allocations.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="a7da17be4ef997b8363d2c2aba6de4bc6"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_dir" ref="a7da17be4ef997b8363d2c2aba6de4bc6" args="(svn_ra_session_t *session, const char *path, svn_revnum_t revision, apr_hash_t **dirents, svn_revnum_t *fetched_rev, apr_hash_t **props, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_dir </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>dirents</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *&#160;</td>
          <td class="paramname"><em>fetched_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <code>svn_ra_get_dir2</code>, but with <code>SVN_DIRENT_ALL</code> for the <em>dirent_fields</em> parameter. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2.</dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000253">Deprecated:</a></b></dt><dd>Provided for compatibility with the 1.3 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ac1fb454bedcb76ac56ce74606b77c53a"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_dir2" ref="ac1fb454bedcb76ac56ce74606b77c53a" args="(svn_ra_session_t *session, apr_hash_t **dirents, svn_revnum_t *fetched_rev, apr_hash_t **props, const char *path, svn_revnum_t revision, apr_uint32_t dirent_fields, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_dir2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>dirents</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *&#160;</td>
          <td class="paramname"><em>fetched_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_uint32_t&#160;</td>
          <td class="paramname"><em>dirent_fields</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>If <em>dirents</em> is non <code>NULL</code>, set <em>*dirents</em> to contain all the entries of directory <em>path</em> at <em>revision</em>. </p>
<p>The keys of <em>dirents</em> will be entry names (<code>const char *</code>), and the values dirents (<code><code><a class="el" href="structsvn__dirent__t.html" title="A general subversion directory entry.">svn_dirent_t</a></code> *</code>). Use <em>pool</em> for all allocations.</p>
<p><em>dirent_fields</em> controls which portions of the <code><code><a class="el" href="structsvn__dirent__t.html" title="A general subversion directory entry.">svn_dirent_t</a></code></code> objects are filled in. To have them completely filled in just pass <code>SVN_DIRENT_ALL</code>, otherwise pass the bitwise OR of all the <code>SVN_DIRENT_</code> fields you would like to have returned to you.</p>
<p><em>path</em> is interpreted relative to the URL in <em>session</em>.</p>
<p>If <em>revision</em> is <code>SVN_INVALID_REVNUM</code> (meaning 'head') and <em>*fetched_rev</em> is not <code>NULL</code>, then this function will set <em>*fetched_rev</em> to the actual revision that was retrieved. (Some callers want to know, and some don't.)</p>
<p>If <em>props</em> is non <code>NULL</code>, set <em>*props</em> to contain the properties of the directory. This means <em>all</em> properties: not just ones controlled by the user and stored in the repository fs, but non-tweakable ones generated by the SCM system itself (e.g. 'wcprops', 'entryprops', etc.) The keys are <code>const char *</code>, values are <code><code><a class="el" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a></code> *</code>.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.4. </dd></dl>

</div>
</div>
<a class="anchor" id="a74f0cb209ce1bc2a4813b5572ad98582"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_file" ref="a74f0cb209ce1bc2a4813b5572ad98582" args="(svn_ra_session_t *session, const char *path, svn_revnum_t revision, svn_stream_t *stream, svn_revnum_t *fetched_rev, apr_hash_t **props, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_file </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af">svn_stream_t</a> *&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *&#160;</td>
          <td class="paramname"><em>fetched_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Fetch the contents and properties of file <em>path</em> at <em>revision</em>. </p>
<p><em>revision</em> may be SVN_INVALID_REVNUM, indicating that the HEAD revision should be used. Interpret <em>path</em> relative to the URL in <em>session</em>. Use <em>pool</em> for all allocations.</p>
<p>If <em>revision</em> is <code>SVN_INVALID_REVNUM</code> and <em>fetched_rev</em> is not <code>NULL</code>, then set <em>*fetched_rev</em> to the actual revision that was retrieved.</p>
<p>If <em>stream</em> is non <code>NULL</code>, push the contents of the file at <em>stream</em>, do not call <a class="el" href="group__svn__io__byte__streams.html#ga7d9cdab4d5d8707d59a1b1d3dab95bb4" title="Close a generic stream.">svn_stream_close()</a> when finished.</p>
<p>If <em>props</em> is non <code>NULL</code>, set <em>*props</em> to contain the properties of the file. This means <em>all</em> properties: not just ones controlled by the user and stored in the repository fs, but non-tweakable ones generated by the SCM system itself (e.g. 'wcprops', 'entryprops', etc.) The keys are <code>const char *</code>, values are <code><code><a class="el" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a></code> *</code>.</p>
<p>The stream handlers for <em>stream</em> may not perform any RA operations using <em>session</em>.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="af06b70c8a7099a521a5dfbab0392c13f"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_file_revs" ref="af06b70c8a7099a521a5dfbab0392c13f" args="(svn_ra_session_t *session, const char *path, svn_revnum_t start, svn_revnum_t end, svn_ra_file_rev_handler_t handler, void *handler_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_file_revs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#a2e7db10113b58c685fd2f77f612a953a">svn_ra_file_rev_handler_t</a>&#160;</td>
          <td class="paramname"><em>handler</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>handler_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__ra_8h.html#aa41da79d2c0faa074122e0ff00c0abbb" title="Retrieve a subset of the interesting revisions of a file path as seen in revision end (see svn_fs_his...">svn_ra_get_file_revs2()</a>, but with <em>include_merged_revisions</em> set to FALSE. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000262">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="aa41da79d2c0faa074122e0ff00c0abbb"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_file_revs2" ref="aa41da79d2c0faa074122e0ff00c0abbb" args="(svn_ra_session_t *session, const char *path, svn_revnum_t start, svn_revnum_t end, svn_boolean_t include_merged_revisions, svn_file_rev_handler_t handler, void *handler_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_file_revs2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>include_merged_revisions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__delta__support.html#ga31e5b4fa524d2ee126ca8f7e7b49eece">svn_file_rev_handler_t</a>&#160;</td>
          <td class="paramname"><em>handler</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>handler_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Retrieve a subset of the interesting revisions of a file <em>path</em> as seen in revision <em>end</em> (see <a class="el" href="group__fs__handling.html#ga58dd5d7dc74bef946a4dc1129c342038" title="Set *prev_history_p to an opaque node history object which represents the previous (or &quot;next oldest&quot;)...">svn_fs_history_prev()</a> for a definition of "interesting revisions"). </p>
<p>Invoke <em>handler</em> with <em>handler_baton</em> as its first argument for each such revision. <em>session</em> is an open RA session. Use <em>pool</em> for all allocations.</p>
<p>If there is an interesting revision of the file that is less than or equal to <em>start</em>, the iteration will begin at that revision. Else, the iteration will begin at the first revision of the file in the repository, which has to be less than or equal to <em>end</em>. Note that if the function succeeds, <em>handler</em> will have been called at least once.</p>
<p>In a series of calls to <em>handler</em>, the file contents for the first interesting revision will be provided as a text delta against the empty file. In the following calls, the delta will be against the fulltext contents for the previous call.</p>
<p>If <em>include_merged_revisions</em> is TRUE, revisions which are included as a result of a merge between <em>start</em> and <em>end</em> will be included.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>This functionality is not available in pre-1.1 servers. If the server doesn't implement it, an alternative (but much slower) implementation based on <a class="el" href="svn__ra_8h.html#a366d8ab12ae02fcade47bcbda7078f0a" title="Invoke receiver with receiver_baton on each log message from start to end.">svn_ra_get_log2()</a> is used.</dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a483f8d91fb6f312d96659180fc4b5b71"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_latest_revnum" ref="a483f8d91fb6f312d96659180fc4b5b71" args="(svn_ra_session_t *session, svn_revnum_t *latest_revnum, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_latest_revnum </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *&#160;</td>
          <td class="paramname"><em>latest_revnum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the latest revision number from the repository of <em>session</em>. </p>
<p>Use <em>pool</em> for memory allocation.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="a7c1fb82956eb3a3703022de10344acd1"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_location_segments" ref="a7c1fb82956eb3a3703022de10344acd1" args="(svn_ra_session_t *session, const char *path, svn_revnum_t peg_revision, svn_revnum_t start_rev, svn_revnum_t end_rev, svn_location_segment_receiver_t receiver, void *receiver_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_location_segments </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>peg_revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>start_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>end_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__node__location__seg__reporting.html#gacd495df85498f9d4aedf4f2c26d5b46d">svn_location_segment_receiver_t</a>&#160;</td>
          <td class="paramname"><em>receiver</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>receiver_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Call <em>receiver</em> (with <em>receiver_baton</em>) for each segment in the location history of <em>path</em> in <em>peg_revision</em>, working backwards in time from <em>start_rev</em> to <em>end_rev</em>. </p>
<p><em>end_rev</em> may be <code>SVN_INVALID_REVNUM</code> to indicate that you want to trace the history of the object to its origin.</p>
<p><em>start_rev</em> may be <code>SVN_INVALID_REVNUM</code> to indicate "the HEAD
 revision". Otherwise, <em>start_rev</em> must be younger than <em>end_rev</em> (unless <em>end_rev</em> is <code>SVN_INVALID_REVNUM</code>).</p>
<p><em>peg_revision</em> may be <code>SVN_INVALID_REVNUM</code> to indicate "the HEAD
 revision", and must evaluate to be at least as young as <em>start_rev</em>.</p>
<p>Use <em>pool</em> for all allocations.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a4cfbcda21199a7debf645d2faad89e68"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_locations" ref="a4cfbcda21199a7debf645d2faad89e68" args="(svn_ra_session_t *session, apr_hash_t **locations, const char *path, svn_revnum_t peg_revision, const apr_array_header_t *location_revisions, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_locations </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>locations</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>peg_revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>location_revisions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*locations</em> to the locations (at the repository revisions <em>location_revisions</em>) of the file identified by <em>path</em> in <em>peg_revision</em>. </p>
<p><em>path</em> is relative to the URL to which <em>session</em> was opened. <em>location_revisions</em> is an array of <code>svn_revnum_t's</code>. <em>*locations</em> will be a mapping from the revisions to their appropriate absolute paths. If the file doesn't exist in a location_revision, that revision will be ignored.</p>
<p>Use <em>pool</em> for all allocations.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="a20f30bdad25af7b62ed46eb3e0ce927c"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_lock" ref="a20f30bdad25af7b62ed46eb3e0ce927c" args="(svn_ra_session_t *session, svn_lock_t **lock, const char *path, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_lock </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__lock__t.html">svn_lock_t</a> **&#160;</td>
          <td class="paramname"><em>lock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>If <em>path</em> is locked, set <em>*lock</em> to an <a class="el" href="structsvn__lock__t.html" title="A lock object, for client &amp; server to share.">svn_lock_t</a> which represents the lock, allocated in <em>pool</em>. </p>
<p>If <em>path</em> is not locked, set <em>*lock</em> to NULL.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="a58724daf905e6c1b72690169dcb18efa"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_locks" ref="a58724daf905e6c1b72690169dcb18efa" args="(svn_ra_session_t *session, apr_hash_t **locks, const char *path, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_locks </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>locks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__ra_8h.html#a56d30cc181a2b9b1c537e6c5425ae4ca" title="Set *locks to a hashtable which represents all locks on or below path.">svn_ra_get_locks2()</a>, but with <em>depth</em> always passed as <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D).">svn_depth_infinity</a>. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000263">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a56d30cc181a2b9b1c537e6c5425ae4ca"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_locks2" ref="a56d30cc181a2b9b1c537e6c5425ae4ca" args="(svn_ra_session_t *session, apr_hash_t **locks, const char *path, svn_depth_t depth, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_locks2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>locks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*locks</em> to a hashtable which represents all locks on or below <em>path</em>. </p>
<p><em>depth</em> limits the returned locks to those associated with paths within the specified depth of <em>path</em>, and must be one of the following values: <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries.">svn_depth_empty</a>, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345" title="D + its file children, but not subdirs.">svn_depth_files</a>, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca68873e015456e384e4f63f3bbd515c8a" title="D + immediate children (D and its entries).">svn_depth_immediates</a>, or <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D).">svn_depth_infinity</a>.</p>
<p>The hashtable maps (const char *) absolute fs paths to (const <a class="el" href="structsvn__lock__t.html" title="A lock object, for client &amp; server to share.">svn_lock_t</a> *) structures. The hashtable -- and all keys and values -- are allocated in <em>pool</em>.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>It is not considered an error for <em>path</em> to not exist in HEAD. Such a search will simply return no locks.</dd>
<dd>
This functionality is not available in pre-1.2 servers. If the server doesn't implement it, an <code>SVN_ERR_RA_NOT_IMPLEMENTED</code> error is returned.</dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="a7d484515cd6a1abbae0b888a91de5074"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_log" ref="a7d484515cd6a1abbae0b888a91de5074" args="(svn_ra_session_t *session, const apr_array_header_t *paths, svn_revnum_t start, svn_revnum_t end, int limit, svn_boolean_t discover_changed_paths, svn_boolean_t strict_node_history, svn_log_message_receiver_t receiver, void *receiver_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_log </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>paths</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>limit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>discover_changed_paths</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>strict_node_history</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a6aa9147b67a7778294a52399de5c0b33">svn_log_message_receiver_t</a>&#160;</td>
          <td class="paramname"><em>receiver</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>receiver_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__ra_8h.html#a366d8ab12ae02fcade47bcbda7078f0a" title="Invoke receiver with receiver_baton on each log message from start to end.">svn_ra_get_log2()</a>, but uses <code>svn_log_message_receiver_t</code> instead of <code>svn_log_entry_receiver_t</code>. </p>
<p>Also, <em>include_merged_revisions</em> is set to <code>FALSE</code> and <em>revprops</em> is svn:author, svn:date, and svn:log.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000259">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a366d8ab12ae02fcade47bcbda7078f0a"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_log2" ref="a366d8ab12ae02fcade47bcbda7078f0a" args="(svn_ra_session_t *session, const apr_array_header_t *paths, svn_revnum_t start, svn_revnum_t end, int limit, svn_boolean_t discover_changed_paths, svn_boolean_t strict_node_history, svn_boolean_t include_merged_revisions, const apr_array_header_t *revprops, svn_log_entry_receiver_t receiver, void *receiver_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_log2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>paths</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>limit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>discover_changed_paths</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>strict_node_history</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>include_merged_revisions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>revprops</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#afb30054d6301afbcd8b00d8dc11d7ddb">svn_log_entry_receiver_t</a>&#160;</td>
          <td class="paramname"><em>receiver</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>receiver_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Invoke <em>receiver</em> with <em>receiver_baton</em> on each log message from <em>start</em> to <em>end</em>. </p>
<p><em>start</em> may be greater or less than <em>end</em>; this just controls whether the log messages are processed in descending or ascending revision number order.</p>
<p>If <em>start</em> or <em>end</em> is <code>SVN_INVALID_REVNUM</code>, it defaults to youngest.</p>
<p>If <em>paths</em> is non-NULL and has one or more elements, then only show revisions in which at least one of <em>paths</em> was changed (i.e., if file, text or props changed; if dir, props changed or an entry was added or deleted). Each path is an <code>const char *</code>, relative to the <em>session's</em> common parent.</p>
<p>If <em>limit</em> is non-zero only invoke <em>receiver</em> on the first <em>limit</em> logs.</p>
<p>If <em>discover_changed_paths</em>, then each call to <em>receiver</em> passes a <code>const apr_hash_t *</code> for the receiver's <em>changed_paths</em> argument; the hash's keys are all the paths committed in that revision. Otherwise, each call to receiver passes NULL for <em>changed_paths</em>.</p>
<p>If <em>strict_node_history</em> is set, copy history will not be traversed (if any exists) when harvesting the revision logs for each path.</p>
<p>If <em>include_merged_revisions</em> is set, log information for revisions which have been merged to <em>targets</em> will also be returned.</p>
<p>If <em>revprops</em> is NULL, retrieve all revprops; else, retrieve only the revprops named in the array (i.e. retrieve none if the array is empty).</p>
<p>If any invocation of <em>receiver</em> returns error, return that error immediately and without wrapping it.</p>
<p>If <em>start</em> or <em>end</em> is a non-existent revision, return the error <code>SVN_ERR_FS_NO_SUCH_REVISION</code>, without ever invoking <em>receiver</em>.</p>
<p>See also the documentation for <code>svn_log_message_receiver_t</code>.</p>
<p>The caller may not invoke any RA operations using <em>session</em> from within <em>receiver</em>.</p>
<p>Use <em>pool</em> for memory allocation.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>If <em>paths</em> is NULL or empty, the result depends on the server. Pre-1.5 servers will send nothing; 1.5 servers will effectively perform the log operation on the root of the repository. This behavior may be changed in the future to ensure consistency across all pedigrees of server.</dd>
<dd>
Pre-1.5 servers do not support custom revprop retrieval; if <em>revprops</em> is NULL or contains a revprop other than svn:author, svn:date, or svn:log, an <code>SVN_ERR_RA_NOT_IMPLEMENTED</code> error is returned.</dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a5fed0d7f4e7c3129788b4459afe9867d"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_mergeinfo" ref="a5fed0d7f4e7c3129788b4459afe9867d" args="(svn_ra_session_t *session, svn_mergeinfo_catalog_t *catalog, const apr_array_header_t *paths, svn_revnum_t revision, svn_mergeinfo_inheritance_t inherit, svn_boolean_t include_descendants, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_mergeinfo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">svn_mergeinfo_catalog_t *&#160;</td>
          <td class="paramname"><em>catalog</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>paths</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__mergeinfo_8h.html#acd81e9d0f5bcc4eec4df7b8a140f435c">svn_mergeinfo_inheritance_t</a>&#160;</td>
          <td class="paramname"><em>inherit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>include_descendants</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*catalog</em> to a mergeinfo catalog for the paths in <em>paths</em>. </p>
<p>If no mergeinfo is available, set <em>*catalog</em> to <code>NULL</code>. The requested mergeinfo hashes are for <em>paths</em> (which are relative to <em>session's</em> URL) in <em>revision</em>. If one of the paths does not exist in that revision, return SVN_ERR_FS_NOT_FOUND.</p>
<p><em>inherit</em> indicates whether explicit, explicit or inherited, or only inherited mergeinfo for <em>paths</em> is retrieved.</p>
<p>If <em>include_descendants</em> is TRUE, then additionally return the mergeinfo for any descendant of any element of <em>paths</em> which has the <code>SVN_PROP_MERGEINFO</code> property explicitly set on it. (Note that inheritance is only taken into account for the elements in <em>paths</em>; descendants of the elements in <em>paths</em> which get their mergeinfo via inheritance are not included in <em>*catalog</em>.)</p>
<p>Allocate the returned values in <em>pool</em>.</p>
<p>If <em>revision</em> is <code>SVN_INVALID_REVNUM</code>, it defaults to youngest.</p>
<p>If the server doesn't support retrieval of mergeinfo (which can happen even for <a href="file://">file://</a> URLs, if the repository itself hasn't been upgraded), return <code>SVN_ERR_UNSUPPORTED_FEATURE</code> in preference to any other error that might otherwise be returned.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a60d73140b421a2bb5f5860108cecffd5"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_path_relative_to_root" ref="a60d73140b421a2bb5f5860108cecffd5" args="(svn_ra_session_t *ra_session, const char **rel_path, const char *url, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_path_relative_to_root </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>ra_session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>rel_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Convert <em>url</em> into a path relative to the repository root URL of the repository with which <em>ra_session</em> is associated, setting <em>*rel_path</em> to that value. </p>
<p>If <em>url</em> is not a child of repository root URL, return <code>SVN_ERR_RA_ILLEGAL_URL</code>.</p>
<p>The returned path is uri decoded to allow using it with the ra or other apis as a valid relpath.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="a071b1b1fbb6791e65319a5ac690d3712"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_path_relative_to_session" ref="a071b1b1fbb6791e65319a5ac690d3712" args="(svn_ra_session_t *ra_session, const char **rel_path, const char *url, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_path_relative_to_session </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>ra_session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>rel_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Convert <em>url</em> into a path relative to the URL at which <em>ra_session</em> is parented, setting <em>*rel_path</em> to that value. </p>
<p>If <em>url</em> is not a child of the session URL, return <code>SVN_ERR_RA_ILLEGAL_URL</code>.</p>
<p>The returned path is uri decoded to allow using it with the ra or other apis as a valid relpath.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="a7227450e16da09eeabf044461307985d"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_ra_library" ref="a7227450e16da09eeabf044461307985d" args="(svn_ra_plugin_t **library, void *ra_baton, const char *url, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_ra_library </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__ra__plugin__t.html">svn_ra_plugin_t</a> **&#160;</td>
          <td class="paramname"><em>library</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ra_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return an RA vtable-<em>library</em> which can handle URL. </p>
<p>A number of svn_client_* routines will call this internally, but client apps might use it too. $a ra_baton is a baton obtained by a call to <a class="el" href="svn__ra_8h.html#a9262a57b401223ea5628923988ff50bb" title="Initialize the compatibility wrapper, using pool for any allocations.">svn_ra_init_ra_libs()</a>.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000273">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="af9ede44af4d4be1f8a52ed4a56c26495"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_repos_root" ref="af9ede44af4d4be1f8a52ed4a56c26495" args="(svn_ra_session_t *session, const char **url, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_repos_root </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__ra_8h.html#a3532a49244b7e7057471cd0bb221624b" title="Set *url to the repository&#39;s root URL, allocated in pool.">svn_ra_get_repos_root2()</a>, but returns the value allocated in <em>session's</em> pool. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000261">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="a3532a49244b7e7057471cd0bb221624b"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_repos_root2" ref="a3532a49244b7e7057471cd0bb221624b" args="(svn_ra_session_t *session, const char **url, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_repos_root2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*url</em> to the repository's root URL, allocated in <em>pool</em>. </p>
<p>The value will not include a trailing '/'. The returned URL is guaranteed to be a prefix of the <em>session's</em> URL.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a71fad1aa0f6612260430f468846de8fd"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_session_url" ref="a71fad1aa0f6612260430f468846de8fd" args="(svn_ra_session_t *ra_session, const char **url, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_session_url </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>ra_session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*url</em> to the repository URL to which <em>ra_session</em> was opened or most recently reparented. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a1b9e28e42765b63d24ae93f83272e1b9"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_uuid" ref="a1b9e28e42765b63d24ae93f83272e1b9" args="(svn_ra_session_t *session, const char **uuid, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_uuid </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>uuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__ra_8h.html#a54eb10c177f8a634d30569e75e665f6c" title="Set *uuid to the repository&#39;s UUID, allocated in pool.">svn_ra_get_uuid2()</a>, but returns the value allocated in <em>session's</em> pool. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000260">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="a54eb10c177f8a634d30569e75e665f6c"></a><!-- doxytag: member="svn_ra.h::svn_ra_get_uuid2" ref="a54eb10c177f8a634d30569e75e665f6c" args="(svn_ra_session_t *session, const char **uuid, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_get_uuid2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>uuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*uuid</em> to the repository's UUID, allocated in <em>pool</em>. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a9262a57b401223ea5628923988ff50bb"></a><!-- doxytag: member="svn_ra.h::svn_ra_init_ra_libs" ref="a9262a57b401223ea5628923988ff50bb" args="(void **ra_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_init_ra_libs </td>
          <td>(</td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>ra_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initialize the compatibility wrapper, using <em>pool</em> for any allocations. </p>
<p>The caller must hold on to <em>ra_baton</em> as long as the RA library is used.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000272">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a79f2e38e49200c1e710c6c86300578f6"></a><!-- doxytag: member="svn_ra.h::svn_ra_initialize" ref="a79f2e38e49200c1e710c6c86300578f6" args="(apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_initialize </td>
          <td>(</td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initialize the RA library. </p>
<p>This function must be called before using any function in this header, except the deprecated APIs based on <code><a class="el" href="structsvn__ra__plugin__t.html" title="Using this callback struct is similar to calling the newer public interface that is based on svn_ra_s...">svn_ra_plugin_t</a></code>, or <a class="el" href="svn__ra_8h.html#affddbb41c21901436e172f13db1c3715" title="Get libsvn_ra version information.">svn_ra_version()</a>. This function must not be called simultaneously in multiple threads. <em>pool</em> must live longer than any open RA sessions.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="aada4d384aa1b3f044962fe7f1a1e4995"></a><!-- doxytag: member="svn_ra.h::svn_ra_local_init" ref="aada4d384aa1b3f044962fe7f1a1e4995" args="(int abi_version, apr_pool_t *pool, apr_hash_t *hash)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_local_init </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>abi_version</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>hash</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initialize libsvn_ra_local. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000269">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a2b4233224aec6229944988d1e2d40ee2"></a><!-- doxytag: member="svn_ra.h::svn_ra_lock" ref="a2b4233224aec6229944988d1e2d40ee2" args="(svn_ra_session_t *session, apr_hash_t *path_revs, const char *comment, svn_boolean_t steal_lock, svn_ra_lock_callback_t lock_func, void *lock_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_lock </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>path_revs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>comment</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>steal_lock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#a129ad53bc913318ef95c38dea5f740d8">svn_ra_lock_callback_t</a>&#160;</td>
          <td class="paramname"><em>lock_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>lock_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Lock each path in <em>path_revs</em>, which is a hash whose keys are the paths to be locked, and whose values are the corresponding base revisions for each path. </p>
<p>Note that locking is never anonymous, so any server implementing this function will have to "pull" a username from the client, if it hasn't done so already.</p>
<p><em>comment</em> is optional: it's either an xml-escapable string which describes the lock, or it is NULL.</p>
<p>If any path is already locked by a different user, then call <em>lock_func/<em>lock_baton</em> with</em> an error. If <em>steal_lock</em> is TRUE, then "steal" the existing lock(s) anyway, even if the RA username does not match the current lock's owner. Delete any lock on the path, and unconditionally create a new lock.</p>
<p>For each path, if its base revision (in <em>path_revs</em>) is a valid revnum, then do an out-of-dateness check. If the revnum is less than the last-changed-revision of any path (or if a path doesn't exist in HEAD), call <em>lock_func/<em>lock_baton</em> with</em> an SVN_ERR_RA_OUT_OF_DATE error.</p>
<p>After successfully locking a file, <em>lock_func</em> is called with the <em>lock_baton</em>.</p>
<p>Use <em>pool</em> for temporary allocations.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="a9ca356e05ca9ce35d672b62b5fd2e94c"></a><!-- doxytag: member="svn_ra.h::svn_ra_open" ref="a9ca356e05ca9ce35d672b62b5fd2e94c" args="(svn_ra_session_t **session_p, const char *repos_URL, const svn_ra_callbacks_t *callbacks, void *callback_baton, apr_hash_t *config, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_open </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> **&#160;</td>
          <td class="paramname"><em>session_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>repos_URL</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__callbacks__t.html">svn_ra_callbacks_t</a> *&#160;</td>
          <td class="paramname"><em>callbacks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>callback_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>config</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="svn__ra_8h.html#aa2d9f2c59e0079c00bd4745082e838ef" title="Similar to svn_ra_open3(), but with uuid set to NULL.">svn_ra_open2()</a>. </dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000249">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.2 API. </dd></dl>

</div>
</div>
<a class="anchor" id="aa2d9f2c59e0079c00bd4745082e838ef"></a><!-- doxytag: member="svn_ra.h::svn_ra_open2" ref="aa2d9f2c59e0079c00bd4745082e838ef" args="(svn_ra_session_t **session_p, const char *repos_URL, const svn_ra_callbacks2_t *callbacks, void *callback_baton, apr_hash_t *config, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_open2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> **&#160;</td>
          <td class="paramname"><em>session_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>repos_URL</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__callbacks2__t.html">svn_ra_callbacks2_t</a> *&#160;</td>
          <td class="paramname"><em>callbacks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>callback_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>config</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__ra_8h.html#a2543ab564e75c55f801e6ad6dfbf1f7d" title="Similar to svn_ra_open4(), but with corrected_url always passed as NULL.">svn_ra_open3()</a>, but with <em>uuid</em> set to <code>NULL</code>. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.3. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000248">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a2543ab564e75c55f801e6ad6dfbf1f7d"></a><!-- doxytag: member="svn_ra.h::svn_ra_open3" ref="a2543ab564e75c55f801e6ad6dfbf1f7d" args="(svn_ra_session_t **session_p, const char *repos_URL, const char *uuid, const svn_ra_callbacks2_t *callbacks, void *callback_baton, apr_hash_t *config, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_open3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> **&#160;</td>
          <td class="paramname"><em>session_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>repos_URL</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>uuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__callbacks2__t.html">svn_ra_callbacks2_t</a> *&#160;</td>
          <td class="paramname"><em>callbacks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>callback_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>config</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__ra_8h.html#a96145f7696ecf080a6d4a0a67d9d7127" title="Open a repository access session to the repository at repos_URL, or inform the caller regarding a cor...">svn_ra_open4()</a>, but with <em>corrected_url</em> always passed as <code>NULL</code>. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000247">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a96145f7696ecf080a6d4a0a67d9d7127"></a><!-- doxytag: member="svn_ra.h::svn_ra_open4" ref="a96145f7696ecf080a6d4a0a67d9d7127" args="(svn_ra_session_t **session_p, const char **corrected_url, const char *repos_URL, const char *uuid, const svn_ra_callbacks2_t *callbacks, void *callback_baton, apr_hash_t *config, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_open4 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> **&#160;</td>
          <td class="paramname"><em>session_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>corrected_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>repos_URL</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>uuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__callbacks2__t.html">svn_ra_callbacks2_t</a> *&#160;</td>
          <td class="paramname"><em>callbacks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>callback_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>config</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Open a repository access session to the repository at <em>repos_URL</em>, or inform the caller regarding a correct URL by which to access that repository. </p>
<p>If <em>repos_URL</em> can be used successfully to access the repository, set <em>*session_p</em> to an opaque object representing a repository session for the repository and (if <em>corrected_url</em> is non-NULL) set <em>*corrected_url</em> to NULL. If there's a better URL that the caller should try and <em>corrected_url</em> is non-NULL, set <em>*session_p</em> to NULL and <em>*corrected_url</em> to the corrected URL. If there's a better URL that the caller should try, and <em>corrected_url</em> is NULL, return an <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660ab8a848fbff87469b54e1dcb5f98971ff" title="&quot;Session URL does not match expected session URL&quot;">SVN_ERR_RA_SESSION_URL_MISMATCH</a> error. Allocate all returned items in <em>pool</em>.</p>
<p>Return <code>SVN_ERR_RA_UUID_MISMATCH</code> if <em>uuid</em> is non-NULL and not equal to the UUID of the repository at <code>repos_URL</code>.</p>
<p><em>callbacks/<em>callback_baton</em> is</em> a table of callbacks provided by the client; see <code><a class="el" href="structsvn__ra__callbacks2__t.html" title="A collection of callbacks implemented by libsvn_client which allows an RA layer to &quot;pull&quot; information...">svn_ra_callbacks2_t</a></code>.</p>
<p><em>config</em> is a hash mapping <code>const char *</code> keys to <code>svn_config_t</code> * values. For example, the <code>svn_config_t</code> for the "~/.subversion/config" file is under the key "config".</p>
<p>All RA requests require a session; they will continue to use <em>pool</em> for memory allocation.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__clnt__sessions.html#gab0ca49065b469625d1168896abdd34fc" title="Open an RA session rooted at url, and return it in *session.">svn_client_open_ra_session()</a>.</dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="a54da5fc271cb9242a5c6e32d4e63f172"></a><!-- doxytag: member="svn_ra.h::svn_ra_print_modules" ref="a54da5fc271cb9242a5c6e32d4e63f172" args="(svn_stringbuf_t *output, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_print_modules </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Append a textual list of all available RA modules to the stringbuf <em>output</em>. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="ad88372f65c1d64451d3d782a5a22c587"></a><!-- doxytag: member="svn_ra.h::svn_ra_print_ra_libraries" ref="ad88372f65c1d64451d3d782a5a22c587" args="(svn_stringbuf_t **descriptions, void *ra_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_print_ra_libraries </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__stringbuf__t.html">svn_stringbuf_t</a> **&#160;</td>
          <td class="paramname"><em>descriptions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ra_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__ra_8h.html#a54da5fc271cb9242a5c6e32d4e63f172" title="Append a textual list of all available RA modules to the stringbuf output.">svn_ra_print_modules()</a>. </p>
<p><em>ra_baton</em> is ignored.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000264">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a7e9aa7286274bda5cf260c7fa694c7a5"></a><!-- doxytag: member="svn_ra.h::svn_ra_reparent" ref="a7e9aa7286274bda5cf260c7fa694c7a5" args="(svn_ra_session_t *ra_session, const char *url, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_reparent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>ra_session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the root URL of an open <em>ra_session</em> to point to a new path in the same repository. </p>
<p><em>url</em> is the new root URL. Use <em>pool</em> for temporary allocations.</p>
<p>If <em>url</em> has a different repository root than the current session URL, return <code>SVN_ERR_RA_ILLEGAL_URL</code>.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.4. </dd></dl>

</div>
</div>
<a class="anchor" id="ad79d196db14e261a932f3207f41da5ae"></a><!-- doxytag: member="svn_ra.h::svn_ra_replay" ref="ad79d196db14e261a932f3207f41da5ae" args="(svn_ra_session_t *session, svn_revnum_t revision, svn_revnum_t low_water_mark, svn_boolean_t send_deltas, const svn_delta_editor_t *editor, void *edit_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_replay </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>low_water_mark</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>send_deltas</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__delta__editor__t.html">svn_delta_editor_t</a> *&#160;</td>
          <td class="paramname"><em>editor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>edit_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Replay the changes from <em>revision</em> through <em>editor</em> and <em>edit_baton</em>. </p>
<p>Changes will be limited to those that occur under <em>session's</em> URL, and the server will assume that the client has no knowledge of revisions prior to <em>low_water_mark</em>. These two limiting factors define the portion of the tree that the server will assume the client already has knowledge of, and thus any copies of data from outside that part of the tree will be sent in their entirety, not as simple copies or deltas against a previous version.</p>
<p>If <em>send_deltas</em> is <code>TRUE</code>, the actual text and property changes in the revision will be sent, otherwise dummy text deltas and null property changes will be sent instead.</p>
<p><em>pool</em> is used for all allocation.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.4. </dd></dl>

</div>
</div>
<a class="anchor" id="a9fbcde06ba0b9ddb331631852f3277bd"></a><!-- doxytag: member="svn_ra.h::svn_ra_replay_range" ref="a9fbcde06ba0b9ddb331631852f3277bd" args="(svn_ra_session_t *session, svn_revnum_t start_revision, svn_revnum_t end_revision, svn_revnum_t low_water_mark, svn_boolean_t send_deltas, svn_ra_replay_revstart_callback_t revstart_func, svn_ra_replay_revfinish_callback_t revfinish_func, void *replay_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_replay_range </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>start_revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>end_revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>low_water_mark</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>send_deltas</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#aa55458ae9cf8156cbe9648c1151e685e">svn_ra_replay_revstart_callback_t</a>&#160;</td>
          <td class="paramname"><em>revstart_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#aa815d4bdd7522061e89474fcbded072e">svn_ra_replay_revfinish_callback_t</a>&#160;</td>
          <td class="paramname"><em>revfinish_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>replay_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Replay the changes from a range of revisions between <em>start_revision</em> and <em>end_revision</em>. </p>
<p>When receiving information for one revision, a callback <em>revstart_func</em> is called; this callback will provide an editor and baton through which the revision will be replayed. When replaying the revision is finished, callback <em>revfinish_func</em> will be called so the editor can be closed.</p>
<p>Changes will be limited to those that occur under <em>session's</em> URL, and the server will assume that the client has no knowledge of revisions prior to <em>low_water_mark</em>. These two limiting factors define the portion of the tree that the server will assume the client already has knowledge of, and thus any copies of data from outside that part of the tree will be sent in their entirety, not as simple copies or deltas against a previous version.</p>
<p>If <em>send_deltas</em> is <code>TRUE</code>, the actual text and property changes in the revision will be sent, otherwise dummy text deltas and NULL property changes will be sent instead.</p>
<p><em>pool</em> is used for all allocation.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="a6a19b601d84c1507a95f301f63b7fd25"></a><!-- doxytag: member="svn_ra.h::svn_ra_rev_prop" ref="a6a19b601d84c1507a95f301f63b7fd25" args="(svn_ra_session_t *session, svn_revnum_t rev, const char *name, svn_string_t **value, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_rev_prop </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__string__t.html">svn_string_t</a> **&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*value</em> to the value of unversioned property <em>name</em> attached to revision <em>rev</em> in the repository of <em>session</em>. </p>
<p>If <em>rev</em> has no property by that name, set <em>*value</em> to <code>NULL</code>.</p>
<p>Use <em>pool</em> for memory allocation.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="a68debc38add97c9bd897278b9e4cc018"></a><!-- doxytag: member="svn_ra.h::svn_ra_rev_proplist" ref="a68debc38add97c9bd897278b9e4cc018" args="(svn_ra_session_t *session, svn_revnum_t rev, apr_hash_t **props, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_rev_proplist </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*props</em> to the list of unversioned properties attached to revision <em>rev</em> in the repository of <em>session</em>. </p>
<p>The hash maps (<code>const char *</code>) names to (<code><code><a class="el" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a></code> *</code>) values.</p>
<p>Use <em>pool</em> for memory allocation.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="ad39893f2a04a980d26936b0d85223c52"></a><!-- doxytag: member="svn_ra.h::svn_ra_serf_init" ref="ad39893f2a04a980d26936b0d85223c52" args="(int abi_version, apr_pool_t *pool, apr_hash_t *hash)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_serf_init </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>abi_version</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>hash</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initialize libsvn_ra_serf. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.4. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000271">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="abfe91a8afdd4cde0b12688dc588b8ebd"></a><!-- doxytag: member="svn_ra.h::svn_ra_stat" ref="abfe91a8afdd4cde0b12688dc588b8ebd" args="(svn_ra_session_t *session, const char *path, svn_revnum_t revision, svn_dirent_t **dirent, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_stat </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsvn__dirent__t.html">svn_dirent_t</a> **&#160;</td>
          <td class="paramname"><em>dirent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*dirent</em> to an <code><a class="el" href="structsvn__dirent__t.html" title="A general subversion directory entry.">svn_dirent_t</a></code> associated with <em>path</em> at <em>revision</em>. </p>
<p><em>path</em> is relative to the <em>session's</em> parent's URL. If <em>path</em> does not exist in <em>revision</em>, set <em>*dirent</em> to NULL.</p>
<p>Use <em>pool</em> for memory allocation.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="ac18324af265efd7a44d0c031483fb208"></a><!-- doxytag: member="svn_ra.h::svn_ra_svn_init" ref="ac18324af265efd7a44d0c031483fb208" args="(int abi_version, apr_pool_t *pool, apr_hash_t *hash)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_svn_init </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>abi_version</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>hash</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initialize libsvn_ra_svn. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000270">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a03222b1947a2eda17f99c8e0acdb4cca"></a><!-- doxytag: member="svn_ra.h::svn_ra_unlock" ref="a03222b1947a2eda17f99c8e0acdb4cca" args="(svn_ra_session_t *session, apr_hash_t *path_tokens, svn_boolean_t break_lock, svn_ra_lock_callback_t lock_func, void *lock_baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_ra_unlock </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#ac3a7f3c8f2562ed346c2431c4c94f507">svn_ra_session_t</a> *&#160;</td>
          <td class="paramname"><em>session</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>path_tokens</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>break_lock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__ra_8h.html#a129ad53bc913318ef95c38dea5f740d8">svn_ra_lock_callback_t</a>&#160;</td>
          <td class="paramname"><em>lock_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>lock_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Remove the repository lock for each path in <em>path_tokens</em>. </p>
<p><em>path_tokens</em> is a hash whose keys are the paths to be locked, and whose values are the corresponding lock tokens for each path. If the path has no corresponding lock token, or if <em>break_lock</em> is TRUE, then the corresponding value shall be "".</p>
<p>Note that unlocking is never anonymous, so any server implementing this function will have to "pull" a username from the client, if it hasn't done so already.</p>
<p>If <em>token</em> points to a lock, but the RA username doesn't match the lock's owner, call <em>lock_func/<em>lock_baton</em> with</em> an error. If <em>break_lock</em> is TRUE, however, instead allow the lock to be "broken" by the RA user.</p>
<p>After successfully unlocking a path, <em>lock_func</em> is called with the <em>lock_baton</em>.</p>
<p>Use <em>pool</em> for temporary allocations.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="affddbb41c21901436e172f13db1c3715"></a><!-- doxytag: member="svn_ra.h::svn_ra_version" ref="affddbb41c21901436e172f13db1c3715" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structsvn__version__t.html">svn_version_t</a>* svn_ra_version </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get libsvn_ra version information. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.1. </dd></dl>

</div>
</div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Fri Dec 23 2011 09:20:39 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>
