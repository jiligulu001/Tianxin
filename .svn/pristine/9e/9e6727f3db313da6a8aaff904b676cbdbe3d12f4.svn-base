<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Subversion: svn_fs.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">svn_fs.h</div>  </div>
</div>
<div class="contents">
<a href="svn__fs_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**</span>
<a name="l00002"></a>00002 <span class="comment"> * @copyright</span>
<a name="l00003"></a>00003 <span class="comment"> * ====================================================================</span>
<a name="l00004"></a>00004 <span class="comment"> *    Licensed to the Apache Software Foundation (ASF) under one</span>
<a name="l00005"></a>00005 <span class="comment"> *    or more contributor license agreements.  See the NOTICE file</span>
<a name="l00006"></a>00006 <span class="comment"> *    distributed with this work for additional information</span>
<a name="l00007"></a>00007 <span class="comment"> *    regarding copyright ownership.  The ASF licenses this file</span>
<a name="l00008"></a>00008 <span class="comment"> *    to you under the Apache License, Version 2.0 (the</span>
<a name="l00009"></a>00009 <span class="comment"> *    &quot;License&quot;); you may not use this file except in compliance</span>
<a name="l00010"></a>00010 <span class="comment"> *    with the License.  You may obtain a copy of the License at</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00013"></a>00013 <span class="comment"> *</span>
<a name="l00014"></a>00014 <span class="comment"> *    Unless required by applicable law or agreed to in writing,</span>
<a name="l00015"></a>00015 <span class="comment"> *    software distributed under the License is distributed on an</span>
<a name="l00016"></a>00016 <span class="comment"> *    &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span>
<a name="l00017"></a>00017 <span class="comment"> *    KIND, either express or implied.  See the License for the</span>
<a name="l00018"></a>00018 <span class="comment"> *    specific language governing permissions and limitations</span>
<a name="l00019"></a>00019 <span class="comment"> *    under the License.</span>
<a name="l00020"></a>00020 <span class="comment"> * ====================================================================</span>
<a name="l00021"></a>00021 <span class="comment"> * @endcopyright</span>
<a name="l00022"></a>00022 <span class="comment"> *</span>
<a name="l00023"></a>00023 <span class="comment"> * @file svn_fs.h</span>
<a name="l00024"></a>00024 <span class="comment"> * @brief Interface to the Subversion filesystem.</span>
<a name="l00025"></a>00025 <span class="comment"> */</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef SVN_FS_H</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define SVN_FS_H</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;apr.h&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;apr_pools.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;apr_hash.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;apr_tables.h&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;apr_time.h&gt;</span>    <span class="comment">/* for apr_time_t */</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="svn__types_8h.html" title="Subversion&#39;s data types.">svn_types.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="svn__string_8h.html" title="Counted-length strings for Subversion, plus some C string goodies.">svn_string.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="svn__delta_8h.html" title="Delta-parsing.">svn_delta.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="svn__io_8h.html" title="General file I/O for Subversion.">svn_io.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="svn__mergeinfo_8h.html" title="mergeinfo handling and processing">svn_mergeinfo.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="svn__checksum_8h.html" title="Subversion checksum routines.">svn_checksum.h</a>&quot;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {
<a name="l00046"></a>00046 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="comment"></span>
<a name="l00049"></a>00049 <span class="comment">/**</span>
<a name="l00050"></a>00050 <span class="comment"> * Get libsvn_fs version information.</span>
<a name="l00051"></a>00051 <span class="comment"> *</span>
<a name="l00052"></a>00052 <span class="comment"> * @since New in 1.1.</span>
<a name="l00053"></a>00053 <span class="comment"> */</span>
<a name="l00054"></a>00054 <span class="keyword">const</span> <a class="code" href="structsvn__version__t.html" title="Version information.">svn_version_t</a> *
<a name="l00055"></a>00055 <a class="code" href="svn__fs_8h.html#a4a163d8904518931349cb5df82a7e0b9" title="Get libsvn_fs version information.">svn_fs_version</a>(<span class="keywordtype">void</span>);
<a name="l00056"></a>00056 <span class="comment"></span>
<a name="l00057"></a>00057 <span class="comment">/**</span>
<a name="l00058"></a>00058 <span class="comment"> * @defgroup fs_handling Filesystem interaction subsystem</span>
<a name="l00059"></a>00059 <span class="comment"> * @{</span>
<a name="l00060"></a>00060 <span class="comment"> */</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="comment">/* Opening and creating filesystems.  */</span>
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="comment"></span>
<a name="l00065"></a>00065 <span class="comment">/** An object representing a Subversion filesystem.  */</span>
<a name="l00066"></a><a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3">00066</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a>;
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 <span class="comment"></span>
<a name="l00069"></a>00069 <span class="comment">/**</span>
<a name="l00070"></a>00070 <span class="comment"> * @name Filesystem configuration options</span>
<a name="l00071"></a>00071 <span class="comment"> * @{</span>
<a name="l00072"></a>00072 <span class="comment"> */</span>
<a name="l00073"></a>00073 <span class="preprocessor">#define SVN_FS_CONFIG_BDB_TXN_NOSYNC            &quot;bdb-txn-nosync&quot;</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span><span class="preprocessor">#define SVN_FS_CONFIG_BDB_LOG_AUTOREMOVE        &quot;bdb-log-autoremove&quot;</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00076"></a>00076 <span class="comment">/** Enable / disable text delta caching for a FSFS repository.</span>
<a name="l00077"></a>00077 <span class="comment"> *</span>
<a name="l00078"></a>00078 <span class="comment"> * @since New in 1.7.</span>
<a name="l00079"></a>00079 <span class="comment"> */</span>
<a name="l00080"></a><a class="code" href="group__fs__handling.html#gabc9c69b38e7648f51d44c19d30264768">00080</a> <span class="preprocessor">#define SVN_FS_CONFIG_FSFS_CACHE_DELTAS         &quot;fsfs-cache-deltas&quot;</span>
<a name="l00081"></a>00081 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00082"></a>00082 <span class="comment">/** Enable / disable full-text caching for a FSFS repository.</span>
<a name="l00083"></a>00083 <span class="comment"> *</span>
<a name="l00084"></a>00084 <span class="comment"> * @since New in 1.7.</span>
<a name="l00085"></a>00085 <span class="comment"> */</span>
<a name="l00086"></a><a class="code" href="group__fs__handling.html#ga5723e5da32aff3655370c74df55869ec">00086</a> <span class="preprocessor">#define SVN_FS_CONFIG_FSFS_CACHE_FULLTEXTS      &quot;fsfs-cache-fulltexts&quot;</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span>
<a name="l00088"></a>00088 <span class="comment">/* See also svn_fs_type(). */</span><span class="comment"></span>
<a name="l00089"></a>00089 <span class="comment">/** @since New in 1.1. */</span>
<a name="l00090"></a><a class="code" href="group__fs__handling.html#ga8cce99342f8830d9541901fcbc5fa8b3">00090</a> <span class="preprocessor">#define SVN_FS_CONFIG_FS_TYPE                   &quot;fs-type&quot;</span>
<a name="l00091"></a>00091 <span class="preprocessor"></span><span class="comment">/** @since New in 1.1. */</span>
<a name="l00092"></a><a class="code" href="group__fs__handling.html#ga29b820d53571bccdf8f381652f584ab9">00092</a> <span class="preprocessor">#define SVN_FS_TYPE_BDB                         &quot;bdb&quot;</span>
<a name="l00093"></a>00093 <span class="preprocessor"></span><span class="comment">/** @since New in 1.1. */</span>
<a name="l00094"></a><a class="code" href="group__fs__handling.html#gad9fcc8cddb1a0cd207b53196d88152d8">00094</a> <span class="preprocessor">#define SVN_FS_TYPE_FSFS                        &quot;fsfs&quot;</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00096"></a>00096 <span class="comment">/** Create repository format compatible with Subversion versions</span>
<a name="l00097"></a>00097 <span class="comment"> * earlier than 1.4.</span>
<a name="l00098"></a>00098 <span class="comment"> *</span>
<a name="l00099"></a>00099 <span class="comment"> *  @since New in 1.4.</span>
<a name="l00100"></a>00100 <span class="comment"> */</span>
<a name="l00101"></a><a class="code" href="group__fs__handling.html#gadc13f77df450863a919070b29b21c781">00101</a> <span class="preprocessor">#define SVN_FS_CONFIG_PRE_1_4_COMPATIBLE        &quot;pre-1.4-compatible&quot;</span>
<a name="l00102"></a>00102 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00103"></a>00103 <span class="comment">/** Create repository format compatible with Subversion versions</span>
<a name="l00104"></a>00104 <span class="comment"> * earlier than 1.5.</span>
<a name="l00105"></a>00105 <span class="comment"> *</span>
<a name="l00106"></a>00106 <span class="comment"> * @since New in 1.5.</span>
<a name="l00107"></a>00107 <span class="comment"> */</span>
<a name="l00108"></a><a class="code" href="group__fs__handling.html#ga1c752f75cbf1c1baa0e9162a69c3d726">00108</a> <span class="preprocessor">#define SVN_FS_CONFIG_PRE_1_5_COMPATIBLE        &quot;pre-1.5-compatible&quot;</span>
<a name="l00109"></a>00109 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00110"></a>00110 <span class="comment">/** Create repository format compatible with Subversion versions</span>
<a name="l00111"></a>00111 <span class="comment"> * earlier than 1.6.</span>
<a name="l00112"></a>00112 <span class="comment"> *</span>
<a name="l00113"></a>00113 <span class="comment"> * @since New in 1.6.</span>
<a name="l00114"></a>00114 <span class="comment"> */</span>
<a name="l00115"></a><a class="code" href="group__fs__handling.html#ga3a32c49aff9bb931c07c6cca5f4f80c9">00115</a> <span class="preprocessor">#define SVN_FS_CONFIG_PRE_1_6_COMPATIBLE        &quot;pre-1.6-compatible&quot;</span>
<a name="l00116"></a>00116 <span class="preprocessor"></span><span class="comment">/** @} */</span>
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 <span class="comment"></span>
<a name="l00119"></a>00119 <span class="comment">/**</span>
<a name="l00120"></a>00120 <span class="comment"> * Callers should invoke this function to initialize global state in</span>
<a name="l00121"></a>00121 <span class="comment"> * the FS library before creating FS objects.  If this function is</span>
<a name="l00122"></a>00122 <span class="comment"> * invoked, no FS objects may be created in another thread at the same</span>
<a name="l00123"></a>00123 <span class="comment"> * time as this invocation, and the provided @a pool must last longer</span>
<a name="l00124"></a>00124 <span class="comment"> * than any FS object created subsequently.</span>
<a name="l00125"></a>00125 <span class="comment"> *</span>
<a name="l00126"></a>00126 <span class="comment"> * If this function is not called, the FS library will make a best</span>
<a name="l00127"></a>00127 <span class="comment"> * effort to bootstrap a mutex for protecting data common to FS</span>
<a name="l00128"></a>00128 <span class="comment"> * objects; however, there is a small window of failure.  Also, a</span>
<a name="l00129"></a>00129 <span class="comment"> * small amount of data will be leaked if the Subversion FS library is</span>
<a name="l00130"></a>00130 <span class="comment"> * dynamically unloaded, and using the bdb FS can potentially segfault</span>
<a name="l00131"></a>00131 <span class="comment"> * or invoke other undefined behavior if this function is not called</span>
<a name="l00132"></a>00132 <span class="comment"> * with an appropriate pool (such as the pool the module was loaded into)</span>
<a name="l00133"></a>00133 <span class="comment"> * when loaded dynamically.</span>
<a name="l00134"></a>00134 <span class="comment"> *</span>
<a name="l00135"></a>00135 <span class="comment"> * If this function is called multiple times before the pool passed to</span>
<a name="l00136"></a>00136 <span class="comment"> * the first call is destroyed or cleared, the later calls will have</span>
<a name="l00137"></a>00137 <span class="comment"> * no effect.</span>
<a name="l00138"></a>00138 <span class="comment"> *</span>
<a name="l00139"></a>00139 <span class="comment"> * @since New in 1.2.</span>
<a name="l00140"></a>00140 <span class="comment"> */</span>
<a name="l00141"></a>00141 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00142"></a>00142 <a class="code" href="group__fs__handling.html#gaf3bce1e26521c4432f14f3adfc617f17" title="Callers should invoke this function to initialize global state in the FS library before creating FS o...">svn_fs_initialize</a>(apr_pool_t *pool);
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 <span class="comment"></span>
<a name="l00145"></a>00145 <span class="comment">/** The type of a warning callback function.  @a baton is the value specified</span>
<a name="l00146"></a>00146 <span class="comment"> * in the call to svn_fs_set_warning_func(); the filesystem passes it through</span>
<a name="l00147"></a>00147 <span class="comment"> * to the callback.  @a err contains the warning message.</span>
<a name="l00148"></a>00148 <span class="comment"> *</span>
<a name="l00149"></a>00149 <span class="comment"> * The callback function should not clear the error that is passed to it;</span>
<a name="l00150"></a>00150 <span class="comment"> * its caller should do that.</span>
<a name="l00151"></a>00151 <span class="comment"> */</span>
<a name="l00152"></a><a class="code" href="group__fs__handling.html#gafa2c790fffb1abbd103c954a5d983646">00152</a> <span class="keyword">typedef</span> void (*<a class="code" href="group__fs__handling.html#gafa2c790fffb1abbd103c954a5d983646" title="The type of a warning callback function.">svn_fs_warning_callback_t</a>)(<span class="keywordtype">void</span> *baton, <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *err);
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 <span class="comment"></span>
<a name="l00155"></a>00155 <span class="comment">/** Provide a callback function, @a warning, that @a fs should use to</span>
<a name="l00156"></a>00156 <span class="comment"> * report (non-fatal) errors.  To print an error, the filesystem will call</span>
<a name="l00157"></a>00157 <span class="comment"> * @a warning, passing it @a warning_baton and the error.</span>
<a name="l00158"></a>00158 <span class="comment"> *</span>
<a name="l00159"></a>00159 <span class="comment"> * By default, this is set to a function that will crash the process.</span>
<a name="l00160"></a>00160 <span class="comment"> * Dumping to @c stderr or &lt;tt&gt;/dev/tty&lt;/tt&gt; is not acceptable default</span>
<a name="l00161"></a>00161 <span class="comment"> * behavior for server processes, since those may both be equivalent to</span>
<a name="l00162"></a>00162 <span class="comment"> * &lt;tt&gt;/dev/null&lt;/tt&gt;.</span>
<a name="l00163"></a>00163 <span class="comment"> */</span>
<a name="l00164"></a>00164 <span class="keywordtype">void</span>
<a name="l00165"></a>00165 <a class="code" href="group__fs__handling.html#gabc881c866ebe2cbd41767374264532e8" title="Provide a callback function, warning, that fs should use to report (non-fatal) errors.">svn_fs_set_warning_func</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l00166"></a>00166                         <a class="code" href="group__fs__handling.html#gafa2c790fffb1abbd103c954a5d983646" title="The type of a warning callback function.">svn_fs_warning_callback_t</a> warning,
<a name="l00167"></a>00167                         <span class="keywordtype">void</span> *warning_baton);
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 <span class="comment"></span>
<a name="l00171"></a>00171 <span class="comment">/**</span>
<a name="l00172"></a>00172 <span class="comment"> * Create a new, empty Subversion filesystem, stored in the directory</span>
<a name="l00173"></a>00173 <span class="comment"> * @a path, and return a pointer to it in @a *fs_p.  @a path must not</span>
<a name="l00174"></a>00174 <span class="comment"> * currently exist, but its parent must exist.  If @a fs_config is not</span>
<a name="l00175"></a>00175 <span class="comment"> * @c NULL, the options it contains modify the behavior of the</span>
<a name="l00176"></a>00176 <span class="comment"> * filesystem.  The interpretation of @a fs_config is specific to the</span>
<a name="l00177"></a>00177 <span class="comment"> * filesystem back-end.  The new filesystem may be closed by</span>
<a name="l00178"></a>00178 <span class="comment"> * destroying @a pool.</span>
<a name="l00179"></a>00179 <span class="comment"> *</span>
<a name="l00180"></a>00180 <span class="comment"> * @note The lifetime of @a fs_config must not be shorter than @a</span>
<a name="l00181"></a>00181 <span class="comment"> * pool&#39;s. It&#39;s a good idea to allocate @a fs_config from @a pool or</span>
<a name="l00182"></a>00182 <span class="comment"> * one of its ancestors.</span>
<a name="l00183"></a>00183 <span class="comment"> *</span>
<a name="l00184"></a>00184 <span class="comment"> * If @a fs_config contains a value for #SVN_FS_CONFIG_FS_TYPE, that</span>
<a name="l00185"></a>00185 <span class="comment"> * value determines the filesystem type for the new filesystem.</span>
<a name="l00186"></a>00186 <span class="comment"> * Currently defined values are:</span>
<a name="l00187"></a>00187 <span class="comment"> *</span>
<a name="l00188"></a>00188 <span class="comment"> *   SVN_FS_TYPE_BDB   Berkeley-DB implementation</span>
<a name="l00189"></a>00189 <span class="comment"> *   SVN_FS_TYPE_FSFS  Native-filesystem implementation</span>
<a name="l00190"></a>00190 <span class="comment"> *</span>
<a name="l00191"></a>00191 <span class="comment"> * If @a fs_config is @c NULL or does not contain a value for</span>
<a name="l00192"></a>00192 <span class="comment"> * #SVN_FS_CONFIG_FS_TYPE then the default filesystem type will be used.</span>
<a name="l00193"></a>00193 <span class="comment"> * This will typically be BDB for version 1.1 and FSFS for later versions,</span>
<a name="l00194"></a>00194 <span class="comment"> * though the caller should not rely upon any particular default if they</span>
<a name="l00195"></a>00195 <span class="comment"> * wish to ensure that a filesystem of a specific type is created.</span>
<a name="l00196"></a>00196 <span class="comment"> *</span>
<a name="l00197"></a>00197 <span class="comment"> * @since New in 1.1.</span>
<a name="l00198"></a>00198 <span class="comment"> */</span>
<a name="l00199"></a>00199 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00200"></a>00200 <a class="code" href="group__fs__handling.html#ga24b9cee11c6d584ddb0b9d74efca5dd5" title="Create a new, empty Subversion filesystem, stored in the directory path, and return a pointer to it i...">svn_fs_create</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> **fs_p,
<a name="l00201"></a>00201               <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00202"></a>00202               apr_hash_t *fs_config,
<a name="l00203"></a>00203               apr_pool_t *pool);
<a name="l00204"></a>00204 <span class="comment"></span>
<a name="l00205"></a>00205 <span class="comment">/**</span>
<a name="l00206"></a>00206 <span class="comment"> * Open a Subversion filesystem located in the directory @a path, and</span>
<a name="l00207"></a>00207 <span class="comment"> * return a pointer to it in @a *fs_p.  If @a fs_config is not @c</span>
<a name="l00208"></a>00208 <span class="comment"> * NULL, the options it contains modify the behavior of the</span>
<a name="l00209"></a>00209 <span class="comment"> * filesystem.  The interpretation of @a fs_config is specific to the</span>
<a name="l00210"></a>00210 <span class="comment"> * filesystem back-end.  The opened filesystem may be closed by</span>
<a name="l00211"></a>00211 <span class="comment"> * destroying @a pool.</span>
<a name="l00212"></a>00212 <span class="comment"> *</span>
<a name="l00213"></a>00213 <span class="comment"> * @note The lifetime of @a fs_config must not be shorter than @a</span>
<a name="l00214"></a>00214 <span class="comment"> * pool&#39;s. It&#39;s a good idea to allocate @a fs_config from @a pool or</span>
<a name="l00215"></a>00215 <span class="comment"> * one of its ancestors.</span>
<a name="l00216"></a>00216 <span class="comment"> *</span>
<a name="l00217"></a>00217 <span class="comment"> * Only one thread may operate on any given filesystem object at once.</span>
<a name="l00218"></a>00218 <span class="comment"> * Two threads may access the same filesystem simultaneously only if</span>
<a name="l00219"></a>00219 <span class="comment"> * they open separate filesystem objects.</span>
<a name="l00220"></a>00220 <span class="comment"> *</span>
<a name="l00221"></a>00221 <span class="comment"> * @note You probably don&#39;t want to use this directly.  Take a look at</span>
<a name="l00222"></a>00222 <span class="comment"> * svn_repos_open2() instead.</span>
<a name="l00223"></a>00223 <span class="comment"> *</span>
<a name="l00224"></a>00224 <span class="comment"> * @since New in 1.1.</span>
<a name="l00225"></a>00225 <span class="comment"> */</span>
<a name="l00226"></a>00226 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00227"></a>00227 <a class="code" href="group__fs__handling.html#gaf31aff19f6ddd70e665235ff1857fc35" title="Open a Subversion filesystem located in the directory path, and return a pointer to it in *fs_p...">svn_fs_open</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> **fs_p,
<a name="l00228"></a>00228             <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00229"></a>00229             apr_hash_t *fs_config,
<a name="l00230"></a>00230             apr_pool_t *pool);
<a name="l00231"></a>00231 <span class="comment"></span>
<a name="l00232"></a>00232 <span class="comment">/**</span>
<a name="l00233"></a>00233 <span class="comment"> * Upgrade the Subversion filesystem located in the directory @a path</span>
<a name="l00234"></a>00234 <span class="comment"> * to the latest version supported by this library.  Return</span>
<a name="l00235"></a>00235 <span class="comment"> * #SVN_ERR_FS_UNSUPPORTED_UPGRADE and make no changes to the</span>
<a name="l00236"></a>00236 <span class="comment"> * filesystem if the requested upgrade is not supported.  Use @a pool</span>
<a name="l00237"></a>00237 <span class="comment"> * for necessary allocations.</span>
<a name="l00238"></a>00238 <span class="comment"> *</span>
<a name="l00239"></a>00239 <span class="comment"> * @note You probably don&#39;t want to use this directly.  Take a look at</span>
<a name="l00240"></a>00240 <span class="comment"> * svn_repos_upgrade() instead.</span>
<a name="l00241"></a>00241 <span class="comment"> *</span>
<a name="l00242"></a>00242 <span class="comment"> * @since New in 1.5.</span>
<a name="l00243"></a>00243 <span class="comment"> */</span>
<a name="l00244"></a>00244 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00245"></a>00245 <a class="code" href="group__fs__handling.html#ga64cb2a37367de523f56b89e5ec603a73" title="Upgrade the Subversion filesystem located in the directory path to the latest version supported by th...">svn_fs_upgrade</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00246"></a>00246                apr_pool_t *pool);
<a name="l00247"></a>00247 <span class="comment"></span>
<a name="l00248"></a>00248 <span class="comment">/**</span>
<a name="l00249"></a>00249 <span class="comment"> * Return, in @a *fs_type, a string identifying the back-end type of</span>
<a name="l00250"></a>00250 <span class="comment"> * the Subversion filesystem located in @a path.  Allocate @a *fs_type</span>
<a name="l00251"></a>00251 <span class="comment"> * in @a pool.</span>
<a name="l00252"></a>00252 <span class="comment"> *</span>
<a name="l00253"></a>00253 <span class="comment"> * The string should be equal to one of the @c SVN_FS_TYPE_* defined</span>
<a name="l00254"></a>00254 <span class="comment"> * constants, unless the filesystem is a new back-end type added in</span>
<a name="l00255"></a>00255 <span class="comment"> * a later version of Subversion.</span>
<a name="l00256"></a>00256 <span class="comment"> *</span>
<a name="l00257"></a>00257 <span class="comment"> * In general, the type should make no difference in the filesystem&#39;s</span>
<a name="l00258"></a>00258 <span class="comment"> * semantics, but there are a few situations (such as backups) where</span>
<a name="l00259"></a>00259 <span class="comment"> * it might matter.</span>
<a name="l00260"></a>00260 <span class="comment"> *</span>
<a name="l00261"></a>00261 <span class="comment"> * @since New in 1.3.</span>
<a name="l00262"></a>00262 <span class="comment"> */</span>
<a name="l00263"></a>00263 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00264"></a>00264 <a class="code" href="group__fs__handling.html#gae771342c2800751277423c552cfeee48" title="Return, in *fs_type, a string identifying the back-end type of the Subversion filesystem located in p...">svn_fs_type</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> **fs_type,
<a name="l00265"></a>00265             <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00266"></a>00266             apr_pool_t *pool);
<a name="l00267"></a>00267 <span class="comment"></span>
<a name="l00268"></a>00268 <span class="comment">/**</span>
<a name="l00269"></a>00269 <span class="comment"> * Return the path to @a fs&#39;s repository, allocated in @a pool.</span>
<a name="l00270"></a>00270 <span class="comment"> * @note This is just what was passed to svn_fs_create() or</span>
<a name="l00271"></a>00271 <span class="comment"> * svn_fs_open() -- might be absolute, might not.</span>
<a name="l00272"></a>00272 <span class="comment"> *</span>
<a name="l00273"></a>00273 <span class="comment"> * @since New in 1.1.</span>
<a name="l00274"></a>00274 <span class="comment"> */</span>
<a name="l00275"></a>00275 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00276"></a>00276 <a class="code" href="group__fs__handling.html#gaa1a79172a1faa38b234d365240079c3a" title="Return the path to fs&#39;s repository, allocated in pool.">svn_fs_path</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l00277"></a>00277             apr_pool_t *pool);
<a name="l00278"></a>00278 <span class="comment"></span>
<a name="l00279"></a>00279 <span class="comment">/**</span>
<a name="l00280"></a>00280 <span class="comment"> * Delete the filesystem at @a path.</span>
<a name="l00281"></a>00281 <span class="comment"> *</span>
<a name="l00282"></a>00282 <span class="comment"> * @since New in 1.1.</span>
<a name="l00283"></a>00283 <span class="comment"> */</span>
<a name="l00284"></a>00284 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00285"></a>00285 <a class="code" href="group__fs__handling.html#ga6d1642cd31bc5e860d521c8c80058058" title="Delete the filesystem at path.">svn_fs_delete_fs</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00286"></a>00286                  apr_pool_t *pool);
<a name="l00287"></a>00287 <span class="comment"></span>
<a name="l00288"></a>00288 <span class="comment">/**</span>
<a name="l00289"></a>00289 <span class="comment"> * Copy a possibly live Subversion filesystem from @a src_path to</span>
<a name="l00290"></a>00290 <span class="comment"> * @a dest_path.  If @a clean is @c TRUE, perform cleanup on the</span>
<a name="l00291"></a>00291 <span class="comment"> * source filesystem as part of the copy operation; currently, this</span>
<a name="l00292"></a>00292 <span class="comment"> * means deleting copied, unused logfiles for a Berkeley DB source</span>
<a name="l00293"></a>00293 <span class="comment"> * filesystem.</span>
<a name="l00294"></a>00294 <span class="comment"> *</span>
<a name="l00295"></a>00295 <span class="comment"> * @since New in 1.1.</span>
<a name="l00296"></a>00296 <span class="comment"> */</span>
<a name="l00297"></a>00297 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00298"></a>00298 <a class="code" href="group__fs__handling.html#ga2909d84e561fbfd8b0f321dbded129b6" title="Copy a possibly live Subversion filesystem from src_path to dest_path.">svn_fs_hotcopy</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src_path,
<a name="l00299"></a>00299                <span class="keyword">const</span> <span class="keywordtype">char</span> *dest_path,
<a name="l00300"></a>00300                <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> clean,
<a name="l00301"></a>00301                apr_pool_t *pool);
<a name="l00302"></a>00302 <span class="comment"></span>
<a name="l00303"></a>00303 <span class="comment">/** Perform any necessary non-catastrophic recovery on the Subversion</span>
<a name="l00304"></a>00304 <span class="comment"> * filesystem located at @a path.</span>
<a name="l00305"></a>00305 <span class="comment"> *</span>
<a name="l00306"></a>00306 <span class="comment"> * If @a cancel_func is not @c NULL, it is called periodically with</span>
<a name="l00307"></a>00307 <span class="comment"> * @a cancel_baton as argument to see if the client wishes to cancel</span>
<a name="l00308"></a>00308 <span class="comment"> * recovery.  BDB filesystems do not currently support cancellation.</span>
<a name="l00309"></a>00309 <span class="comment"> *</span>
<a name="l00310"></a>00310 <span class="comment"> * Do any necessary allocation within @a pool.</span>
<a name="l00311"></a>00311 <span class="comment"> *</span>
<a name="l00312"></a>00312 <span class="comment"> * For FSFS filesystems, recovery is currently limited to recreating</span>
<a name="l00313"></a>00313 <span class="comment"> * the db/current file, and does not require exclusive access.</span>
<a name="l00314"></a>00314 <span class="comment"> *</span>
<a name="l00315"></a>00315 <span class="comment"> * For BDB filesystems, recovery requires exclusive access, and is</span>
<a name="l00316"></a>00316 <span class="comment"> * described in detail below.</span>
<a name="l00317"></a>00317 <span class="comment"> *</span>
<a name="l00318"></a>00318 <span class="comment"> * After an unexpected server exit, due to a server crash or a system</span>
<a name="l00319"></a>00319 <span class="comment"> * crash, a Subversion filesystem based on Berkeley DB needs to run</span>
<a name="l00320"></a>00320 <span class="comment"> * recovery procedures to bring the database back into a consistent</span>
<a name="l00321"></a>00321 <span class="comment"> * state and release any locks that were held by the deceased process.</span>
<a name="l00322"></a>00322 <span class="comment"> * The recovery procedures require exclusive access to the database</span>
<a name="l00323"></a>00323 <span class="comment"> * --- while they execute, no other process or thread may access the</span>
<a name="l00324"></a>00324 <span class="comment"> * database.</span>
<a name="l00325"></a>00325 <span class="comment"> *</span>
<a name="l00326"></a>00326 <span class="comment"> * In a server with multiple worker processes, like Apache, if a</span>
<a name="l00327"></a>00327 <span class="comment"> * worker process accessing the filesystem dies, you must stop the</span>
<a name="l00328"></a>00328 <span class="comment"> * other worker processes, and run recovery.  Then, the other worker</span>
<a name="l00329"></a>00329 <span class="comment"> * processes can re-open the database and resume work.</span>
<a name="l00330"></a>00330 <span class="comment"> *</span>
<a name="l00331"></a>00331 <span class="comment"> * If the server exited cleanly, there is no need to run recovery, but</span>
<a name="l00332"></a>00332 <span class="comment"> * there is no harm in it, either, and it take very little time.  So</span>
<a name="l00333"></a>00333 <span class="comment"> * it&#39;s a fine idea to run recovery when the server process starts,</span>
<a name="l00334"></a>00334 <span class="comment"> * before it begins handling any requests.</span>
<a name="l00335"></a>00335 <span class="comment"> *</span>
<a name="l00336"></a>00336 <span class="comment"> * @since New in 1.5.</span>
<a name="l00337"></a>00337 <span class="comment"> */</span>
<a name="l00338"></a>00338 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00339"></a>00339 <a class="code" href="group__fs__handling.html#gaf6f1f42958e3f56326185b91fc1ae679" title="Perform any necessary non-catastrophic recovery on the Subversion filesystem located at path...">svn_fs_recover</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00340"></a>00340                <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l00341"></a>00341                <span class="keywordtype">void</span> *cancel_baton,
<a name="l00342"></a>00342                apr_pool_t *pool);
<a name="l00343"></a>00343 
<a name="l00344"></a>00344 <span class="comment"></span>
<a name="l00345"></a>00345 <span class="comment">/** Subversion filesystems based on Berkeley DB.</span>
<a name="l00346"></a>00346 <span class="comment"> *</span>
<a name="l00347"></a>00347 <span class="comment"> * The following functions are specific to Berkeley DB filesystems.</span>
<a name="l00348"></a>00348 <span class="comment"> *</span>
<a name="l00349"></a>00349 <span class="comment"> * @defgroup svn_fs_bdb Berkeley DB filesystems</span>
<a name="l00350"></a>00350 <span class="comment"> * @{</span>
<a name="l00351"></a>00351 <span class="comment"> */</span>
<a name="l00352"></a>00352 <span class="comment"></span>
<a name="l00353"></a>00353 <span class="comment">/** Register an error handling function for Berkeley DB error messages.</span>
<a name="l00354"></a>00354 <span class="comment"> *</span>
<a name="l00355"></a>00355 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.2 API.</span>
<a name="l00356"></a>00356 <span class="comment"> *</span>
<a name="l00357"></a>00357 <span class="comment"> * Despite being first declared deprecated in Subversion 1.3, this API</span>
<a name="l00358"></a>00358 <span class="comment"> * is redundant in versions 1.1 and 1.2 as well.</span>
<a name="l00359"></a>00359 <span class="comment"> *</span>
<a name="l00360"></a>00360 <span class="comment"> * Berkeley DB&#39;s error codes are seldom sufficiently informative to allow</span>
<a name="l00361"></a>00361 <span class="comment"> * adequate troubleshooting.  Berkeley DB provides extra messages through</span>
<a name="l00362"></a>00362 <span class="comment"> * a callback function - if an error occurs, the @a handler will be called</span>
<a name="l00363"></a>00363 <span class="comment"> * with two strings: an error message prefix, which will be zero, and</span>
<a name="l00364"></a>00364 <span class="comment"> * an error message.  @a handler might print it out, log it somewhere,</span>
<a name="l00365"></a>00365 <span class="comment"> * etc.</span>
<a name="l00366"></a>00366 <span class="comment"> *</span>
<a name="l00367"></a>00367 <span class="comment"> * Subversion 1.1 and later install their own handler internally, and</span>
<a name="l00368"></a>00368 <span class="comment"> * wrap the messages from Berkeley DB into the standard svn_error_t object,</span>
<a name="l00369"></a>00369 <span class="comment"> * making any information gained through this interface redundant.</span>
<a name="l00370"></a>00370 <span class="comment"> *</span>
<a name="l00371"></a>00371 <span class="comment"> * It is only worth using this function if your program will be used</span>
<a name="l00372"></a>00372 <span class="comment"> * with Subversion 1.0.</span>
<a name="l00373"></a>00373 <span class="comment"> *</span>
<a name="l00374"></a>00374 <span class="comment"> * This function connects to the Berkeley DB @c DBENV-&gt;set_errcall interface.</span>
<a name="l00375"></a>00375 <span class="comment"> * Since that interface supports only a single callback, Subversion&#39;s internal</span>
<a name="l00376"></a>00376 <span class="comment"> * callback is registered with Berkeley DB, and will forward notifications to</span>
<a name="l00377"></a>00377 <span class="comment"> * a user provided callback after performing its own processing.</span>
<a name="l00378"></a>00378 <span class="comment"> */</span>
<a name="l00379"></a>00379 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00380"></a>00380 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00381"></a>00381 <a class="code" href="group__svn__fs__bdb.html#gac162b15e2e488c2f9b54b7c68111d21d" title="Register an error handling function for Berkeley DB error messages.">svn_fs_set_berkeley_errcall</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l00382"></a>00382                             <span class="keywordtype">void</span> (*handler)(<span class="keyword">const</span> <span class="keywordtype">char</span> *errpfx,
<a name="l00383"></a>00383                                             <span class="keywordtype">char</span> *msg));
<a name="l00384"></a>00384 <span class="comment"></span>
<a name="l00385"></a>00385 <span class="comment">/** Set @a *logfiles to an array of &lt;tt&gt;const char *&lt;/tt&gt; log file names</span>
<a name="l00386"></a>00386 <span class="comment"> * of Berkeley DB-based Subversion filesystem.</span>
<a name="l00387"></a>00387 <span class="comment"> *</span>
<a name="l00388"></a>00388 <span class="comment"> * If @a only_unused is @c TRUE, set @a *logfiles to an array which</span>
<a name="l00389"></a>00389 <span class="comment"> * contains only the names of Berkeley DB log files no longer in use</span>
<a name="l00390"></a>00390 <span class="comment"> * by the filesystem.  Otherwise, all log files (used and unused) are</span>
<a name="l00391"></a>00391 <span class="comment"> * returned.</span>
<a name="l00392"></a>00392 <span class="comment"></span>
<a name="l00393"></a>00393 <span class="comment"> * This function wraps the Berkeley DB &#39;log_archive&#39; function</span>
<a name="l00394"></a>00394 <span class="comment"> * called by the db_archive binary.  Repository administrators may</span>
<a name="l00395"></a>00395 <span class="comment"> * want to run this function periodically and delete the unused log</span>
<a name="l00396"></a>00396 <span class="comment"> * files, as a way of reclaiming disk space.</span>
<a name="l00397"></a>00397 <span class="comment"> */</span>
<a name="l00398"></a>00398 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00399"></a>00399 <a class="code" href="group__svn__fs__bdb.html#ga2cd4d9b732adea7d85fe7c89fe6b6c08" title="Set *logfiles to an array of const char * log file names of Berkeley DB-based Subversion filesystem...">svn_fs_berkeley_logfiles</a>(apr_array_header_t **logfiles,
<a name="l00400"></a>00400                          <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00401"></a>00401                          <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> only_unused,
<a name="l00402"></a>00402                          apr_pool_t *pool);
<a name="l00403"></a>00403 
<a name="l00404"></a>00404 <span class="comment"></span>
<a name="l00405"></a>00405 <span class="comment">/**</span>
<a name="l00406"></a>00406 <span class="comment"> * The following functions are similar to their generic counterparts.</span>
<a name="l00407"></a>00407 <span class="comment"> *</span>
<a name="l00408"></a>00408 <span class="comment"> * In Subversion 1.2 and earlier, they only work on Berkeley DB filesystems.</span>
<a name="l00409"></a>00409 <span class="comment"> * In Subversion 1.3 and later, they perform largely as aliases for their</span>
<a name="l00410"></a>00410 <span class="comment"> * generic counterparts (with the exception of recover, which only gained</span>
<a name="l00411"></a>00411 <span class="comment"> * a generic counterpart in 1.5).</span>
<a name="l00412"></a>00412 <span class="comment"> *</span>
<a name="l00413"></a>00413 <span class="comment"> * @defgroup svn_fs_bdb_deprecated Berkeley DB filesystem compatibility</span>
<a name="l00414"></a>00414 <span class="comment"> * @{</span>
<a name="l00415"></a>00415 <span class="comment"> */</span>
<a name="l00416"></a>00416 <span class="comment"></span>
<a name="l00417"></a>00417 <span class="comment">/** @deprecated Provided for backward compatibility with the 1.0 API. */</span>
<a name="l00418"></a>00418 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00419"></a>00419 <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *
<a name="l00420"></a>00420 <a class="code" href="group__svn__fs__bdb__deprecated.html#ga91410ca05330dcec53e8cc5ead76a2ab">svn_fs_new</a>(apr_hash_t *fs_config,
<a name="l00421"></a>00421            apr_pool_t *pool);
<a name="l00422"></a>00422 <span class="comment"></span>
<a name="l00423"></a>00423 <span class="comment">/** @deprecated Provided for backward compatibility with the 1.0 API. */</span>
<a name="l00424"></a>00424 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00425"></a>00425 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00426"></a>00426 <a class="code" href="group__svn__fs__bdb__deprecated.html#ga5662639a436fd0c6136d59dfa17f3b07">svn_fs_create_berkeley</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l00427"></a>00427                        <span class="keyword">const</span> <span class="keywordtype">char</span> *path);
<a name="l00428"></a>00428 <span class="comment"></span>
<a name="l00429"></a>00429 <span class="comment">/** @deprecated Provided for backward compatibility with the 1.0 API. */</span>
<a name="l00430"></a>00430 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00431"></a>00431 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00432"></a>00432 <a class="code" href="group__svn__fs__bdb__deprecated.html#gaf07738ca9bd8d87d12fddd35cf5b855d">svn_fs_open_berkeley</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l00433"></a>00433                      <span class="keyword">const</span> <span class="keywordtype">char</span> *path);
<a name="l00434"></a>00434 <span class="comment"></span>
<a name="l00435"></a>00435 <span class="comment">/** @deprecated Provided for backward compatibility with the 1.0 API. */</span>
<a name="l00436"></a>00436 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00437"></a>00437 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00438"></a>00438 <a class="code" href="group__svn__fs__bdb__deprecated.html#gae1f913ff4684b5099b4e580398138587">svn_fs_berkeley_path</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l00439"></a>00439                      apr_pool_t *pool);
<a name="l00440"></a>00440 <span class="comment"></span>
<a name="l00441"></a>00441 <span class="comment">/** @deprecated Provided for backward compatibility with the 1.0 API. */</span>
<a name="l00442"></a>00442 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00443"></a>00443 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00444"></a>00444 <a class="code" href="group__svn__fs__bdb__deprecated.html#ga26918fdfd64ab135db07072f669e0efb">svn_fs_delete_berkeley</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00445"></a>00445                        apr_pool_t *pool);
<a name="l00446"></a>00446 <span class="comment"></span>
<a name="l00447"></a>00447 <span class="comment">/** @deprecated Provided for backward compatibility with the 1.0 API. */</span>
<a name="l00448"></a>00448 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00449"></a>00449 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00450"></a>00450 <a class="code" href="group__svn__fs__bdb__deprecated.html#ga6ccd355919e18f239af7d5678a2a2278">svn_fs_hotcopy_berkeley</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src_path,
<a name="l00451"></a>00451                         <span class="keyword">const</span> <span class="keywordtype">char</span> *dest_path,
<a name="l00452"></a>00452                         <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> clean_logs,
<a name="l00453"></a>00453                         apr_pool_t *pool);
<a name="l00454"></a>00454 <span class="comment"></span>
<a name="l00455"></a>00455 <span class="comment">/** @deprecated Provided for backward compatibility with the 1.4 API. */</span>
<a name="l00456"></a>00456 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00457"></a>00457 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00458"></a>00458 <a class="code" href="group__svn__fs__bdb__deprecated.html#ga382100d2c235b30b5d510fdbe7ebb909">svn_fs_berkeley_recover</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00459"></a>00459                         apr_pool_t *pool);<span class="comment"></span>
<a name="l00460"></a>00460 <span class="comment">/** @} */</span>
<a name="l00461"></a>00461 <span class="comment"></span>
<a name="l00462"></a>00462 <span class="comment">/** @} */</span>
<a name="l00463"></a>00463 
<a name="l00464"></a>00464 <span class="comment"></span>
<a name="l00465"></a>00465 <span class="comment">/** Filesystem Access Contexts.</span>
<a name="l00466"></a>00466 <span class="comment"> *</span>
<a name="l00467"></a>00467 <span class="comment"> * @since New in 1.2.</span>
<a name="l00468"></a>00468 <span class="comment"> *</span>
<a name="l00469"></a>00469 <span class="comment"> * At certain times, filesystem functions need access to temporary</span>
<a name="l00470"></a>00470 <span class="comment"> * user data.  For example, which user is changing a file?  If the</span>
<a name="l00471"></a>00471 <span class="comment"> * file is locked, has an appropriate lock-token been supplied?</span>
<a name="l00472"></a>00472 <span class="comment"> *</span>
<a name="l00473"></a>00473 <span class="comment"> * This temporary user data is stored in an &quot;access context&quot; object,</span>
<a name="l00474"></a>00474 <span class="comment"> * and the access context is then connected to the filesystem object.</span>
<a name="l00475"></a>00475 <span class="comment"> * Whenever a filesystem function requires information, it can pull</span>
<a name="l00476"></a>00476 <span class="comment"> * things out of the context as needed.</span>
<a name="l00477"></a>00477 <span class="comment"> *</span>
<a name="l00478"></a>00478 <span class="comment"> * @defgroup svn_fs_access_ctx Filesystem access contexts</span>
<a name="l00479"></a>00479 <span class="comment"> * @{</span>
<a name="l00480"></a>00480 <span class="comment"> */</span>
<a name="l00481"></a>00481 <span class="comment"></span>
<a name="l00482"></a>00482 <span class="comment">/** An opaque object representing temporary user data. */</span>
<a name="l00483"></a><a class="code" href="group__svn__fs__access__ctx.html#ga7fe2e31558e4e2e764fb33c0065704eb">00483</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="group__svn__fs__access__ctx.html#ga7fe2e31558e4e2e764fb33c0065704eb" title="An opaque object representing temporary user data.">svn_fs_access_t</a> <a class="code" href="group__svn__fs__access__ctx.html#ga7fe2e31558e4e2e764fb33c0065704eb" title="An opaque object representing temporary user data.">svn_fs_access_t</a>;
<a name="l00484"></a>00484 
<a name="l00485"></a>00485 <span class="comment"></span>
<a name="l00486"></a>00486 <span class="comment">/** Set @a *access_ctx to a new #svn_fs_access_t object representing</span>
<a name="l00487"></a>00487 <span class="comment"> *  @a username, allocated in @a pool.  @a username is presumed to</span>
<a name="l00488"></a>00488 <span class="comment"> *  have been authenticated by the caller.</span>
<a name="l00489"></a>00489 <span class="comment"> *</span>
<a name="l00490"></a>00490 <span class="comment"> *  Make a deep copy of @a username.</span>
<a name="l00491"></a>00491 <span class="comment"> */</span>
<a name="l00492"></a>00492 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00493"></a>00493 <a class="code" href="group__svn__fs__access__ctx.html#gad68ea73b8fc4275cb5aa90bfac0c2ea9" title="Set *access_ctx to a new svn_fs_access_t object representing username, allocated in pool...">svn_fs_create_access</a>(<a class="code" href="group__svn__fs__access__ctx.html#ga7fe2e31558e4e2e764fb33c0065704eb" title="An opaque object representing temporary user data.">svn_fs_access_t</a> **access_ctx,
<a name="l00494"></a>00494                      <span class="keyword">const</span> <span class="keywordtype">char</span> *username,
<a name="l00495"></a>00495                      apr_pool_t *pool);
<a name="l00496"></a>00496 
<a name="l00497"></a>00497 <span class="comment"></span>
<a name="l00498"></a>00498 <span class="comment">/** Associate @a access_ctx with an open @a fs.</span>
<a name="l00499"></a>00499 <span class="comment"> *</span>
<a name="l00500"></a>00500 <span class="comment"> * This function can be run multiple times on the same open</span>
<a name="l00501"></a>00501 <span class="comment"> * filesystem, in order to change the filesystem access context for</span>
<a name="l00502"></a>00502 <span class="comment"> * different filesystem operations.  Pass a NULL value for @a</span>
<a name="l00503"></a>00503 <span class="comment"> * access_ctx to disassociate the current access context from the</span>
<a name="l00504"></a>00504 <span class="comment"> * filesystem.</span>
<a name="l00505"></a>00505 <span class="comment"> */</span>
<a name="l00506"></a>00506 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00507"></a>00507 <a class="code" href="group__svn__fs__access__ctx.html#ga732f8df403c8043084f9dfa4ca6675c0" title="Associate access_ctx with an open fs.">svn_fs_set_access</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l00508"></a>00508                   <a class="code" href="group__svn__fs__access__ctx.html#ga7fe2e31558e4e2e764fb33c0065704eb" title="An opaque object representing temporary user data.">svn_fs_access_t</a> *access_ctx);
<a name="l00509"></a>00509 
<a name="l00510"></a>00510 <span class="comment"></span>
<a name="l00511"></a>00511 <span class="comment">/** Set @a *access_ctx to the current @a fs access context, or NULL if</span>
<a name="l00512"></a>00512 <span class="comment"> * there is no current fs access context.</span>
<a name="l00513"></a>00513 <span class="comment"> */</span>
<a name="l00514"></a>00514 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00515"></a>00515 <a class="code" href="group__svn__fs__access__ctx.html#ga93e27085473a77206da0e57e9867abe4" title="Set *access_ctx to the current fs access context, or NULL if there is no current fs access context...">svn_fs_get_access</a>(<a class="code" href="group__svn__fs__access__ctx.html#ga7fe2e31558e4e2e764fb33c0065704eb" title="An opaque object representing temporary user data.">svn_fs_access_t</a> **access_ctx,
<a name="l00516"></a>00516                   <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs);
<a name="l00517"></a>00517 
<a name="l00518"></a>00518 <span class="comment"></span>
<a name="l00519"></a>00519 <span class="comment">/** Accessors for the access context: */</span>
<a name="l00520"></a>00520 <span class="comment"></span>
<a name="l00521"></a>00521 <span class="comment">/** Set @a *username to the name represented by @a access_ctx. */</span>
<a name="l00522"></a>00522 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00523"></a>00523 <a class="code" href="group__svn__fs__access__ctx.html#ga6b22c06a0f3810547c65f9e205f09891" title="Accessors for the access context:">svn_fs_access_get_username</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> **username,
<a name="l00524"></a>00524                            <a class="code" href="group__svn__fs__access__ctx.html#ga7fe2e31558e4e2e764fb33c0065704eb" title="An opaque object representing temporary user data.">svn_fs_access_t</a> *access_ctx);
<a name="l00525"></a>00525 
<a name="l00526"></a>00526 <span class="comment"></span>
<a name="l00527"></a>00527 <span class="comment">/** Push a lock-token @a token associated with path @a path into the</span>
<a name="l00528"></a>00528 <span class="comment"> * context @a access_ctx.  The context remembers all tokens it</span>
<a name="l00529"></a>00529 <span class="comment"> * receives, and makes them available to fs functions.  The token and</span>
<a name="l00530"></a>00530 <span class="comment"> * path are not duplicated into @a access_ctx&#39;s pool; make sure the</span>
<a name="l00531"></a>00531 <span class="comment"> * token&#39;s lifetime is at least as long as @a access_ctx.</span>
<a name="l00532"></a>00532 <span class="comment"> *</span>
<a name="l00533"></a>00533 <span class="comment"> * @since New in 1.6. */</span>
<a name="l00534"></a>00534 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00535"></a>00535 <a class="code" href="group__svn__fs__access__ctx.html#ga9ebb13d0c50a3a440177a2494eb8a000" title="Push a lock-token token associated with path path into the context access_ctx.">svn_fs_access_add_lock_token2</a>(<a class="code" href="group__svn__fs__access__ctx.html#ga7fe2e31558e4e2e764fb33c0065704eb" title="An opaque object representing temporary user data.">svn_fs_access_t</a> *access_ctx,
<a name="l00536"></a>00536                               <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00537"></a>00537                               <span class="keyword">const</span> <span class="keywordtype">char</span> *token);
<a name="l00538"></a>00538 <span class="comment"></span>
<a name="l00539"></a>00539 <span class="comment">/**</span>
<a name="l00540"></a>00540 <span class="comment"> * Same as svn_fs_access_add_lock_token2(), but with @a path set to value 1.</span>
<a name="l00541"></a>00541 <span class="comment"> *</span>
<a name="l00542"></a>00542 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.5 API.</span>
<a name="l00543"></a>00543 <span class="comment"> */</span>
<a name="l00544"></a>00544 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00545"></a>00545 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00546"></a>00546 <a class="code" href="group__svn__fs__access__ctx.html#ga44f7faba2c0d9791f0695d2e6ba36fb5" title="Same as svn_fs_access_add_lock_token2(), but with path set to value 1.">svn_fs_access_add_lock_token</a>(<a class="code" href="group__svn__fs__access__ctx.html#ga7fe2e31558e4e2e764fb33c0065704eb" title="An opaque object representing temporary user data.">svn_fs_access_t</a> *access_ctx,
<a name="l00547"></a>00547                              <span class="keyword">const</span> <span class="keywordtype">char</span> *token);
<a name="l00548"></a>00548 <span class="comment"></span>
<a name="l00549"></a>00549 <span class="comment">/** @} */</span>
<a name="l00550"></a>00550 
<a name="l00551"></a>00551 <span class="comment"></span>
<a name="l00552"></a>00552 <span class="comment">/** Filesystem Nodes and Node-Revisions.</span>
<a name="l00553"></a>00553 <span class="comment"> *</span>
<a name="l00554"></a>00554 <span class="comment"> * In a Subversion filesystem, a `node&#39; corresponds roughly to an</span>
<a name="l00555"></a>00555 <span class="comment"> * `inode&#39; in a Unix filesystem:</span>
<a name="l00556"></a>00556 <span class="comment"> * - A node is either a file or a directory.</span>
<a name="l00557"></a>00557 <span class="comment"> * - A node&#39;s contents change over time.</span>
<a name="l00558"></a>00558 <span class="comment"> * - When you change a node&#39;s contents, it&#39;s still the same node; it&#39;s</span>
<a name="l00559"></a>00559 <span class="comment"> *   just been changed.  So a node&#39;s identity isn&#39;t bound to a specific</span>
<a name="l00560"></a>00560 <span class="comment"> *   set of contents.</span>
<a name="l00561"></a>00561 <span class="comment"> * - If you rename a node, it&#39;s still the same node, just under a</span>
<a name="l00562"></a>00562 <span class="comment"> *   different name.  So a node&#39;s identity isn&#39;t bound to a particular</span>
<a name="l00563"></a>00563 <span class="comment"> *   filename.</span>
<a name="l00564"></a>00564 <span class="comment"> *</span>
<a name="l00565"></a>00565 <span class="comment"> * A `node revision&#39; refers to one particular version of a node&#39;s contents,</span>
<a name="l00566"></a>00566 <span class="comment"> * that existed over a specific period of time (one or more repository</span>
<a name="l00567"></a>00567 <span class="comment"> * revisions).  Changing a node&#39;s contents always creates a new revision of</span>
<a name="l00568"></a>00568 <span class="comment"> * that node, which is to say creates a new `node revision&#39;.  Once created,</span>
<a name="l00569"></a>00569 <span class="comment"> * a node revision&#39;s contents never change.</span>
<a name="l00570"></a>00570 <span class="comment"> *</span>
<a name="l00571"></a>00571 <span class="comment"> * When we create a node, its initial contents are the initial revision of</span>
<a name="l00572"></a>00572 <span class="comment"> * the node.  As users make changes to the node over time, we create new</span>
<a name="l00573"></a>00573 <span class="comment"> * revisions of that same node.  When a user commits a change that deletes</span>
<a name="l00574"></a>00574 <span class="comment"> * a file from the filesystem, we don&#39;t delete the node, or any revision</span>
<a name="l00575"></a>00575 <span class="comment"> * of it --- those stick around to allow us to recreate prior revisions of</span>
<a name="l00576"></a>00576 <span class="comment"> * the filesystem.  Instead, we just remove the reference to the node</span>
<a name="l00577"></a>00577 <span class="comment"> * from the directory.</span>
<a name="l00578"></a>00578 <span class="comment"> *</span>
<a name="l00579"></a>00579 <span class="comment"> * Each node revision is a part of exactly one node, and appears only once</span>
<a name="l00580"></a>00580 <span class="comment"> * in the history of that node.  It is uniquely identified by a node</span>
<a name="l00581"></a>00581 <span class="comment"> * revision id, #svn_fs_id_t.  Its node revision id also identifies which</span>
<a name="l00582"></a>00582 <span class="comment"> * node it is a part of.</span>
<a name="l00583"></a>00583 <span class="comment"> *</span>
<a name="l00584"></a>00584 <span class="comment"> * @note: Often when we talk about `the node&#39; within the context of a single</span>
<a name="l00585"></a>00585 <span class="comment"> * revision (or transaction), we implicitly mean `the node as it appears in</span>
<a name="l00586"></a>00586 <span class="comment"> * this revision (or transaction)&#39;, or in other words `the node revision&#39;.</span>
<a name="l00587"></a>00587 <span class="comment"> *</span>
<a name="l00588"></a>00588 <span class="comment"> * @note: Commonly, a node revision will have the same content as some other</span>
<a name="l00589"></a>00589 <span class="comment"> * node revisions in the same node and in different nodes.  The FS libraries</span>
<a name="l00590"></a>00590 <span class="comment"> * allow different node revisions to share the same data without storing a</span>
<a name="l00591"></a>00591 <span class="comment"> * separate copy of the data.</span>
<a name="l00592"></a>00592 <span class="comment"> *</span>
<a name="l00593"></a>00593 <span class="comment"> * @defgroup svn_fs_nodes Filesystem nodes</span>
<a name="l00594"></a>00594 <span class="comment"> * @{</span>
<a name="l00595"></a>00595 <span class="comment"> */</span>
<a name="l00596"></a>00596 <span class="comment"></span>
<a name="l00597"></a>00597 <span class="comment">/** An object representing a node-revision id.  */</span>
<a name="l00598"></a><a class="code" href="group__svn__fs__nodes.html#gaeca8f1c373c50ca7bb08e3417242b106">00598</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="group__svn__fs__nodes.html#gaeca8f1c373c50ca7bb08e3417242b106" title="An object representing a node-revision id.">svn_fs_id_t</a> <a class="code" href="group__svn__fs__nodes.html#gaeca8f1c373c50ca7bb08e3417242b106" title="An object representing a node-revision id.">svn_fs_id_t</a>;
<a name="l00599"></a>00599 
<a name="l00600"></a>00600 <span class="comment"></span>
<a name="l00601"></a>00601 <span class="comment">/** Return -1, 0, or 1 if node revisions @a a and @a b are respectively</span>
<a name="l00602"></a>00602 <span class="comment"> * unrelated, equivalent, or otherwise related (part of the same node).</span>
<a name="l00603"></a>00603 <span class="comment"> */</span>
<a name="l00604"></a>00604 <span class="keywordtype">int</span>
<a name="l00605"></a>00605 <a class="code" href="group__svn__fs__nodes.html#gac695bbee91343eb5e83b5ad7bc2c30c8" title="Return -1, 0, or 1 if node revisions a and b are respectively unrelated, equivalent, or otherwise related (part of the same node).">svn_fs_compare_ids</a>(<span class="keyword">const</span> <a class="code" href="group__svn__fs__nodes.html#gaeca8f1c373c50ca7bb08e3417242b106" title="An object representing a node-revision id.">svn_fs_id_t</a> *a,
<a name="l00606"></a>00606                    <span class="keyword">const</span> <a class="code" href="group__svn__fs__nodes.html#gaeca8f1c373c50ca7bb08e3417242b106" title="An object representing a node-revision id.">svn_fs_id_t</a> *b);
<a name="l00607"></a>00607 
<a name="l00608"></a>00608 
<a name="l00609"></a>00609 <span class="comment"></span>
<a name="l00610"></a>00610 <span class="comment">/** Return TRUE if node revisions @a id1 and @a id2 are related (part of the</span>
<a name="l00611"></a>00611 <span class="comment"> * same node), else return FALSE.</span>
<a name="l00612"></a>00612 <span class="comment"> */</span>
<a name="l00613"></a>00613 <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a>
<a name="l00614"></a>00614 <a class="code" href="group__svn__fs__nodes.html#gadba31f228a5bafedf6d8af83ea4771e1" title="Return TRUE if node revisions id1 and id2 are related (part of the same node), else return FALSE...">svn_fs_check_related</a>(<span class="keyword">const</span> <a class="code" href="group__svn__fs__nodes.html#gaeca8f1c373c50ca7bb08e3417242b106" title="An object representing a node-revision id.">svn_fs_id_t</a> *id1,
<a name="l00615"></a>00615                      <span class="keyword">const</span> <a class="code" href="group__svn__fs__nodes.html#gaeca8f1c373c50ca7bb08e3417242b106" title="An object representing a node-revision id.">svn_fs_id_t</a> *id2);
<a name="l00616"></a>00616 
<a name="l00617"></a>00617 <span class="comment"></span>
<a name="l00618"></a>00618 <span class="comment">/**</span>
<a name="l00619"></a>00619 <span class="comment"> * @note This function is not guaranteed to work with all filesystem</span>
<a name="l00620"></a>00620 <span class="comment"> * types.  There is currently no un-deprecated equivalent; contact the</span>
<a name="l00621"></a>00621 <span class="comment"> * Subversion developers if you have a need for it.</span>
<a name="l00622"></a>00622 <span class="comment"> *</span>
<a name="l00623"></a>00623 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.0 API.</span>
<a name="l00624"></a>00624 <span class="comment"> */</span>
<a name="l00625"></a>00625 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00626"></a>00626 <a class="code" href="group__svn__fs__nodes.html#gaeca8f1c373c50ca7bb08e3417242b106" title="An object representing a node-revision id.">svn_fs_id_t</a> *
<a name="l00627"></a>00627 <a class="code" href="group__svn__fs__nodes.html#ga56988c80b1c47770dffa22268adccaf4">svn_fs_parse_id</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *data,
<a name="l00628"></a>00628                 apr_size_t len,
<a name="l00629"></a>00629                 apr_pool_t *pool);
<a name="l00630"></a>00630 
<a name="l00631"></a>00631 <span class="comment"></span>
<a name="l00632"></a>00632 <span class="comment">/** Return a Subversion string containing the unparsed form of the</span>
<a name="l00633"></a>00633 <span class="comment"> * node revision id @a id.  Allocate the string containing the</span>
<a name="l00634"></a>00634 <span class="comment"> * unparsed form in @a pool.</span>
<a name="l00635"></a>00635 <span class="comment"> */</span>
<a name="l00636"></a>00636 <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *
<a name="l00637"></a>00637 <a class="code" href="group__svn__fs__nodes.html#ga5b9eb73eb7a3c983a43b2e54abbb6314" title="Return a Subversion string containing the unparsed form of the node revision id id.">svn_fs_unparse_id</a>(<span class="keyword">const</span> <a class="code" href="group__svn__fs__nodes.html#gaeca8f1c373c50ca7bb08e3417242b106" title="An object representing a node-revision id.">svn_fs_id_t</a> *<span class="keywordtype">id</span>,
<a name="l00638"></a>00638                   apr_pool_t *pool);
<a name="l00639"></a>00639 <span class="comment"></span>
<a name="l00640"></a>00640 <span class="comment">/** @} */</span>
<a name="l00641"></a>00641 
<a name="l00642"></a>00642 <span class="comment"></span>
<a name="l00643"></a>00643 <span class="comment">/** Filesystem Transactions.</span>
<a name="l00644"></a>00644 <span class="comment"> *</span>
<a name="l00645"></a>00645 <span class="comment"> * To make a change to a Subversion filesystem:</span>
<a name="l00646"></a>00646 <span class="comment"> * - Create a transaction object, using svn_fs_begin_txn().</span>
<a name="l00647"></a>00647 <span class="comment"> * - Call svn_fs_txn_root(), to get the transaction&#39;s root directory.</span>
<a name="l00648"></a>00648 <span class="comment"> * - Make whatever changes you like in that tree.</span>
<a name="l00649"></a>00649 <span class="comment"> * - Commit the transaction, using svn_fs_commit_txn().</span>
<a name="l00650"></a>00650 <span class="comment"> *</span>
<a name="l00651"></a>00651 <span class="comment"> * The filesystem implementation guarantees that your commit will</span>
<a name="l00652"></a>00652 <span class="comment"> * either:</span>
<a name="l00653"></a>00653 <span class="comment"> * - succeed completely, so that all of the changes are committed to</span>
<a name="l00654"></a>00654 <span class="comment"> *   create a new revision of the filesystem, or</span>
<a name="l00655"></a>00655 <span class="comment"> * - fail completely, leaving the filesystem unchanged.</span>
<a name="l00656"></a>00656 <span class="comment"> *</span>
<a name="l00657"></a>00657 <span class="comment"> * Until you commit the transaction, any changes you make are</span>
<a name="l00658"></a>00658 <span class="comment"> * invisible.  Only when your commit succeeds do they become visible</span>
<a name="l00659"></a>00659 <span class="comment"> * to the outside world, as a new revision of the filesystem.</span>
<a name="l00660"></a>00660 <span class="comment"> *</span>
<a name="l00661"></a>00661 <span class="comment"> * If you begin a transaction, and then decide you don&#39;t want to make</span>
<a name="l00662"></a>00662 <span class="comment"> * the change after all (say, because your net connection with the</span>
<a name="l00663"></a>00663 <span class="comment"> * client disappeared before the change was complete), you can call</span>
<a name="l00664"></a>00664 <span class="comment"> * svn_fs_abort_txn(), to cancel the entire transaction; this</span>
<a name="l00665"></a>00665 <span class="comment"> * leaves the filesystem unchanged.</span>
<a name="l00666"></a>00666 <span class="comment"> *</span>
<a name="l00667"></a>00667 <span class="comment"> * The only way to change the contents of files or directories, or</span>
<a name="l00668"></a>00668 <span class="comment"> * their properties, is by making a transaction and creating a new</span>
<a name="l00669"></a>00669 <span class="comment"> * revision, as described above.  Once a revision has been committed, it</span>
<a name="l00670"></a>00670 <span class="comment"> * never changes again; the filesystem interface provides no means to</span>
<a name="l00671"></a>00671 <span class="comment"> * go back and edit the contents of an old revision.  Once history has</span>
<a name="l00672"></a>00672 <span class="comment"> * been recorded, it is set in stone.  Clients depend on this property</span>
<a name="l00673"></a>00673 <span class="comment"> * to do updates and commits reliably; proxies depend on this property</span>
<a name="l00674"></a>00674 <span class="comment"> * to cache changes accurately; and so on.</span>
<a name="l00675"></a>00675 <span class="comment"> *</span>
<a name="l00676"></a>00676 <span class="comment"> * There are two kinds of nodes in the filesystem: mutable, and</span>
<a name="l00677"></a>00677 <span class="comment"> * immutable.  Revisions in the filesystem consist entirely of</span>
<a name="l00678"></a>00678 <span class="comment"> * immutable nodes, whose contents never change.  A transaction in</span>
<a name="l00679"></a>00679 <span class="comment"> * progress, which the user is still constructing, uses mutable nodes</span>
<a name="l00680"></a>00680 <span class="comment"> * for those nodes which have been changed so far, and refers to</span>
<a name="l00681"></a>00681 <span class="comment"> * immutable nodes from existing revisions for portions of the tree</span>
<a name="l00682"></a>00682 <span class="comment"> * which haven&#39;t been changed yet in that transaction.</span>
<a name="l00683"></a>00683 <span class="comment"> *</span>
<a name="l00684"></a>00684 <span class="comment"> * Immutable nodes, as part of revisions, never refer to mutable</span>
<a name="l00685"></a>00685 <span class="comment"> * nodes, which are part of uncommitted transactions.  Mutable nodes</span>
<a name="l00686"></a>00686 <span class="comment"> * may refer to immutable nodes, or other mutable nodes.</span>
<a name="l00687"></a>00687 <span class="comment"> *</span>
<a name="l00688"></a>00688 <span class="comment"> * Note that the terms &quot;immutable&quot; and &quot;mutable&quot; describe whether or</span>
<a name="l00689"></a>00689 <span class="comment"> * not the nodes have been changed as part of a transaction --- not</span>
<a name="l00690"></a>00690 <span class="comment"> * the permissions on the nodes they refer to.  Even if you aren&#39;t</span>
<a name="l00691"></a>00691 <span class="comment"> * authorized to modify the filesystem&#39;s root directory, you might be</span>
<a name="l00692"></a>00692 <span class="comment"> * authorized to change some descendant of the root; doing so would</span>
<a name="l00693"></a>00693 <span class="comment"> * create a new mutable copy of the root directory.  Mutability refers</span>
<a name="l00694"></a>00694 <span class="comment"> * to the role of the node: part of an existing revision, or part of a</span>
<a name="l00695"></a>00695 <span class="comment"> * new one.  This is independent of your authorization to make changes</span>
<a name="l00696"></a>00696 <span class="comment"> * to a given node.</span>
<a name="l00697"></a>00697 <span class="comment"> *</span>
<a name="l00698"></a>00698 <span class="comment"> * Transactions are actually persistent objects, stored in the</span>
<a name="l00699"></a>00699 <span class="comment"> * database.  You can open a filesystem, begin a transaction, and</span>
<a name="l00700"></a>00700 <span class="comment"> * close the filesystem, and then a separate process could open the</span>
<a name="l00701"></a>00701 <span class="comment"> * filesystem, pick up the same transaction, and continue work on it.</span>
<a name="l00702"></a>00702 <span class="comment"> * When a transaction is successfully committed, it is removed from</span>
<a name="l00703"></a>00703 <span class="comment"> * the database.</span>
<a name="l00704"></a>00704 <span class="comment"> *</span>
<a name="l00705"></a>00705 <span class="comment"> * Every transaction is assigned a name.  You can open a transaction</span>
<a name="l00706"></a>00706 <span class="comment"> * by name, and resume work on it, or find out the name of a</span>
<a name="l00707"></a>00707 <span class="comment"> * transaction you already have open.  You can also list all the</span>
<a name="l00708"></a>00708 <span class="comment"> * transactions currently present in the database.</span>
<a name="l00709"></a>00709 <span class="comment"> *</span>
<a name="l00710"></a>00710 <span class="comment"> * You may assign properties to transactions; these are name/value</span>
<a name="l00711"></a>00711 <span class="comment"> * pairs.  When you commit a transaction, all of its properties become</span>
<a name="l00712"></a>00712 <span class="comment"> * unversioned revision properties of the new revision.  (There is one</span>
<a name="l00713"></a>00713 <span class="comment"> * exception: the svn:date property will be automatically set on new</span>
<a name="l00714"></a>00714 <span class="comment"> * transactions to the date that the transaction was created, and will</span>
<a name="l00715"></a>00715 <span class="comment"> * be overwritten when the transaction is committed by the current</span>
<a name="l00716"></a>00716 <span class="comment"> * time; changes to a transaction&#39;s svn:date property will not affect</span>
<a name="l00717"></a>00717 <span class="comment"> * its committed value.)</span>
<a name="l00718"></a>00718 <span class="comment"> *</span>
<a name="l00719"></a>00719 <span class="comment"> * Transaction names are guaranteed to contain only letters (upper-</span>
<a name="l00720"></a>00720 <span class="comment"> * and lower-case), digits, `-&#39;, and `.&#39;, from the ASCII character</span>
<a name="l00721"></a>00721 <span class="comment"> * set.</span>
<a name="l00722"></a>00722 <span class="comment"> *</span>
<a name="l00723"></a>00723 <span class="comment"> * The Subversion filesystem will make a best effort to not reuse</span>
<a name="l00724"></a>00724 <span class="comment"> * transaction names.  The Berkeley DB backend generates transaction</span>
<a name="l00725"></a>00725 <span class="comment"> * names using a sequence, or a counter, which is stored in the BDB</span>
<a name="l00726"></a>00726 <span class="comment"> * database.  Each new transaction increments the counter.  The</span>
<a name="l00727"></a>00727 <span class="comment"> * current value of the counter is not serialized into a filesystem</span>
<a name="l00728"></a>00728 <span class="comment"> * dump file, so dumping and restoring the repository will reset the</span>
<a name="l00729"></a>00729 <span class="comment"> * sequence and reuse transaction names.  The FSFS backend generates a</span>
<a name="l00730"></a>00730 <span class="comment"> * transaction name using the hostname, process ID and current time in</span>
<a name="l00731"></a>00731 <span class="comment"> * microseconds since 00:00:00 January 1, 1970 UTC.  So it is</span>
<a name="l00732"></a>00732 <span class="comment"> * extremely unlikely that a transaction name will be reused.</span>
<a name="l00733"></a>00733 <span class="comment"> *</span>
<a name="l00734"></a>00734 <span class="comment"> * @defgroup svn_fs_txns Filesystem transactions</span>
<a name="l00735"></a>00735 <span class="comment"> * @{</span>
<a name="l00736"></a>00736 <span class="comment"> */</span>
<a name="l00737"></a>00737 <span class="comment"></span>
<a name="l00738"></a>00738 <span class="comment">/** The type of a Subversion transaction object.  */</span>
<a name="l00739"></a><a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873">00739</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> <a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a>;
<a name="l00740"></a>00740 
<a name="l00741"></a>00741 <span class="comment"></span>
<a name="l00742"></a>00742 <span class="comment">/** @defgroup svn_fs_begin_txn2_flags Bitmask flags for svn_fs_begin_txn2()</span>
<a name="l00743"></a>00743 <span class="comment"> * @since New in 1.2.</span>
<a name="l00744"></a>00744 <span class="comment"> * @{ */</span>
<a name="l00745"></a>00745 <span class="comment"></span>
<a name="l00746"></a>00746 <span class="comment">/** Do on-the-fly out-of-dateness checks.  That is, an fs routine may</span>
<a name="l00747"></a>00747 <span class="comment"> * throw error if a caller tries to edit an out-of-date item in the</span>
<a name="l00748"></a>00748 <span class="comment"> * transaction.</span>
<a name="l00749"></a>00749 <span class="comment"> *</span>
<a name="l00750"></a>00750 <span class="comment"> * @warning ### Not yet implemented.</span>
<a name="l00751"></a>00751 <span class="comment"> */</span>
<a name="l00752"></a><a class="code" href="group__svn__fs__begin__txn2__flags.html#ga0df9366c31b46e85a489cee5b4bd255f">00752</a> <span class="preprocessor">#define SVN_FS_TXN_CHECK_OOD                     0x00001</span>
<a name="l00753"></a>00753 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00754"></a>00754 <span class="comment">/** Do on-the-fly lock checks.  That is, an fs routine may throw error</span>
<a name="l00755"></a>00755 <span class="comment"> * if a caller tries to edit a locked item without having rights to the lock.</span>
<a name="l00756"></a>00756 <span class="comment"> */</span>
<a name="l00757"></a><a class="code" href="group__svn__fs__begin__txn2__flags.html#gadfec12e42f42d68094402529085827f5">00757</a> <span class="preprocessor">#define SVN_FS_TXN_CHECK_LOCKS                   0x00002</span>
<a name="l00758"></a>00758 <span class="preprocessor"></span><span class="comment">/** @} */</span>
<a name="l00759"></a>00759 <span class="comment"></span>
<a name="l00760"></a>00760 <span class="comment">/**</span>
<a name="l00761"></a>00761 <span class="comment"> * Begin a new transaction on the filesystem @a fs, based on existing</span>
<a name="l00762"></a>00762 <span class="comment"> * revision @a rev.  Set @a *txn_p to a pointer to the new transaction.</span>
<a name="l00763"></a>00763 <span class="comment"> * When committed, this transaction will create a new revision.</span>
<a name="l00764"></a>00764 <span class="comment"> *</span>
<a name="l00765"></a>00765 <span class="comment"> * Allocate the new transaction in @a pool; when @a pool is freed, the new</span>
<a name="l00766"></a>00766 <span class="comment"> * transaction will be closed (neither committed nor aborted).</span>
<a name="l00767"></a>00767 <span class="comment"> *</span>
<a name="l00768"></a>00768 <span class="comment"> * @a flags determines transaction enforcement behaviors, and is composed</span>
<a name="l00769"></a>00769 <span class="comment"> * from the constants SVN_FS_TXN_* (#SVN_FS_TXN_CHECK_OOD etc.).</span>
<a name="l00770"></a>00770 <span class="comment"> *</span>
<a name="l00771"></a>00771 <span class="comment"> * @note If you&#39;re building a txn for committing, you probably</span>
<a name="l00772"></a>00772 <span class="comment"> * don&#39;t want to call this directly.  Instead, call</span>
<a name="l00773"></a>00773 <span class="comment"> * svn_repos_fs_begin_txn_for_commit(), which honors the</span>
<a name="l00774"></a>00774 <span class="comment"> * repository&#39;s hook configurations.</span>
<a name="l00775"></a>00775 <span class="comment"> *</span>
<a name="l00776"></a>00776 <span class="comment"> * @since New in 1.2.</span>
<a name="l00777"></a>00777 <span class="comment"> */</span>
<a name="l00778"></a>00778 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00779"></a>00779 <a class="code" href="group__svn__fs__txns.html#ga2fa27aba3d45db58c8889beda852fed9" title="Begin a new transaction on the filesystem fs, based on existing revision rev.">svn_fs_begin_txn2</a>(<a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> **txn_p,
<a name="l00780"></a>00780                   <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l00781"></a>00781                   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l00782"></a>00782                   apr_uint32_t flags,
<a name="l00783"></a>00783                   apr_pool_t *pool);
<a name="l00784"></a>00784 
<a name="l00785"></a>00785 <span class="comment"></span>
<a name="l00786"></a>00786 <span class="comment">/**</span>
<a name="l00787"></a>00787 <span class="comment"> * Same as svn_fs_begin_txn2(), but with @a flags set to 0.</span>
<a name="l00788"></a>00788 <span class="comment"> *</span>
<a name="l00789"></a>00789 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.1 API.</span>
<a name="l00790"></a>00790 <span class="comment"> */</span>
<a name="l00791"></a>00791 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00792"></a>00792 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00793"></a>00793 <a class="code" href="group__svn__fs__txns.html#ga5f3d23248081c14a10f72034bae82848" title="Same as svn_fs_begin_txn2(), but with flags set to 0.">svn_fs_begin_txn</a>(<a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> **txn_p,
<a name="l00794"></a>00794                  <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l00795"></a>00795                  <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l00796"></a>00796                  apr_pool_t *pool);
<a name="l00797"></a>00797 
<a name="l00798"></a>00798 
<a name="l00799"></a>00799 <span class="comment"></span>
<a name="l00800"></a>00800 <span class="comment">/** Commit @a txn.</span>
<a name="l00801"></a>00801 <span class="comment"> *</span>
<a name="l00802"></a>00802 <span class="comment"> * @note You usually don&#39;t want to call this directly.</span>
<a name="l00803"></a>00803 <span class="comment"> * Instead, call svn_repos_fs_commit_txn(), which honors the</span>
<a name="l00804"></a>00804 <span class="comment"> * repository&#39;s hook configurations.</span>
<a name="l00805"></a>00805 <span class="comment"> *</span>
<a name="l00806"></a>00806 <span class="comment"> * If the transaction conflicts with other changes committed to the</span>
<a name="l00807"></a>00807 <span class="comment"> * repository, return an #SVN_ERR_FS_CONFLICT error.  Otherwise, create</span>
<a name="l00808"></a>00808 <span class="comment"> * a new filesystem revision containing the changes made in @a txn,</span>
<a name="l00809"></a>00809 <span class="comment"> * storing that new revision number in @a *new_rev, and return zero.</span>
<a name="l00810"></a>00810 <span class="comment"> *</span>
<a name="l00811"></a>00811 <span class="comment"> * If @a conflict_p is non-zero, use it to provide details on any</span>
<a name="l00812"></a>00812 <span class="comment"> * conflicts encountered merging @a txn with the most recent committed</span>
<a name="l00813"></a>00813 <span class="comment"> * revisions.  If a conflict occurs, set @a *conflict_p to the path of</span>
<a name="l00814"></a>00814 <span class="comment"> * the conflict in @a txn, with the same lifetime as @a txn;</span>
<a name="l00815"></a>00815 <span class="comment"> * otherwise, set @a *conflict_p to NULL.</span>
<a name="l00816"></a>00816 <span class="comment"> *</span>
<a name="l00817"></a>00817 <span class="comment"> * If the commit succeeds, @a txn is invalid.</span>
<a name="l00818"></a>00818 <span class="comment"> *</span>
<a name="l00819"></a>00819 <span class="comment"> * If the commit fails for any reason, @a *new_rev is an invalid</span>
<a name="l00820"></a>00820 <span class="comment"> * revision number, an error other than #SVN_NO_ERROR is returned and</span>
<a name="l00821"></a>00821 <span class="comment"> * @a txn is still valid; you can make more operations to resolve the</span>
<a name="l00822"></a>00822 <span class="comment"> * conflict, or call svn_fs_abort_txn() to abort the transaction.</span>
<a name="l00823"></a>00823 <span class="comment"> *</span>
<a name="l00824"></a>00824 <span class="comment"> * @note Success or failure of the commit of @a txn is determined by</span>
<a name="l00825"></a>00825 <span class="comment"> * examining the value of @a *new_rev upon this function&#39;s return.  If</span>
<a name="l00826"></a>00826 <span class="comment"> * the value is a valid revision number, the commit was successful,</span>
<a name="l00827"></a>00827 <span class="comment"> * even though a non-@c NULL function return value may indicate that</span>
<a name="l00828"></a>00828 <span class="comment"> * something else went wrong in post commit FS processing.</span>
<a name="l00829"></a>00829 <span class="comment"> */</span>
<a name="l00830"></a>00830 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00831"></a>00831 <a class="code" href="group__svn__fs__txns.html#gae86163e9e3623168cee620446a40e755" title="Commit txn.">svn_fs_commit_txn</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> **conflict_p,
<a name="l00832"></a>00832                   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> *new_rev,
<a name="l00833"></a>00833                   <a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn,
<a name="l00834"></a>00834                   apr_pool_t *pool);
<a name="l00835"></a>00835 
<a name="l00836"></a>00836 <span class="comment"></span>
<a name="l00837"></a>00837 <span class="comment">/** Abort the transaction @a txn.  Any changes made in @a txn are</span>
<a name="l00838"></a>00838 <span class="comment"> * discarded, and the filesystem is left unchanged.  Use @a pool for</span>
<a name="l00839"></a>00839 <span class="comment"> * any necessary allocations.</span>
<a name="l00840"></a>00840 <span class="comment"> *</span>
<a name="l00841"></a>00841 <span class="comment"> * @note This function first sets the state of @a txn to &quot;dead&quot;, and</span>
<a name="l00842"></a>00842 <span class="comment"> * then attempts to purge it and any related data from the filesystem.</span>
<a name="l00843"></a>00843 <span class="comment"> * If some part of the cleanup process fails, @a txn and some portion</span>
<a name="l00844"></a>00844 <span class="comment"> * of its data may remain in the database after this function returns.</span>
<a name="l00845"></a>00845 <span class="comment"> * Use svn_fs_purge_txn() to retry the transaction cleanup.</span>
<a name="l00846"></a>00846 <span class="comment"> */</span>
<a name="l00847"></a>00847 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00848"></a>00848 <a class="code" href="group__svn__fs__txns.html#ga3854fdae3fed37d82514183b061f7c16" title="Abort the transaction txn.">svn_fs_abort_txn</a>(<a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn,
<a name="l00849"></a>00849                  apr_pool_t *pool);
<a name="l00850"></a>00850 
<a name="l00851"></a>00851 <span class="comment"></span>
<a name="l00852"></a>00852 <span class="comment">/** Cleanup the dead transaction in @a fs whose ID is @a txn_id.  Use</span>
<a name="l00853"></a>00853 <span class="comment"> * @a pool for all allocations.  If the transaction is not yet dead,</span>
<a name="l00854"></a>00854 <span class="comment"> * the error #SVN_ERR_FS_TRANSACTION_NOT_DEAD is returned.  (The</span>
<a name="l00855"></a>00855 <span class="comment"> * caller probably forgot to abort the transaction, or the cleanup</span>
<a name="l00856"></a>00856 <span class="comment"> * step of that abort failed for some reason.)</span>
<a name="l00857"></a>00857 <span class="comment"> */</span>
<a name="l00858"></a>00858 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00859"></a>00859 <a class="code" href="group__svn__fs__txns.html#ga1b7d6f51cfbe7083fb11937c0abeaa28" title="Cleanup the dead transaction in fs whose ID is txn_id.">svn_fs_purge_txn</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l00860"></a>00860                  <span class="keyword">const</span> <span class="keywordtype">char</span> *txn_id,
<a name="l00861"></a>00861                  apr_pool_t *pool);
<a name="l00862"></a>00862 
<a name="l00863"></a>00863 <span class="comment"></span>
<a name="l00864"></a>00864 <span class="comment">/** Set @a *name_p to the name of the transaction @a txn, as a</span>
<a name="l00865"></a>00865 <span class="comment"> * NULL-terminated string.  Allocate the name in @a pool.</span>
<a name="l00866"></a>00866 <span class="comment"> */</span>
<a name="l00867"></a>00867 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00868"></a>00868 <a class="code" href="group__svn__fs__txns.html#ga023643006df41c54ac79376f3a6101ee" title="Set *name_p to the name of the transaction txn, as a NULL-terminated string.">svn_fs_txn_name</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> **name_p,
<a name="l00869"></a>00869                 <a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn,
<a name="l00870"></a>00870                 apr_pool_t *pool);
<a name="l00871"></a>00871 <span class="comment"></span>
<a name="l00872"></a>00872 <span class="comment">/** Return @a txn&#39;s base revision. */</span>
<a name="l00873"></a>00873 <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a>
<a name="l00874"></a>00874 <a class="code" href="group__svn__fs__txns.html#gaf10904f009ec2136304acf11017f67f2" title="Return txn&#39;s base revision.">svn_fs_txn_base_revision</a>(<a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn);
<a name="l00875"></a>00875 
<a name="l00876"></a>00876 
<a name="l00877"></a>00877 <span class="comment"></span>
<a name="l00878"></a>00878 <span class="comment">/** Open the transaction named @a name in the filesystem @a fs.  Set @a *txn</span>
<a name="l00879"></a>00879 <span class="comment"> * to the transaction.</span>
<a name="l00880"></a>00880 <span class="comment"> *</span>
<a name="l00881"></a>00881 <span class="comment"> * If there is no such transaction, #SVN_ERR_FS_NO_SUCH_TRANSACTION is</span>
<a name="l00882"></a>00882 <span class="comment"> * the error returned.</span>
<a name="l00883"></a>00883 <span class="comment"> *</span>
<a name="l00884"></a>00884 <span class="comment"> * Allocate the new transaction in @a pool; when @a pool is freed, the new</span>
<a name="l00885"></a>00885 <span class="comment"> * transaction will be closed (neither committed nor aborted).</span>
<a name="l00886"></a>00886 <span class="comment"> */</span>
<a name="l00887"></a>00887 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00888"></a>00888 <a class="code" href="group__svn__fs__txns.html#ga18241d3755602b52f2ccd0c6c68118f1" title="Open the transaction named name in the filesystem fs.">svn_fs_open_txn</a>(<a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> **txn,
<a name="l00889"></a>00889                 <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l00890"></a>00890                 <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l00891"></a>00891                 apr_pool_t *pool);
<a name="l00892"></a>00892 
<a name="l00893"></a>00893 <span class="comment"></span>
<a name="l00894"></a>00894 <span class="comment">/** Set @a *names_p to an array of &lt;tt&gt;const char *&lt;/tt&gt; ids which are the</span>
<a name="l00895"></a>00895 <span class="comment"> * names of all the currently active transactions in the filesystem @a fs.</span>
<a name="l00896"></a>00896 <span class="comment"> * Allocate the array in @a pool.</span>
<a name="l00897"></a>00897 <span class="comment"> */</span>
<a name="l00898"></a>00898 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00899"></a>00899 <a class="code" href="group__svn__fs__txns.html#gaa53bc028497b6468ae4cdb2347e8d8b0" title="Set *names_p to an array of const char * ids which are the names of all the currently active transact...">svn_fs_list_transactions</a>(apr_array_header_t **names_p,
<a name="l00900"></a>00900                          <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l00901"></a>00901                          apr_pool_t *pool);
<a name="l00902"></a>00902 
<a name="l00903"></a>00903 <span class="comment">/* Transaction properties */</span>
<a name="l00904"></a>00904 <span class="comment"></span>
<a name="l00905"></a>00905 <span class="comment">/** Set @a *value_p to the value of the property named @a propname on</span>
<a name="l00906"></a>00906 <span class="comment"> * transaction @a txn.  If @a txn has no property by that name, set</span>
<a name="l00907"></a>00907 <span class="comment"> * @a *value_p to zero.  Allocate the result in @a pool.</span>
<a name="l00908"></a>00908 <span class="comment"> */</span>
<a name="l00909"></a>00909 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00910"></a>00910 <a class="code" href="group__svn__fs__txns.html#gabced341c635f385b663af51fee1e289d" title="Set *value_p to the value of the property named propname on transaction txn.">svn_fs_txn_prop</a>(<a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> **value_p,
<a name="l00911"></a>00911                 <a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn,
<a name="l00912"></a>00912                 <span class="keyword">const</span> <span class="keywordtype">char</span> *propname,
<a name="l00913"></a>00913                 apr_pool_t *pool);
<a name="l00914"></a>00914 
<a name="l00915"></a>00915 <span class="comment"></span>
<a name="l00916"></a>00916 <span class="comment">/** Set @a *table_p to the entire property list of transaction @a txn, as</span>
<a name="l00917"></a>00917 <span class="comment"> * an APR hash table allocated in @a pool.  The resulting table maps property</span>
<a name="l00918"></a>00918 <span class="comment"> * names to pointers to #svn_string_t objects containing the property value.</span>
<a name="l00919"></a>00919 <span class="comment"> */</span>
<a name="l00920"></a>00920 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00921"></a>00921 <a class="code" href="group__svn__fs__txns.html#ga035aeb24035a350c6d5ec8a81a636994" title="Set *table_p to the entire property list of transaction txn, as an APR hash table allocated in pool...">svn_fs_txn_proplist</a>(apr_hash_t **table_p,
<a name="l00922"></a>00922                     <a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn,
<a name="l00923"></a>00923                     apr_pool_t *pool);
<a name="l00924"></a>00924 
<a name="l00925"></a>00925 <span class="comment"></span>
<a name="l00926"></a>00926 <span class="comment">/** Change a transactions @a txn&#39;s property&#39;s value, or add/delete a</span>
<a name="l00927"></a>00927 <span class="comment"> * property.  @a name is the name of the property to change, and @a value</span>
<a name="l00928"></a>00928 <span class="comment"> * is the new value of the property, or zero if the property should be</span>
<a name="l00929"></a>00929 <span class="comment"> * removed altogether.  Do any necessary temporary allocation in @a pool.</span>
<a name="l00930"></a>00930 <span class="comment"> */</span>
<a name="l00931"></a>00931 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00932"></a>00932 <a class="code" href="group__svn__fs__txns.html#ga2e9673e36aec896dae01a6c31787bcd6" title="Change a transactions txn&#39;s property&#39;s value, or add/delete a property.">svn_fs_change_txn_prop</a>(<a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn,
<a name="l00933"></a>00933                        <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l00934"></a>00934                        <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *value,
<a name="l00935"></a>00935                        apr_pool_t *pool);
<a name="l00936"></a>00936 
<a name="l00937"></a>00937 <span class="comment"></span>
<a name="l00938"></a>00938 <span class="comment">/** Change, add, and/or delete transaction property values in</span>
<a name="l00939"></a>00939 <span class="comment"> * transaction @a txn.  @a props is an array of &lt;tt&gt;svn_prop_t&lt;/tt&gt;</span>
<a name="l00940"></a>00940 <span class="comment"> * elements.  This is equivalent to calling svn_fs_change_txn_prop()</span>
<a name="l00941"></a>00941 <span class="comment"> * multiple times with the @c name and @c value fields of each</span>
<a name="l00942"></a>00942 <span class="comment"> * successive &lt;tt&gt;svn_prop_t&lt;/tt&gt;, but may be more efficient.</span>
<a name="l00943"></a>00943 <span class="comment"> * (Properties not mentioned are left alone.)  Do any necessary</span>
<a name="l00944"></a>00944 <span class="comment"> * temporary allocation in @a pool.</span>
<a name="l00945"></a>00945 <span class="comment"> *</span>
<a name="l00946"></a>00946 <span class="comment"> * @since New in 1.5.</span>
<a name="l00947"></a>00947 <span class="comment"> */</span>
<a name="l00948"></a>00948 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00949"></a>00949 <a class="code" href="group__svn__fs__txns.html#ga94c4ed3c69ab18927f1ff2bac8965ad3" title="Change, add, and/or delete transaction property values in transaction txn.">svn_fs_change_txn_props</a>(<a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn,
<a name="l00950"></a>00950                         <span class="keyword">const</span> apr_array_header_t *props,
<a name="l00951"></a>00951                         apr_pool_t *pool);
<a name="l00952"></a>00952 <span class="comment"></span>
<a name="l00953"></a>00953 <span class="comment">/** @} */</span>
<a name="l00954"></a>00954 
<a name="l00955"></a>00955 <span class="comment"></span>
<a name="l00956"></a>00956 <span class="comment">/** Roots.</span>
<a name="l00957"></a>00957 <span class="comment"> *</span>
<a name="l00958"></a>00958 <span class="comment"> * An #svn_fs_root_t object represents the root directory of some</span>
<a name="l00959"></a>00959 <span class="comment"> * revision or transaction in a filesystem.  To refer to particular</span>
<a name="l00960"></a>00960 <span class="comment"> * node or node revision, you provide a root, and a directory path</span>
<a name="l00961"></a>00961 <span class="comment"> * relative to that root.</span>
<a name="l00962"></a>00962 <span class="comment"> *</span>
<a name="l00963"></a>00963 <span class="comment"> * @defgroup svn_fs_roots Filesystem roots</span>
<a name="l00964"></a>00964 <span class="comment"> * @{</span>
<a name="l00965"></a>00965 <span class="comment"> */</span>
<a name="l00966"></a>00966 <span class="comment"></span>
<a name="l00967"></a>00967 <span class="comment">/** The Filesystem Root object. */</span>
<a name="l00968"></a><a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd">00968</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a>;
<a name="l00969"></a>00969 
<a name="l00970"></a>00970 <span class="comment"></span>
<a name="l00971"></a>00971 <span class="comment">/** Set @a *root_p to the root directory of revision @a rev in filesystem @a fs.</span>
<a name="l00972"></a>00972 <span class="comment"> * Allocate @a *root_p in a private subpool of @a pool; the root can be</span>
<a name="l00973"></a>00973 <span class="comment"> * destroyed earlier than @a pool by calling #svn_fs_close_root.</span>
<a name="l00974"></a>00974 <span class="comment"> */</span>
<a name="l00975"></a>00975 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00976"></a>00976 <a class="code" href="group__svn__fs__roots.html#gadee7737a4690e802c3ffda2318e07b8d" title="Set *root_p to the root directory of revision rev in filesystem fs.">svn_fs_revision_root</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> **root_p,
<a name="l00977"></a>00977                      <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l00978"></a>00978                      <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l00979"></a>00979                      apr_pool_t *pool);
<a name="l00980"></a>00980 
<a name="l00981"></a>00981 <span class="comment"></span>
<a name="l00982"></a>00982 <span class="comment">/** Set @a *root_p to the root directory of @a txn.  Allocate @a *root_p in a</span>
<a name="l00983"></a>00983 <span class="comment"> * private subpool of @a pool; the root can be destroyed earlier than @a pool by</span>
<a name="l00984"></a>00984 <span class="comment"> * calling #svn_fs_close_root.</span>
<a name="l00985"></a>00985 <span class="comment"> */</span>
<a name="l00986"></a>00986 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00987"></a>00987 <a class="code" href="group__svn__fs__roots.html#gaa7420b1ecb9c73f62cbb0d5f22963cdf" title="Set *root_p to the root directory of txn.">svn_fs_txn_root</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> **root_p,
<a name="l00988"></a>00988                 <a class="code" href="group__svn__fs__txns.html#gae0ac340327051a48262d7442b5a3a873" title="The type of a Subversion transaction object.">svn_fs_txn_t</a> *txn,
<a name="l00989"></a>00989                 apr_pool_t *pool);
<a name="l00990"></a>00990 
<a name="l00991"></a>00991 <span class="comment"></span>
<a name="l00992"></a>00992 <span class="comment">/** Free the root directory @a root; this only needs to be used if you want to</span>
<a name="l00993"></a>00993 <span class="comment"> * free the memory associated with @a root earlier than the time you destroy</span>
<a name="l00994"></a>00994 <span class="comment"> * the pool passed to the function that created it (svn_fs_revision_root() or</span>
<a name="l00995"></a>00995 <span class="comment"> * svn_fs_txn_root()).</span>
<a name="l00996"></a>00996 <span class="comment"> */</span>
<a name="l00997"></a>00997 <span class="keywordtype">void</span>
<a name="l00998"></a>00998 <a class="code" href="group__svn__fs__roots.html#ga06ab96148b78d0883601545114f8b391" title="Free the root directory root; this only needs to be used if you want to free the memory associated wi...">svn_fs_close_root</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root);
<a name="l00999"></a>00999 
<a name="l01000"></a>01000 <span class="comment"></span>
<a name="l01001"></a>01001 <span class="comment">/** Return the filesystem to which @a root belongs.  */</span>
<a name="l01002"></a>01002 <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *
<a name="l01003"></a>01003 <a class="code" href="group__svn__fs__roots.html#ga18b5e4092f5ee518fd4ad1d877b326d7" title="Return the filesystem to which root belongs.">svn_fs_root_fs</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root);
<a name="l01004"></a>01004 
<a name="l01005"></a>01005 <span class="comment"></span>
<a name="l01006"></a>01006 <span class="comment">/** Return @c TRUE iff @a root is a transaction root.  */</span>
<a name="l01007"></a>01007 <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a>
<a name="l01008"></a>01008 <a class="code" href="group__svn__fs__roots.html#ga9c8402805c28e8fb5292281a766e6621" title="Return TRUE iff root is a transaction root.">svn_fs_is_txn_root</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root);
<a name="l01009"></a>01009 <span class="comment"></span>
<a name="l01010"></a>01010 <span class="comment">/** Return @c TRUE iff @a root is a revision root.  */</span>
<a name="l01011"></a>01011 <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a>
<a name="l01012"></a>01012 <a class="code" href="group__svn__fs__roots.html#ga19748deb69ab1f1c401956c861fb7805" title="Return TRUE iff root is a revision root.">svn_fs_is_revision_root</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root);
<a name="l01013"></a>01013 
<a name="l01014"></a>01014 <span class="comment"></span>
<a name="l01015"></a>01015 <span class="comment">/** If @a root is the root of a transaction, return the name of the</span>
<a name="l01016"></a>01016 <span class="comment"> * transaction, allocated in @a pool; otherwise, return NULL.</span>
<a name="l01017"></a>01017 <span class="comment"> */</span>
<a name="l01018"></a>01018 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l01019"></a>01019 <a class="code" href="group__svn__fs__roots.html#ga3e3b115b2aac374e1336d5ef872762d6" title="If root is the root of a transaction, return the name of the transaction, allocated in pool; otherwis...">svn_fs_txn_root_name</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01020"></a>01020                      apr_pool_t *pool);
<a name="l01021"></a>01021 <span class="comment"></span>
<a name="l01022"></a>01022 <span class="comment">/** If @a root is the root of a transaction, return the number of the</span>
<a name="l01023"></a>01023 <span class="comment"> * revision on which is was based when created.  Otherwise, return</span>
<a name="l01024"></a>01024 <span class="comment"> * #SVN_INVALID_REVNUM.</span>
<a name="l01025"></a>01025 <span class="comment"> *</span>
<a name="l01026"></a>01026 <span class="comment"> * @since New in 1.5.</span>
<a name="l01027"></a>01027 <span class="comment"> */</span>
<a name="l01028"></a>01028 <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a>
<a name="l01029"></a>01029 <a class="code" href="group__svn__fs__roots.html#ga2cbdbde20a6bb0ef6b3ad02e5e1561c6" title="If root is the root of a transaction, return the number of the revision on which is was based when cr...">svn_fs_txn_root_base_revision</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root);
<a name="l01030"></a>01030 <span class="comment"></span>
<a name="l01031"></a>01031 <span class="comment">/** If @a root is the root of a revision, return the revision number.</span>
<a name="l01032"></a>01032 <span class="comment"> * Otherwise, return #SVN_INVALID_REVNUM.</span>
<a name="l01033"></a>01033 <span class="comment"> */</span>
<a name="l01034"></a>01034 <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a>
<a name="l01035"></a>01035 <a class="code" href="group__svn__fs__roots.html#ga4843220a9b552950f98862a8539bfc83" title="If root is the root of a revision, return the revision number.">svn_fs_revision_root_revision</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root);
<a name="l01036"></a>01036 <span class="comment"></span>
<a name="l01037"></a>01037 <span class="comment">/** @} */</span>
<a name="l01038"></a>01038 
<a name="l01039"></a>01039 <span class="comment"></span>
<a name="l01040"></a>01040 <span class="comment">/** Directory entry names and directory paths.</span>
<a name="l01041"></a>01041 <span class="comment"> *</span>
<a name="l01042"></a>01042 <span class="comment"> * Here are the rules for directory entry names, and directory paths:</span>
<a name="l01043"></a>01043 <span class="comment"> *</span>
<a name="l01044"></a>01044 <span class="comment"> * A directory entry name is a Unicode string encoded in UTF-8, and</span>
<a name="l01045"></a>01045 <span class="comment"> * may not contain the NULL character (U+0000).  The name should be in</span>
<a name="l01046"></a>01046 <span class="comment"> * Unicode canonical decomposition and ordering.  No directory entry</span>
<a name="l01047"></a>01047 <span class="comment"> * may be named &#39;.&#39;, &#39;..&#39;, or the empty string.  Given a directory</span>
<a name="l01048"></a>01048 <span class="comment"> * entry name which fails to meet these requirements, a filesystem</span>
<a name="l01049"></a>01049 <span class="comment"> * function returns an SVN_ERR_FS_PATH_SYNTAX error.</span>
<a name="l01050"></a>01050 <span class="comment"> *</span>
<a name="l01051"></a>01051 <span class="comment"> * A directory path is a sequence of zero or more directory entry</span>
<a name="l01052"></a>01052 <span class="comment"> * names, separated by slash characters (U+002f), and possibly ending</span>
<a name="l01053"></a>01053 <span class="comment"> * with slash characters.  Sequences of two or more consecutive slash</span>
<a name="l01054"></a>01054 <span class="comment"> * characters are treated as if they were a single slash.  If a path</span>
<a name="l01055"></a>01055 <span class="comment"> * ends with a slash, it refers to the same node it would without the</span>
<a name="l01056"></a>01056 <span class="comment"> * slash, but that node must be a directory, or else the function</span>
<a name="l01057"></a>01057 <span class="comment"> * returns an SVN_ERR_FS_NOT_DIRECTORY error.</span>
<a name="l01058"></a>01058 <span class="comment"> *</span>
<a name="l01059"></a>01059 <span class="comment"> * A path consisting of the empty string, or a string containing only</span>
<a name="l01060"></a>01060 <span class="comment"> * slashes, refers to the root directory.</span>
<a name="l01061"></a>01061 <span class="comment"> *</span>
<a name="l01062"></a>01062 <span class="comment"> * @defgroup svn_fs_directories Filesystem directories</span>
<a name="l01063"></a>01063 <span class="comment"> * @{</span>
<a name="l01064"></a>01064 <span class="comment"> */</span>
<a name="l01065"></a>01065 
<a name="l01066"></a>01066 
<a name="l01067"></a>01067 <span class="comment"></span>
<a name="l01068"></a>01068 <span class="comment">/** The kind of change that occurred on the path. */</span>
<a name="l01069"></a><a class="code" href="group__svn__fs__directories.html#ga4b9c73aaf4c6e441814391fe453809ed">01069</a> <span class="keyword">typedef</span> <span class="keyword">enum</span> <a class="code" href="group__svn__fs__directories.html#ga4b9c73aaf4c6e441814391fe453809ed" title="The kind of change that occurred on the path.">svn_fs_path_change_kind_t</a>
<a name="l01070"></a>01070 {<span class="comment"></span>
<a name="l01071"></a>01071 <span class="comment">  /** path modified in txn */</span>
<a name="l01072"></a><a class="code" href="group__svn__fs__directories.html#gga4b9c73aaf4c6e441814391fe453809eda5baa73bf484f0555122529554786a9d9">01072</a>   <a class="code" href="group__svn__fs__directories.html#gga4b9c73aaf4c6e441814391fe453809eda5baa73bf484f0555122529554786a9d9" title="path modified in txn">svn_fs_path_change_modify</a> = 0,
<a name="l01073"></a>01073 <span class="comment"></span>
<a name="l01074"></a>01074 <span class="comment">  /** path added in txn */</span>
<a name="l01075"></a><a class="code" href="group__svn__fs__directories.html#gga4b9c73aaf4c6e441814391fe453809eda05141754cb7a3e8ce0176d70438b1b2d">01075</a>   <a class="code" href="group__svn__fs__directories.html#gga4b9c73aaf4c6e441814391fe453809eda05141754cb7a3e8ce0176d70438b1b2d" title="path added in txn">svn_fs_path_change_add</a>,
<a name="l01076"></a>01076 <span class="comment"></span>
<a name="l01077"></a>01077 <span class="comment">  /** path removed in txn */</span>
<a name="l01078"></a><a class="code" href="group__svn__fs__directories.html#gga4b9c73aaf4c6e441814391fe453809eda88647e84de7d07f658e15503ccb85a08">01078</a>   <a class="code" href="group__svn__fs__directories.html#gga4b9c73aaf4c6e441814391fe453809eda88647e84de7d07f658e15503ccb85a08" title="path removed in txn">svn_fs_path_change_delete</a>,
<a name="l01079"></a>01079 <span class="comment"></span>
<a name="l01080"></a>01080 <span class="comment">  /** path removed and re-added in txn */</span>
<a name="l01081"></a><a class="code" href="group__svn__fs__directories.html#gga4b9c73aaf4c6e441814391fe453809eda61e2667079746d940d3049c276fb6bee">01081</a>   <a class="code" href="group__svn__fs__directories.html#gga4b9c73aaf4c6e441814391fe453809eda61e2667079746d940d3049c276fb6bee" title="path removed and re-added in txn">svn_fs_path_change_replace</a>,
<a name="l01082"></a>01082 <span class="comment"></span>
<a name="l01083"></a>01083 <span class="comment">  /** ignore all previous change items for path (internal-use only) */</span>
<a name="l01084"></a><a class="code" href="group__svn__fs__directories.html#gga4b9c73aaf4c6e441814391fe453809eda84048643b283a014f3ec9c2ae382c477">01084</a>   <a class="code" href="group__svn__fs__directories.html#gga4b9c73aaf4c6e441814391fe453809eda84048643b283a014f3ec9c2ae382c477" title="ignore all previous change items for path (internal-use only)">svn_fs_path_change_reset</a>
<a name="l01085"></a>01085 
<a name="l01086"></a>01086 } <a class="code" href="group__svn__fs__directories.html#ga4b9c73aaf4c6e441814391fe453809ed" title="The kind of change that occurred on the path.">svn_fs_path_change_kind_t</a>;
<a name="l01087"></a>01087 <span class="comment"></span>
<a name="l01088"></a>01088 <span class="comment">/** Change descriptor.</span>
<a name="l01089"></a>01089 <span class="comment"> *</span>
<a name="l01090"></a>01090 <span class="comment"> * @note Fields may be added to the end of this structure in future</span>
<a name="l01091"></a>01091 <span class="comment"> * versions.  Therefore, to preserve binary compatibility, users</span>
<a name="l01092"></a>01092 <span class="comment"> * should not directly allocate structures of this type.</span>
<a name="l01093"></a>01093 <span class="comment"> *</span>
<a name="l01094"></a>01094 <span class="comment"> * @since New in 1.6. */</span>
<a name="l01095"></a><a class="code" href="structsvn__fs__path__change2__t.html">01095</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__fs__path__change2__t.html" title="Change descriptor.">svn_fs_path_change2_t</a>
<a name="l01096"></a>01096 {<span class="comment"></span>
<a name="l01097"></a>01097 <span class="comment">  /** node revision id of changed path */</span>
<a name="l01098"></a><a class="code" href="structsvn__fs__path__change2__t.html#a3bdafda16fc0c9f42d7382fc43a490af">01098</a>   <span class="keyword">const</span> <a class="code" href="group__svn__fs__nodes.html#gaeca8f1c373c50ca7bb08e3417242b106" title="An object representing a node-revision id.">svn_fs_id_t</a> *<a class="code" href="structsvn__fs__path__change2__t.html#a3bdafda16fc0c9f42d7382fc43a490af" title="node revision id of changed path">node_rev_id</a>;
<a name="l01099"></a>01099 <span class="comment"></span>
<a name="l01100"></a>01100 <span class="comment">  /** kind of change */</span>
<a name="l01101"></a><a class="code" href="structsvn__fs__path__change2__t.html#a6d6ba38020624fb8870f42237ccb2633">01101</a>   <a class="code" href="group__svn__fs__directories.html#ga4b9c73aaf4c6e441814391fe453809ed" title="The kind of change that occurred on the path.">svn_fs_path_change_kind_t</a> <a class="code" href="structsvn__fs__path__change2__t.html#a6d6ba38020624fb8870f42237ccb2633" title="kind of change">change_kind</a>;
<a name="l01102"></a>01102 <span class="comment"></span>
<a name="l01103"></a>01103 <span class="comment">  /** were there text mods? */</span>
<a name="l01104"></a><a class="code" href="structsvn__fs__path__change2__t.html#a6a64b9682ed8c949b2a4927cf5f0813a">01104</a>   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> <a class="code" href="structsvn__fs__path__change2__t.html#a6a64b9682ed8c949b2a4927cf5f0813a" title="were there text mods?">text_mod</a>;
<a name="l01105"></a>01105 <span class="comment"></span>
<a name="l01106"></a>01106 <span class="comment">  /** were there property mods? */</span>
<a name="l01107"></a><a class="code" href="structsvn__fs__path__change2__t.html#a99a27a8781f96aa3af982fd78284526f">01107</a>   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> <a class="code" href="structsvn__fs__path__change2__t.html#a99a27a8781f96aa3af982fd78284526f" title="were there property mods?">prop_mod</a>;
<a name="l01108"></a>01108 <span class="comment"></span>
<a name="l01109"></a>01109 <span class="comment">  /** what node kind is the path?</span>
<a name="l01110"></a>01110 <span class="comment">      (Note: it is legal for this to be #svn_node_unknown.) */</span>
<a name="l01111"></a><a class="code" href="structsvn__fs__path__change2__t.html#aca0ffaebb754ff15ce657cca285543db">01111</a>   <a class="code" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a" title="The various types of nodes in the Subversion filesystem.">svn_node_kind_t</a> <a class="code" href="structsvn__fs__path__change2__t.html#aca0ffaebb754ff15ce657cca285543db" title="what node kind is the path? (Note: it is legal for this to be svn_node_unknown.)">node_kind</a>;
<a name="l01112"></a>01112 <span class="comment"></span>
<a name="l01113"></a>01113 <span class="comment">  /** Copyfrom revision and path; this is only valid if copyfrom_known</span>
<a name="l01114"></a>01114 <span class="comment">   * is true. */</span>
<a name="l01115"></a><a class="code" href="structsvn__fs__path__change2__t.html#a726401df85bf35cb35d80e512fba21dc">01115</a>   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> <a class="code" href="structsvn__fs__path__change2__t.html#a726401df85bf35cb35d80e512fba21dc" title="Copyfrom revision and path; this is only valid if copyfrom_known is true.">copyfrom_known</a>;
<a name="l01116"></a>01116   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> copyfrom_rev;
<a name="l01117"></a>01117   <span class="keyword">const</span> <span class="keywordtype">char</span> *copyfrom_path;
<a name="l01118"></a>01118 
<a name="l01119"></a>01119   <span class="comment">/* NOTE! Please update svn_fs_path_change2_create() when adding new</span>
<a name="l01120"></a>01120 <span class="comment">     fields here. */</span>
<a name="l01121"></a>01121 } <a class="code" href="group__svn__fs__directories.html#ga50807b41848e447ca797063524d31389" title="Change descriptor.">svn_fs_path_change2_t</a>;
<a name="l01122"></a>01122 
<a name="l01123"></a>01123 <span class="comment"></span>
<a name="l01124"></a>01124 <span class="comment">/** Similar to #svn_fs_path_change2_t, but without kind and copyfrom</span>
<a name="l01125"></a>01125 <span class="comment"> * information.</span>
<a name="l01126"></a>01126 <span class="comment"> *</span>
<a name="l01127"></a>01127 <span class="comment"> * @deprecated Provided for backwards compatibility with the 1.5 API.</span>
<a name="l01128"></a>01128 <span class="comment"> */</span>
<a name="l01129"></a>01129 
<a name="l01130"></a><a class="code" href="structsvn__fs__path__change__t.html">01130</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__fs__path__change__t.html" title="Similar to svn_fs_path_change2_t, but without kind and copyfrom information.">svn_fs_path_change_t</a>
<a name="l01131"></a>01131 {<span class="comment"></span>
<a name="l01132"></a>01132 <span class="comment">  /** node revision id of changed path */</span>
<a name="l01133"></a><a class="code" href="structsvn__fs__path__change__t.html#a4c26033722f2b83da27d20ff3f6a09a6">01133</a>   <span class="keyword">const</span> <a class="code" href="group__svn__fs__nodes.html#gaeca8f1c373c50ca7bb08e3417242b106" title="An object representing a node-revision id.">svn_fs_id_t</a> *<a class="code" href="structsvn__fs__path__change__t.html#a4c26033722f2b83da27d20ff3f6a09a6" title="node revision id of changed path">node_rev_id</a>;
<a name="l01134"></a>01134 <span class="comment"></span>
<a name="l01135"></a>01135 <span class="comment">  /** kind of change */</span>
<a name="l01136"></a><a class="code" href="structsvn__fs__path__change__t.html#ac3bd32b78b21e28aea8c88b3f322f30a">01136</a>   <a class="code" href="group__svn__fs__directories.html#ga4b9c73aaf4c6e441814391fe453809ed" title="The kind of change that occurred on the path.">svn_fs_path_change_kind_t</a> <a class="code" href="structsvn__fs__path__change__t.html#ac3bd32b78b21e28aea8c88b3f322f30a" title="kind of change">change_kind</a>;
<a name="l01137"></a>01137 <span class="comment"></span>
<a name="l01138"></a>01138 <span class="comment">  /** were there text mods? */</span>
<a name="l01139"></a><a class="code" href="structsvn__fs__path__change__t.html#a0a53d0426784c1f340e7e32dbc04e20e">01139</a>   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> <a class="code" href="structsvn__fs__path__change__t.html#a0a53d0426784c1f340e7e32dbc04e20e" title="were there text mods?">text_mod</a>;
<a name="l01140"></a>01140 <span class="comment"></span>
<a name="l01141"></a>01141 <span class="comment">  /** were there property mods? */</span>
<a name="l01142"></a><a class="code" href="structsvn__fs__path__change__t.html#a32cb8c9d233f619117eeef4c11380164">01142</a>   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> <a class="code" href="structsvn__fs__path__change__t.html#a32cb8c9d233f619117eeef4c11380164" title="were there property mods?">prop_mod</a>;
<a name="l01143"></a>01143 
<a name="l01144"></a>01144 } <a class="code" href="group__svn__fs__directories.html#gafc7f95263f8edd2c4855e762983813b5" title="Similar to svn_fs_path_change2_t, but without kind and copyfrom information.">svn_fs_path_change_t</a>;
<a name="l01145"></a>01145 <span class="comment"></span>
<a name="l01146"></a>01146 <span class="comment">/**</span>
<a name="l01147"></a>01147 <span class="comment"> * Allocate an #svn_fs_path_change2_t structure in @a pool, initialize and</span>
<a name="l01148"></a>01148 <span class="comment"> * return it.</span>
<a name="l01149"></a>01149 <span class="comment"> *</span>
<a name="l01150"></a>01150 <span class="comment"> * Set the @c node_rev_id field of the created struct to @a node_rev_id, and</span>
<a name="l01151"></a>01151 <span class="comment"> * @c change_kind to @a change_kind.  Set all other fields to their</span>
<a name="l01152"></a>01152 <span class="comment"> * @c _unknown, @c NULL or invalid value, respectively.</span>
<a name="l01153"></a>01153 <span class="comment"> *</span>
<a name="l01154"></a>01154 <span class="comment"> * @since New in 1.6.</span>
<a name="l01155"></a>01155 <span class="comment"> */</span>
<a name="l01156"></a>01156 <a class="code" href="structsvn__fs__path__change2__t.html" title="Change descriptor.">svn_fs_path_change2_t</a> *
<a name="l01157"></a>01157 <a class="code" href="group__svn__fs__directories.html#ga1875b951703c3e0e418a0e4d9a8a4c8d" title="Allocate an svn_fs_path_change2_t structure in pool, initialize and return it.">svn_fs_path_change2_create</a>(<span class="keyword">const</span> <a class="code" href="group__svn__fs__nodes.html#gaeca8f1c373c50ca7bb08e3417242b106" title="An object representing a node-revision id.">svn_fs_id_t</a> *node_rev_id,
<a name="l01158"></a>01158                            <a class="code" href="group__svn__fs__directories.html#ga4b9c73aaf4c6e441814391fe453809ed" title="The kind of change that occurred on the path.">svn_fs_path_change_kind_t</a> change_kind,
<a name="l01159"></a>01159                            apr_pool_t *pool);
<a name="l01160"></a>01160 <span class="comment"></span>
<a name="l01161"></a>01161 <span class="comment">/** Determine what has changed under a @a root.</span>
<a name="l01162"></a>01162 <span class="comment"> *</span>
<a name="l01163"></a>01163 <span class="comment"> * Allocate and return a hash @a *changed_paths2_p containing descriptions</span>
<a name="l01164"></a>01164 <span class="comment"> * of the paths changed under @a root.  The hash is keyed with</span>
<a name="l01165"></a>01165 <span class="comment"> * &lt;tt&gt;const char *&lt;/tt&gt; paths, and has #svn_fs_path_change2_t * values.</span>
<a name="l01166"></a>01166 <span class="comment"> *</span>
<a name="l01167"></a>01167 <span class="comment"> * Callers can assume that this function takes time proportional to</span>
<a name="l01168"></a>01168 <span class="comment"> * the amount of data output, and does not need to do tree crawls;</span>
<a name="l01169"></a>01169 <span class="comment"> * however, it is possible that some of the @c node_kind fields in the</span>
<a name="l01170"></a>01170 <span class="comment"> * #svn_fs_path_change2_t * values will be #svn_node_unknown or</span>
<a name="l01171"></a>01171 <span class="comment"> * that and some of the @c copyfrom_known fields will be FALSE.</span>
<a name="l01172"></a>01172 <span class="comment"> *</span>
<a name="l01173"></a>01173 <span class="comment"> * Use @a pool for all allocations, including the hash and its values.</span>
<a name="l01174"></a>01174 <span class="comment"> *</span>
<a name="l01175"></a>01175 <span class="comment"> * @since New in 1.6.</span>
<a name="l01176"></a>01176 <span class="comment"> */</span>
<a name="l01177"></a>01177 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01178"></a>01178 <a class="code" href="group__svn__fs__directories.html#ga4f4dac990ffee5f8b29a658f1c88f7d9" title="Determine what has changed under a root.">svn_fs_paths_changed2</a>(apr_hash_t **changed_paths2_p,
<a name="l01179"></a>01179                       <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01180"></a>01180                       apr_pool_t *pool);
<a name="l01181"></a>01181 
<a name="l01182"></a>01182 <span class="comment"></span>
<a name="l01183"></a>01183 <span class="comment">/** Same as svn_fs_paths_changed2(), only with #svn_fs_path_change_t * values</span>
<a name="l01184"></a>01184 <span class="comment"> * in the hash (and thus no kind or copyfrom data).</span>
<a name="l01185"></a>01185 <span class="comment"> *</span>
<a name="l01186"></a>01186 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.5 API.</span>
<a name="l01187"></a>01187 <span class="comment"> */</span>
<a name="l01188"></a>01188 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01189"></a>01189 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01190"></a>01190 <a class="code" href="group__svn__fs__directories.html#ga41ca833e67c5cbabfc0fa9ad9a69c60c" title="Same as svn_fs_paths_changed2(), only with svn_fs_path_change_t * values in the hash (and thus no kin...">svn_fs_paths_changed</a>(apr_hash_t **changed_paths_p,
<a name="l01191"></a>01191                      <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01192"></a>01192                      apr_pool_t *pool);
<a name="l01193"></a>01193 <span class="comment"></span>
<a name="l01194"></a>01194 <span class="comment">/** @} */</span>
<a name="l01195"></a>01195 
<a name="l01196"></a>01196 
<a name="l01197"></a>01197 <span class="comment">/* Operations appropriate to all kinds of nodes.  */</span>
<a name="l01198"></a>01198 <span class="comment"></span>
<a name="l01199"></a>01199 <span class="comment">/** Set @a *kind_p to the type of node present at @a path under @a</span>
<a name="l01200"></a>01200 <span class="comment"> * root.  If @a path does not exist under @a root, set @a *kind_p to</span>
<a name="l01201"></a>01201 <span class="comment"> * #svn_node_none.  Use @a pool for temporary allocation.</span>
<a name="l01202"></a>01202 <span class="comment"> */</span>
<a name="l01203"></a>01203 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01204"></a>01204 <a class="code" href="group__fs__handling.html#ga8795c6c2a696353b550c2f733787a015" title="Set *kind_p to the type of node present at path under root.">svn_fs_check_path</a>(<a class="code" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a" title="The various types of nodes in the Subversion filesystem.">svn_node_kind_t</a> *kind_p,
<a name="l01205"></a>01205                   <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01206"></a>01206                   <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01207"></a>01207                   apr_pool_t *pool);
<a name="l01208"></a>01208 
<a name="l01209"></a>01209 <span class="comment"></span>
<a name="l01210"></a>01210 <span class="comment">/** An opaque node history object. */</span>
<a name="l01211"></a><a class="code" href="group__fs__handling.html#gaa31b679ed9ca7b53241ebda04c035140">01211</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="group__fs__handling.html#gaa31b679ed9ca7b53241ebda04c035140" title="An opaque node history object.">svn_fs_history_t</a> <a class="code" href="group__fs__handling.html#gaa31b679ed9ca7b53241ebda04c035140" title="An opaque node history object.">svn_fs_history_t</a>;
<a name="l01212"></a>01212 
<a name="l01213"></a>01213 <span class="comment"></span>
<a name="l01214"></a>01214 <span class="comment">/** Set @a *history_p to an opaque node history object which</span>
<a name="l01215"></a>01215 <span class="comment"> * represents @a path under @a root.  @a root must be a revision root.</span>
<a name="l01216"></a>01216 <span class="comment"> * Use @a pool for all allocations.</span>
<a name="l01217"></a>01217 <span class="comment"> */</span>
<a name="l01218"></a>01218 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01219"></a>01219 <a class="code" href="group__fs__handling.html#ga2412ddc868b0ef6cdbbe3b682827885e" title="Set *history_p to an opaque node history object which represents path under root.">svn_fs_node_history</a>(<a class="code" href="group__fs__handling.html#gaa31b679ed9ca7b53241ebda04c035140" title="An opaque node history object.">svn_fs_history_t</a> **history_p,
<a name="l01220"></a>01220                     <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01221"></a>01221                     <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01222"></a>01222                     apr_pool_t *pool);
<a name="l01223"></a>01223 
<a name="l01224"></a>01224 <span class="comment"></span>
<a name="l01225"></a>01225 <span class="comment">/** Set @a *prev_history_p to an opaque node history object which</span>
<a name="l01226"></a>01226 <span class="comment"> * represents the previous (or &quot;next oldest&quot;) interesting history</span>
<a name="l01227"></a>01227 <span class="comment"> * location for the filesystem node represented by @a history, or @c</span>
<a name="l01228"></a>01228 <span class="comment"> * NULL if no such previous history exists.  If @a cross_copies is @c</span>
<a name="l01229"></a>01229 <span class="comment"> * FALSE, also return @c NULL if stepping backwards in history to @a</span>
<a name="l01230"></a>01230 <span class="comment"> * *prev_history_p would cross a filesystem copy operation.</span>
<a name="l01231"></a>01231 <span class="comment"> *</span>
<a name="l01232"></a>01232 <span class="comment"> * @note If this is the first call to svn_fs_history_prev() for the @a</span>
<a name="l01233"></a>01233 <span class="comment"> * history object, it could return a history object whose location is</span>
<a name="l01234"></a>01234 <span class="comment"> * the same as the original.  This will happen if the original</span>
<a name="l01235"></a>01235 <span class="comment"> * location was an interesting one (where the node was modified, or</span>
<a name="l01236"></a>01236 <span class="comment"> * took place in a copy event).  This behavior allows looping callers</span>
<a name="l01237"></a>01237 <span class="comment"> * to avoid the calling svn_fs_history_location() on the object</span>
<a name="l01238"></a>01238 <span class="comment"> * returned by svn_fs_node_history(), and instead go ahead and begin</span>
<a name="l01239"></a>01239 <span class="comment"> * calling svn_fs_history_prev().</span>
<a name="l01240"></a>01240 <span class="comment"> *</span>
<a name="l01241"></a>01241 <span class="comment"> * @note This function uses node-id ancestry alone to determine</span>
<a name="l01242"></a>01242 <span class="comment"> * modifiedness, and therefore does NOT claim that in any of the</span>
<a name="l01243"></a>01243 <span class="comment"> * returned revisions file contents changed, properties changed,</span>
<a name="l01244"></a>01244 <span class="comment"> * directory entries lists changed, etc.</span>
<a name="l01245"></a>01245 <span class="comment"> *</span>
<a name="l01246"></a>01246 <span class="comment"> * @note The revisions returned for @a path will be older than or</span>
<a name="l01247"></a>01247 <span class="comment"> * the same age as the revision of that path in @a root.  That is, if</span>
<a name="l01248"></a>01248 <span class="comment"> * @a root is a revision root based on revision X, and @a path was</span>
<a name="l01249"></a>01249 <span class="comment"> * modified in some revision(s) younger than X, those revisions</span>
<a name="l01250"></a>01250 <span class="comment"> * younger than X will not be included for @a path.  */</span>
<a name="l01251"></a>01251 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01252"></a>01252 <a class="code" href="group__fs__handling.html#ga58dd5d7dc74bef946a4dc1129c342038" title="Set *prev_history_p to an opaque node history object which represents the previous (or &quot;next oldest&quot;)...">svn_fs_history_prev</a>(<a class="code" href="group__fs__handling.html#gaa31b679ed9ca7b53241ebda04c035140" title="An opaque node history object.">svn_fs_history_t</a> **prev_history_p,
<a name="l01253"></a>01253                     <a class="code" href="group__fs__handling.html#gaa31b679ed9ca7b53241ebda04c035140" title="An opaque node history object.">svn_fs_history_t</a> *history,
<a name="l01254"></a>01254                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> cross_copies,
<a name="l01255"></a>01255                     apr_pool_t *pool);
<a name="l01256"></a>01256 
<a name="l01257"></a>01257 <span class="comment"></span>
<a name="l01258"></a>01258 <span class="comment">/** Set @a *path and @a *revision to the path and revision,</span>
<a name="l01259"></a>01259 <span class="comment"> * respectively, of the @a history object.  Use @a pool for all</span>
<a name="l01260"></a>01260 <span class="comment"> * allocations.</span>
<a name="l01261"></a>01261 <span class="comment"> */</span>
<a name="l01262"></a>01262 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01263"></a>01263 <a class="code" href="group__fs__handling.html#ga266d0597466eb198dc4b593fcd44490e" title="Set *path and *revision to the path and revision, respectively, of the history object.">svn_fs_history_location</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> **path,
<a name="l01264"></a>01264                         <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> *revision,
<a name="l01265"></a>01265                         <a class="code" href="group__fs__handling.html#gaa31b679ed9ca7b53241ebda04c035140" title="An opaque node history object.">svn_fs_history_t</a> *history,
<a name="l01266"></a>01266                         apr_pool_t *pool);
<a name="l01267"></a>01267 
<a name="l01268"></a>01268 <span class="comment"></span>
<a name="l01269"></a>01269 <span class="comment">/** Set @a *is_dir to @c TRUE iff @a path in @a root is a directory.</span>
<a name="l01270"></a>01270 <span class="comment"> * Do any necessary temporary allocation in @a pool.</span>
<a name="l01271"></a>01271 <span class="comment"> */</span>
<a name="l01272"></a>01272 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01273"></a>01273 <a class="code" href="group__fs__handling.html#ga1a5ecfab7f53876e9ad6def4265df7e6" title="Set *is_dir to TRUE iff path in root is a directory.">svn_fs_is_dir</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *is_dir,
<a name="l01274"></a>01274               <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01275"></a>01275               <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01276"></a>01276               apr_pool_t *pool);
<a name="l01277"></a>01277 
<a name="l01278"></a>01278 <span class="comment"></span>
<a name="l01279"></a>01279 <span class="comment">/** Set @a *is_file to @c TRUE iff @a path in @a root is a file.</span>
<a name="l01280"></a>01280 <span class="comment"> * Do any necessary temporary allocation in @a pool.</span>
<a name="l01281"></a>01281 <span class="comment"> */</span>
<a name="l01282"></a>01282 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01283"></a>01283 <a class="code" href="group__fs__handling.html#ga84b9e2f502354e16162edd12e8f5cc5b" title="Set *is_file to TRUE iff path in root is a file.">svn_fs_is_file</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *is_file,
<a name="l01284"></a>01284                <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01285"></a>01285                <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01286"></a>01286                apr_pool_t *pool);
<a name="l01287"></a>01287 
<a name="l01288"></a>01288 <span class="comment"></span>
<a name="l01289"></a>01289 <span class="comment">/** Get the id of a node.</span>
<a name="l01290"></a>01290 <span class="comment"> *</span>
<a name="l01291"></a>01291 <span class="comment"> * Set @a *id_p to the node revision ID of @a path in @a root, allocated in</span>
<a name="l01292"></a>01292 <span class="comment"> * @a pool.</span>
<a name="l01293"></a>01293 <span class="comment"> *</span>
<a name="l01294"></a>01294 <span class="comment"> * If @a root is the root of a transaction, keep in mind that other</span>
<a name="l01295"></a>01295 <span class="comment"> * changes to the transaction can change which node @a path refers to,</span>
<a name="l01296"></a>01296 <span class="comment"> * and even whether the path exists at all.</span>
<a name="l01297"></a>01297 <span class="comment"> */</span>
<a name="l01298"></a>01298 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01299"></a>01299 <a class="code" href="group__fs__handling.html#gaf59a66cf510e6da06dadfe2b3bb372e1" title="Get the id of a node.">svn_fs_node_id</a>(<span class="keyword">const</span> <a class="code" href="group__svn__fs__nodes.html#gaeca8f1c373c50ca7bb08e3417242b106" title="An object representing a node-revision id.">svn_fs_id_t</a> **id_p,
<a name="l01300"></a>01300                <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01301"></a>01301                <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01302"></a>01302                apr_pool_t *pool);
<a name="l01303"></a>01303 <span class="comment"></span>
<a name="l01304"></a>01304 <span class="comment">/** Set @a *revision to the revision in which @a path under @a root was</span>
<a name="l01305"></a>01305 <span class="comment"> * created.  Use @a pool for any temporary allocations.  @a *revision will</span>
<a name="l01306"></a>01306 <span class="comment"> * be set to #SVN_INVALID_REVNUM for uncommitted nodes (i.e. modified nodes</span>
<a name="l01307"></a>01307 <span class="comment"> * under a transaction root).  Note that the root of an unmodified transaction</span>
<a name="l01308"></a>01308 <span class="comment"> * is not itself considered to be modified; in that case, return the revision</span>
<a name="l01309"></a>01309 <span class="comment"> * upon which the transaction was based.</span>
<a name="l01310"></a>01310 <span class="comment"> */</span>
<a name="l01311"></a>01311 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01312"></a>01312 <a class="code" href="group__fs__handling.html#gad3be25cd08e898319e14cce69580992e" title="Set *revision to the revision in which path under root was created.">svn_fs_node_created_rev</a>(<a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> *revision,
<a name="l01313"></a>01313                         <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01314"></a>01314                         <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01315"></a>01315                         apr_pool_t *pool);
<a name="l01316"></a>01316 <span class="comment"></span>
<a name="l01317"></a>01317 <span class="comment">/** Set @a *revision to the revision in which the line of history</span>
<a name="l01318"></a>01318 <span class="comment"> * represented by @a path under @a root originated.  Use @a pool for</span>
<a name="l01319"></a>01319 <span class="comment"> * any temporary allocations.  If @a root is a transaction root, @a</span>
<a name="l01320"></a>01320 <span class="comment"> * *revision will be set to #SVN_INVALID_REVNUM for any nodes newly</span>
<a name="l01321"></a>01321 <span class="comment"> * added in that transaction (brand new files or directories created</span>
<a name="l01322"></a>01322 <span class="comment"> * using #svn_fs_make_dir or #svn_fs_make_file).</span>
<a name="l01323"></a>01323 <span class="comment"> *</span>
<a name="l01324"></a>01324 <span class="comment"> * @since New in 1.5.</span>
<a name="l01325"></a>01325 <span class="comment"> */</span>
<a name="l01326"></a>01326 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01327"></a>01327 <a class="code" href="group__fs__handling.html#gaf26ebca946019f3761f48ad8dadd6eaa" title="Set *revision to the revision in which the line of history represented by path under root originated...">svn_fs_node_origin_rev</a>(<a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> *revision,
<a name="l01328"></a>01328                        <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01329"></a>01329                        <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01330"></a>01330                        apr_pool_t *pool);
<a name="l01331"></a>01331 <span class="comment"></span>
<a name="l01332"></a>01332 <span class="comment">/** Set @a *created_path to the path at which @a path under @a root was</span>
<a name="l01333"></a>01333 <span class="comment"> * created.  Use @a pool for all allocations.  Callers may use this</span>
<a name="l01334"></a>01334 <span class="comment"> * function in conjunction with svn_fs_node_created_rev() to perform a</span>
<a name="l01335"></a>01335 <span class="comment"> * reverse lookup of the mapping of (path, revision) -&gt; node-id that</span>
<a name="l01336"></a>01336 <span class="comment"> * svn_fs_node_id() performs.</span>
<a name="l01337"></a>01337 <span class="comment"> */</span>
<a name="l01338"></a>01338 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01339"></a>01339 <a class="code" href="group__fs__handling.html#gaf25b3de3d8930d857cf6c94777ce9bca" title="Set *created_path to the path at which path under root was created.">svn_fs_node_created_path</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> **created_path,
<a name="l01340"></a>01340                          <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01341"></a>01341                          <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01342"></a>01342                          apr_pool_t *pool);
<a name="l01343"></a>01343 
<a name="l01344"></a>01344 <span class="comment"></span>
<a name="l01345"></a>01345 <span class="comment">/** Set @a *value_p to the value of the property named @a propname of</span>
<a name="l01346"></a>01346 <span class="comment"> * @a path in @a root.  If the node has no property by that name, set</span>
<a name="l01347"></a>01347 <span class="comment"> * @a *value_p to zero.  Allocate the result in @a pool.</span>
<a name="l01348"></a>01348 <span class="comment"> */</span>
<a name="l01349"></a>01349 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01350"></a>01350 <a class="code" href="group__fs__handling.html#ga830b554597da876e1b6256f2836cf349" title="Set *value_p to the value of the property named propname of path in root.">svn_fs_node_prop</a>(<a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> **value_p,
<a name="l01351"></a>01351                  <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01352"></a>01352                  <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01353"></a>01353                  <span class="keyword">const</span> <span class="keywordtype">char</span> *propname,
<a name="l01354"></a>01354                  apr_pool_t *pool);
<a name="l01355"></a>01355 
<a name="l01356"></a>01356 <span class="comment"></span>
<a name="l01357"></a>01357 <span class="comment">/** Set @a *table_p to the entire property list of @a path in @a root,</span>
<a name="l01358"></a>01358 <span class="comment"> * as an APR hash table allocated in @a pool.  The resulting table maps</span>
<a name="l01359"></a>01359 <span class="comment"> * property names to pointers to #svn_string_t objects containing the</span>
<a name="l01360"></a>01360 <span class="comment"> * property value.</span>
<a name="l01361"></a>01361 <span class="comment"> */</span>
<a name="l01362"></a>01362 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01363"></a>01363 <a class="code" href="group__fs__handling.html#ga079534da68d59ac24307ae171189dd61" title="Set *table_p to the entire property list of path in root, as an APR hash table allocated in pool...">svn_fs_node_proplist</a>(apr_hash_t **table_p,
<a name="l01364"></a>01364                      <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01365"></a>01365                      <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01366"></a>01366                      apr_pool_t *pool);
<a name="l01367"></a>01367 
<a name="l01368"></a>01368 <span class="comment"></span>
<a name="l01369"></a>01369 <span class="comment">/** Change a node&#39;s property&#39;s value, or add/delete a property.</span>
<a name="l01370"></a>01370 <span class="comment"> *</span>
<a name="l01371"></a>01371 <span class="comment"> * - @a root and @a path indicate the node whose property should change.</span>
<a name="l01372"></a>01372 <span class="comment"> *   @a root must be the root of a transaction, not the root of a revision.</span>
<a name="l01373"></a>01373 <span class="comment"> * - @a name is the name of the property to change.</span>
<a name="l01374"></a>01374 <span class="comment"> * - @a value is the new value of the property, or zero if the property should</span>
<a name="l01375"></a>01375 <span class="comment"> *   be removed altogether.</span>
<a name="l01376"></a>01376 <span class="comment"> * Do any necessary temporary allocation in @a pool.</span>
<a name="l01377"></a>01377 <span class="comment"> */</span>
<a name="l01378"></a>01378 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01379"></a>01379 <a class="code" href="group__fs__handling.html#ga75ce7073e254911b82f9acc4825d4247" title="Change a node&#39;s property&#39;s value, or add/delete a property.">svn_fs_change_node_prop</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01380"></a>01380                         <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01381"></a>01381                         <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l01382"></a>01382                         <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *value,
<a name="l01383"></a>01383                         apr_pool_t *pool);
<a name="l01384"></a>01384 
<a name="l01385"></a>01385 <span class="comment"></span>
<a name="l01386"></a>01386 <span class="comment">/** Determine if the properties of two path/root combinations are different.</span>
<a name="l01387"></a>01387 <span class="comment"> *</span>
<a name="l01388"></a>01388 <span class="comment"> * Set @a *changed_p to 1 if the properties at @a path1 under @a root1 differ</span>
<a name="l01389"></a>01389 <span class="comment"> * from those at @a path2 under @a root2, or set it to 0 if they are the</span>
<a name="l01390"></a>01390 <span class="comment"> * same.  Both paths must exist under their respective roots, and both</span>
<a name="l01391"></a>01391 <span class="comment"> * roots must be in the same filesystem.</span>
<a name="l01392"></a>01392 <span class="comment"> */</span>
<a name="l01393"></a>01393 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01394"></a>01394 <a class="code" href="group__fs__handling.html#gaac7c1a6f4732d24a8ee387abb33e33dc" title="Determine if the properties of two path/root combinations are different.">svn_fs_props_changed</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *changed_p,
<a name="l01395"></a>01395                      <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root1,
<a name="l01396"></a>01396                      <span class="keyword">const</span> <span class="keywordtype">char</span> *path1,
<a name="l01397"></a>01397                      <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root2,
<a name="l01398"></a>01398                      <span class="keyword">const</span> <span class="keywordtype">char</span> *path2,
<a name="l01399"></a>01399                      apr_pool_t *pool);
<a name="l01400"></a>01400 
<a name="l01401"></a>01401 <span class="comment"></span>
<a name="l01402"></a>01402 <span class="comment">/** Discover a node&#39;s copy ancestry, if any.</span>
<a name="l01403"></a>01403 <span class="comment"> *</span>
<a name="l01404"></a>01404 <span class="comment"> * If the node at @a path in @a root was copied from some other node, set</span>
<a name="l01405"></a>01405 <span class="comment"> * @a *rev_p and @a *path_p to the revision and path (expressed as an</span>
<a name="l01406"></a>01406 <span class="comment"> * absolute filesystem path) of the other node, allocating @a *path_p</span>
<a name="l01407"></a>01407 <span class="comment"> * in @a pool.</span>
<a name="l01408"></a>01408 <span class="comment"> *</span>
<a name="l01409"></a>01409 <span class="comment"> * Else if there is no copy ancestry for the node, set @a *rev_p to</span>
<a name="l01410"></a>01410 <span class="comment"> * #SVN_INVALID_REVNUM and @a *path_p to NULL.</span>
<a name="l01411"></a>01411 <span class="comment"> *</span>
<a name="l01412"></a>01412 <span class="comment"> * If an error is returned, the values of @a *rev_p and @a *path_p are</span>
<a name="l01413"></a>01413 <span class="comment"> * undefined, but otherwise, if one of them is set as described above,</span>
<a name="l01414"></a>01414 <span class="comment"> * you may assume the other is set correspondingly.</span>
<a name="l01415"></a>01415 <span class="comment"> *</span>
<a name="l01416"></a>01416 <span class="comment"> * @a root may be a revision root or a transaction root.</span>
<a name="l01417"></a>01417 <span class="comment"> *</span>
<a name="l01418"></a>01418 <span class="comment"> * Notes:</span>
<a name="l01419"></a>01419 <span class="comment"> *    - Copy ancestry does not descend.  After copying directory D to</span>
<a name="l01420"></a>01420 <span class="comment"> *      E, E will have copy ancestry referring to D, but E&#39;s children</span>
<a name="l01421"></a>01421 <span class="comment"> *      may not.  See also svn_fs_copy().</span>
<a name="l01422"></a>01422 <span class="comment"> *</span>
<a name="l01423"></a>01423 <span class="comment"> *    - Copy ancestry *under* a copy is preserved.  That is, if you</span>
<a name="l01424"></a>01424 <span class="comment"> *      copy /A/D/G/pi to /A/D/G/pi2, and then copy /A/D/G to /G, then</span>
<a name="l01425"></a>01425 <span class="comment"> *      /G/pi2 will still have copy ancestry pointing to /A/D/G/pi.</span>
<a name="l01426"></a>01426 <span class="comment"> *      We don&#39;t know if this is a feature or a bug yet; if it turns</span>
<a name="l01427"></a>01427 <span class="comment"> *      out to be a bug, then the fix is to make svn_fs_copied_from()</span>
<a name="l01428"></a>01428 <span class="comment"> *      observe the following logic, which currently callers may</span>
<a name="l01429"></a>01429 <span class="comment"> *      choose to follow themselves: if node X has copy history, but</span>
<a name="l01430"></a>01430 <span class="comment"> *      its ancestor A also has copy history, then you may ignore X&#39;s</span>
<a name="l01431"></a>01431 <span class="comment"> *      history if X&#39;s revision-of-origin is earlier than A&#39;s --</span>
<a name="l01432"></a>01432 <span class="comment"> *      because that would mean that X&#39;s copy history was preserved in</span>
<a name="l01433"></a>01433 <span class="comment"> *      a copy-under-a-copy scenario.  If X&#39;s revision-of-origin is</span>
<a name="l01434"></a>01434 <span class="comment"> *      the same as A&#39;s, then it was copied under A during the same</span>
<a name="l01435"></a>01435 <span class="comment"> *      transaction that created A.  (X&#39;s revision-of-origin cannot be</span>
<a name="l01436"></a>01436 <span class="comment"> *      greater than A&#39;s, if X has copy history.)  @todo See how</span>
<a name="l01437"></a>01437 <span class="comment"> *      people like this, it can always be hidden behind the curtain</span>
<a name="l01438"></a>01438 <span class="comment"> *      if necessary.</span>
<a name="l01439"></a>01439 <span class="comment"> *</span>
<a name="l01440"></a>01440 <span class="comment"> *    - Copy ancestry is not stored as a regular subversion property</span>
<a name="l01441"></a>01441 <span class="comment"> *      because it is not inherited.  Copying foo to bar results in a</span>
<a name="l01442"></a>01442 <span class="comment"> *      revision of bar with copy ancestry; but committing a text</span>
<a name="l01443"></a>01443 <span class="comment"> *      change to bar right after that results in a new revision of</span>
<a name="l01444"></a>01444 <span class="comment"> *      bar without copy ancestry.</span>
<a name="l01445"></a>01445 <span class="comment"> */</span>
<a name="l01446"></a>01446 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01447"></a>01447 <a class="code" href="group__fs__handling.html#gaed6116279287a80ec4f7de380a732f45" title="Discover a node&#39;s copy ancestry, if any.">svn_fs_copied_from</a>(<a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> *rev_p,
<a name="l01448"></a>01448                    <span class="keyword">const</span> <span class="keywordtype">char</span> **path_p,
<a name="l01449"></a>01449                    <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01450"></a>01450                    <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01451"></a>01451                    apr_pool_t *pool);
<a name="l01452"></a>01452 
<a name="l01453"></a>01453 <span class="comment"></span>
<a name="l01454"></a>01454 <span class="comment">/** Set @a *root_p and @a *path_p to the revision root and path of the</span>
<a name="l01455"></a>01455 <span class="comment"> * destination of the most recent copy event that caused @a path to</span>
<a name="l01456"></a>01456 <span class="comment"> * exist where it does in @a root, or to NULL if no such copy exists.</span>
<a name="l01457"></a>01457 <span class="comment"> * When non-NULL, allocate @a *root_p and @a *path_p in @a pool.</span>
<a name="l01458"></a>01458 <span class="comment"> *</span>
<a name="l01459"></a>01459 <span class="comment"> * @a *path_p might be a parent of @a path, rather than @a path</span>
<a name="l01460"></a>01460 <span class="comment"> * itself.  However, it will always be the deepest relevant path.</span>
<a name="l01461"></a>01461 <span class="comment"> * That is, if a copy occurs underneath another copy in the same txn,</span>
<a name="l01462"></a>01462 <span class="comment"> * this function makes sure to set @a *path_p to the longest copy</span>
<a name="l01463"></a>01463 <span class="comment"> * destination path that is still a parent of or equal to @a path.</span>
<a name="l01464"></a>01464 <span class="comment"> *</span>
<a name="l01465"></a>01465 <span class="comment"> * @since New in 1.3.</span>
<a name="l01466"></a>01466 <span class="comment"> */</span>
<a name="l01467"></a>01467 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01468"></a>01468 <a class="code" href="group__fs__handling.html#ga9d7839028ca775d36c6fdc851973f9ac" title="Set *root_p and *path_p to the revision root and path of the destination of the most recent copy even...">svn_fs_closest_copy</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> **root_p,
<a name="l01469"></a>01469                     <span class="keyword">const</span> <span class="keywordtype">char</span> **path_p,
<a name="l01470"></a>01470                     <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01471"></a>01471                     <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01472"></a>01472                     apr_pool_t *pool);
<a name="l01473"></a>01473 
<a name="l01474"></a>01474 <span class="comment"></span>
<a name="l01475"></a>01475 <span class="comment">/** Retrieve mergeinfo for multiple nodes.</span>
<a name="l01476"></a>01476 <span class="comment"> *</span>
<a name="l01477"></a>01477 <span class="comment"> * @a *catalog is a catalog for @a paths.  It will never be @c NULL,</span>
<a name="l01478"></a>01478 <span class="comment"> * but may be empty.</span>
<a name="l01479"></a>01479 <span class="comment"> *</span>
<a name="l01480"></a>01480 <span class="comment"> * @a root is revision root to use when looking up paths.</span>
<a name="l01481"></a>01481 <span class="comment"> *</span>
<a name="l01482"></a>01482 <span class="comment"> * @a paths are the paths you are requesting information for.</span>
<a name="l01483"></a>01483 <span class="comment"> *</span>
<a name="l01484"></a>01484 <span class="comment"> * @a inherit indicates whether to retrieve explicit,</span>
<a name="l01485"></a>01485 <span class="comment"> * explicit-or-inherited, or only inherited mergeinfo.</span>
<a name="l01486"></a>01486 <span class="comment"> *</span>
<a name="l01487"></a>01487 <span class="comment"> * If @a include_descendants is TRUE, then additionally return the</span>
<a name="l01488"></a>01488 <span class="comment"> * mergeinfo for any descendant of any element of @a paths which has</span>
<a name="l01489"></a>01489 <span class="comment"> * the #SVN_PROP_MERGEINFO property explicitly set on it.  (Note</span>
<a name="l01490"></a>01490 <span class="comment"> * that inheritance is only taken into account for the elements in @a</span>
<a name="l01491"></a>01491 <span class="comment"> * paths; descendants of the elements in @a paths which get their</span>
<a name="l01492"></a>01492 <span class="comment"> * mergeinfo via inheritance are not included in @a *catalog.)</span>
<a name="l01493"></a>01493 <span class="comment"> *</span>
<a name="l01494"></a>01494 <span class="comment"> * Do any necessary temporary allocation in @a pool.</span>
<a name="l01495"></a>01495 <span class="comment"> *</span>
<a name="l01496"></a>01496 <span class="comment"> * @since New in 1.5.</span>
<a name="l01497"></a>01497 <span class="comment"> */</span>
<a name="l01498"></a>01498 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01499"></a>01499 <a class="code" href="group__fs__handling.html#ga2976ec837ee7caa7771e61ed266933b5" title="Retrieve mergeinfo for multiple nodes.">svn_fs_get_mergeinfo</a>(svn_mergeinfo_catalog_t *catalog,
<a name="l01500"></a>01500                      <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01501"></a>01501                      <span class="keyword">const</span> apr_array_header_t *paths,
<a name="l01502"></a>01502                      <a class="code" href="svn__mergeinfo_8h.html#acd81e9d0f5bcc4eec4df7b8a140f435c" title="The three ways to request mergeinfo affecting a given path.">svn_mergeinfo_inheritance_t</a> inherit,
<a name="l01503"></a>01503                      <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> include_descendants,
<a name="l01504"></a>01504                      apr_pool_t *pool);
<a name="l01505"></a>01505 <span class="comment"></span>
<a name="l01506"></a>01506 <span class="comment">/** Merge changes between two nodes into a third node.</span>
<a name="l01507"></a>01507 <span class="comment"> *</span>
<a name="l01508"></a>01508 <span class="comment"> * Given nodes @a source and @a target, and a common ancestor @a ancestor,</span>
<a name="l01509"></a>01509 <span class="comment"> * modify @a target to contain all the changes made between @a ancestor and</span>
<a name="l01510"></a>01510 <span class="comment"> * @a source, as well as the changes made between @a ancestor and @a target.</span>
<a name="l01511"></a>01511 <span class="comment"> * @a target_root must be the root of a transaction, not a revision.</span>
<a name="l01512"></a>01512 <span class="comment"> *</span>
<a name="l01513"></a>01513 <span class="comment"> * @a source, @a target, and @a ancestor are generally directories; this</span>
<a name="l01514"></a>01514 <span class="comment"> * function recursively merges the directories&#39; contents.  If they are</span>
<a name="l01515"></a>01515 <span class="comment"> * files, this function simply returns an error whenever @a source,</span>
<a name="l01516"></a>01516 <span class="comment"> * @a target, and @a ancestor are all distinct node revisions.</span>
<a name="l01517"></a>01517 <span class="comment"> *</span>
<a name="l01518"></a>01518 <span class="comment"> * If there are differences between @a ancestor and @a source that conflict</span>
<a name="l01519"></a>01519 <span class="comment"> * with changes between @a ancestor and @a target, this function returns an</span>
<a name="l01520"></a>01520 <span class="comment"> * #SVN_ERR_FS_CONFLICT error.</span>
<a name="l01521"></a>01521 <span class="comment"> *</span>
<a name="l01522"></a>01522 <span class="comment"> * If the merge is successful, @a target is left in the merged state, and</span>
<a name="l01523"></a>01523 <span class="comment"> * the base root of @a target&#39;s txn is set to the root node of @a source.</span>
<a name="l01524"></a>01524 <span class="comment"> * If an error is returned (whether for conflict or otherwise), @a target</span>
<a name="l01525"></a>01525 <span class="comment"> * is left unaffected.</span>
<a name="l01526"></a>01526 <span class="comment"> *</span>
<a name="l01527"></a>01527 <span class="comment"> * If @a conflict_p is non-NULL, then: a conflict error sets @a *conflict_p</span>
<a name="l01528"></a>01528 <span class="comment"> * to the name of the node in @a target which couldn&#39;t be merged,</span>
<a name="l01529"></a>01529 <span class="comment"> * otherwise, success sets @a *conflict_p to NULL.</span>
<a name="l01530"></a>01530 <span class="comment"> *</span>
<a name="l01531"></a>01531 <span class="comment"> * Do any necessary temporary allocation in @a pool.</span>
<a name="l01532"></a>01532 <span class="comment"> */</span>
<a name="l01533"></a>01533 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01534"></a>01534 <a class="code" href="group__fs__handling.html#gafc5df16564312635dc97077a29e73d8e" title="Merge changes between two nodes into a third node.">svn_fs_merge</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> **conflict_p,
<a name="l01535"></a>01535              <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *source_root,
<a name="l01536"></a>01536              <span class="keyword">const</span> <span class="keywordtype">char</span> *source_path,
<a name="l01537"></a>01537              <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *target_root,
<a name="l01538"></a>01538              <span class="keyword">const</span> <span class="keywordtype">char</span> *target_path,
<a name="l01539"></a>01539              <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *ancestor_root,
<a name="l01540"></a>01540              <span class="keyword">const</span> <span class="keywordtype">char</span> *ancestor_path,
<a name="l01541"></a>01541              apr_pool_t *pool);
<a name="l01542"></a>01542 
<a name="l01543"></a>01543 
<a name="l01544"></a>01544 
<a name="l01545"></a>01545 <span class="comment">/* Directories.  */</span>
<a name="l01546"></a>01546 
<a name="l01547"></a>01547 <span class="comment"></span>
<a name="l01548"></a>01548 <span class="comment">/** The type of a Subversion directory entry.  */</span>
<a name="l01549"></a><a class="code" href="structsvn__fs__dirent__t.html">01549</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__fs__dirent__t.html" title="The type of a Subversion directory entry.">svn_fs_dirent_t</a>
<a name="l01550"></a>01550 {
<a name="l01551"></a>01551 <span class="comment"></span>
<a name="l01552"></a>01552 <span class="comment">  /** The name of this directory entry.  */</span>
<a name="l01553"></a><a class="code" href="structsvn__fs__dirent__t.html#abaf397ed7d567a3dcf223c2c0c4d4540">01553</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structsvn__fs__dirent__t.html#abaf397ed7d567a3dcf223c2c0c4d4540" title="The name of this directory entry.">name</a>;
<a name="l01554"></a>01554 <span class="comment"></span>
<a name="l01555"></a>01555 <span class="comment">  /** The node revision ID it names.  */</span>
<a name="l01556"></a><a class="code" href="structsvn__fs__dirent__t.html#aa851e9f5f2c0b42201932b35446cabf6">01556</a>   <span class="keyword">const</span> <a class="code" href="group__svn__fs__nodes.html#gaeca8f1c373c50ca7bb08e3417242b106" title="An object representing a node-revision id.">svn_fs_id_t</a> *<a class="code" href="structsvn__fs__dirent__t.html#aa851e9f5f2c0b42201932b35446cabf6" title="The node revision ID it names.">id</a>;
<a name="l01557"></a>01557 <span class="comment"></span>
<a name="l01558"></a>01558 <span class="comment">  /** The node kind. */</span>
<a name="l01559"></a><a class="code" href="structsvn__fs__dirent__t.html#a19020fcfef16d2702c8b9ad411581164">01559</a>   <a class="code" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a" title="The various types of nodes in the Subversion filesystem.">svn_node_kind_t</a> <a class="code" href="structsvn__fs__dirent__t.html#a19020fcfef16d2702c8b9ad411581164" title="The node kind.">kind</a>;
<a name="l01560"></a>01560 
<a name="l01561"></a>01561 } <a class="code" href="group__fs__handling.html#ga2697d2b291384d9511aef9857daf8aa1" title="The type of a Subversion directory entry.">svn_fs_dirent_t</a>;
<a name="l01562"></a>01562 
<a name="l01563"></a>01563 <span class="comment"></span>
<a name="l01564"></a>01564 <span class="comment">/** Set @a *entries_p to a newly allocated APR hash table containing the</span>
<a name="l01565"></a>01565 <span class="comment"> * entries of the directory at @a path in @a root.  The keys of the table</span>
<a name="l01566"></a>01566 <span class="comment"> * are entry names, as byte strings, excluding the final NULL</span>
<a name="l01567"></a>01567 <span class="comment"> * character; the table&#39;s values are pointers to #svn_fs_dirent_t</span>
<a name="l01568"></a>01568 <span class="comment"> * structures.  Allocate the table and its contents in @a pool.</span>
<a name="l01569"></a>01569 <span class="comment"> */</span>
<a name="l01570"></a>01570 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01571"></a>01571 <a class="code" href="group__fs__handling.html#gad254aea2a12fbd7c8c62c8aaa3c4624c" title="Set *entries_p to a newly allocated APR hash table containing the entries of the directory at path in...">svn_fs_dir_entries</a>(apr_hash_t **entries_p,
<a name="l01572"></a>01572                    <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01573"></a>01573                    <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01574"></a>01574                    apr_pool_t *pool);
<a name="l01575"></a>01575 
<a name="l01576"></a>01576 <span class="comment"></span>
<a name="l01577"></a>01577 <span class="comment">/** Create a new directory named @a path in @a root.  The new directory has</span>
<a name="l01578"></a>01578 <span class="comment"> * no entries, and no properties.  @a root must be the root of a transaction,</span>
<a name="l01579"></a>01579 <span class="comment"> * not a revision.</span>
<a name="l01580"></a>01580 <span class="comment"> *</span>
<a name="l01581"></a>01581 <span class="comment"> * Do any necessary temporary allocation in @a pool.</span>
<a name="l01582"></a>01582 <span class="comment"> */</span>
<a name="l01583"></a>01583 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01584"></a>01584 <a class="code" href="group__fs__handling.html#ga8484e37e57a52bb38e5067c38bf41e16" title="Create a new directory named path in root.">svn_fs_make_dir</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01585"></a>01585                 <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01586"></a>01586                 apr_pool_t *pool);
<a name="l01587"></a>01587 
<a name="l01588"></a>01588 <span class="comment"></span>
<a name="l01589"></a>01589 <span class="comment">/** Delete the node named @a path in @a root.  If the node being deleted is</span>
<a name="l01590"></a>01590 <span class="comment"> * a directory, its contents will be deleted recursively.  @a root must be</span>
<a name="l01591"></a>01591 <span class="comment"> * the root of a transaction, not of a revision.  Use @a pool for</span>
<a name="l01592"></a>01592 <span class="comment"> * temporary allocation.</span>
<a name="l01593"></a>01593 <span class="comment"> *</span>
<a name="l01594"></a>01594 <span class="comment"> * If return #SVN_ERR_FS_NO_SUCH_ENTRY, then the basename of @a path is</span>
<a name="l01595"></a>01595 <span class="comment"> * missing from its parent, that is, the final target of the deletion</span>
<a name="l01596"></a>01596 <span class="comment"> * is missing.</span>
<a name="l01597"></a>01597 <span class="comment"> *</span>
<a name="l01598"></a>01598 <span class="comment"> * Attempting to remove the root dir also results in an error,</span>
<a name="l01599"></a>01599 <span class="comment"> * #SVN_ERR_FS_ROOT_DIR, even if the dir is empty.</span>
<a name="l01600"></a>01600 <span class="comment"> */</span>
<a name="l01601"></a>01601 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01602"></a>01602 <a class="code" href="group__fs__handling.html#ga528e3cf9010e463b511584f4143b6a72" title="Delete the node named path in root.">svn_fs_delete</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01603"></a>01603               <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01604"></a>01604               apr_pool_t *pool);
<a name="l01605"></a>01605 
<a name="l01606"></a>01606 <span class="comment"></span>
<a name="l01607"></a>01607 <span class="comment">/** Create a copy of @a from_path in @a from_root named @a to_path in</span>
<a name="l01608"></a>01608 <span class="comment"> * @a to_root.  If @a from_path in @a from_root is a directory, copy the</span>
<a name="l01609"></a>01609 <span class="comment"> * tree it refers to recursively.</span>
<a name="l01610"></a>01610 <span class="comment"> *</span>
<a name="l01611"></a>01611 <span class="comment"> * The copy will remember its source; use svn_fs_copied_from() to</span>
<a name="l01612"></a>01612 <span class="comment"> * access this information.</span>
<a name="l01613"></a>01613 <span class="comment"> *</span>
<a name="l01614"></a>01614 <span class="comment"> * @a to_root must be the root of a transaction; @a from_root must be the</span>
<a name="l01615"></a>01615 <span class="comment"> * root of a revision.  (Requiring @a from_root to be the root of a</span>
<a name="l01616"></a>01616 <span class="comment"> * revision makes the implementation trivial: there is no detectable</span>
<a name="l01617"></a>01617 <span class="comment"> * difference (modulo node revision ID&#39;s) between copying @a from and</span>
<a name="l01618"></a>01618 <span class="comment"> * simply adding a reference to it.  So the operation takes place in</span>
<a name="l01619"></a>01619 <span class="comment"> * constant time.  However, there&#39;s no reason not to extend this to</span>
<a name="l01620"></a>01620 <span class="comment"> * mutable nodes --- it&#39;s just more code.)  Further, @a to_root and @a</span>
<a name="l01621"></a>01621 <span class="comment"> * from_root must represent the same filesystem.</span>
<a name="l01622"></a>01622 <span class="comment"> *</span>
<a name="l01623"></a>01623 <span class="comment"> * @note To do a copy without preserving copy history, use</span>
<a name="l01624"></a>01624 <span class="comment"> * svn_fs_revision_link().</span>
<a name="l01625"></a>01625 <span class="comment"> *</span>
<a name="l01626"></a>01626 <span class="comment"> * Do any necessary temporary allocation in @a pool.</span>
<a name="l01627"></a>01627 <span class="comment"> */</span>
<a name="l01628"></a>01628 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01629"></a>01629 <a class="code" href="group__fs__handling.html#ga9da8e22bd1058f877a275099699bb86b" title="Create a copy of from_path in from_root named to_path in to_root.">svn_fs_copy</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *from_root,
<a name="l01630"></a>01630             <span class="keyword">const</span> <span class="keywordtype">char</span> *from_path,
<a name="l01631"></a>01631             <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *to_root,
<a name="l01632"></a>01632             <span class="keyword">const</span> <span class="keywordtype">char</span> *to_path,
<a name="l01633"></a>01633             apr_pool_t *pool);
<a name="l01634"></a>01634 
<a name="l01635"></a>01635 <span class="comment"></span>
<a name="l01636"></a>01636 <span class="comment">/** Like svn_fs_copy(), but doesn&#39;t record copy history, and preserves</span>
<a name="l01637"></a>01637 <span class="comment"> * the PATH.  You cannot use svn_fs_copied_from() later to find out</span>
<a name="l01638"></a>01638 <span class="comment"> * where this copy came from.</span>
<a name="l01639"></a>01639 <span class="comment"> *</span>
<a name="l01640"></a>01640 <span class="comment"> * Use svn_fs_revision_link() in situations where you don&#39;t care</span>
<a name="l01641"></a>01641 <span class="comment"> * about the copy history, and where @a to_path and @a from_path are</span>
<a name="l01642"></a>01642 <span class="comment"> * the same, because it is cheaper than svn_fs_copy().</span>
<a name="l01643"></a>01643 <span class="comment"> */</span>
<a name="l01644"></a>01644 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01645"></a>01645 <a class="code" href="group__fs__handling.html#gaddd7ec5b6e3306c609e46d4f5a2b8a5c" title="Like svn_fs_copy(), but doesn&#39;t record copy history, and preserves the PATH.">svn_fs_revision_link</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *from_root,
<a name="l01646"></a>01646                      <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *to_root,
<a name="l01647"></a>01647                      <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01648"></a>01648                      apr_pool_t *pool);
<a name="l01649"></a>01649 
<a name="l01650"></a>01650 <span class="comment">/* Files.  */</span>
<a name="l01651"></a>01651 <span class="comment"></span>
<a name="l01652"></a>01652 <span class="comment">/** Set @a *length_p to the length of the file @a path in @a root, in bytes.</span>
<a name="l01653"></a>01653 <span class="comment"> * Do any necessary temporary allocation in @a pool.</span>
<a name="l01654"></a>01654 <span class="comment"> */</span>
<a name="l01655"></a>01655 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01656"></a>01656 <a class="code" href="group__fs__handling.html#gabd675ec4bc28c7f4e72a121feeb60059" title="Set *length_p to the length of the file path in root, in bytes.">svn_fs_file_length</a>(<a class="code" href="svn__types_8h.html#a726e581898461c1d3e7dbdb16d99dad0" title="The size of a file in the Subversion FS.">svn_filesize_t</a> *length_p,
<a name="l01657"></a>01657                    <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01658"></a>01658                    <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01659"></a>01659                    apr_pool_t *pool);
<a name="l01660"></a>01660 
<a name="l01661"></a>01661 <span class="comment"></span>
<a name="l01662"></a>01662 <span class="comment">/** Set @a *checksum to the checksum of type @a kind for the file @a path.</span>
<a name="l01663"></a>01663 <span class="comment"> * @a *checksum will be allocated out of @a pool, which will also be used</span>
<a name="l01664"></a>01664 <span class="comment"> * for temporary allocations.</span>
<a name="l01665"></a>01665 <span class="comment"> *</span>
<a name="l01666"></a>01666 <span class="comment"> * If the filesystem does not have a prerecorded checksum of @a kind for</span>
<a name="l01667"></a>01667 <span class="comment"> * @a path, and @a force is not TRUE, do not calculate a checksum</span>
<a name="l01668"></a>01668 <span class="comment"> * dynamically, just put NULL into @a checksum.  (By convention, the NULL</span>
<a name="l01669"></a>01669 <span class="comment"> * checksum is considered to match any checksum.)</span>
<a name="l01670"></a>01670 <span class="comment"> *</span>
<a name="l01671"></a>01671 <span class="comment"> * Notes:</span>
<a name="l01672"></a>01672 <span class="comment"> *</span>
<a name="l01673"></a>01673 <span class="comment"> * You might wonder, why do we only provide this interface for file</span>
<a name="l01674"></a>01674 <span class="comment"> * contents, and not for properties or directories?</span>
<a name="l01675"></a>01675 <span class="comment"> *</span>
<a name="l01676"></a>01676 <span class="comment"> * The answer is that property lists and directory entry lists are</span>
<a name="l01677"></a>01677 <span class="comment"> * essentially data structures, not text.  We serialize them for</span>
<a name="l01678"></a>01678 <span class="comment"> * transmission, but there is no guarantee that the consumer will</span>
<a name="l01679"></a>01679 <span class="comment"> * parse them into the same form, or even the same order, as the</span>
<a name="l01680"></a>01680 <span class="comment"> * producer.  It&#39;s difficult to find a checksumming method that</span>
<a name="l01681"></a>01681 <span class="comment"> * reaches the same result given such variation in input.  (I suppose</span>
<a name="l01682"></a>01682 <span class="comment"> * we could calculate an independent MD5 sum for each propname and</span>
<a name="l01683"></a>01683 <span class="comment"> * value, and XOR them together; same with directory entry names.</span>
<a name="l01684"></a>01684 <span class="comment"> * Maybe that&#39;s the solution?)  Anyway, for now we punt.  The most</span>
<a name="l01685"></a>01685 <span class="comment"> * important data, and the only data that goes through svndiff</span>
<a name="l01686"></a>01686 <span class="comment"> * processing, is file contents, so that&#39;s what we provide</span>
<a name="l01687"></a>01687 <span class="comment"> * checksumming for.</span>
<a name="l01688"></a>01688 <span class="comment"> *</span>
<a name="l01689"></a>01689 <span class="comment"> * Internally, of course, the filesystem checksums everything, because</span>
<a name="l01690"></a>01690 <span class="comment"> * it has access to the lowest level storage forms: strings behind</span>
<a name="l01691"></a>01691 <span class="comment"> * representations.</span>
<a name="l01692"></a>01692 <span class="comment"> *</span>
<a name="l01693"></a>01693 <span class="comment"> * @since New in 1.6.</span>
<a name="l01694"></a>01694 <span class="comment"> */</span>
<a name="l01695"></a>01695 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01696"></a>01696 <a class="code" href="group__fs__handling.html#ga3a35bf47dcd1d43fdf7572166eb0eeb4" title="Set *checksum to the checksum of type kind for the file path.">svn_fs_file_checksum</a>(<a class="code" href="structsvn__checksum__t.html" title="A generic checksum representation.">svn_checksum_t</a> **checksum,
<a name="l01697"></a>01697                      <a class="code" href="svn__checksum_8h.html#a7a6c373d03d7e6ec6b832a039f5e0aa1" title="Various types of checksums.">svn_checksum_kind_t</a> kind,
<a name="l01698"></a>01698                      <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01699"></a>01699                      <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01700"></a>01700                      <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> force,
<a name="l01701"></a>01701                      apr_pool_t *pool);
<a name="l01702"></a>01702 <span class="comment"></span>
<a name="l01703"></a>01703 <span class="comment">/**</span>
<a name="l01704"></a>01704 <span class="comment"> * Same as svn_fs_file_checksum(), only always put the MD5 checksum of file</span>
<a name="l01705"></a>01705 <span class="comment"> * @a path into @a digest, which should point to @c APR_MD5_DIGESTSIZE bytes</span>
<a name="l01706"></a>01706 <span class="comment"> * of storage.  If the checksum doesn&#39;t exist, put all 0&#39;s into @a digest.</span>
<a name="l01707"></a>01707 <span class="comment"> *</span>
<a name="l01708"></a>01708 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.5 API.</span>
<a name="l01709"></a>01709 <span class="comment"> */</span>
<a name="l01710"></a>01710 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01711"></a>01711 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01712"></a>01712 <a class="code" href="group__fs__handling.html#ga9dfe5ed9f63bb8b222d2adb2b96f0220" title="Same as svn_fs_file_checksum(), only always put the MD5 checksum of file path into digest...">svn_fs_file_md5_checksum</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> digest[],
<a name="l01713"></a>01713                          <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01714"></a>01714                          <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01715"></a>01715                          apr_pool_t *pool);
<a name="l01716"></a>01716 
<a name="l01717"></a>01717 <span class="comment"></span>
<a name="l01718"></a>01718 <span class="comment">/** Set @a *contents to a readable generic stream that will yield the</span>
<a name="l01719"></a>01719 <span class="comment"> * contents of the file @a path in @a root.  Allocate the stream in</span>
<a name="l01720"></a>01720 <span class="comment"> * @a pool.  You can only use @a *contents for as long as the underlying</span>
<a name="l01721"></a>01721 <span class="comment"> * filesystem is open.  If @a path is not a file, return</span>
<a name="l01722"></a>01722 <span class="comment"> * #SVN_ERR_FS_NOT_FILE.</span>
<a name="l01723"></a>01723 <span class="comment"> *</span>
<a name="l01724"></a>01724 <span class="comment"> * If @a root is the root of a transaction, it is possible that the</span>
<a name="l01725"></a>01725 <span class="comment"> * contents of the file @a path will change between calls to</span>
<a name="l01726"></a>01726 <span class="comment"> * svn_fs_file_contents().  In that case, the result of reading from</span>
<a name="l01727"></a>01727 <span class="comment"> * @a *contents is undefined.</span>
<a name="l01728"></a>01728 <span class="comment"> *</span>
<a name="l01729"></a>01729 <span class="comment"> * ### @todo kff: I am worried about lifetime issues with this pool vs</span>
<a name="l01730"></a>01730 <span class="comment"> * the trail created farther down the call stack.  Trace this function</span>
<a name="l01731"></a>01731 <span class="comment"> * to investigate...</span>
<a name="l01732"></a>01732 <span class="comment"> */</span>
<a name="l01733"></a>01733 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01734"></a>01734 <a class="code" href="group__fs__handling.html#gafe8eadb1c6950e3bfdca49bbb497d6fb" title="Set *contents to a readable generic stream that will yield the contents of the file path in root...">svn_fs_file_contents</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> **contents,
<a name="l01735"></a>01735                      <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01736"></a>01736                      <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01737"></a>01737                      apr_pool_t *pool);
<a name="l01738"></a>01738 
<a name="l01739"></a>01739 <span class="comment"></span>
<a name="l01740"></a>01740 <span class="comment">/** Create a new file named @a path in @a root.  The file&#39;s initial contents</span>
<a name="l01741"></a>01741 <span class="comment"> * are the empty string, and it has no properties.  @a root must be the</span>
<a name="l01742"></a>01742 <span class="comment"> * root of a transaction, not a revision.</span>
<a name="l01743"></a>01743 <span class="comment"> *</span>
<a name="l01744"></a>01744 <span class="comment"> * Do any necessary temporary allocation in @a pool.</span>
<a name="l01745"></a>01745 <span class="comment"> */</span>
<a name="l01746"></a>01746 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01747"></a>01747 <a class="code" href="group__fs__handling.html#gac760753f1ae74fc19991d5dab7cb643c" title="Create a new file named path in root.">svn_fs_make_file</a>(<a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01748"></a>01748                  <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01749"></a>01749                  apr_pool_t *pool);
<a name="l01750"></a>01750 
<a name="l01751"></a>01751 <span class="comment"></span>
<a name="l01752"></a>01752 <span class="comment">/** Apply a text delta to the file @a path in @a root.  @a root must be the</span>
<a name="l01753"></a>01753 <span class="comment"> * root of a transaction, not a revision.</span>
<a name="l01754"></a>01754 <span class="comment"> *</span>
<a name="l01755"></a>01755 <span class="comment"> * Set @a *contents_p to a function ready to receive text delta windows</span>
<a name="l01756"></a>01756 <span class="comment"> * describing how to change the file&#39;s contents, relative to its</span>
<a name="l01757"></a>01757 <span class="comment"> * current contents.  Set @a *contents_baton_p to a baton to pass to</span>
<a name="l01758"></a>01758 <span class="comment"> * @a *contents_p.</span>
<a name="l01759"></a>01759 <span class="comment"> *</span>
<a name="l01760"></a>01760 <span class="comment"> * If @a path does not exist in @a root, return an error.  (You cannot use</span>
<a name="l01761"></a>01761 <span class="comment"> * this routine to create new files;  use svn_fs_make_file() to create</span>
<a name="l01762"></a>01762 <span class="comment"> * an empty file first.)</span>
<a name="l01763"></a>01763 <span class="comment"> *</span>
<a name="l01764"></a>01764 <span class="comment"> * @a base_checksum is the hex MD5 digest for the base text against</span>
<a name="l01765"></a>01765 <span class="comment"> * which the delta is to be applied; it is ignored if NULL, and may be</span>
<a name="l01766"></a>01766 <span class="comment"> * ignored even if not NULL.  If it is not ignored, it must match the</span>
<a name="l01767"></a>01767 <span class="comment"> * checksum of the base text against which svndiff data is being</span>
<a name="l01768"></a>01768 <span class="comment"> * applied; if not, svn_fs_apply_textdelta() or the @a *contents_p call</span>
<a name="l01769"></a>01769 <span class="comment"> * which detects the mismatch will return the error</span>
<a name="l01770"></a>01770 <span class="comment"> * #SVN_ERR_CHECKSUM_MISMATCH (if there is no base text, there may</span>
<a name="l01771"></a>01771 <span class="comment"> * still be an error if @a base_checksum is neither NULL nor the</span>
<a name="l01772"></a>01772 <span class="comment"> * checksum of the empty string).</span>
<a name="l01773"></a>01773 <span class="comment"> *</span>
<a name="l01774"></a>01774 <span class="comment"> * @a result_checksum is the hex MD5 digest for the fulltext that</span>
<a name="l01775"></a>01775 <span class="comment"> * results from this delta application.  It is ignored if NULL, but if</span>
<a name="l01776"></a>01776 <span class="comment"> * not NULL, it must match the checksum of the result; if it does not,</span>
<a name="l01777"></a>01777 <span class="comment"> * then the @a *contents_p call which detects the mismatch will return</span>
<a name="l01778"></a>01778 <span class="comment"> * the error #SVN_ERR_CHECKSUM_MISMATCH.</span>
<a name="l01779"></a>01779 <span class="comment"> *</span>
<a name="l01780"></a>01780 <span class="comment"> * The caller must send all delta windows including the terminating</span>
<a name="l01781"></a>01781 <span class="comment"> * NULL window to @a *contents_p before making further changes to the</span>
<a name="l01782"></a>01782 <span class="comment"> * transaction.</span>
<a name="l01783"></a>01783 <span class="comment"> *</span>
<a name="l01784"></a>01784 <span class="comment"> * Do temporary allocation in @a pool.</span>
<a name="l01785"></a>01785 <span class="comment"> */</span>
<a name="l01786"></a>01786 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01787"></a>01787 <a class="code" href="group__fs__handling.html#ga8ae7391b579009b76e238fe9ef5b8053" title="Apply a text delta to the file path in root.">svn_fs_apply_textdelta</a>(<a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> *contents_p,
<a name="l01788"></a>01788                        <span class="keywordtype">void</span> **contents_baton_p,
<a name="l01789"></a>01789                        <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01790"></a>01790                        <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01791"></a>01791                        <span class="keyword">const</span> <span class="keywordtype">char</span> *base_checksum,
<a name="l01792"></a>01792                        <span class="keyword">const</span> <span class="keywordtype">char</span> *result_checksum,
<a name="l01793"></a>01793                        apr_pool_t *pool);
<a name="l01794"></a>01794 
<a name="l01795"></a>01795 <span class="comment"></span>
<a name="l01796"></a>01796 <span class="comment">/** Write data directly to the file @a path in @a root.  @a root must be the</span>
<a name="l01797"></a>01797 <span class="comment"> * root of a transaction, not a revision.</span>
<a name="l01798"></a>01798 <span class="comment"> *</span>
<a name="l01799"></a>01799 <span class="comment"> * Set @a *contents_p to a stream ready to receive full textual data.</span>
<a name="l01800"></a>01800 <span class="comment"> * When the caller closes this stream, the data replaces the previous</span>
<a name="l01801"></a>01801 <span class="comment"> * contents of the file.  The caller must write all file data and close</span>
<a name="l01802"></a>01802 <span class="comment"> * the stream before making further changes to the transaction.</span>
<a name="l01803"></a>01803 <span class="comment"> *</span>
<a name="l01804"></a>01804 <span class="comment"> * If @a path does not exist in @a root, return an error.  (You cannot use</span>
<a name="l01805"></a>01805 <span class="comment"> * this routine to create new files;  use svn_fs_make_file() to create</span>
<a name="l01806"></a>01806 <span class="comment"> * an empty file first.)</span>
<a name="l01807"></a>01807 <span class="comment"> *</span>
<a name="l01808"></a>01808 <span class="comment"> * @a result_checksum is the hex MD5 digest for the final fulltext</span>
<a name="l01809"></a>01809 <span class="comment"> * written to the stream.  It is ignored if NULL, but if not null, it</span>
<a name="l01810"></a>01810 <span class="comment"> * must match the checksum of the result; if it does not, then the @a</span>
<a name="l01811"></a>01811 <span class="comment"> * *contents_p call which detects the mismatch will return the error</span>
<a name="l01812"></a>01812 <span class="comment"> * #SVN_ERR_CHECKSUM_MISMATCH.</span>
<a name="l01813"></a>01813 <span class="comment"> *</span>
<a name="l01814"></a>01814 <span class="comment"> * Do any necessary temporary allocation in @a pool.</span>
<a name="l01815"></a>01815 <span class="comment"> *</span>
<a name="l01816"></a>01816 <span class="comment"> * ### This is like svn_fs_apply_textdelta(), but takes the text</span>
<a name="l01817"></a>01817 <span class="comment"> * straight.  It is currently used only by the loader, see</span>
<a name="l01818"></a>01818 <span class="comment"> * libsvn_repos/load.c.  It should accept a checksum, of course, which</span>
<a name="l01819"></a>01819 <span class="comment"> * would come from an (optional) header in the dump file.  See</span>
<a name="l01820"></a>01820 <span class="comment"> * http://subversion.tigris.org/issues/show_bug.cgi?id=1102 for more.</span>
<a name="l01821"></a>01821 <span class="comment"> */</span>
<a name="l01822"></a>01822 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01823"></a>01823 <a class="code" href="group__fs__handling.html#ga61f5a039a4ad8818de163578b9c054f7" title="Write data directly to the file path in root.">svn_fs_apply_text</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> **contents_p,
<a name="l01824"></a>01824                   <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root,
<a name="l01825"></a>01825                   <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01826"></a>01826                   <span class="keyword">const</span> <span class="keywordtype">char</span> *result_checksum,
<a name="l01827"></a>01827                   apr_pool_t *pool);
<a name="l01828"></a>01828 
<a name="l01829"></a>01829 <span class="comment"></span>
<a name="l01830"></a>01830 <span class="comment">/** Check if the contents of two root/path combos have changed.</span>
<a name="l01831"></a>01831 <span class="comment"> *</span>
<a name="l01832"></a>01832 <span class="comment"> * Set @a *changed_p to 1 if the contents at @a path1 under @a root1 differ</span>
<a name="l01833"></a>01833 <span class="comment"> * from those at @a path2 under @a root2, or set it to 0 if they are the</span>
<a name="l01834"></a>01834 <span class="comment"> * same.  Both paths must exist under their respective roots, and both</span>
<a name="l01835"></a>01835 <span class="comment"> * roots must be in the same filesystem.</span>
<a name="l01836"></a>01836 <span class="comment"> */</span>
<a name="l01837"></a>01837 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01838"></a>01838 <a class="code" href="group__fs__handling.html#gaede66ee7850d389bcdeb5ddef1540fdc" title="Check if the contents of two root/path combos have changed.">svn_fs_contents_changed</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *changed_p,
<a name="l01839"></a>01839                         <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root1,
<a name="l01840"></a>01840                         <span class="keyword">const</span> <span class="keywordtype">char</span> *path1,
<a name="l01841"></a>01841                         <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *root2,
<a name="l01842"></a>01842                         <span class="keyword">const</span> <span class="keywordtype">char</span> *path2,
<a name="l01843"></a>01843                         apr_pool_t *pool);
<a name="l01844"></a>01844 
<a name="l01845"></a>01845 
<a name="l01846"></a>01846 
<a name="l01847"></a>01847 <span class="comment">/* Filesystem revisions.  */</span>
<a name="l01848"></a>01848 
<a name="l01849"></a>01849 <span class="comment"></span>
<a name="l01850"></a>01850 <span class="comment">/** Set @a *youngest_p to the number of the youngest revision in filesystem</span>
<a name="l01851"></a>01851 <span class="comment"> * @a fs.  Use @a pool for all temporary allocation.</span>
<a name="l01852"></a>01852 <span class="comment"> *</span>
<a name="l01853"></a>01853 <span class="comment"> * The oldest revision in any filesystem is numbered zero.</span>
<a name="l01854"></a>01854 <span class="comment"> */</span>
<a name="l01855"></a>01855 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01856"></a>01856 <a class="code" href="group__fs__handling.html#ga4af11f84095941c21fad6e22f62dd31d" title="Set *youngest_p to the number of the youngest revision in filesystem fs.">svn_fs_youngest_rev</a>(<a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> *youngest_p,
<a name="l01857"></a>01857                     <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l01858"></a>01858                     apr_pool_t *pool);
<a name="l01859"></a>01859 
<a name="l01860"></a>01860 <span class="comment"></span>
<a name="l01861"></a>01861 <span class="comment">/** Provide filesystem @a fs the opportunity to compress storage relating to</span>
<a name="l01862"></a>01862 <span class="comment"> * associated with  @a revision in filesystem @a fs.  Use @a pool for all</span>
<a name="l01863"></a>01863 <span class="comment"> * allocations.</span>
<a name="l01864"></a>01864 <span class="comment"> *</span>
<a name="l01865"></a>01865 <span class="comment"> * @note This can be a time-consuming process, depending the breadth</span>
<a name="l01866"></a>01866 <span class="comment"> * of the changes made in @a revision, and the depth of the history of</span>
<a name="l01867"></a>01867 <span class="comment"> * those changed paths.  This may also be a no op.</span>
<a name="l01868"></a>01868 <span class="comment"> */</span>
<a name="l01869"></a>01869 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01870"></a>01870 <a class="code" href="group__fs__handling.html#ga3f29dd4915629fc66ea1af713b659ce5" title="Provide filesystem fs the opportunity to compress storage relating to associated with revision in fil...">svn_fs_deltify_revision</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l01871"></a>01871                         <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> revision,
<a name="l01872"></a>01872                         apr_pool_t *pool);
<a name="l01873"></a>01873 
<a name="l01874"></a>01874 <span class="comment"></span>
<a name="l01875"></a>01875 <span class="comment">/** Set @a *value_p to the value of the property named @a propname on</span>
<a name="l01876"></a>01876 <span class="comment"> * revision @a rev in the filesystem @a fs.  If @a rev has no property by</span>
<a name="l01877"></a>01877 <span class="comment"> * that name, set @a *value_p to zero.  Allocate the result in @a pool.</span>
<a name="l01878"></a>01878 <span class="comment"> */</span>
<a name="l01879"></a>01879 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01880"></a>01880 <a class="code" href="group__fs__handling.html#ga0cd6959ee54cd16768477d608fd33c34" title="Set *value_p to the value of the property named propname on revision rev in the filesystem fs...">svn_fs_revision_prop</a>(<a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> **value_p,
<a name="l01881"></a>01881                      <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l01882"></a>01882                      <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l01883"></a>01883                      <span class="keyword">const</span> <span class="keywordtype">char</span> *propname,
<a name="l01884"></a>01884                      apr_pool_t *pool);
<a name="l01885"></a>01885 
<a name="l01886"></a>01886 <span class="comment"></span>
<a name="l01887"></a>01887 <span class="comment">/** Set @a *table_p to the entire property list of revision @a rev in</span>
<a name="l01888"></a>01888 <span class="comment"> * filesystem @a fs, as an APR hash table allocated in @a pool.  The table</span>
<a name="l01889"></a>01889 <span class="comment"> * maps &lt;tt&gt;char *&lt;/tt&gt; property names to #svn_string_t * values; the names</span>
<a name="l01890"></a>01890 <span class="comment"> * and values are allocated in @a pool.</span>
<a name="l01891"></a>01891 <span class="comment"> */</span>
<a name="l01892"></a>01892 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01893"></a>01893 <a class="code" href="group__fs__handling.html#ga423da8c30eacc9787ec7bc3dd1b9e351" title="Set *table_p to the entire property list of revision rev in filesystem fs, as an APR hash table alloc...">svn_fs_revision_proplist</a>(apr_hash_t **table_p,
<a name="l01894"></a>01894                          <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l01895"></a>01895                          <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l01896"></a>01896                          apr_pool_t *pool);
<a name="l01897"></a>01897 
<a name="l01898"></a>01898 <span class="comment"></span>
<a name="l01899"></a>01899 <span class="comment">/** Change a revision&#39;s property&#39;s value, or add/delete a property.</span>
<a name="l01900"></a>01900 <span class="comment"> *</span>
<a name="l01901"></a>01901 <span class="comment"> * - @a fs is a filesystem, and @a rev is the revision in that filesystem</span>
<a name="l01902"></a>01902 <span class="comment"> *   whose property should change.</span>
<a name="l01903"></a>01903 <span class="comment"> * - @a name is the name of the property to change.</span>
<a name="l01904"></a>01904 <span class="comment"> * - if @a old_value_p is not @c NULL, then changing the property will fail with</span>
<a name="l01905"></a>01905 <span class="comment"> *   error #SVN_ERR_FS_PROP_BASEVALUE_MISMATCH if the present value of the</span>
<a name="l01906"></a>01906 <span class="comment"> *   property is not @a *old_value_p.  (This is an atomic test-and-set).</span>
<a name="l01907"></a>01907 <span class="comment"> *   @a *old_value_p may be @c NULL, representing that the property must be not</span>
<a name="l01908"></a>01908 <span class="comment"> *   already set.</span>
<a name="l01909"></a>01909 <span class="comment"> * - @a value is the new value of the property, or zero if the property should</span>
<a name="l01910"></a>01910 <span class="comment"> *   be removed altogether.</span>
<a name="l01911"></a>01911 <span class="comment"> *</span>
<a name="l01912"></a>01912 <span class="comment"> * Note that revision properties are non-historied --- you can change</span>
<a name="l01913"></a>01913 <span class="comment"> * them after the revision has been committed.  They are not protected</span>
<a name="l01914"></a>01914 <span class="comment"> * via transactions.</span>
<a name="l01915"></a>01915 <span class="comment"> *</span>
<a name="l01916"></a>01916 <span class="comment"> * Do any necessary temporary allocation in @a pool.</span>
<a name="l01917"></a>01917 <span class="comment"> *</span>
<a name="l01918"></a>01918 <span class="comment"> * @since New in 1.7.</span>
<a name="l01919"></a>01919 <span class="comment"> */</span>
<a name="l01920"></a>01920 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01921"></a>01921 <a class="code" href="group__fs__handling.html#ga42e1c39fc4980da8c2f2f575fa7515ac" title="Change a revision&#39;s property&#39;s value, or add/delete a property.">svn_fs_change_rev_prop2</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l01922"></a>01922                         <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l01923"></a>01923                         <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l01924"></a>01924                         <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *<span class="keyword">const</span> *old_value_p,
<a name="l01925"></a>01925                         <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *value,
<a name="l01926"></a>01926                         apr_pool_t *pool);
<a name="l01927"></a>01927 
<a name="l01928"></a>01928 <span class="comment"></span>
<a name="l01929"></a>01929 <span class="comment">/**</span>
<a name="l01930"></a>01930 <span class="comment"> * Similar to svn_fs_change_rev_prop2(), but with @a old_value_p passed as</span>
<a name="l01931"></a>01931 <span class="comment"> * @c NULL.</span>
<a name="l01932"></a>01932 <span class="comment"> *</span>
<a name="l01933"></a>01933 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l01934"></a>01934 <span class="comment"> */</span>
<a name="l01935"></a>01935 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01936"></a>01936 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01937"></a>01937 <a class="code" href="group__fs__handling.html#gab368d97a4f5093e8c71f8082f4664937" title="Similar to svn_fs_change_rev_prop2(), but with old_value_p passed as NULL.">svn_fs_change_rev_prop</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l01938"></a>01938                        <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l01939"></a>01939                        <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l01940"></a>01940                        <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *value,
<a name="l01941"></a>01941                        apr_pool_t *pool);
<a name="l01942"></a>01942 
<a name="l01943"></a>01943 
<a name="l01944"></a>01944 
<a name="l01945"></a>01945 <span class="comment">/* Computing deltas.  */</span>
<a name="l01946"></a>01946 
<a name="l01947"></a>01947 <span class="comment"></span>
<a name="l01948"></a>01948 <span class="comment">/** Set @a *stream_p to a pointer to a delta stream that will turn the</span>
<a name="l01949"></a>01949 <span class="comment"> * contents of the file @a source into the contents of the file @a target.</span>
<a name="l01950"></a>01950 <span class="comment"> * If @a source_root is zero, use a file with zero length as the source.</span>
<a name="l01951"></a>01951 <span class="comment"> *</span>
<a name="l01952"></a>01952 <span class="comment"> * This function does not compare the two files&#39; properties.</span>
<a name="l01953"></a>01953 <span class="comment"> *</span>
<a name="l01954"></a>01954 <span class="comment"> * Allocate @a *stream_p, and do any necessary temporary allocation, in</span>
<a name="l01955"></a>01955 <span class="comment"> * @a pool.</span>
<a name="l01956"></a>01956 <span class="comment"> */</span>
<a name="l01957"></a>01957 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01958"></a>01958 <a class="code" href="group__fs__handling.html#gad2d4b1fa18c0bbda6719d4414b52f4c2" title="Set *stream_p to a pointer to a delta stream that will turn the contents of the file source into the ...">svn_fs_get_file_delta_stream</a>(<a class="code" href="group__svn__delta__txt__delta.html#gaf599af000e3c3b976c17fd4e101ff7cf" title="A delta stream --- this is the hat from which we pull a series of svn_txdelta_window_t objects...">svn_txdelta_stream_t</a> **stream_p,
<a name="l01959"></a>01959                              <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *source_root,
<a name="l01960"></a>01960                              <span class="keyword">const</span> <span class="keywordtype">char</span> *source_path,
<a name="l01961"></a>01961                              <a class="code" href="group__svn__fs__roots.html#gaa0616aebbe57398ec86bcb8a432248cd" title="The Filesystem Root object.">svn_fs_root_t</a> *target_root,
<a name="l01962"></a>01962                              <span class="keyword">const</span> <span class="keywordtype">char</span> *target_path,
<a name="l01963"></a>01963                              apr_pool_t *pool);
<a name="l01964"></a>01964 
<a name="l01965"></a>01965 
<a name="l01966"></a>01966 
<a name="l01967"></a>01967 <span class="comment">/* UUID manipulation. */</span>
<a name="l01968"></a>01968 <span class="comment"></span>
<a name="l01969"></a>01969 <span class="comment">/** Populate @a *uuid with the UUID associated with @a fs.  Allocate</span>
<a name="l01970"></a>01970 <span class="comment">    @a *uuid in @a pool.  */</span>
<a name="l01971"></a>01971 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01972"></a>01972 <a class="code" href="group__fs__handling.html#ga2ce6bd7610fc7201f4ea6b4e20e49e67" title="Populate *uuid with the UUID associated with fs.">svn_fs_get_uuid</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l01973"></a>01973                 <span class="keyword">const</span> <span class="keywordtype">char</span> **uuid,
<a name="l01974"></a>01974                 apr_pool_t *pool);
<a name="l01975"></a>01975 
<a name="l01976"></a>01976 <span class="comment"></span>
<a name="l01977"></a>01977 <span class="comment">/** If not @c NULL, associate @a *uuid with @a fs.  Otherwise (if @a</span>
<a name="l01978"></a>01978 <span class="comment"> * uuid is @c NULL), generate a new UUID for @a fs.  Use @a pool for</span>
<a name="l01979"></a>01979 <span class="comment"> * any scratch work.</span>
<a name="l01980"></a>01980 <span class="comment"> */</span>
<a name="l01981"></a>01981 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01982"></a>01982 <a class="code" href="group__fs__handling.html#gabec2453f61fb9356db9526d4c56f3a62" title="If not NULL, associate *uuid with fs.">svn_fs_set_uuid</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l01983"></a>01983                 <span class="keyword">const</span> <span class="keywordtype">char</span> *uuid,
<a name="l01984"></a>01984                 apr_pool_t *pool);
<a name="l01985"></a>01985 
<a name="l01986"></a>01986 
<a name="l01987"></a>01987 <span class="comment">/* Non-historical properties.  */</span>
<a name="l01988"></a>01988 
<a name="l01989"></a>01989 <span class="comment">/* [[Yes, do tell.]] */</span>
<a name="l01990"></a>01990 
<a name="l01991"></a>01991 
<a name="l01992"></a>01992 <span class="comment"></span>
<a name="l01993"></a>01993 <span class="comment">/** @defgroup svn_fs_locks Filesystem locks</span>
<a name="l01994"></a>01994 <span class="comment"> * @{</span>
<a name="l01995"></a>01995 <span class="comment"> * @since New in 1.2. */</span>
<a name="l01996"></a>01996 <span class="comment"></span>
<a name="l01997"></a>01997 <span class="comment">/** A lock represents one user&#39;s exclusive right to modify a path in a</span>
<a name="l01998"></a>01998 <span class="comment"> * filesystem.  In order to create or destroy a lock, a username must</span>
<a name="l01999"></a>01999 <span class="comment"> * be associated with the filesystem&#39;s access context (see</span>
<a name="l02000"></a>02000 <span class="comment"> * #svn_fs_access_t).</span>
<a name="l02001"></a>02001 <span class="comment"> *</span>
<a name="l02002"></a>02002 <span class="comment"> * When a lock is created, a &#39;lock-token&#39; is returned.  The lock-token</span>
<a name="l02003"></a>02003 <span class="comment"> * is a unique URI that represents the lock (treated as an opaque</span>
<a name="l02004"></a>02004 <span class="comment"> * string by the client), and is required to make further use of the</span>
<a name="l02005"></a>02005 <span class="comment"> * lock (including removal of the lock.)  A lock-token can also be</span>
<a name="l02006"></a>02006 <span class="comment"> * queried to return a svn_lock_t structure that describes the details</span>
<a name="l02007"></a>02007 <span class="comment"> * of the lock.  lock-tokens must not contain any newline character,</span>
<a name="l02008"></a>02008 <span class="comment"> * mainly due to the serialization for tokens for pre-commit hook.</span>
<a name="l02009"></a>02009 <span class="comment"> *</span>
<a name="l02010"></a>02010 <span class="comment"> * Locks are not secret; anyone can view existing locks in a</span>
<a name="l02011"></a>02011 <span class="comment"> * filesystem.  Locks are not omnipotent: they can broken and stolen</span>
<a name="l02012"></a>02012 <span class="comment"> * by people who don&#39;t &quot;own&quot; the lock.  (Though admins can tailor a</span>
<a name="l02013"></a>02013 <span class="comment"> * custom break/steal policy via libsvn_repos pre-lock hook script.)</span>
<a name="l02014"></a>02014 <span class="comment"> *</span>
<a name="l02015"></a>02015 <span class="comment"> * Locks can be created with an optional expiration date.  If a lock</span>
<a name="l02016"></a>02016 <span class="comment"> * has an expiration date, then the act of fetching/reading it might</span>
<a name="l02017"></a>02017 <span class="comment"> * cause it to automatically expire, returning either nothing or an</span>
<a name="l02018"></a>02018 <span class="comment"> * expiration error (depending on the API).</span>
<a name="l02019"></a>02019 <span class="comment"> */</span>
<a name="l02020"></a>02020 
<a name="l02021"></a>02021 <span class="comment"></span>
<a name="l02022"></a>02022 <span class="comment">/** Lock @a path in @a fs, and set @a *lock to a lock</span>
<a name="l02023"></a>02023 <span class="comment"> * representing the new lock, allocated in @a pool.</span>
<a name="l02024"></a>02024 <span class="comment"> *</span>
<a name="l02025"></a>02025 <span class="comment"> * @warning You may prefer to use svn_repos_fs_lock() instead,</span>
<a name="l02026"></a>02026 <span class="comment"> * which see.</span>
<a name="l02027"></a>02027 <span class="comment"> *</span>
<a name="l02028"></a>02028 <span class="comment"> * @a fs must have a username associated with it (see</span>
<a name="l02029"></a>02029 <span class="comment"> * #svn_fs_access_t), else return #SVN_ERR_FS_NO_USER.  Set the</span>
<a name="l02030"></a>02030 <span class="comment"> * &#39;owner&#39; field in the new lock to the fs username.</span>
<a name="l02031"></a>02031 <span class="comment"> *</span>
<a name="l02032"></a>02032 <span class="comment"> * @a comment is optional: it&#39;s either an xml-escapable UTF8 string</span>
<a name="l02033"></a>02033 <span class="comment"> * which describes the lock, or it is @c NULL.</span>
<a name="l02034"></a>02034 <span class="comment"> *</span>
<a name="l02035"></a>02035 <span class="comment"> * @a is_dav_comment describes whether the comment was created by a</span>
<a name="l02036"></a>02036 <span class="comment"> * generic DAV client; only mod_dav_svn&#39;s autoversioning feature needs</span>
<a name="l02037"></a>02037 <span class="comment"> * to use it.  If in doubt, pass 0.</span>
<a name="l02038"></a>02038 <span class="comment"> *</span>
<a name="l02039"></a>02039 <span class="comment"> * If path is already locked, then return #SVN_ERR_FS_PATH_ALREADY_LOCKED,</span>
<a name="l02040"></a>02040 <span class="comment"> * unless @a steal_lock is TRUE, in which case &quot;steal&quot; the existing</span>
<a name="l02041"></a>02041 <span class="comment"> * lock, even if the FS access-context&#39;s username does not match the</span>
<a name="l02042"></a>02042 <span class="comment"> * current lock&#39;s owner: delete the existing lock on @a path, and</span>
<a name="l02043"></a>02043 <span class="comment"> * create a new one.</span>
<a name="l02044"></a>02044 <span class="comment"> *</span>
<a name="l02045"></a>02045 <span class="comment"> * @a token is a lock token such as can be generated using</span>
<a name="l02046"></a>02046 <span class="comment"> * svn_fs_generate_lock_token() (indicating that the caller wants to</span>
<a name="l02047"></a>02047 <span class="comment"> * dictate the lock token used), or it is @c NULL (indicating that the</span>
<a name="l02048"></a>02048 <span class="comment"> * caller wishes to have a new token generated by this function).  If</span>
<a name="l02049"></a>02049 <span class="comment"> * @a token is not @c NULL, and represents an existing lock, then @a</span>
<a name="l02050"></a>02050 <span class="comment"> * path must match the path associated with that existing lock.</span>
<a name="l02051"></a>02051 <span class="comment"> *</span>
<a name="l02052"></a>02052 <span class="comment"> * If @a expiration_date is zero, then create a non-expiring lock.</span>
<a name="l02053"></a>02053 <span class="comment"> * Else, the lock will expire at @a expiration_date.</span>
<a name="l02054"></a>02054 <span class="comment"> *</span>
<a name="l02055"></a>02055 <span class="comment"> * If @a current_rev is a valid revnum, then do an out-of-dateness</span>
<a name="l02056"></a>02056 <span class="comment"> * check.  If the revnum is less than the last-changed-revision of @a</span>
<a name="l02057"></a>02057 <span class="comment"> * path (or if @a path doesn&#39;t exist in HEAD), return</span>
<a name="l02058"></a>02058 <span class="comment"> * #SVN_ERR_FS_OUT_OF_DATE.</span>
<a name="l02059"></a>02059 <span class="comment"> *</span>
<a name="l02060"></a>02060 <span class="comment"> * @note At this time, only files can be locked.</span>
<a name="l02061"></a>02061 <span class="comment"> */</span>
<a name="l02062"></a>02062 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02063"></a>02063 <a class="code" href="group__svn__fs__locks.html#gae552c755f0b7d2f390f3ccf844e8ad37" title="A lock represents one user&#39;s exclusive right to modify a path in a filesystem.">svn_fs_lock</a>(<a class="code" href="structsvn__lock__t.html" title="A lock object, for client &amp; server to share.">svn_lock_t</a> **lock,
<a name="l02064"></a>02064             <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l02065"></a>02065             <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l02066"></a>02066             <span class="keyword">const</span> <span class="keywordtype">char</span> *token,
<a name="l02067"></a>02067             <span class="keyword">const</span> <span class="keywordtype">char</span> *comment,
<a name="l02068"></a>02068             <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> is_dav_comment,
<a name="l02069"></a>02069             apr_time_t expiration_date,
<a name="l02070"></a>02070             <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> current_rev,
<a name="l02071"></a>02071             <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> steal_lock,
<a name="l02072"></a>02072             apr_pool_t *pool);
<a name="l02073"></a>02073 
<a name="l02074"></a>02074 <span class="comment"></span>
<a name="l02075"></a>02075 <span class="comment">/** Generate a unique lock-token using @a fs. Return in @a *token,</span>
<a name="l02076"></a>02076 <span class="comment"> * allocated in @a pool.</span>
<a name="l02077"></a>02077 <span class="comment"> *</span>
<a name="l02078"></a>02078 <span class="comment"> * This can be used in to populate lock-&gt;token before calling</span>
<a name="l02079"></a>02079 <span class="comment"> * svn_fs_attach_lock().</span>
<a name="l02080"></a>02080 <span class="comment"> */</span>
<a name="l02081"></a>02081 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02082"></a>02082 <a class="code" href="group__svn__fs__locks.html#ga2caf8e8ad52cf830d17626f7805bc42e" title="Generate a unique lock-token using fs.">svn_fs_generate_lock_token</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> **token,
<a name="l02083"></a>02083                            <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l02084"></a>02084                            apr_pool_t *pool);
<a name="l02085"></a>02085 
<a name="l02086"></a>02086 <span class="comment"></span>
<a name="l02087"></a>02087 <span class="comment">/** Remove the lock on @a path represented by @a token in @a fs.</span>
<a name="l02088"></a>02088 <span class="comment"> *</span>
<a name="l02089"></a>02089 <span class="comment"> * If @a token doesn&#39;t point to a lock, return #SVN_ERR_FS_BAD_LOCK_TOKEN.</span>
<a name="l02090"></a>02090 <span class="comment"> * If @a token points to an expired lock, return #SVN_ERR_FS_LOCK_EXPIRED.</span>
<a name="l02091"></a>02091 <span class="comment"> * If @a fs has no username associated with it, return #SVN_ERR_FS_NO_USER</span>
<a name="l02092"></a>02092 <span class="comment"> * unless @a break_lock is specified.</span>
<a name="l02093"></a>02093 <span class="comment"> *</span>
<a name="l02094"></a>02094 <span class="comment"> * If @a token points to a lock, but the username of @a fs&#39;s access</span>
<a name="l02095"></a>02095 <span class="comment"> * context doesn&#39;t match the lock&#39;s owner, return</span>
<a name="l02096"></a>02096 <span class="comment"> * #SVN_ERR_FS_LOCK_OWNER_MISMATCH.  If @a break_lock is TRUE, however, don&#39;t</span>
<a name="l02097"></a>02097 <span class="comment"> * return error;  allow the lock to be &quot;broken&quot; in any case.  In the latter</span>
<a name="l02098"></a>02098 <span class="comment"> * case, @a token shall be @c NULL.</span>
<a name="l02099"></a>02099 <span class="comment"> *</span>
<a name="l02100"></a>02100 <span class="comment"> * Use @a pool for temporary allocations.</span>
<a name="l02101"></a>02101 <span class="comment"> */</span>
<a name="l02102"></a>02102 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02103"></a>02103 <a class="code" href="group__svn__fs__locks.html#ga07bff914fc145098d02d354608abfbc8" title="Remove the lock on path represented by token in fs.">svn_fs_unlock</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l02104"></a>02104               <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l02105"></a>02105               <span class="keyword">const</span> <span class="keywordtype">char</span> *token,
<a name="l02106"></a>02106               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> break_lock,
<a name="l02107"></a>02107               apr_pool_t *pool);
<a name="l02108"></a>02108 
<a name="l02109"></a>02109 <span class="comment"></span>
<a name="l02110"></a>02110 <span class="comment">/** If @a path is locked in @a fs, set @a *lock to an svn_lock_t which</span>
<a name="l02111"></a>02111 <span class="comment"> *  represents the lock, allocated in @a pool.</span>
<a name="l02112"></a>02112 <span class="comment"> *</span>
<a name="l02113"></a>02113 <span class="comment"> * If @a path is not locked, set @a *lock to NULL.</span>
<a name="l02114"></a>02114 <span class="comment"> */</span>
<a name="l02115"></a>02115 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02116"></a>02116 <a class="code" href="group__svn__fs__locks.html#ga1f4e9e1f28d46d6a23a1e12e7877ebc9" title="If path is locked in fs, set *lock to an svn_lock_t which represents the lock, allocated in pool...">svn_fs_get_lock</a>(<a class="code" href="structsvn__lock__t.html" title="A lock object, for client &amp; server to share.">svn_lock_t</a> **lock,
<a name="l02117"></a>02117                 <a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l02118"></a>02118                 <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l02119"></a>02119                 apr_pool_t *pool);
<a name="l02120"></a>02120 
<a name="l02121"></a>02121 <span class="comment"></span>
<a name="l02122"></a>02122 <span class="comment">/** The type of a lock discovery callback function.  @a baton is the</span>
<a name="l02123"></a>02123 <span class="comment"> * value specified in the call to svn_fs_get_locks(); the filesystem</span>
<a name="l02124"></a>02124 <span class="comment"> * passes it through to the callback.  @a lock is a lock structure.</span>
<a name="l02125"></a>02125 <span class="comment"> * @a pool is a temporary subpool for use by the callback</span>
<a name="l02126"></a>02126 <span class="comment"> * implementation -- it is cleared after invocation of the callback.</span>
<a name="l02127"></a>02127 <span class="comment"> */</span>
<a name="l02128"></a><a class="code" href="group__svn__fs__locks.html#ga668d3961d6663956afaa1747353ce543">02128</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_fs_get_locks_callback_t)(<span class="keywordtype">void</span> *baton,
<a name="l02129"></a>02129                                                     <a class="code" href="structsvn__lock__t.html" title="A lock object, for client &amp; server to share.">svn_lock_t</a> *lock,
<a name="l02130"></a>02130                                                     apr_pool_t *pool);
<a name="l02131"></a>02131 
<a name="l02132"></a>02132 <span class="comment"></span>
<a name="l02133"></a>02133 <span class="comment">/** Report locks on or below @a path in @a fs using the @a</span>
<a name="l02134"></a>02134 <span class="comment"> * get_locks_func / @a get_locks_baton.  Use @a pool for necessary</span>
<a name="l02135"></a>02135 <span class="comment"> * allocations.</span>
<a name="l02136"></a>02136 <span class="comment"> *</span>
<a name="l02137"></a>02137 <span class="comment"> * @a depth limits the reported locks to those associated with paths</span>
<a name="l02138"></a>02138 <span class="comment"> * within the specified depth of @a path, and must be one of the</span>
<a name="l02139"></a>02139 <span class="comment"> * following values:  #svn_depth_empty, #svn_depth_files,</span>
<a name="l02140"></a>02140 <span class="comment"> * #svn_depth_immediates, or #svn_depth_infinity.</span>
<a name="l02141"></a>02141 <span class="comment"> *</span>
<a name="l02142"></a>02142 <span class="comment"> * If the @a get_locks_func callback implementation returns an error,</span>
<a name="l02143"></a>02143 <span class="comment"> * lock iteration will terminate and that error will be returned by</span>
<a name="l02144"></a>02144 <span class="comment"> * this function.</span>
<a name="l02145"></a>02145 <span class="comment"> *</span>
<a name="l02146"></a>02146 <span class="comment"> * @note Over the course of this function&#39;s invocation, locks might be</span>
<a name="l02147"></a>02147 <span class="comment"> * added, removed, or modified by concurrent processes.  Callers need</span>
<a name="l02148"></a>02148 <span class="comment"> * to anticipate and gracefully handle the transience of this</span>
<a name="l02149"></a>02149 <span class="comment"> * information.</span>
<a name="l02150"></a>02150 <span class="comment"> *</span>
<a name="l02151"></a>02151 <span class="comment"> * @since New in 1.7.</span>
<a name="l02152"></a>02152 <span class="comment"> */</span>
<a name="l02153"></a>02153 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02154"></a>02154 <a class="code" href="group__svn__fs__locks.html#ga3ee19c1699b8244ef2e56e1d78241e63" title="Report locks on or below path in fs using the get_locks_func / get_locks_baton.">svn_fs_get_locks2</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l02155"></a>02155                   <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l02156"></a>02156                   <a class="code" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c" title="The concept of depth for directories.">svn_depth_t</a> depth,
<a name="l02157"></a>02157                   <a class="code" href="group__svn__fs__locks.html#ga668d3961d6663956afaa1747353ce543" title="The type of a lock discovery callback function.">svn_fs_get_locks_callback_t</a> get_locks_func,
<a name="l02158"></a>02158                   <span class="keywordtype">void</span> *get_locks_baton,
<a name="l02159"></a>02159                   apr_pool_t *pool);
<a name="l02160"></a>02160 <span class="comment"></span>
<a name="l02161"></a>02161 <span class="comment">/** Similar to svn_fs_get_locks2(), but with @a depth always passed as</span>
<a name="l02162"></a>02162 <span class="comment"> * svn_depth_infinity, and with the following known problem (which is</span>
<a name="l02163"></a>02163 <span class="comment"> * not present in svn_fs_get_locks2()):</span>
<a name="l02164"></a>02164 <span class="comment"> *</span>
<a name="l02165"></a>02165 <span class="comment"> * @note On Berkeley-DB-backed filesystems in Subversion 1.6 and</span>
<a name="l02166"></a>02166 <span class="comment"> * prior, the @a get_locks_func callback will be invoked from within a</span>
<a name="l02167"></a>02167 <span class="comment"> * Berkeley-DB transaction trail.  Implementors of the callback are,</span>
<a name="l02168"></a>02168 <span class="comment"> * as a result, forbidden from calling any svn_fs API functions which</span>
<a name="l02169"></a>02169 <span class="comment"> * might themselves attempt to start a new Berkeley DB transaction</span>
<a name="l02170"></a>02170 <span class="comment"> * (which is most of this svn_fs API).  Yes, this is a nasty</span>
<a name="l02171"></a>02171 <span class="comment"> * implementation detail to have to be aware of.</span>
<a name="l02172"></a>02172 <span class="comment"> *</span>
<a name="l02173"></a>02173 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l02174"></a>02174 <span class="comment"> */</span>
<a name="l02175"></a>02175 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l02176"></a>02176 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02177"></a>02177 <a class="code" href="group__svn__fs__locks.html#ga5c0fdad9e95f6d0c1f4deb711d860e01" title="Similar to svn_fs_get_locks2(), but with depth always passed as svn_depth_infinity, and with the following known problem (which is not present in svn_fs_get_locks2()):">svn_fs_get_locks</a>(<a class="code" href="group__fs__handling.html#ga2419fff1bb2c1e523b00e276ed3862e3" title="An object representing a Subversion filesystem.">svn_fs_t</a> *fs,
<a name="l02178"></a>02178                  <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l02179"></a>02179                  <a class="code" href="group__svn__fs__locks.html#ga668d3961d6663956afaa1747353ce543" title="The type of a lock discovery callback function.">svn_fs_get_locks_callback_t</a> get_locks_func,
<a name="l02180"></a>02180                  <span class="keywordtype">void</span> *get_locks_baton,
<a name="l02181"></a>02181                  apr_pool_t *pool);
<a name="l02182"></a>02182 <span class="comment"></span>
<a name="l02183"></a>02183 <span class="comment">/** @} */</span>
<a name="l02184"></a>02184 <span class="comment"></span>
<a name="l02185"></a>02185 <span class="comment">/**</span>
<a name="l02186"></a>02186 <span class="comment"> * Append a textual list of all available FS modules to the stringbuf</span>
<a name="l02187"></a>02187 <span class="comment"> * @a output.</span>
<a name="l02188"></a>02188 <span class="comment"> *</span>
<a name="l02189"></a>02189 <span class="comment"> * @since New in 1.2.</span>
<a name="l02190"></a>02190 <span class="comment"> */</span>
<a name="l02191"></a>02191 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02192"></a>02192 <a class="code" href="group__fs__handling.html#ga26cf98c986a0f71fe9d86be0f73266b6" title="Append a textual list of all available FS modules to the stringbuf output.">svn_fs_print_modules</a>(<a class="code" href="structsvn__stringbuf__t.html" title="A buffered string, capable of appending without an allocation and copy for each append.">svn_stringbuf_t</a> *output,
<a name="l02193"></a>02193                      apr_pool_t *pool);
<a name="l02194"></a>02194 
<a name="l02195"></a>02195 <span class="comment"></span>
<a name="l02196"></a>02196 <span class="comment">/** The kind of action being taken by &#39;pack&#39;. */</span>
<a name="l02197"></a><a class="code" href="group__fs__handling.html#ga7c9b681798a28beb90cb747c0626b5b2">02197</a> <span class="keyword">typedef</span> <span class="keyword">enum</span> <a class="code" href="group__fs__handling.html#ga7c9b681798a28beb90cb747c0626b5b2" title="The kind of action being taken by &#39;pack&#39;.">svn_fs_pack_notify_action_t</a>
<a name="l02198"></a>02198 {<span class="comment"></span>
<a name="l02199"></a>02199 <span class="comment">  /** packing of the shard has commenced */</span>
<a name="l02200"></a><a class="code" href="group__fs__handling.html#gga7c9b681798a28beb90cb747c0626b5b2afba8e92df732aad1d260c907a671d974">02200</a>   <a class="code" href="group__fs__handling.html#gga7c9b681798a28beb90cb747c0626b5b2afba8e92df732aad1d260c907a671d974" title="packing of the shard has commenced">svn_fs_pack_notify_start</a> = 0,
<a name="l02201"></a>02201 <span class="comment"></span>
<a name="l02202"></a>02202 <span class="comment">  /** packing of the shard is completed */</span>
<a name="l02203"></a><a class="code" href="group__fs__handling.html#gga7c9b681798a28beb90cb747c0626b5b2a418f1ef1d170f644d49d055b4d4e244f">02203</a>   <a class="code" href="group__fs__handling.html#gga7c9b681798a28beb90cb747c0626b5b2a418f1ef1d170f644d49d055b4d4e244f" title="packing of the shard is completed">svn_fs_pack_notify_end</a>,
<a name="l02204"></a>02204 <span class="comment"></span>
<a name="l02205"></a>02205 <span class="comment">  /** packing of the shard revprops has commenced</span>
<a name="l02206"></a>02206 <span class="comment">      @since New in 1.7. */</span>
<a name="l02207"></a><a class="code" href="group__fs__handling.html#gga7c9b681798a28beb90cb747c0626b5b2a7e2b473fa5c9367b08a76f92f7e856fa">02207</a>   <a class="code" href="group__fs__handling.html#gga7c9b681798a28beb90cb747c0626b5b2a7e2b473fa5c9367b08a76f92f7e856fa" title="packing of the shard revprops has commenced">svn_fs_pack_notify_start_revprop</a>,
<a name="l02208"></a>02208 <span class="comment"></span>
<a name="l02209"></a>02209 <span class="comment">  /** packing of the shard revprops has completed</span>
<a name="l02210"></a>02210 <span class="comment">      @since New in 1.7. */</span>
<a name="l02211"></a><a class="code" href="group__fs__handling.html#gga7c9b681798a28beb90cb747c0626b5b2a3d08320b848ebe9a3f5b6846e67cda2f">02211</a>   <a class="code" href="group__fs__handling.html#gga7c9b681798a28beb90cb747c0626b5b2a3d08320b848ebe9a3f5b6846e67cda2f" title="packing of the shard revprops has completed">svn_fs_pack_notify_end_revprop</a>
<a name="l02212"></a>02212 
<a name="l02213"></a>02213 } <a class="code" href="group__fs__handling.html#ga7c9b681798a28beb90cb747c0626b5b2" title="The kind of action being taken by &#39;pack&#39;.">svn_fs_pack_notify_action_t</a>;
<a name="l02214"></a>02214 <span class="comment"></span>
<a name="l02215"></a>02215 <span class="comment">/** The type of a pack notification function.  @a shard is the shard being</span>
<a name="l02216"></a>02216 <span class="comment"> * acted upon; @a action is the type of action being performed.  @a baton is</span>
<a name="l02217"></a>02217 <span class="comment"> * the corresponding baton for the notification function, and @a pool can</span>
<a name="l02218"></a>02218 <span class="comment"> * be used for temporary allocations, but will be cleared between invocations.</span>
<a name="l02219"></a>02219 <span class="comment"> */</span>
<a name="l02220"></a><a class="code" href="group__fs__handling.html#ga418eae984b0da828404197edf9fcc46e">02220</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_fs_pack_notify_t)(<span class="keywordtype">void</span> *baton,
<a name="l02221"></a>02221                                              apr_int64_t shard,
<a name="l02222"></a>02222                                              <a class="code" href="group__fs__handling.html#ga7c9b681798a28beb90cb747c0626b5b2" title="The kind of action being taken by &#39;pack&#39;.">svn_fs_pack_notify_action_t</a> action,
<a name="l02223"></a>02223                                              apr_pool_t *pool);
<a name="l02224"></a>02224 <span class="comment"></span>
<a name="l02225"></a>02225 <span class="comment">/**</span>
<a name="l02226"></a>02226 <span class="comment"> * Possibly update the filesystem located in the directory @a path</span>
<a name="l02227"></a>02227 <span class="comment"> * to use disk space more efficiently.</span>
<a name="l02228"></a>02228 <span class="comment"> *</span>
<a name="l02229"></a>02229 <span class="comment"> * @since New in 1.6.</span>
<a name="l02230"></a>02230 <span class="comment"> */</span>
<a name="l02231"></a>02231 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02232"></a>02232 <a class="code" href="group__fs__handling.html#ga307aa2f60e82d9f78d7f7990991533c3" title="Possibly update the filesystem located in the directory path to use disk space more efficiently...">svn_fs_pack</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *db_path,
<a name="l02233"></a>02233             <a class="code" href="group__fs__handling.html#ga418eae984b0da828404197edf9fcc46e" title="The type of a pack notification function.">svn_fs_pack_notify_t</a> notify_func,
<a name="l02234"></a>02234             <span class="keywordtype">void</span> *notify_baton,
<a name="l02235"></a>02235             <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l02236"></a>02236             <span class="keywordtype">void</span> *cancel_baton,
<a name="l02237"></a>02237             apr_pool_t *pool);
<a name="l02238"></a>02238 
<a name="l02239"></a>02239 <span class="comment"></span>
<a name="l02240"></a>02240 <span class="comment">/** @} */</span>
<a name="l02241"></a>02241 
<a name="l02242"></a>02242 
<a name="l02243"></a>02243 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l02244"></a>02244 <span class="preprocessor"></span>}
<a name="l02245"></a>02245 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l02246"></a>02246 
<a name="l02247"></a>02247 <span class="preprocessor">#endif </span><span class="comment">/* SVN_FS_H */</span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Fri Dec 23 2011 09:20:36 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>
