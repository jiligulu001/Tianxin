<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Subversion: svn_io.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">svn_io.h</div>  </div>
</div>
<div class="contents">
<a href="svn__io_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**</span>
<a name="l00002"></a>00002 <span class="comment"> * @copyright</span>
<a name="l00003"></a>00003 <span class="comment"> * ====================================================================</span>
<a name="l00004"></a>00004 <span class="comment"> *    Licensed to the Apache Software Foundation (ASF) under one</span>
<a name="l00005"></a>00005 <span class="comment"> *    or more contributor license agreements.  See the NOTICE file</span>
<a name="l00006"></a>00006 <span class="comment"> *    distributed with this work for additional information</span>
<a name="l00007"></a>00007 <span class="comment"> *    regarding copyright ownership.  The ASF licenses this file</span>
<a name="l00008"></a>00008 <span class="comment"> *    to you under the Apache License, Version 2.0 (the</span>
<a name="l00009"></a>00009 <span class="comment"> *    &quot;License&quot;); you may not use this file except in compliance</span>
<a name="l00010"></a>00010 <span class="comment"> *    with the License.  You may obtain a copy of the License at</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00013"></a>00013 <span class="comment"> *</span>
<a name="l00014"></a>00014 <span class="comment"> *    Unless required by applicable law or agreed to in writing,</span>
<a name="l00015"></a>00015 <span class="comment"> *    software distributed under the License is distributed on an</span>
<a name="l00016"></a>00016 <span class="comment"> *    &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span>
<a name="l00017"></a>00017 <span class="comment"> *    KIND, either express or implied.  See the License for the</span>
<a name="l00018"></a>00018 <span class="comment"> *    specific language governing permissions and limitations</span>
<a name="l00019"></a>00019 <span class="comment"> *    under the License.</span>
<a name="l00020"></a>00020 <span class="comment"> * ====================================================================</span>
<a name="l00021"></a>00021 <span class="comment"> * @endcopyright</span>
<a name="l00022"></a>00022 <span class="comment"> *</span>
<a name="l00023"></a>00023 <span class="comment"> * @file svn_io.h</span>
<a name="l00024"></a>00024 <span class="comment"> * @brief General file I/O for Subversion</span>
<a name="l00025"></a>00025 <span class="comment"> */</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="comment">/* ==================================================================== */</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#ifndef SVN_IO_H</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor">#define SVN_IO_H</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;apr.h&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;apr_pools.h&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;apr_time.h&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;apr_hash.h&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;apr_tables.h&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;apr_file_io.h&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;apr_file_info.h&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;apr_thread_proc.h&gt;</span>  <span class="comment">/* for apr_proc_t, apr_exit_why_e */</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="svn__types_8h.html" title="Subversion&#39;s data types.">svn_types.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="svn__string_8h.html" title="Counted-length strings for Subversion, plus some C string goodies.">svn_string.h</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="svn__checksum_8h.html" title="Subversion checksum routines.">svn_checksum.h</a>&quot;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {
<a name="l00048"></a>00048 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="comment"></span>
<a name="l00052"></a>00052 <span class="comment">/** Used as an argument when creating temporary files to indicate</span>
<a name="l00053"></a>00053 <span class="comment"> * when a file should be removed.</span>
<a name="l00054"></a>00054 <span class="comment"> *</span>
<a name="l00055"></a>00055 <span class="comment"> * @since New in 1.4.</span>
<a name="l00056"></a>00056 <span class="comment"> *</span>
<a name="l00057"></a>00057 <span class="comment"> * Not specifying any of these means no removal at all. */</span>
<a name="l00058"></a><a class="code" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884">00058</a> <span class="keyword">typedef</span> <span class="keyword">enum</span> <a class="code" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884" title="Used as an argument when creating temporary files to indicate when a file should be removed...">svn_io_file_del_t</a>
<a name="l00059"></a>00059 {<span class="comment"></span>
<a name="l00060"></a>00060 <span class="comment">  /** No deletion ever */</span>
<a name="l00061"></a><a class="code" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884a70268318a6e388419ae0e85ab7f7599c">00061</a>   <a class="code" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884a70268318a6e388419ae0e85ab7f7599c" title="No deletion ever.">svn_io_file_del_none</a> = 0,<span class="comment"></span>
<a name="l00062"></a>00062 <span class="comment">  /** Remove when the file is closed */</span>
<a name="l00063"></a><a class="code" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884a6256344ca6b43868daa12365d75834d2">00063</a>   <a class="code" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884a6256344ca6b43868daa12365d75834d2" title="Remove when the file is closed.">svn_io_file_del_on_close</a>,<span class="comment"></span>
<a name="l00064"></a>00064 <span class="comment">  /** Remove when the associated pool is cleared */</span>
<a name="l00065"></a><a class="code" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884a0f89c57067b563673ea1ec5605c908bd">00065</a>   <a class="code" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884a0f89c57067b563673ea1ec5605c908bd" title="Remove when the associated pool is cleared.">svn_io_file_del_on_pool_cleanup</a>
<a name="l00066"></a>00066 } <a class="code" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884" title="Used as an argument when creating temporary files to indicate when a file should be removed...">svn_io_file_del_t</a>;
<a name="l00067"></a>00067 <span class="comment"></span>
<a name="l00068"></a>00068 <span class="comment">/** A set of directory entry data elements as returned by svn_io_get_dirents</span>
<a name="l00069"></a>00069 <span class="comment"> *</span>
<a name="l00070"></a>00070 <span class="comment"> * Note that the first two fields are exactly identical to svn_io_dirent_t</span>
<a name="l00071"></a>00071 <span class="comment"> * to allow returning a svn_io_dirent2_t as a svn_io_dirent_t.</span>
<a name="l00072"></a>00072 <span class="comment"> *</span>
<a name="l00073"></a>00073 <span class="comment"> * Use svn_io_dirent2_create() to create new svn_dirent2_t instances or</span>
<a name="l00074"></a>00074 <span class="comment"> * svn_io_dirent2_dup() to duplicate an existing instance.</span>
<a name="l00075"></a>00075 <span class="comment"> *</span>
<a name="l00076"></a>00076 <span class="comment"> * @since New in 1.7.</span>
<a name="l00077"></a>00077 <span class="comment"> */</span>
<a name="l00078"></a><a class="code" href="structsvn__io__dirent2__t.html">00078</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__io__dirent2__t.html" title="A set of directory entry data elements as returned by svn_io_get_dirents.">svn_io_dirent2_t</a> {
<a name="l00079"></a>00079   <span class="comment">/* New fields must be added at the end to preserve binary compatibility */</span>
<a name="l00080"></a>00080 <span class="comment"></span>
<a name="l00081"></a>00081 <span class="comment">  /** The kind of this entry. */</span>
<a name="l00082"></a><a class="code" href="structsvn__io__dirent2__t.html#aff8960cd16e36941d7e8c1d040f8b044">00082</a>   <a class="code" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a" title="The various types of nodes in the Subversion filesystem.">svn_node_kind_t</a> <a class="code" href="structsvn__io__dirent2__t.html#aff8960cd16e36941d7e8c1d040f8b044" title="The kind of this entry.">kind</a>;
<a name="l00083"></a>00083 <span class="comment"></span>
<a name="l00084"></a>00084 <span class="comment">  /** If @c kind is #svn_node_file, whether this entry is a special file;</span>
<a name="l00085"></a>00085 <span class="comment">   * else FALSE.</span>
<a name="l00086"></a>00086 <span class="comment">   *</span>
<a name="l00087"></a>00087 <span class="comment">   * @see svn_io_check_special_path().</span>
<a name="l00088"></a>00088 <span class="comment">   */</span>
<a name="l00089"></a><a class="code" href="structsvn__io__dirent2__t.html#a42fe5c38e86515c4d56627764c2b0cb7">00089</a>   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> <a class="code" href="structsvn__io__dirent2__t.html#a42fe5c38e86515c4d56627764c2b0cb7" title="If kind is svn_node_file, whether this entry is a special file; else FALSE.">special</a>;
<a name="l00090"></a>00090 <span class="comment"></span>
<a name="l00091"></a>00091 <span class="comment">  /** The filesize of this entry or undefined for a directory */</span>
<a name="l00092"></a><a class="code" href="structsvn__io__dirent2__t.html#ac9b659764697b01e9fb56cb5e1c6af8a">00092</a>   <a class="code" href="svn__types_8h.html#a726e581898461c1d3e7dbdb16d99dad0" title="The size of a file in the Subversion FS.">svn_filesize_t</a> <a class="code" href="structsvn__io__dirent2__t.html#ac9b659764697b01e9fb56cb5e1c6af8a" title="The filesize of this entry or undefined for a directory.">filesize</a>;
<a name="l00093"></a>00093 <span class="comment"></span>
<a name="l00094"></a>00094 <span class="comment">  /** The time the file was last modified */</span>
<a name="l00095"></a><a class="code" href="structsvn__io__dirent2__t.html#a310bfc9a9c1cbe353c67bbc399840743">00095</a>   apr_time_t <a class="code" href="structsvn__io__dirent2__t.html#a310bfc9a9c1cbe353c67bbc399840743" title="The time the file was last modified.">mtime</a>;
<a name="l00096"></a>00096 
<a name="l00097"></a>00097   <span class="comment">/* Don&#39;t forget to update svn_io_dirent2_dup() when adding new fields */</span>
<a name="l00098"></a>00098 } <a class="code" href="svn__io_8h.html#a0900f4459a5ef43cb1634d3b89d829a4" title="A set of directory entry data elements as returned by svn_io_get_dirents.">svn_io_dirent2_t</a>;
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 <span class="comment"></span>
<a name="l00101"></a>00101 <span class="comment">/** Creates a new #svn_io_dirent2_t structure</span>
<a name="l00102"></a>00102 <span class="comment"> *</span>
<a name="l00103"></a>00103 <span class="comment"> * @since New in 1.7.</span>
<a name="l00104"></a>00104 <span class="comment"> */</span>
<a name="l00105"></a>00105 <a class="code" href="structsvn__io__dirent2__t.html" title="A set of directory entry data elements as returned by svn_io_get_dirents.">svn_io_dirent2_t</a> *
<a name="l00106"></a>00106 <a class="code" href="svn__io_8h.html#a48ca8a48714c0353e1246e992def863b" title="Creates a new svn_io_dirent2_t structure.">svn_io_dirent2_create</a>(apr_pool_t *result_pool);
<a name="l00107"></a>00107 <span class="comment"></span>
<a name="l00108"></a>00108 <span class="comment">/** Duplicates a @c svn_io_dirent2_t structure into @a result_pool.</span>
<a name="l00109"></a>00109 <span class="comment"> *</span>
<a name="l00110"></a>00110 <span class="comment"> * @since New in 1.7.</span>
<a name="l00111"></a>00111 <span class="comment"> */</span>
<a name="l00112"></a>00112 <a class="code" href="structsvn__io__dirent2__t.html" title="A set of directory entry data elements as returned by svn_io_get_dirents.">svn_io_dirent2_t</a> *
<a name="l00113"></a>00113 <a class="code" href="svn__io_8h.html#a4373588a310c126338eee38f6fa8f67c" title="Duplicates a svn_io_dirent2_t structure into result_pool.">svn_io_dirent2_dup</a>(<span class="keyword">const</span> <a class="code" href="structsvn__io__dirent2__t.html" title="A set of directory entry data elements as returned by svn_io_get_dirents.">svn_io_dirent2_t</a> *item,
<a name="l00114"></a>00114                    apr_pool_t *result_pool);
<a name="l00115"></a>00115 <span class="comment"></span>
<a name="l00116"></a>00116 <span class="comment">/** Represents the kind and special status of a directory entry.</span>
<a name="l00117"></a>00117 <span class="comment"> *</span>
<a name="l00118"></a>00118 <span class="comment"> * Note that the first two fields are exactly identical to svn_io_dirent2_t</span>
<a name="l00119"></a>00119 <span class="comment"> * to allow returning a svn_io_dirent2_t as a svn_io_dirent_t.</span>
<a name="l00120"></a>00120 <span class="comment"> *</span>
<a name="l00121"></a>00121 <span class="comment"> * @since New in 1.3.</span>
<a name="l00122"></a>00122 <span class="comment"> */</span>
<a name="l00123"></a><a class="code" href="structsvn__io__dirent__t.html">00123</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__io__dirent__t.html" title="Represents the kind and special status of a directory entry.">svn_io_dirent_t</a> {<span class="comment"></span>
<a name="l00124"></a>00124 <span class="comment">  /** The kind of this entry. */</span>
<a name="l00125"></a><a class="code" href="structsvn__io__dirent__t.html#a59909d8753fdf326d081cde8372443cb">00125</a>   <a class="code" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a" title="The various types of nodes in the Subversion filesystem.">svn_node_kind_t</a> <a class="code" href="structsvn__io__dirent__t.html#a59909d8753fdf326d081cde8372443cb" title="The kind of this entry.">kind</a>;<span class="comment"></span>
<a name="l00126"></a>00126 <span class="comment">  /** If @c kind is #svn_node_file, whether this entry is a special file;</span>
<a name="l00127"></a>00127 <span class="comment">   * else FALSE.</span>
<a name="l00128"></a>00128 <span class="comment">   *</span>
<a name="l00129"></a>00129 <span class="comment">   * @see svn_io_check_special_path().</span>
<a name="l00130"></a>00130 <span class="comment">   */</span>
<a name="l00131"></a><a class="code" href="structsvn__io__dirent__t.html#ad3b184b3fa42b284e35dab3d3fe97828">00131</a>   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> <a class="code" href="structsvn__io__dirent__t.html#ad3b184b3fa42b284e35dab3d3fe97828" title="If kind is svn_node_file, whether this entry is a special file; else FALSE.">special</a>;
<a name="l00132"></a>00132 } <a class="code" href="svn__io_8h.html#af9f5d05db9c9a8f513615e4ec2caf5b2" title="Represents the kind and special status of a directory entry.">svn_io_dirent_t</a>;
<a name="l00133"></a>00133 <span class="comment"></span>
<a name="l00134"></a>00134 <span class="comment">/** Determine the @a kind of @a path.  @a path should be UTF-8 encoded.</span>
<a name="l00135"></a>00135 <span class="comment"> *</span>
<a name="l00136"></a>00136 <span class="comment"> * If @a path is a file, set @a *kind to #svn_node_file.</span>
<a name="l00137"></a>00137 <span class="comment"> *</span>
<a name="l00138"></a>00138 <span class="comment"> * If @a path is a directory, set @a *kind to #svn_node_dir.</span>
<a name="l00139"></a>00139 <span class="comment"> *</span>
<a name="l00140"></a>00140 <span class="comment"> * If @a path does not exist, set @a *kind to #svn_node_none.</span>
<a name="l00141"></a>00141 <span class="comment"> *</span>
<a name="l00142"></a>00142 <span class="comment"> * If @a path exists but is none of the above, set @a *kind to</span>
<a name="l00143"></a>00143 <span class="comment"> * #svn_node_unknown.</span>
<a name="l00144"></a>00144 <span class="comment"> *</span>
<a name="l00145"></a>00145 <span class="comment"> * If @a path is not a valid pathname, set @a *kind to #svn_node_none.  If</span>
<a name="l00146"></a>00146 <span class="comment"> * unable to determine @a path&#39;s kind for any other reason, return an error,</span>
<a name="l00147"></a>00147 <span class="comment"> * with @a *kind&#39;s value undefined.</span>
<a name="l00148"></a>00148 <span class="comment"> *</span>
<a name="l00149"></a>00149 <span class="comment"> * Use @a pool for temporary allocations.</span>
<a name="l00150"></a>00150 <span class="comment"> *</span>
<a name="l00151"></a>00151 <span class="comment"> * @see svn_node_kind_t</span>
<a name="l00152"></a>00152 <span class="comment"> */</span>
<a name="l00153"></a>00153 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00154"></a>00154 <a class="code" href="svn__io_8h.html#a31ee1827a2b62a2f4a122ef18e378b05" title="Determine the kind of path.">svn_io_check_path</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00155"></a>00155                   <a class="code" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a" title="The various types of nodes in the Subversion filesystem.">svn_node_kind_t</a> *kind,
<a name="l00156"></a>00156                   apr_pool_t *pool);
<a name="l00157"></a>00157 <span class="comment"></span>
<a name="l00158"></a>00158 <span class="comment">/**</span>
<a name="l00159"></a>00159 <span class="comment"> * Like svn_io_check_path(), but also set *is_special to @c TRUE if</span>
<a name="l00160"></a>00160 <span class="comment"> * the path is not a normal file.</span>
<a name="l00161"></a>00161 <span class="comment"> *</span>
<a name="l00162"></a>00162 <span class="comment"> * @since New in 1.1.</span>
<a name="l00163"></a>00163 <span class="comment"> */</span>
<a name="l00164"></a>00164 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00165"></a>00165 <a class="code" href="svn__io_8h.html#a0f8fdad8dc4fe854ef5b9971f8ab043e" title="Like svn_io_check_path(), but also set *is_special to TRUE if the path is not a normal file...">svn_io_check_special_path</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00166"></a>00166                           <a class="code" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a" title="The various types of nodes in the Subversion filesystem.">svn_node_kind_t</a> *kind,
<a name="l00167"></a>00167                           <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *is_special,
<a name="l00168"></a>00168                           apr_pool_t *pool);
<a name="l00169"></a>00169 <span class="comment"></span>
<a name="l00170"></a>00170 <span class="comment">/** Like svn_io_check_path(), but resolve symlinks.  This returns the</span>
<a name="l00171"></a>00171 <span class="comment">    same varieties of @a kind as svn_io_check_path(). */</span>
<a name="l00172"></a>00172 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00173"></a>00173 <a class="code" href="svn__io_8h.html#a47336875b45ac006d69aef58db4fb5bb" title="Like svn_io_check_path(), but resolve symlinks.">svn_io_check_resolved_path</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00174"></a>00174                            <a class="code" href="svn__types_8h.html#ac3ca125707a8ca1289c73236b5ce7f9a" title="The various types of nodes in the Subversion filesystem.">svn_node_kind_t</a> *kind,
<a name="l00175"></a>00175                            apr_pool_t *pool);
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 <span class="comment"></span>
<a name="l00178"></a>00178 <span class="comment">/** Open a new file (for reading and writing) with a unique name based on</span>
<a name="l00179"></a>00179 <span class="comment"> * utf-8 encoded @a filename, in the directory @a dirpath.  The file handle is</span>
<a name="l00180"></a>00180 <span class="comment"> * returned in @a *file, and the name, which ends with @a suffix, is returned</span>
<a name="l00181"></a>00181 <span class="comment"> * in @a *unique_name, also utf8-encoded.  Either @a file or @a unique_name</span>
<a name="l00182"></a>00182 <span class="comment"> * may be @c NULL.  If @a file is @c NULL, the file will be created but not</span>
<a name="l00183"></a>00183 <span class="comment"> * open.</span>
<a name="l00184"></a>00184 <span class="comment"> *</span>
<a name="l00185"></a>00185 <span class="comment"> * If @a delete_when is #svn_io_file_del_on_close, then the @c APR_DELONCLOSE</span>
<a name="l00186"></a>00186 <span class="comment"> * flag will be used when opening the file.  The @c APR_BUFFERED flag will</span>
<a name="l00187"></a>00187 <span class="comment"> * always be used.</span>
<a name="l00188"></a>00188 <span class="comment"> *</span>
<a name="l00189"></a>00189 <span class="comment"> * The first attempt will just append @a suffix.  If the result is not</span>
<a name="l00190"></a>00190 <span class="comment"> * a unique name, then subsequent attempts will append a dot,</span>
<a name="l00191"></a>00191 <span class="comment"> * followed by an iteration number (&quot;2&quot;, then &quot;3&quot;, and so on),</span>
<a name="l00192"></a>00192 <span class="comment"> * followed by the suffix.  For example, successive calls to</span>
<a name="l00193"></a>00193 <span class="comment"> *</span>
<a name="l00194"></a>00194 <span class="comment"> *    svn_io_open_uniquely_named(&amp;f, &amp;u, &quot;tests/t1/A/D/G&quot;, &quot;pi&quot;, &quot;.tmp&quot;, ...)</span>
<a name="l00195"></a>00195 <span class="comment"> *</span>
<a name="l00196"></a>00196 <span class="comment"> * will open</span>
<a name="l00197"></a>00197 <span class="comment"> *</span>
<a name="l00198"></a>00198 <span class="comment"> *    tests/t1/A/D/G/pi.tmp</span>
<a name="l00199"></a>00199 <span class="comment"> *    tests/t1/A/D/G/pi.2.tmp</span>
<a name="l00200"></a>00200 <span class="comment"> *    tests/t1/A/D/G/pi.3.tmp</span>
<a name="l00201"></a>00201 <span class="comment"> *    tests/t1/A/D/G/pi.4.tmp</span>
<a name="l00202"></a>00202 <span class="comment"> *    tests/t1/A/D/G/pi.5.tmp</span>
<a name="l00203"></a>00203 <span class="comment"> *    ...</span>
<a name="l00204"></a>00204 <span class="comment"> *</span>
<a name="l00205"></a>00205 <span class="comment"> * Assuming @a suffix is non-empty, @a *unique_name will never be exactly</span>
<a name="l00206"></a>00206 <span class="comment"> * the same as @a filename, even if @a filename does not exist.</span>
<a name="l00207"></a>00207 <span class="comment"> *</span>
<a name="l00208"></a>00208 <span class="comment"> * If @a dirpath is NULL, then the directory returned by svn_io_temp_dir()</span>
<a name="l00209"></a>00209 <span class="comment"> * will be used.</span>
<a name="l00210"></a>00210 <span class="comment"> *</span>
<a name="l00211"></a>00211 <span class="comment"> * If @a filename is NULL, then &quot;tempfile&quot; will be used.</span>
<a name="l00212"></a>00212 <span class="comment"> *</span>
<a name="l00213"></a>00213 <span class="comment"> * If @a suffix is NULL, then &quot;.tmp&quot; will be used.</span>
<a name="l00214"></a>00214 <span class="comment"> *</span>
<a name="l00215"></a>00215 <span class="comment"> * Allocates @a *file and @a *unique_name in @a result_pool. All</span>
<a name="l00216"></a>00216 <span class="comment"> * intermediate allocations will be performed in @a scratch_pool.</span>
<a name="l00217"></a>00217 <span class="comment"> *</span>
<a name="l00218"></a>00218 <span class="comment"> * If no unique name can be found, #SVN_ERR_IO_UNIQUE_NAMES_EXHAUSTED is</span>
<a name="l00219"></a>00219 <span class="comment"> * the error returned.</span>
<a name="l00220"></a>00220 <span class="comment"> *</span>
<a name="l00221"></a>00221 <span class="comment"> * Claim of Historical Inevitability: this function was written</span>
<a name="l00222"></a>00222 <span class="comment"> * because</span>
<a name="l00223"></a>00223 <span class="comment"> *</span>
<a name="l00224"></a>00224 <span class="comment"> *    - tmpnam() is not thread-safe.</span>
<a name="l00225"></a>00225 <span class="comment"> *    - tempname() tries standard system tmp areas first.</span>
<a name="l00226"></a>00226 <span class="comment"> *</span>
<a name="l00227"></a>00227 <span class="comment"> * @since New in 1.6</span>
<a name="l00228"></a>00228 <span class="comment"> */</span>
<a name="l00229"></a>00229 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00230"></a>00230 <a class="code" href="svn__io_8h.html#a280a68283cb7852fe1f4c5835f0b8fdf" title="Open a new file (for reading and writing) with a unique name based on utf-8 encoded filename...">svn_io_open_uniquely_named</a>(apr_file_t **file,
<a name="l00231"></a>00231                            <span class="keyword">const</span> <span class="keywordtype">char</span> **unique_name,
<a name="l00232"></a>00232                            <span class="keyword">const</span> <span class="keywordtype">char</span> *dirpath,
<a name="l00233"></a>00233                            <span class="keyword">const</span> <span class="keywordtype">char</span> *filename,
<a name="l00234"></a>00234                            <span class="keyword">const</span> <span class="keywordtype">char</span> *suffix,
<a name="l00235"></a>00235                            <a class="code" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884" title="Used as an argument when creating temporary files to indicate when a file should be removed...">svn_io_file_del_t</a> delete_when,
<a name="l00236"></a>00236                            apr_pool_t *result_pool,
<a name="l00237"></a>00237                            apr_pool_t *scratch_pool);
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 <span class="comment"></span>
<a name="l00240"></a>00240 <span class="comment">/** Create a writable file, with an arbitrary and unique name, in the</span>
<a name="l00241"></a>00241 <span class="comment"> * directory @a dirpath.  Set @a *temp_path to its full path, and set</span>
<a name="l00242"></a>00242 <span class="comment"> * @a *file to the file handle, both allocated from @a result_pool.  Either</span>
<a name="l00243"></a>00243 <span class="comment"> * @a file or @a unique_name may be @c NULL.  If @a file is @c NULL, the file</span>
<a name="l00244"></a>00244 <span class="comment"> * will be created but not open.</span>
<a name="l00245"></a>00245 <span class="comment"> *</span>
<a name="l00246"></a>00246 <span class="comment"> * If @a dirpath is @c NULL, use the path returned from svn_io_temp_dir().</span>
<a name="l00247"></a>00247 <span class="comment"> * (Note that when using the system-provided temp directory, it may not</span>
<a name="l00248"></a>00248 <span class="comment"> * be possible to atomically rename the resulting file due to cross-device</span>
<a name="l00249"></a>00249 <span class="comment"> * issues.)</span>
<a name="l00250"></a>00250 <span class="comment"> *</span>
<a name="l00251"></a>00251 <span class="comment"> * The file will be deleted according to @a delete_when.  If @a delete_when</span>
<a name="l00252"></a>00252 <span class="comment"> * is @c svn_io_file_del_on_close and @a file is @c NULL, the file will be</span>
<a name="l00253"></a>00253 <span class="comment"> * deleted before this function returns.</span>
<a name="l00254"></a>00254 <span class="comment"> *</span>
<a name="l00255"></a>00255 <span class="comment"> * When passing @c svn_io_file_del_none please don&#39;t forget to eventually</span>
<a name="l00256"></a>00256 <span class="comment"> * remove the temporary file to avoid filling up the system temp directory.</span>
<a name="l00257"></a>00257 <span class="comment"> * It is often appropriate to bind the lifetime of the temporary file to</span>
<a name="l00258"></a>00258 <span class="comment"> * the lifetime of a pool by using @c svn_io_file_del_on_pool_cleanup.</span>
<a name="l00259"></a>00259 <span class="comment"> *</span>
<a name="l00260"></a>00260 <span class="comment"> * Temporary allocations will be performed in @a scratch_pool.</span>
<a name="l00261"></a>00261 <span class="comment"> *</span>
<a name="l00262"></a>00262 <span class="comment"> * @since New in 1.6</span>
<a name="l00263"></a>00263 <span class="comment"> * @see svn_stream_open_unique()</span>
<a name="l00264"></a>00264 <span class="comment"> */</span>
<a name="l00265"></a>00265 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00266"></a>00266 <a class="code" href="svn__io_8h.html#ad1a7a7299bfe130c25becdd56ff0e870" title="Create a writable file, with an arbitrary and unique name, in the directory dirpath.">svn_io_open_unique_file3</a>(apr_file_t **file,
<a name="l00267"></a>00267                          <span class="keyword">const</span> <span class="keywordtype">char</span> **temp_path,
<a name="l00268"></a>00268                          <span class="keyword">const</span> <span class="keywordtype">char</span> *dirpath,
<a name="l00269"></a>00269                          <a class="code" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884" title="Used as an argument when creating temporary files to indicate when a file should be removed...">svn_io_file_del_t</a> delete_when,
<a name="l00270"></a>00270                          apr_pool_t *result_pool,
<a name="l00271"></a>00271                          apr_pool_t *scratch_pool);
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 <span class="comment"></span>
<a name="l00274"></a>00274 <span class="comment">/** Like svn_io_open_uniquely_named(), but takes a joined dirpath and</span>
<a name="l00275"></a>00275 <span class="comment"> * filename, and a single pool.</span>
<a name="l00276"></a>00276 <span class="comment"> *</span>
<a name="l00277"></a>00277 <span class="comment"> * @since New in 1.4</span>
<a name="l00278"></a>00278 <span class="comment"> *</span>
<a name="l00279"></a>00279 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.5 API</span>
<a name="l00280"></a>00280 <span class="comment"> */</span>
<a name="l00281"></a>00281 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00282"></a>00282 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00283"></a>00283 <a class="code" href="svn__io_8h.html#a58df63b2898a8a2a7df988b2d633eb1a" title="Like svn_io_open_uniquely_named(), but takes a joined dirpath and filename, and a single pool...">svn_io_open_unique_file2</a>(apr_file_t **f,
<a name="l00284"></a>00284                          <span class="keyword">const</span> <span class="keywordtype">char</span> **unique_name_p,
<a name="l00285"></a>00285                          <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00286"></a>00286                          <span class="keyword">const</span> <span class="keywordtype">char</span> *suffix,
<a name="l00287"></a>00287                          <a class="code" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884" title="Used as an argument when creating temporary files to indicate when a file should be removed...">svn_io_file_del_t</a> delete_when,
<a name="l00288"></a>00288                          apr_pool_t *pool);
<a name="l00289"></a>00289 <span class="comment"></span>
<a name="l00290"></a>00290 <span class="comment">/** Like svn_io_open_unique_file2, but can&#39;t delete on pool cleanup.</span>
<a name="l00291"></a>00291 <span class="comment"> *</span>
<a name="l00292"></a>00292 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.3 API</span>
<a name="l00293"></a>00293 <span class="comment"> *</span>
<a name="l00294"></a>00294 <span class="comment"> * @note In 1.4 the API was extended to require either @a f or</span>
<a name="l00295"></a>00295 <span class="comment"> *       @a unique_name_p (the other can be NULL).  Before that, both were</span>
<a name="l00296"></a>00296 <span class="comment"> *       required.</span>
<a name="l00297"></a>00297 <span class="comment"> */</span>
<a name="l00298"></a>00298 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00299"></a>00299 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00300"></a>00300 <a class="code" href="svn__io_8h.html#a2384857ad348105316edf6d1036d599f" title="Like svn_io_open_unique_file2, but can&#39;t delete on pool cleanup.">svn_io_open_unique_file</a>(apr_file_t **f,
<a name="l00301"></a>00301                         <span class="keyword">const</span> <span class="keywordtype">char</span> **unique_name_p,
<a name="l00302"></a>00302                         <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00303"></a>00303                         <span class="keyword">const</span> <span class="keywordtype">char</span> *suffix,
<a name="l00304"></a>00304                         <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> delete_on_close,
<a name="l00305"></a>00305                         apr_pool_t *pool);
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 <span class="comment"></span>
<a name="l00308"></a>00308 <span class="comment">/**</span>
<a name="l00309"></a>00309 <span class="comment"> * Like svn_io_open_unique_file(), except that instead of creating a</span>
<a name="l00310"></a>00310 <span class="comment"> * file, a symlink is generated that references the path @a dest.</span>
<a name="l00311"></a>00311 <span class="comment"> *</span>
<a name="l00312"></a>00312 <span class="comment"> * @since New in 1.1.</span>
<a name="l00313"></a>00313 <span class="comment"> */</span>
<a name="l00314"></a>00314 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00315"></a>00315 <a class="code" href="svn__io_8h.html#ad11db24f003c6f280e39d3c9675280dc" title="Like svn_io_open_unique_file(), except that instead of creating a file, a symlink is generated that r...">svn_io_create_unique_link</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> **unique_name_p,
<a name="l00316"></a>00316                           <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00317"></a>00317                           <span class="keyword">const</span> <span class="keywordtype">char</span> *dest,
<a name="l00318"></a>00318                           <span class="keyword">const</span> <span class="keywordtype">char</span> *suffix,
<a name="l00319"></a>00319                           apr_pool_t *pool);
<a name="l00320"></a>00320 
<a name="l00321"></a>00321 <span class="comment"></span>
<a name="l00322"></a>00322 <span class="comment">/**</span>
<a name="l00323"></a>00323 <span class="comment"> * Set @a *dest to the path that the symlink at @a path references.</span>
<a name="l00324"></a>00324 <span class="comment"> * Allocate the string from @a pool.</span>
<a name="l00325"></a>00325 <span class="comment"> *</span>
<a name="l00326"></a>00326 <span class="comment"> * @since New in 1.1.</span>
<a name="l00327"></a>00327 <span class="comment"> */</span>
<a name="l00328"></a>00328 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00329"></a>00329 <a class="code" href="svn__io_8h.html#a94e184ae6677e8b0b4cae0ec145b7b67" title="Set *dest to the path that the symlink at path references.">svn_io_read_link</a>(<a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> **dest,
<a name="l00330"></a>00330                  <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00331"></a>00331                  apr_pool_t *pool);
<a name="l00332"></a>00332 
<a name="l00333"></a>00333 <span class="comment"></span>
<a name="l00334"></a>00334 <span class="comment">/** Set @a *dir to a directory path (allocated in @a pool) deemed</span>
<a name="l00335"></a>00335 <span class="comment"> * usable for the creation of temporary files and subdirectories.</span>
<a name="l00336"></a>00336 <span class="comment"> */</span>
<a name="l00337"></a>00337 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00338"></a>00338 <a class="code" href="svn__io_8h.html#afbb4b86585411439008e934ede6f8b39" title="Set *dir to a directory path (allocated in pool) deemed usable for the creation of temporary files an...">svn_io_temp_dir</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> **dir,
<a name="l00339"></a>00339                 apr_pool_t *pool);
<a name="l00340"></a>00340 
<a name="l00341"></a>00341 <span class="comment"></span>
<a name="l00342"></a>00342 <span class="comment">/** Copy @a src to @a dst atomically, in a &quot;byte-for-byte&quot; manner.</span>
<a name="l00343"></a>00343 <span class="comment"> * Overwrite @a dst if it exists, else create it.  Both @a src and @a dst</span>
<a name="l00344"></a>00344 <span class="comment"> * are utf8-encoded filenames.  If @a copy_perms is TRUE, set @a dst&#39;s</span>
<a name="l00345"></a>00345 <span class="comment"> * permissions to match those of @a src.</span>
<a name="l00346"></a>00346 <span class="comment"> */</span>
<a name="l00347"></a>00347 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00348"></a>00348 <a class="code" href="svn__io_8h.html#ab4a3b25a089372c59aca6783a3a31595" title="Copy src to dst atomically, in a &quot;byte-for-byte&quot; manner.">svn_io_copy_file</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src,
<a name="l00349"></a>00349                  <span class="keyword">const</span> <span class="keywordtype">char</span> *dst,
<a name="l00350"></a>00350                  <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> copy_perms,
<a name="l00351"></a>00351                  apr_pool_t *pool);
<a name="l00352"></a>00352 
<a name="l00353"></a>00353 <span class="comment"></span>
<a name="l00354"></a>00354 <span class="comment">/** Copy permission flags from @a src onto the file at @a dst. Both</span>
<a name="l00355"></a>00355 <span class="comment"> * filenames are utf8-encoded filenames.</span>
<a name="l00356"></a>00356 <span class="comment"> *</span>
<a name="l00357"></a>00357 <span class="comment"> * @since New in 1.6.</span>
<a name="l00358"></a>00358 <span class="comment"> */</span>
<a name="l00359"></a>00359 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00360"></a>00360 <a class="code" href="svn__io_8h.html#a1c80cac675b5711e2c2c3e4aa6b4fbb1" title="Copy permission flags from src onto the file at dst.">svn_io_copy_perms</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src,
<a name="l00361"></a>00361                   <span class="keyword">const</span> <span class="keywordtype">char</span> *dst,
<a name="l00362"></a>00362                   apr_pool_t *pool);
<a name="l00363"></a>00363 
<a name="l00364"></a>00364 <span class="comment"></span>
<a name="l00365"></a>00365 <span class="comment">/**</span>
<a name="l00366"></a>00366 <span class="comment"> * Copy symbolic link @a src to @a dst atomically.  Overwrite @a dst</span>
<a name="l00367"></a>00367 <span class="comment"> * if it exists, else create it.  Both @a src and @a dst are</span>
<a name="l00368"></a>00368 <span class="comment"> * utf8-encoded filenames.  After copying, the @a dst link will point</span>
<a name="l00369"></a>00369 <span class="comment"> * to the same thing @a src does.</span>
<a name="l00370"></a>00370 <span class="comment"> *</span>
<a name="l00371"></a>00371 <span class="comment"> * @since New in 1.1.</span>
<a name="l00372"></a>00372 <span class="comment"> */</span>
<a name="l00373"></a>00373 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00374"></a>00374 <a class="code" href="svn__io_8h.html#a539dc0c726940a466a3bc2358d6b85d8" title="Copy symbolic link src to dst atomically.">svn_io_copy_link</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src,
<a name="l00375"></a>00375                  <span class="keyword">const</span> <span class="keywordtype">char</span> *dst,
<a name="l00376"></a>00376                  apr_pool_t *pool);
<a name="l00377"></a>00377 
<a name="l00378"></a>00378 <span class="comment"></span>
<a name="l00379"></a>00379 <span class="comment">/** Recursively copy directory @a src into @a dst_parent, as a new entry named</span>
<a name="l00380"></a>00380 <span class="comment"> * @a dst_basename.  If @a dst_basename already exists in @a dst_parent,</span>
<a name="l00381"></a>00381 <span class="comment"> * return error.  @a copy_perms will be passed through to svn_io_copy_file()</span>
<a name="l00382"></a>00382 <span class="comment"> * when any files are copied.  @a src, @a dst_parent, and @a dst_basename are</span>
<a name="l00383"></a>00383 <span class="comment"> * all utf8-encoded.</span>
<a name="l00384"></a>00384 <span class="comment"> *</span>
<a name="l00385"></a>00385 <span class="comment"> * If @a cancel_func is non-NULL, invoke it with @a cancel_baton at</span>
<a name="l00386"></a>00386 <span class="comment"> * various points during the operation.  If it returns any error</span>
<a name="l00387"></a>00387 <span class="comment"> * (typically #SVN_ERR_CANCELLED), return that error immediately.</span>
<a name="l00388"></a>00388 <span class="comment"> */</span>
<a name="l00389"></a>00389 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00390"></a>00390 <a class="code" href="svn__io_8h.html#afcaeff1ea5e9ae65c8188678a1e042bf" title="Recursively copy directory src into dst_parent, as a new entry named dst_basename.">svn_io_copy_dir_recursively</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src,
<a name="l00391"></a>00391                             <span class="keyword">const</span> <span class="keywordtype">char</span> *dst_parent,
<a name="l00392"></a>00392                             <span class="keyword">const</span> <span class="keywordtype">char</span> *dst_basename,
<a name="l00393"></a>00393                             <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> copy_perms,
<a name="l00394"></a>00394                             <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l00395"></a>00395                             <span class="keywordtype">void</span> *cancel_baton,
<a name="l00396"></a>00396                             apr_pool_t *pool);
<a name="l00397"></a>00397 
<a name="l00398"></a>00398 <span class="comment"></span>
<a name="l00399"></a>00399 <span class="comment">/** Create directory @a path on the file system, creating intermediate</span>
<a name="l00400"></a>00400 <span class="comment"> * directories as required, like &lt;tt&gt;mkdir -p&lt;/tt&gt;.  Report no error if @a</span>
<a name="l00401"></a>00401 <span class="comment"> * path already exists.  @a path is utf8-encoded.</span>
<a name="l00402"></a>00402 <span class="comment"> *</span>
<a name="l00403"></a>00403 <span class="comment"> * This is essentially a wrapper for apr_dir_make_recursive(), passing</span>
<a name="l00404"></a>00404 <span class="comment"> * @c APR_OS_DEFAULT as the permissions.</span>
<a name="l00405"></a>00405 <span class="comment"> */</span>
<a name="l00406"></a>00406 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00407"></a>00407 <a class="code" href="svn__io_8h.html#a0ef4d0c5c6a86ab48f515b4a31efad70" title="Create directory path on the file system, creating intermediate directories as required, like mkdir -p.">svn_io_make_dir_recursively</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00408"></a>00408                             apr_pool_t *pool);
<a name="l00409"></a>00409 
<a name="l00410"></a>00410 <span class="comment"></span>
<a name="l00411"></a>00411 <span class="comment">/** Set @a *is_empty_p to @c TRUE if directory @a path is empty, else to</span>
<a name="l00412"></a>00412 <span class="comment"> * @c FALSE if it is not empty.  @a path must be a directory, and is</span>
<a name="l00413"></a>00413 <span class="comment"> * utf8-encoded.  Use @a pool for temporary allocation.</span>
<a name="l00414"></a>00414 <span class="comment"> */</span>
<a name="l00415"></a>00415 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00416"></a>00416 <a class="code" href="svn__io_8h.html#acea0b7ecaacd02da03a5cfaebe27067a" title="Set *is_empty_p to TRUE if directory path is empty, else to FALSE if it is not empty.">svn_io_dir_empty</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *is_empty_p,
<a name="l00417"></a>00417                  <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00418"></a>00418                  apr_pool_t *pool);
<a name="l00419"></a>00419 
<a name="l00420"></a>00420 <span class="comment"></span>
<a name="l00421"></a>00421 <span class="comment">/** Append @a src to @a dst.  @a dst will be appended to if it exists, else it</span>
<a name="l00422"></a>00422 <span class="comment"> * will be created.  Both @a src and @a dst are utf8-encoded.</span>
<a name="l00423"></a>00423 <span class="comment"> */</span>
<a name="l00424"></a>00424 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00425"></a>00425 <a class="code" href="svn__io_8h.html#a967781b8e5991f3c72f125a333661d1b" title="Append src to dst.">svn_io_append_file</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src,
<a name="l00426"></a>00426                    <span class="keyword">const</span> <span class="keywordtype">char</span> *dst,
<a name="l00427"></a>00427                    apr_pool_t *pool);
<a name="l00428"></a>00428 
<a name="l00429"></a>00429 <span class="comment"></span>
<a name="l00430"></a>00430 <span class="comment">/** Make a file as read-only as the operating system allows.</span>
<a name="l00431"></a>00431 <span class="comment"> * @a path is the utf8-encoded path to the file. If @a ignore_enoent is</span>
<a name="l00432"></a>00432 <span class="comment"> * @c TRUE, don&#39;t fail if the target file doesn&#39;t exist.</span>
<a name="l00433"></a>00433 <span class="comment"> *</span>
<a name="l00434"></a>00434 <span class="comment"> * If @a path is a symlink, do nothing.</span>
<a name="l00435"></a>00435 <span class="comment"> *</span>
<a name="l00436"></a>00436 <span class="comment"> * @note If @a path is a directory, act on it as though it were a</span>
<a name="l00437"></a>00437 <span class="comment"> * file, as described above, but note that you probably don&#39;t want to</span>
<a name="l00438"></a>00438 <span class="comment"> * call this function on directories.  We have left it effective on</span>
<a name="l00439"></a>00439 <span class="comment"> * directories for compatibility reasons, but as its name implies, it</span>
<a name="l00440"></a>00440 <span class="comment"> * should be used only for files.</span>
<a name="l00441"></a>00441 <span class="comment"> */</span>
<a name="l00442"></a>00442 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00443"></a>00443 <a class="code" href="svn__io_8h.html#a185f4ee690965e622aa1748339847ae5" title="Make a file as read-only as the operating system allows.">svn_io_set_file_read_only</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00444"></a>00444                           <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> ignore_enoent,
<a name="l00445"></a>00445                           apr_pool_t *pool);
<a name="l00446"></a>00446 
<a name="l00447"></a>00447 <span class="comment"></span>
<a name="l00448"></a>00448 <span class="comment">/** Make a file as writable as the operating system allows.</span>
<a name="l00449"></a>00449 <span class="comment"> * @a path is the utf8-encoded path to the file.  If @a ignore_enoent is</span>
<a name="l00450"></a>00450 <span class="comment"> * @c TRUE, don&#39;t fail if the target file doesn&#39;t exist.</span>
<a name="l00451"></a>00451 <span class="comment"> * @warning On Unix this function will do the equivalent of chmod a+w path.</span>
<a name="l00452"></a>00452 <span class="comment"> * If this is not what you want you should not use this function, but rather</span>
<a name="l00453"></a>00453 <span class="comment"> * use apr_file_perms_set().</span>
<a name="l00454"></a>00454 <span class="comment"> *</span>
<a name="l00455"></a>00455 <span class="comment"> * If @a path is a symlink, do nothing.</span>
<a name="l00456"></a>00456 <span class="comment"> *</span>
<a name="l00457"></a>00457 <span class="comment"> * @note If @a path is a directory, act on it as though it were a</span>
<a name="l00458"></a>00458 <span class="comment"> * file, as described above, but note that you probably don&#39;t want to</span>
<a name="l00459"></a>00459 <span class="comment"> * call this function on directories.  We have left it effective on</span>
<a name="l00460"></a>00460 <span class="comment"> * directories for compatibility reasons, but as its name implies, it</span>
<a name="l00461"></a>00461 <span class="comment"> * should be used only for files.</span>
<a name="l00462"></a>00462 <span class="comment"> */</span>
<a name="l00463"></a>00463 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00464"></a>00464 <a class="code" href="svn__io_8h.html#ac407a16bc12b63d2e57a3e2375490ad5" title="Make a file as writable as the operating system allows.">svn_io_set_file_read_write</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00465"></a>00465                            <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> ignore_enoent,
<a name="l00466"></a>00466                            apr_pool_t *pool);
<a name="l00467"></a>00467 
<a name="l00468"></a>00468 <span class="comment"></span>
<a name="l00469"></a>00469 <span class="comment">/** Similar to svn_io_set_file_read_* functions.</span>
<a name="l00470"></a>00470 <span class="comment"> * Change the read-write permissions of a file.</span>
<a name="l00471"></a>00471 <span class="comment"> * @since New in 1.1.</span>
<a name="l00472"></a>00472 <span class="comment"> *</span>
<a name="l00473"></a>00473 <span class="comment"> * When making @a path read-write on operating systems with unix style</span>
<a name="l00474"></a>00474 <span class="comment"> * permissions, set the permissions on @a path to the permissions that</span>
<a name="l00475"></a>00475 <span class="comment"> * are set when a new file is created (effectively honoring the user&#39;s</span>
<a name="l00476"></a>00476 <span class="comment"> * umask).</span>
<a name="l00477"></a>00477 <span class="comment"> *</span>
<a name="l00478"></a>00478 <span class="comment"> * When making the file read-only on operating systems with unix style</span>
<a name="l00479"></a>00479 <span class="comment"> * permissions, remove all write permissions.</span>
<a name="l00480"></a>00480 <span class="comment"> *</span>
<a name="l00481"></a>00481 <span class="comment"> * On other operating systems, toggle the file&#39;s &quot;writability&quot; as much as</span>
<a name="l00482"></a>00482 <span class="comment"> * the operating system allows.</span>
<a name="l00483"></a>00483 <span class="comment"> *</span>
<a name="l00484"></a>00484 <span class="comment"> * @a path is the utf8-encoded path to the file.  If @a enable_write</span>
<a name="l00485"></a>00485 <span class="comment"> * is @c TRUE, then make the file read-write.  If @c FALSE, make it</span>
<a name="l00486"></a>00486 <span class="comment"> * read-only.  If @a ignore_enoent is @c TRUE, don&#39;t fail if the target</span>
<a name="l00487"></a>00487 <span class="comment"> * file doesn&#39;t exist.</span>
<a name="l00488"></a>00488 <span class="comment"> *</span>
<a name="l00489"></a>00489 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.3 API.</span>
<a name="l00490"></a>00490 <span class="comment"> */</span>
<a name="l00491"></a>00491 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00492"></a>00492 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00493"></a>00493 <a class="code" href="svn__io_8h.html#a02cd461341834d955e258a70def4f56f" title="Similar to svn_io_set_file_read_* functions.">svn_io_set_file_read_write_carefully</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00494"></a>00494                                      <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> enable_write,
<a name="l00495"></a>00495                                      <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> ignore_enoent,
<a name="l00496"></a>00496                                      apr_pool_t *pool);
<a name="l00497"></a>00497 <span class="comment"></span>
<a name="l00498"></a>00498 <span class="comment">/** Set @a path&#39;s &quot;executability&quot; (but do nothing if it is a symlink).</span>
<a name="l00499"></a>00499 <span class="comment"> *</span>
<a name="l00500"></a>00500 <span class="comment"> * @a path is the utf8-encoded path to the file.  If @a executable</span>
<a name="l00501"></a>00501 <span class="comment"> * is @c TRUE, then make the file executable.  If @c FALSE, make it</span>
<a name="l00502"></a>00502 <span class="comment"> * non-executable.  If @a ignore_enoent is @c TRUE, don&#39;t fail if the target</span>
<a name="l00503"></a>00503 <span class="comment"> * file doesn&#39;t exist.</span>
<a name="l00504"></a>00504 <span class="comment"> *</span>
<a name="l00505"></a>00505 <span class="comment"> * When making the file executable on operating systems with unix style</span>
<a name="l00506"></a>00506 <span class="comment"> * permissions, never add an execute permission where there is not</span>
<a name="l00507"></a>00507 <span class="comment"> * already a read permission: that is, only make the file executable</span>
<a name="l00508"></a>00508 <span class="comment"> * for the user, group or world if the corresponding read permission</span>
<a name="l00509"></a>00509 <span class="comment"> * is already set for user, group or world.</span>
<a name="l00510"></a>00510 <span class="comment"> *</span>
<a name="l00511"></a>00511 <span class="comment"> * When making the file non-executable on operating systems with unix style</span>
<a name="l00512"></a>00512 <span class="comment"> * permissions, remove all execute permissions.</span>
<a name="l00513"></a>00513 <span class="comment"> *</span>
<a name="l00514"></a>00514 <span class="comment"> * On other operating systems, toggle the file&#39;s &quot;executability&quot; as much as</span>
<a name="l00515"></a>00515 <span class="comment"> * the operating system allows.</span>
<a name="l00516"></a>00516 <span class="comment"> *</span>
<a name="l00517"></a>00517 <span class="comment"> * @note If @a path is a directory, act on it as though it were a</span>
<a name="l00518"></a>00518 <span class="comment"> * file, as described above, but note that you probably don&#39;t want to</span>
<a name="l00519"></a>00519 <span class="comment"> * call this function on directories.  We have left it effective on</span>
<a name="l00520"></a>00520 <span class="comment"> * directories for compatibility reasons, but as its name implies, it</span>
<a name="l00521"></a>00521 <span class="comment"> * should be used only for files.</span>
<a name="l00522"></a>00522 <span class="comment"> */</span>
<a name="l00523"></a>00523 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00524"></a>00524 <a class="code" href="svn__io_8h.html#a358a735a173b43509cf4060b73930cf5" title="Set path&#39;s &quot;executability&quot; (but do nothing if it is a symlink).">svn_io_set_file_executable</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00525"></a>00525                            <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> executable,
<a name="l00526"></a>00526                            <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> ignore_enoent,
<a name="l00527"></a>00527                            apr_pool_t *pool);
<a name="l00528"></a>00528 <span class="comment"></span>
<a name="l00529"></a>00529 <span class="comment">/** Determine whether a file is executable by the current user.</span>
<a name="l00530"></a>00530 <span class="comment"> * Set @a *executable to @c TRUE if the file @a path is executable by the</span>
<a name="l00531"></a>00531 <span class="comment"> * current user, otherwise set it to @c FALSE.</span>
<a name="l00532"></a>00532 <span class="comment"> *</span>
<a name="l00533"></a>00533 <span class="comment"> * On Windows and on platforms without userids, always returns @c FALSE.</span>
<a name="l00534"></a>00534 <span class="comment"> */</span>
<a name="l00535"></a>00535 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00536"></a>00536 <a class="code" href="svn__io_8h.html#a2cb981f75792c99480f93b83ae9265d2" title="Determine whether a file is executable by the current user.">svn_io_is_file_executable</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *executable,
<a name="l00537"></a>00537                           <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00538"></a>00538                           apr_pool_t *pool);
<a name="l00539"></a>00539 
<a name="l00540"></a>00540 <span class="comment"></span>
<a name="l00541"></a>00541 <span class="comment">/** Read a line from @a file into @a buf, but not exceeding @a *limit bytes.</span>
<a name="l00542"></a>00542 <span class="comment"> * Does not include newline, instead &#39;\\0&#39; is put there.</span>
<a name="l00543"></a>00543 <span class="comment"> * Length (as in strlen) is returned in @a *limit.</span>
<a name="l00544"></a>00544 <span class="comment"> * @a buf should be pre-allocated.</span>
<a name="l00545"></a>00545 <span class="comment"> * @a file should be already opened.</span>
<a name="l00546"></a>00546 <span class="comment"> *</span>
<a name="l00547"></a>00547 <span class="comment"> * When the file is out of lines, @c APR_EOF will be returned.</span>
<a name="l00548"></a>00548 <span class="comment"> */</span>
<a name="l00549"></a>00549 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00550"></a>00550 <a class="code" href="svn__io_8h.html#ab3f73a4554d78dbbc3d9e0f29943380e" title="Read a line from file into buf, but not exceeding *limit bytes.">svn_io_read_length_line</a>(apr_file_t *file,
<a name="l00551"></a>00551                         <span class="keywordtype">char</span> *buf,
<a name="l00552"></a>00552                         apr_size_t *limit,
<a name="l00553"></a>00553                         apr_pool_t *pool);
<a name="l00554"></a>00554 
<a name="l00555"></a>00555 <span class="comment"></span>
<a name="l00556"></a>00556 <span class="comment">/** Set @a *apr_time to the time of last modification of the contents of the</span>
<a name="l00557"></a>00557 <span class="comment"> * file @a path.  @a path is utf8-encoded.</span>
<a name="l00558"></a>00558 <span class="comment"> *</span>
<a name="l00559"></a>00559 <span class="comment"> * @note This is the APR mtime which corresponds to the traditional mtime</span>
<a name="l00560"></a>00560 <span class="comment"> * on Unix, and the last write time on Windows.</span>
<a name="l00561"></a>00561 <span class="comment"> */</span>
<a name="l00562"></a>00562 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00563"></a>00563 <a class="code" href="svn__io_8h.html#ae9ed0a769c24087316ebcc868fb559a0" title="Set *apr_time to the time of last modification of the contents of the file path.">svn_io_file_affected_time</a>(apr_time_t *apr_time,
<a name="l00564"></a>00564                           <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00565"></a>00565                           apr_pool_t *pool);
<a name="l00566"></a>00566 <span class="comment"></span>
<a name="l00567"></a>00567 <span class="comment">/** Set the timestamp of file @a path to @a apr_time.  @a path is</span>
<a name="l00568"></a>00568 <span class="comment"> *  utf8-encoded.</span>
<a name="l00569"></a>00569 <span class="comment"> *</span>
<a name="l00570"></a>00570 <span class="comment"> * @note This is the APR mtime which corresponds to the traditional mtime</span>
<a name="l00571"></a>00571 <span class="comment"> * on Unix, and the last write time on Windows.</span>
<a name="l00572"></a>00572 <span class="comment"> */</span>
<a name="l00573"></a>00573 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00574"></a>00574 <a class="code" href="svn__io_8h.html#a474cc5427ee6e900ff8c96559e368fe6" title="Set the timestamp of file path to apr_time.">svn_io_set_file_affected_time</a>(apr_time_t apr_time,
<a name="l00575"></a>00575                               <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00576"></a>00576                               apr_pool_t *pool);
<a name="l00577"></a>00577 <span class="comment"></span>
<a name="l00578"></a>00578 <span class="comment">/** Sleep to ensure that any files modified after we exit have a different</span>
<a name="l00579"></a>00579 <span class="comment"> * timestamp than the one we recorded. If @a path is not NULL, check if we</span>
<a name="l00580"></a>00580 <span class="comment"> * can determine how long we should wait for a new timestamp on the filesystem</span>
<a name="l00581"></a>00581 <span class="comment"> * containing @a path, an existing file or directory. If @a path is NULL or we</span>
<a name="l00582"></a>00582 <span class="comment"> * can&#39;t determine the timestamp resolution, sleep until the next second.</span>
<a name="l00583"></a>00583 <span class="comment"> *</span>
<a name="l00584"></a>00584 <span class="comment"> * Use @a pool for any necessary allocations. @a pool can be null if @a path</span>
<a name="l00585"></a>00585 <span class="comment"> * is NULL.</span>
<a name="l00586"></a>00586 <span class="comment"> *</span>
<a name="l00587"></a>00587 <span class="comment"> * Errors while retrieving the timestamp resolution will result in sleeping</span>
<a name="l00588"></a>00588 <span class="comment"> * to the next second, to keep the working copy stable in error conditions.</span>
<a name="l00589"></a>00589 <span class="comment"> *</span>
<a name="l00590"></a>00590 <span class="comment"> * @since New in 1.6.</span>
<a name="l00591"></a>00591 <span class="comment"> */</span>
<a name="l00592"></a>00592 <span class="keywordtype">void</span>
<a name="l00593"></a>00593 <a class="code" href="svn__io_8h.html#a07a20fcb725f0941e6c53410ad5c12e4" title="Sleep to ensure that any files modified after we exit have a different timestamp than the one we reco...">svn_io_sleep_for_timestamps</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *path, apr_pool_t *pool);
<a name="l00594"></a>00594 <span class="comment"></span>
<a name="l00595"></a>00595 <span class="comment">/** Set @a *different_p to non-zero if @a file1 and @a file2 have different</span>
<a name="l00596"></a>00596 <span class="comment"> * sizes, else set to zero.  Both @a file1 and @a file2 are utf8-encoded.</span>
<a name="l00597"></a>00597 <span class="comment"> *</span>
<a name="l00598"></a>00598 <span class="comment"> * Setting @a *different_p to zero does not mean the files definitely</span>
<a name="l00599"></a>00599 <span class="comment"> * have the same size, it merely means that the sizes are not</span>
<a name="l00600"></a>00600 <span class="comment"> * definitely different.  That is, if the size of one or both files</span>
<a name="l00601"></a>00601 <span class="comment"> * cannot be determined, then the sizes are not known to be different,</span>
<a name="l00602"></a>00602 <span class="comment"> * so @a *different_p is set to 0.</span>
<a name="l00603"></a>00603 <span class="comment"> */</span>
<a name="l00604"></a>00604 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00605"></a>00605 <a class="code" href="svn__io_8h.html#a759d9be046832ba2e1f8d5408a7023d1" title="Set *different_p to non-zero if file1 and file2 have different sizes, else set to zero...">svn_io_filesizes_different_p</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *different_p,
<a name="l00606"></a>00606                              <span class="keyword">const</span> <span class="keywordtype">char</span> *file1,
<a name="l00607"></a>00607                              <span class="keyword">const</span> <span class="keywordtype">char</span> *file2,
<a name="l00608"></a>00608                              apr_pool_t *pool);
<a name="l00609"></a>00609 
<a name="l00610"></a>00610 <span class="comment"></span>
<a name="l00611"></a>00611 <span class="comment">/** Return in @a *checksum the checksum of type @a kind of @a file</span>
<a name="l00612"></a>00612 <span class="comment"> * Use @a pool for temporary allocations and to allocate @a *checksum.</span>
<a name="l00613"></a>00613 <span class="comment"> *</span>
<a name="l00614"></a>00614 <span class="comment"> * @since New in 1.6.</span>
<a name="l00615"></a>00615 <span class="comment"> */</span>
<a name="l00616"></a>00616 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00617"></a>00617 <a class="code" href="svn__io_8h.html#aa9bee2a2151cc7c57e9a01003dc6d2b6" title="Return in *checksum the checksum of type kind of file Use pool for temporary allocations and to alloc...">svn_io_file_checksum2</a>(<a class="code" href="structsvn__checksum__t.html" title="A generic checksum representation.">svn_checksum_t</a> **checksum,
<a name="l00618"></a>00618                       <span class="keyword">const</span> <span class="keywordtype">char</span> *file,
<a name="l00619"></a>00619                       <a class="code" href="svn__checksum_8h.html#a7a6c373d03d7e6ec6b832a039f5e0aa1" title="Various types of checksums.">svn_checksum_kind_t</a> kind,
<a name="l00620"></a>00620                       apr_pool_t *pool);
<a name="l00621"></a>00621 
<a name="l00622"></a>00622 <span class="comment"></span>
<a name="l00623"></a>00623 <span class="comment">/** Put the md5 checksum of @a file into @a digest.</span>
<a name="l00624"></a>00624 <span class="comment"> * @a digest points to @c APR_MD5_DIGESTSIZE bytes of storage.</span>
<a name="l00625"></a>00625 <span class="comment"> * Use @a pool only for temporary allocations.</span>
<a name="l00626"></a>00626 <span class="comment"> *</span>
<a name="l00627"></a>00627 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.5 API.</span>
<a name="l00628"></a>00628 <span class="comment"> */</span>
<a name="l00629"></a>00629 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00630"></a>00630 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00631"></a>00631 <a class="code" href="svn__io_8h.html#ad7384374afef049adcc8485de4083186" title="Put the md5 checksum of file into digest.">svn_io_file_checksum</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> digest[],
<a name="l00632"></a>00632                      <span class="keyword">const</span> <span class="keywordtype">char</span> *file,
<a name="l00633"></a>00633                      apr_pool_t *pool);
<a name="l00634"></a>00634 
<a name="l00635"></a>00635 <span class="comment"></span>
<a name="l00636"></a>00636 <span class="comment">/** Set @a *same to TRUE if @a file1 and @a file2 have the same</span>
<a name="l00637"></a>00637 <span class="comment"> * contents, else set it to FALSE.  Use @a pool for temporary allocations.</span>
<a name="l00638"></a>00638 <span class="comment"> */</span>
<a name="l00639"></a>00639 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00640"></a>00640 <a class="code" href="svn__io_8h.html#ac3ddb92f73a78796c75a0790bc9cf727" title="Set *same to TRUE if file1 and file2 have the same contents, else set it to FALSE.">svn_io_files_contents_same_p</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *same,
<a name="l00641"></a>00641                              <span class="keyword">const</span> <span class="keywordtype">char</span> *file1,
<a name="l00642"></a>00642                              <span class="keyword">const</span> <span class="keywordtype">char</span> *file2,
<a name="l00643"></a>00643                              apr_pool_t *pool);
<a name="l00644"></a>00644 <span class="comment"></span>
<a name="l00645"></a>00645 <span class="comment">/** Create file at utf8-encoded @a file with contents @a contents.</span>
<a name="l00646"></a>00646 <span class="comment"> * @a file must not already exist.</span>
<a name="l00647"></a>00647 <span class="comment"> * Use @a pool for memory allocations.</span>
<a name="l00648"></a>00648 <span class="comment"> */</span>
<a name="l00649"></a>00649 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00650"></a>00650 <a class="code" href="svn__io_8h.html#a36cd10dc8fb91f40c0df79edf8fc3a18" title="Create file at utf8-encoded file with contents contents.">svn_io_file_create</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *file,
<a name="l00651"></a>00651                    <span class="keyword">const</span> <span class="keywordtype">char</span> *contents,
<a name="l00652"></a>00652                    apr_pool_t *pool);
<a name="l00653"></a>00653 <span class="comment"></span>
<a name="l00654"></a>00654 <span class="comment">/**</span>
<a name="l00655"></a>00655 <span class="comment"> * Lock file at @a lock_file. If @a exclusive is TRUE,</span>
<a name="l00656"></a>00656 <span class="comment"> * obtain exclusive lock, otherwise obtain shared lock.</span>
<a name="l00657"></a>00657 <span class="comment"> * Lock will be automatically released when @a pool is cleared or destroyed.</span>
<a name="l00658"></a>00658 <span class="comment"> * Use @a pool for memory allocations.</span>
<a name="l00659"></a>00659 <span class="comment"> *</span>
<a name="l00660"></a>00660 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.0 API.</span>
<a name="l00661"></a>00661 <span class="comment"> */</span>
<a name="l00662"></a>00662 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00663"></a>00663 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00664"></a>00664 <a class="code" href="svn__io_8h.html#a98ada015dbb0b5d467375edba000dd4b" title="Lock file at lock_file.">svn_io_file_lock</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *lock_file,
<a name="l00665"></a>00665                  <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> exclusive,
<a name="l00666"></a>00666                  apr_pool_t *pool);
<a name="l00667"></a>00667 <span class="comment"></span>
<a name="l00668"></a>00668 <span class="comment">/**</span>
<a name="l00669"></a>00669 <span class="comment"> * Lock file at @a lock_file. If @a exclusive is TRUE,</span>
<a name="l00670"></a>00670 <span class="comment"> * obtain exclusive lock, otherwise obtain shared lock.</span>
<a name="l00671"></a>00671 <span class="comment"> *</span>
<a name="l00672"></a>00672 <span class="comment"> * If @a nonblocking is TRUE, do not wait for the lock if it</span>
<a name="l00673"></a>00673 <span class="comment"> * is not available: throw an error instead.</span>
<a name="l00674"></a>00674 <span class="comment"> *</span>
<a name="l00675"></a>00675 <span class="comment"> * Lock will be automatically released when @a pool is cleared or destroyed.</span>
<a name="l00676"></a>00676 <span class="comment"> * Use @a pool for memory allocations.</span>
<a name="l00677"></a>00677 <span class="comment"> *</span>
<a name="l00678"></a>00678 <span class="comment"> * @since New in 1.1.</span>
<a name="l00679"></a>00679 <span class="comment"> */</span>
<a name="l00680"></a>00680 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00681"></a>00681 <a class="code" href="svn__io_8h.html#a256b06e01a023d03c47e8a29f8a0344a" title="Lock file at lock_file.">svn_io_file_lock2</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *lock_file,
<a name="l00682"></a>00682                   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> exclusive,
<a name="l00683"></a>00683                   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> nonblocking,
<a name="l00684"></a>00684                   apr_pool_t *pool);<span class="comment"></span>
<a name="l00685"></a>00685 <span class="comment">/**</span>
<a name="l00686"></a>00686 <span class="comment"> * Flush any unwritten data from @a file to disk.  Use @a pool for</span>
<a name="l00687"></a>00687 <span class="comment"> * memory allocations.</span>
<a name="l00688"></a>00688 <span class="comment"> *</span>
<a name="l00689"></a>00689 <span class="comment"> * @since New in 1.1.</span>
<a name="l00690"></a>00690 <span class="comment"> */</span>
<a name="l00691"></a>00691 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00692"></a>00692 <a class="code" href="svn__io_8h.html#a1738477996c854ac51fbd77cccaddfb5" title="Flush any unwritten data from file to disk.">svn_io_file_flush_to_disk</a>(apr_file_t *file,
<a name="l00693"></a>00693                           apr_pool_t *pool);
<a name="l00694"></a>00694 <span class="comment"></span>
<a name="l00695"></a>00695 <span class="comment">/** Copy the file whose basename (or relative path) is @a file within</span>
<a name="l00696"></a>00696 <span class="comment"> * directory @a src_path to the same basename (or relative path) within</span>
<a name="l00697"></a>00697 <span class="comment"> * directory @a dest_path.  Overwrite the destination file if it already</span>
<a name="l00698"></a>00698 <span class="comment"> * exists.  The destination directory (including any directory</span>
<a name="l00699"></a>00699 <span class="comment"> * components in @a name) must already exist.  Set the destination</span>
<a name="l00700"></a>00700 <span class="comment"> * file&#39;s permissions to match those of the source.  Use @a pool for</span>
<a name="l00701"></a>00701 <span class="comment"> * memory allocations.</span>
<a name="l00702"></a>00702 <span class="comment"> */</span>
<a name="l00703"></a>00703 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00704"></a>00704 <a class="code" href="svn__io_8h.html#ae6c6d960b1f742e2c00f8d7dd6ea1c5d" title="Copy the file whose basename (or relative path) is file within directory src_path to the same basenam...">svn_io_dir_file_copy</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src_path,
<a name="l00705"></a>00705                      <span class="keyword">const</span> <span class="keywordtype">char</span> *dest_path,
<a name="l00706"></a>00706                      <span class="keyword">const</span> <span class="keywordtype">char</span> *file,
<a name="l00707"></a>00707                      apr_pool_t *pool);
<a name="l00708"></a>00708 
<a name="l00709"></a>00709 <span class="comment"></span>
<a name="l00710"></a>00710 <span class="comment">/** Generic byte-streams</span>
<a name="l00711"></a>00711 <span class="comment"> *</span>
<a name="l00712"></a>00712 <span class="comment"> * @defgroup svn_io_byte_streams Generic byte streams</span>
<a name="l00713"></a>00713 <span class="comment"> * @{</span>
<a name="l00714"></a>00714 <span class="comment"> */</span>
<a name="l00715"></a>00715 <span class="comment"></span>
<a name="l00716"></a>00716 <span class="comment">/** An abstract stream of bytes--either incoming or outgoing or both.</span>
<a name="l00717"></a>00717 <span class="comment"> *</span>
<a name="l00718"></a>00718 <span class="comment"> * The creator of a stream sets functions to handle read and write.</span>
<a name="l00719"></a>00719 <span class="comment"> * Both of these handlers accept a baton whose value is determined at</span>
<a name="l00720"></a>00720 <span class="comment"> * stream creation time; this baton can point to a structure</span>
<a name="l00721"></a>00721 <span class="comment"> * containing data associated with the stream.  If a caller attempts</span>
<a name="l00722"></a>00722 <span class="comment"> * to invoke a handler which has not been set, it will generate a</span>
<a name="l00723"></a>00723 <span class="comment"> * runtime assertion failure.  The creator can also set a handler for</span>
<a name="l00724"></a>00724 <span class="comment"> * close requests so that it can flush buffered data or whatever;</span>
<a name="l00725"></a>00725 <span class="comment"> * if a close handler is not specified, a close request on the stream</span>
<a name="l00726"></a>00726 <span class="comment"> * will simply be ignored.  Note that svn_stream_close() does not</span>
<a name="l00727"></a>00727 <span class="comment"> * deallocate the memory used to allocate the stream structure; free</span>
<a name="l00728"></a>00728 <span class="comment"> * the pool you created the stream in to free that memory.</span>
<a name="l00729"></a>00729 <span class="comment"> *</span>
<a name="l00730"></a>00730 <span class="comment"> * The read and write handlers accept length arguments via pointer.</span>
<a name="l00731"></a>00731 <span class="comment"> * On entry to the handler, the pointed-to value should be the amount</span>
<a name="l00732"></a>00732 <span class="comment"> * of data which can be read or the amount of data to write.  When the</span>
<a name="l00733"></a>00733 <span class="comment"> * handler returns, the value is reset to the amount of data actually</span>
<a name="l00734"></a>00734 <span class="comment"> * read or written.  Handlers are obliged to complete a read or write</span>
<a name="l00735"></a>00735 <span class="comment"> * to the maximum extent possible; thus, a short read with no</span>
<a name="l00736"></a>00736 <span class="comment"> * associated error implies the end of the input stream, and a short</span>
<a name="l00737"></a>00737 <span class="comment"> * write should never occur without an associated error.</span>
<a name="l00738"></a>00738 <span class="comment"> *</span>
<a name="l00739"></a>00739 <span class="comment"> * In Subversion 1.7 reset support was added as an optional feature of</span>
<a name="l00740"></a>00740 <span class="comment"> * streams. If a stream implements resetting it allows reading the data</span>
<a name="l00741"></a>00741 <span class="comment"> * again after a successful call to svn_stream_reset().</span>
<a name="l00742"></a>00742 <span class="comment"> */</span>
<a name="l00743"></a><a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af">00743</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a>;
<a name="l00744"></a>00744 
<a name="l00745"></a>00745 
<a name="l00746"></a>00746 <span class="comment"></span>
<a name="l00747"></a>00747 <span class="comment">/** Read handler function for a generic stream.  @see svn_stream_t. */</span>
<a name="l00748"></a><a class="code" href="group__svn__io__byte__streams.html#ga9a8939b5258b070a48aa1e0cd154909a">00748</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_read_fn_t)(<span class="keywordtype">void</span> *baton,
<a name="l00749"></a>00749                                       <span class="keywordtype">char</span> *buffer,
<a name="l00750"></a>00750                                       apr_size_t *len);
<a name="l00751"></a>00751 <span class="comment"></span>
<a name="l00752"></a>00752 <span class="comment">/** Skip data handler function for a generic stream.  @see svn_stream_t</span>
<a name="l00753"></a>00753 <span class="comment"> * and svn_stream_skip().</span>
<a name="l00754"></a>00754 <span class="comment"> * @since New in 1.7.</span>
<a name="l00755"></a>00755 <span class="comment"> */</span>
<a name="l00756"></a><a class="code" href="group__svn__io__byte__streams.html#ga2c0bc2f0ebff96271f427013fece2a39">00756</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_stream_skip_fn_t)(<span class="keywordtype">void</span> *baton,
<a name="l00757"></a>00757                                              apr_size_t len);
<a name="l00758"></a>00758 <span class="comment"></span>
<a name="l00759"></a>00759 <span class="comment">/** Write handler function for a generic stream.  @see svn_stream_t. */</span>
<a name="l00760"></a><a class="code" href="group__svn__io__byte__streams.html#gaa79398b116a9209eb3a79947a6066f54">00760</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_write_fn_t)(<span class="keywordtype">void</span> *baton,
<a name="l00761"></a>00761                                        <span class="keyword">const</span> <span class="keywordtype">char</span> *data,
<a name="l00762"></a>00762                                        apr_size_t *len);
<a name="l00763"></a>00763 <span class="comment"></span>
<a name="l00764"></a>00764 <span class="comment">/** Close handler function for a generic stream.  @see svn_stream_t. */</span>
<a name="l00765"></a><a class="code" href="group__svn__io__byte__streams.html#ga576facc62f51e98c14cb440df1e58cd9">00765</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_close_fn_t)(<span class="keywordtype">void</span> *baton);
<a name="l00766"></a>00766 <span class="comment"></span>
<a name="l00767"></a>00767 <span class="comment">/** An opaque type which represents a mark on a stream.  There is no</span>
<a name="l00768"></a>00768 <span class="comment"> * concrete definition of this type, it is a named type for stream</span>
<a name="l00769"></a>00769 <span class="comment"> * implementation specific baton pointers.</span>
<a name="l00770"></a>00770 <span class="comment"> *</span>
<a name="l00771"></a>00771 <span class="comment"> * @see svn_stream_mark().</span>
<a name="l00772"></a>00772 <span class="comment"> * @since New in 1.7.</span>
<a name="l00773"></a>00773 <span class="comment"> */</span>
<a name="l00774"></a><a class="code" href="group__svn__io__byte__streams.html#gaca2f3b74a1215c13b5ae2ca3b99437b9">00774</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="group__svn__io__byte__streams.html#gaca2f3b74a1215c13b5ae2ca3b99437b9" title="An opaque type which represents a mark on a stream.">svn_stream_mark_t</a> <a class="code" href="group__svn__io__byte__streams.html#gaca2f3b74a1215c13b5ae2ca3b99437b9" title="An opaque type which represents a mark on a stream.">svn_stream_mark_t</a>;
<a name="l00775"></a>00775 <span class="comment"></span>
<a name="l00776"></a>00776 <span class="comment">/** Mark handler function for a generic stream. @see svn_stream_t and</span>
<a name="l00777"></a>00777 <span class="comment"> * svn_stream_mark().</span>
<a name="l00778"></a>00778 <span class="comment"> *</span>
<a name="l00779"></a>00779 <span class="comment"> * @since New in 1.7.</span>
<a name="l00780"></a>00780 <span class="comment"> */</span>
<a name="l00781"></a><a class="code" href="group__svn__io__byte__streams.html#gaf811477b7cafa3c5c20cb3428976d0be">00781</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_stream_mark_fn_t)(<span class="keywordtype">void</span> *baton,
<a name="l00782"></a>00782                                          <a class="code" href="group__svn__io__byte__streams.html#gaca2f3b74a1215c13b5ae2ca3b99437b9" title="An opaque type which represents a mark on a stream.">svn_stream_mark_t</a> **mark,
<a name="l00783"></a>00783                                          apr_pool_t *pool);
<a name="l00784"></a>00784 <span class="comment"></span>
<a name="l00785"></a>00785 <span class="comment">/** Seek handler function for a generic stream. @see svn_stream_t and</span>
<a name="l00786"></a>00786 <span class="comment"> * svn_stream_seek().</span>
<a name="l00787"></a>00787 <span class="comment"> *</span>
<a name="l00788"></a>00788 <span class="comment"> * @since New in 1.7.</span>
<a name="l00789"></a>00789 <span class="comment"> */</span>
<a name="l00790"></a><a class="code" href="group__svn__io__byte__streams.html#gaa5291159cc874084805155ccdfd68b4b">00790</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_stream_seek_fn_t)(<span class="keywordtype">void</span> *baton,
<a name="l00791"></a>00791                                          <span class="keyword">const</span> <a class="code" href="group__svn__io__byte__streams.html#gaca2f3b74a1215c13b5ae2ca3b99437b9" title="An opaque type which represents a mark on a stream.">svn_stream_mark_t</a> *mark);
<a name="l00792"></a>00792 <span class="comment"></span>
<a name="l00793"></a>00793 <span class="comment">/** Create a generic stream.  @see svn_stream_t. */</span>
<a name="l00794"></a>00794 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *
<a name="l00795"></a>00795 <a class="code" href="group__svn__io__byte__streams.html#gadc3e897290c9479c6b903876d18dc87c" title="Create a generic stream.">svn_stream_create</a>(<span class="keywordtype">void</span> *baton,
<a name="l00796"></a>00796                   apr_pool_t *pool);
<a name="l00797"></a>00797 <span class="comment"></span>
<a name="l00798"></a>00798 <span class="comment">/** Set @a stream&#39;s baton to @a baton */</span>
<a name="l00799"></a>00799 <span class="keywordtype">void</span>
<a name="l00800"></a>00800 <a class="code" href="group__svn__io__byte__streams.html#ga0ff601f7fb4a7c8c92770edd7376b052" title="Set stream&#39;s baton to baton.">svn_stream_set_baton</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l00801"></a>00801                      <span class="keywordtype">void</span> *baton);
<a name="l00802"></a>00802 <span class="comment"></span>
<a name="l00803"></a>00803 <span class="comment">/** Set @a stream&#39;s read function to @a read_fn */</span>
<a name="l00804"></a>00804 <span class="keywordtype">void</span>
<a name="l00805"></a>00805 <a class="code" href="group__svn__io__byte__streams.html#gae9ebdcf950b897d9c0cb89c331262aed" title="Set stream&#39;s read function to read_fn.">svn_stream_set_read</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l00806"></a>00806                     <a class="code" href="group__svn__io__byte__streams.html#ga9a8939b5258b070a48aa1e0cd154909a" title="Read handler function for a generic stream.">svn_read_fn_t</a> read_fn);
<a name="l00807"></a>00807 <span class="comment"></span>
<a name="l00808"></a>00808 <span class="comment">/** Set @a stream&#39;s skip function to @a skip_fn</span>
<a name="l00809"></a>00809 <span class="comment"> *</span>
<a name="l00810"></a>00810 <span class="comment"> * @since New in 1.7</span>
<a name="l00811"></a>00811 <span class="comment"> */</span>
<a name="l00812"></a>00812 <span class="keywordtype">void</span>
<a name="l00813"></a>00813 <a class="code" href="group__svn__io__byte__streams.html#gaf834f41616e68fa7d0214814a56b81d4" title="Set stream&#39;s skip function to skip_fn.">svn_stream_set_skip</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l00814"></a>00814                     <a class="code" href="group__svn__io__byte__streams.html#ga2c0bc2f0ebff96271f427013fece2a39" title="Skip data handler function for a generic stream.">svn_stream_skip_fn_t</a> skip_fn);
<a name="l00815"></a>00815 <span class="comment"></span>
<a name="l00816"></a>00816 <span class="comment">/** Set @a stream&#39;s write function to @a write_fn */</span>
<a name="l00817"></a>00817 <span class="keywordtype">void</span>
<a name="l00818"></a>00818 <a class="code" href="group__svn__io__byte__streams.html#gaea19e182974e64a77d3f949a25f496a1" title="Set stream&#39;s write function to write_fn.">svn_stream_set_write</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l00819"></a>00819                      <a class="code" href="group__svn__io__byte__streams.html#gaa79398b116a9209eb3a79947a6066f54" title="Write handler function for a generic stream.">svn_write_fn_t</a> write_fn);
<a name="l00820"></a>00820 <span class="comment"></span>
<a name="l00821"></a>00821 <span class="comment">/** Set @a stream&#39;s close function to @a close_fn */</span>
<a name="l00822"></a>00822 <span class="keywordtype">void</span>
<a name="l00823"></a>00823 <a class="code" href="group__svn__io__byte__streams.html#ga090c93a72964b78a00de75fa10fc5078" title="Set stream&#39;s close function to close_fn.">svn_stream_set_close</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l00824"></a>00824                      <a class="code" href="group__svn__io__byte__streams.html#ga576facc62f51e98c14cb440df1e58cd9" title="Close handler function for a generic stream.">svn_close_fn_t</a> close_fn);
<a name="l00825"></a>00825 <span class="comment"></span>
<a name="l00826"></a>00826 <span class="comment">/** Set @a stream&#39;s mark function to @a mark_fn</span>
<a name="l00827"></a>00827 <span class="comment"> *</span>
<a name="l00828"></a>00828 <span class="comment"> * @since New in 1.7.</span>
<a name="l00829"></a>00829 <span class="comment"> */</span>
<a name="l00830"></a>00830 <span class="keywordtype">void</span>
<a name="l00831"></a>00831 <a class="code" href="group__svn__io__byte__streams.html#gacdce9efd65576fafecb4df5fd2960d13" title="Set stream&#39;s mark function to mark_fn.">svn_stream_set_mark</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l00832"></a>00832                     <a class="code" href="group__svn__io__byte__streams.html#gaf811477b7cafa3c5c20cb3428976d0be" title="Mark handler function for a generic stream.">svn_stream_mark_fn_t</a> mark_fn);
<a name="l00833"></a>00833 <span class="comment"></span>
<a name="l00834"></a>00834 <span class="comment">/** Set @a stream&#39;s seek function to @a seek_fn</span>
<a name="l00835"></a>00835 <span class="comment"> *</span>
<a name="l00836"></a>00836 <span class="comment"> * @since New in 1.7.</span>
<a name="l00837"></a>00837 <span class="comment"> */</span>
<a name="l00838"></a>00838 <span class="keywordtype">void</span>
<a name="l00839"></a>00839 <a class="code" href="group__svn__io__byte__streams.html#ga96e94eff159f85a3c8c6b7936e5c908d" title="Set stream&#39;s seek function to seek_fn.">svn_stream_set_seek</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l00840"></a>00840                     <a class="code" href="group__svn__io__byte__streams.html#gaa5291159cc874084805155ccdfd68b4b" title="Seek handler function for a generic stream.">svn_stream_seek_fn_t</a> seek_fn);
<a name="l00841"></a>00841 <span class="comment"></span>
<a name="l00842"></a>00842 <span class="comment">/** Create a stream that is empty for reading and infinite for writing. */</span>
<a name="l00843"></a>00843 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *
<a name="l00844"></a>00844 <a class="code" href="group__svn__io__byte__streams.html#ga9f0acad4da18e90c1dc5250643af7049" title="Create a stream that is empty for reading and infinite for writing.">svn_stream_empty</a>(apr_pool_t *pool);
<a name="l00845"></a>00845 <span class="comment"></span>
<a name="l00846"></a>00846 <span class="comment">/** Return a stream allocated in @a pool which forwards all requests</span>
<a name="l00847"></a>00847 <span class="comment"> * to @a stream.  Destruction is explicitly excluded from forwarding.</span>
<a name="l00848"></a>00848 <span class="comment"> *</span>
<a name="l00849"></a>00849 <span class="comment"> * @see notes/destruction-of-stacked-resources</span>
<a name="l00850"></a>00850 <span class="comment"> *</span>
<a name="l00851"></a>00851 <span class="comment"> * @since New in 1.4.</span>
<a name="l00852"></a>00852 <span class="comment"> */</span>
<a name="l00853"></a>00853 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *
<a name="l00854"></a>00854 <a class="code" href="group__svn__io__byte__streams.html#ga61c69116290c1f5e5fedd91ed7bed5ca" title="Return a stream allocated in pool which forwards all requests to stream.">svn_stream_disown</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l00855"></a>00855                   apr_pool_t *pool);
<a name="l00856"></a>00856 
<a name="l00857"></a>00857 <span class="comment"></span>
<a name="l00858"></a>00858 <span class="comment">/** Create a stream to read the file at @a path. It will be opened using</span>
<a name="l00859"></a>00859 <span class="comment"> * the APR_BUFFERED and APR_BINARY flag, and APR_OS_DEFAULT for the perms.</span>
<a name="l00860"></a>00860 <span class="comment"> * If you&#39;d like to use different values, then open the file yourself, and</span>
<a name="l00861"></a>00861 <span class="comment"> * use the svn_stream_from_aprfile2() interface.</span>
<a name="l00862"></a>00862 <span class="comment"> *</span>
<a name="l00863"></a>00863 <span class="comment"> * The stream will be returned in @a stream, and allocated from @a result_pool.</span>
<a name="l00864"></a>00864 <span class="comment"> * Temporary allocations will be performed in @a scratch_pool.</span>
<a name="l00865"></a>00865 <span class="comment"> *</span>
<a name="l00866"></a>00866 <span class="comment"> * @since New in 1.6</span>
<a name="l00867"></a>00867 <span class="comment"> */</span>
<a name="l00868"></a>00868 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00869"></a>00869 <a class="code" href="group__svn__io__byte__streams.html#ga4d03d151fe2d8fb4068dab914823d059" title="Create a stream to read the file at path.">svn_stream_open_readonly</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> **stream,
<a name="l00870"></a>00870                          <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00871"></a>00871                          apr_pool_t *result_pool,
<a name="l00872"></a>00872                          apr_pool_t *scratch_pool);
<a name="l00873"></a>00873 
<a name="l00874"></a>00874 <span class="comment"></span>
<a name="l00875"></a>00875 <span class="comment">/** Create a stream to write a file at @a path. The file will be *created*</span>
<a name="l00876"></a>00876 <span class="comment"> * using the APR_BUFFERED and APR_BINARY flag, and APR_OS_DEFAULT for the</span>
<a name="l00877"></a>00877 <span class="comment"> * perms. The file will be created &quot;exclusively&quot;, so if it already exists,</span>
<a name="l00878"></a>00878 <span class="comment"> * then an error will be thrown. If you&#39;d like to use different values, or</span>
<a name="l00879"></a>00879 <span class="comment"> * open an existing file, then open the file yourself, and use the</span>
<a name="l00880"></a>00880 <span class="comment"> * svn_stream_from_aprfile2() interface.</span>
<a name="l00881"></a>00881 <span class="comment"> *</span>
<a name="l00882"></a>00882 <span class="comment"> * The stream will be returned in @a stream, and allocated from @a result_pool.</span>
<a name="l00883"></a>00883 <span class="comment"> * Temporary allocations will be performed in @a scratch_pool.</span>
<a name="l00884"></a>00884 <span class="comment"> *</span>
<a name="l00885"></a>00885 <span class="comment"> * @since New in 1.6</span>
<a name="l00886"></a>00886 <span class="comment"> */</span>
<a name="l00887"></a>00887 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00888"></a>00888 <a class="code" href="group__svn__io__byte__streams.html#gace8995769bb736796262450ef90f033e" title="Create a stream to write a file at path.">svn_stream_open_writable</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> **stream,
<a name="l00889"></a>00889                          <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00890"></a>00890                          apr_pool_t *result_pool,
<a name="l00891"></a>00891                          apr_pool_t *scratch_pool);
<a name="l00892"></a>00892 
<a name="l00893"></a>00893 <span class="comment"></span>
<a name="l00894"></a>00894 <span class="comment">/** Create a writable stream to a file in the directory @a dirpath.</span>
<a name="l00895"></a>00895 <span class="comment"> * The file will have an arbitrary and unique name, and the full path</span>
<a name="l00896"></a>00896 <span class="comment"> * will be returned in @a temp_path. The stream will be returned in</span>
<a name="l00897"></a>00897 <span class="comment"> * @a stream. Both will be allocated from @a result_pool.</span>
<a name="l00898"></a>00898 <span class="comment"> *</span>
<a name="l00899"></a>00899 <span class="comment"> * If @a dirpath is @c NULL, use the path returned from svn_io_temp_dir().</span>
<a name="l00900"></a>00900 <span class="comment"> * (Note that when using the system-provided temp directory, it may not</span>
<a name="l00901"></a>00901 <span class="comment"> * be possible to atomically rename the resulting file due to cross-device</span>
<a name="l00902"></a>00902 <span class="comment"> * issues.)</span>
<a name="l00903"></a>00903 <span class="comment"> *</span>
<a name="l00904"></a>00904 <span class="comment"> * The file will be deleted according to @a delete_when.</span>
<a name="l00905"></a>00905 <span class="comment"> *</span>
<a name="l00906"></a>00906 <span class="comment"> * Temporary allocations will be performed in @a scratch_pool.</span>
<a name="l00907"></a>00907 <span class="comment"> *</span>
<a name="l00908"></a>00908 <span class="comment"> * @since New in 1.6</span>
<a name="l00909"></a>00909 <span class="comment"> * @see svn_io_open_unique_file3()</span>
<a name="l00910"></a>00910 <span class="comment"> */</span>
<a name="l00911"></a>00911 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00912"></a>00912 <a class="code" href="group__svn__io__byte__streams.html#ga821ab7add7a0216c86b1a7f94456fae9" title="Create a writable stream to a file in the directory dirpath.">svn_stream_open_unique</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> **stream,
<a name="l00913"></a>00913                        <span class="keyword">const</span> <span class="keywordtype">char</span> **temp_path,
<a name="l00914"></a>00914                        <span class="keyword">const</span> <span class="keywordtype">char</span> *dirpath,
<a name="l00915"></a>00915                        <a class="code" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884" title="Used as an argument when creating temporary files to indicate when a file should be removed...">svn_io_file_del_t</a> delete_when,
<a name="l00916"></a>00916                        apr_pool_t *result_pool,
<a name="l00917"></a>00917                        apr_pool_t *scratch_pool);
<a name="l00918"></a>00918 
<a name="l00919"></a>00919 <span class="comment"></span>
<a name="l00920"></a>00920 <span class="comment">/** Create a stream from an APR file.  For convenience, if @a file is</span>
<a name="l00921"></a>00921 <span class="comment"> * @c NULL, an empty stream created by svn_stream_empty() is returned.</span>
<a name="l00922"></a>00922 <span class="comment"> *</span>
<a name="l00923"></a>00923 <span class="comment"> * This function should normally be called with @a disown set to FALSE,</span>
<a name="l00924"></a>00924 <span class="comment"> * in which case closing the stream will also close the underlying file.</span>
<a name="l00925"></a>00925 <span class="comment"> *</span>
<a name="l00926"></a>00926 <span class="comment"> * If @a disown is TRUE, the stream will disown the underlying file,</span>
<a name="l00927"></a>00927 <span class="comment"> * meaning that svn_stream_close() will not close the file.</span>
<a name="l00928"></a>00928 <span class="comment"> *</span>
<a name="l00929"></a>00929 <span class="comment"> * @since New in 1.4.</span>
<a name="l00930"></a>00930 <span class="comment"> */</span>
<a name="l00931"></a>00931 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *
<a name="l00932"></a>00932 <a class="code" href="group__svn__io__byte__streams.html#gadf2971328919edf3fed5ef8353a90525" title="Create a stream from an APR file.">svn_stream_from_aprfile2</a>(apr_file_t *file,
<a name="l00933"></a>00933                          <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> disown,
<a name="l00934"></a>00934                          apr_pool_t *pool);
<a name="l00935"></a>00935 <span class="comment"></span>
<a name="l00936"></a>00936 <span class="comment">/** Similar to svn_stream_from_aprfile2(), except that the file will</span>
<a name="l00937"></a>00937 <span class="comment"> * always be disowned.</span>
<a name="l00938"></a>00938 <span class="comment"> *</span>
<a name="l00939"></a>00939 <span class="comment"> * @note The stream returned is not considered to &quot;own&quot; the underlying</span>
<a name="l00940"></a>00940 <span class="comment"> *       file, meaning that svn_stream_close() on the stream will not</span>
<a name="l00941"></a>00941 <span class="comment"> *       close the file.</span>
<a name="l00942"></a>00942 <span class="comment"> *</span>
<a name="l00943"></a>00943 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.3 API.</span>
<a name="l00944"></a>00944 <span class="comment"> */</span>
<a name="l00945"></a>00945 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00946"></a>00946 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *
<a name="l00947"></a>00947 <a class="code" href="group__svn__io__byte__streams.html#gad12a2e4cbc23bcf8ee3f650966b8c43b" title="Similar to svn_stream_from_aprfile2(), except that the file will always be disowned.">svn_stream_from_aprfile</a>(apr_file_t *file,
<a name="l00948"></a>00948                         apr_pool_t *pool);
<a name="l00949"></a>00949 <span class="comment"></span>
<a name="l00950"></a>00950 <span class="comment">/** Set @a *in to a generic stream connected to stdin, allocated in</span>
<a name="l00951"></a>00951 <span class="comment"> * @a pool.  The stream and its underlying APR handle will be closed</span>
<a name="l00952"></a>00952 <span class="comment"> * when @a pool is cleared or destroyed.</span>
<a name="l00953"></a>00953 <span class="comment"> *</span>
<a name="l00954"></a>00954 <span class="comment"> * @since New in 1.7.</span>
<a name="l00955"></a>00955 <span class="comment"> */</span>
<a name="l00956"></a>00956 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00957"></a>00957 <a class="code" href="group__svn__io__byte__streams.html#ga2e8d5c7ca3a74393f3350540149e8e3d" title="Set *in to a generic stream connected to stdin, allocated in pool.">svn_stream_for_stdin</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> **in,
<a name="l00958"></a>00958                      apr_pool_t *pool);
<a name="l00959"></a>00959 <span class="comment"></span>
<a name="l00960"></a>00960 <span class="comment">/** Set @a *err to a generic stream connected to stderr, allocated in</span>
<a name="l00961"></a>00961 <span class="comment"> * @a pool.  The stream and its underlying APR handle will be closed</span>
<a name="l00962"></a>00962 <span class="comment"> * when @a pool is cleared or destroyed.</span>
<a name="l00963"></a>00963 <span class="comment"> *</span>
<a name="l00964"></a>00964 <span class="comment"> * @since New in 1.7.</span>
<a name="l00965"></a>00965 <span class="comment"> */</span>
<a name="l00966"></a>00966 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00967"></a>00967 <a class="code" href="group__svn__io__byte__streams.html#gaa76703167b5bc9cc53a1f66e64c5f77a" title="Set *err to a generic stream connected to stderr, allocated in pool.">svn_stream_for_stderr</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> **err,
<a name="l00968"></a>00968                       apr_pool_t *pool);
<a name="l00969"></a>00969 <span class="comment"></span>
<a name="l00970"></a>00970 <span class="comment">/** Set @a *out to a generic stream connected to stdout, allocated in</span>
<a name="l00971"></a>00971 <span class="comment"> * @a pool.  The stream and its underlying APR handle will be closed</span>
<a name="l00972"></a>00972 <span class="comment"> * when @a pool is cleared or destroyed.</span>
<a name="l00973"></a>00973 <span class="comment"> */</span>
<a name="l00974"></a>00974 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00975"></a>00975 <a class="code" href="group__svn__io__byte__streams.html#ga64eca282d3b75b431a6f8ae5a6637fbb" title="Set *out to a generic stream connected to stdout, allocated in pool.">svn_stream_for_stdout</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> **out,
<a name="l00976"></a>00976                       apr_pool_t *pool);
<a name="l00977"></a>00977 <span class="comment"></span>
<a name="l00978"></a>00978 <span class="comment">/** Return a generic stream connected to stringbuf @a str.  Allocate the</span>
<a name="l00979"></a>00979 <span class="comment"> * stream in @a pool.</span>
<a name="l00980"></a>00980 <span class="comment"> */</span>
<a name="l00981"></a>00981 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *
<a name="l00982"></a>00982 <a class="code" href="group__svn__io__byte__streams.html#gabe260b52fa278bc63ba75ea695e54303" title="Return a generic stream connected to stringbuf str.">svn_stream_from_stringbuf</a>(<a class="code" href="structsvn__stringbuf__t.html" title="A buffered string, capable of appending without an allocation and copy for each append.">svn_stringbuf_t</a> *str,
<a name="l00983"></a>00983                           apr_pool_t *pool);
<a name="l00984"></a>00984 <span class="comment"></span>
<a name="l00985"></a>00985 <span class="comment">/** Return a generic read-only stream connected to string @a str.</span>
<a name="l00986"></a>00986 <span class="comment"> *  Allocate the stream in @a pool.</span>
<a name="l00987"></a>00987 <span class="comment"> */</span>
<a name="l00988"></a>00988 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *
<a name="l00989"></a>00989 <a class="code" href="group__svn__io__byte__streams.html#ga8e85f7340b0f3471fb79c1bc501e4fea" title="Return a generic read-only stream connected to string str.">svn_stream_from_string</a>(<span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *str,
<a name="l00990"></a>00990                        apr_pool_t *pool);
<a name="l00991"></a>00991 <span class="comment"></span>
<a name="l00992"></a>00992 <span class="comment">/** Return a stream that decompresses all data read and compresses all</span>
<a name="l00993"></a>00993 <span class="comment"> * data written. The stream @a stream is used to read and write all</span>
<a name="l00994"></a>00994 <span class="comment"> * compressed data. All compression data structures are allocated on</span>
<a name="l00995"></a>00995 <span class="comment"> * @a pool. If compression support is not compiled in then</span>
<a name="l00996"></a>00996 <span class="comment"> * svn_stream_compressed() returns @a stream unmodified. Make sure you</span>
<a name="l00997"></a>00997 <span class="comment"> * call svn_stream_close() on the stream returned by this function,</span>
<a name="l00998"></a>00998 <span class="comment"> * so that all data are flushed and cleaned up.</span>
<a name="l00999"></a>00999 <span class="comment"> *</span>
<a name="l01000"></a>01000 <span class="comment"> * @note From 1.4, compression support is always compiled in.</span>
<a name="l01001"></a>01001 <span class="comment"> */</span>
<a name="l01002"></a>01002 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *
<a name="l01003"></a>01003 <a class="code" href="group__svn__io__byte__streams.html#ga10756ab562fd20d32fb880c859607b4c" title="Return a stream that decompresses all data read and compresses all data written.">svn_stream_compressed</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l01004"></a>01004                       apr_pool_t *pool);
<a name="l01005"></a>01005 <span class="comment"></span>
<a name="l01006"></a>01006 <span class="comment">/** Return a stream that calculates checksums for all data read</span>
<a name="l01007"></a>01007 <span class="comment"> * and written.  The stream @a stream is used to read and write all data.</span>
<a name="l01008"></a>01008 <span class="comment"> * The stream and the resulting digests are allocated in @a pool.</span>
<a name="l01009"></a>01009 <span class="comment"> *</span>
<a name="l01010"></a>01010 <span class="comment"> * When the stream is closed, @a *read_checksum and @a *write_checksum</span>
<a name="l01011"></a>01011 <span class="comment"> * are set to point to the resulting checksums, of type @a read_checksum_kind</span>
<a name="l01012"></a>01012 <span class="comment"> * and @a write_checksum_kind, respectively.</span>
<a name="l01013"></a>01013 <span class="comment"> *</span>
<a name="l01014"></a>01014 <span class="comment"> * Both @a read_checksum and @a write_checksum can be @c NULL, in which case</span>
<a name="l01015"></a>01015 <span class="comment"> * the respective checksum isn&#39;t calculated.</span>
<a name="l01016"></a>01016 <span class="comment"> *</span>
<a name="l01017"></a>01017 <span class="comment"> * If @a read_all is TRUE, make sure that all data available on @a</span>
<a name="l01018"></a>01018 <span class="comment"> * stream is read (and checksummed) when the stream is closed.</span>
<a name="l01019"></a>01019 <span class="comment"> *</span>
<a name="l01020"></a>01020 <span class="comment"> * Read and write operations can be mixed without interfering.</span>
<a name="l01021"></a>01021 <span class="comment"> *</span>
<a name="l01022"></a>01022 <span class="comment"> * The @a stream passed into this function is closed when the created</span>
<a name="l01023"></a>01023 <span class="comment"> * stream is closed.</span>
<a name="l01024"></a>01024 <span class="comment"> *</span>
<a name="l01025"></a>01025 <span class="comment"> * @since New in 1.6.</span>
<a name="l01026"></a>01026 <span class="comment"> */</span>
<a name="l01027"></a>01027 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *
<a name="l01028"></a>01028 <a class="code" href="group__svn__io__byte__streams.html#ga823456ae87bbacf8b7022e8ea4c0d356" title="Return a stream that calculates checksums for all data read and written.">svn_stream_checksummed2</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l01029"></a>01029                         <a class="code" href="structsvn__checksum__t.html" title="A generic checksum representation.">svn_checksum_t</a> **read_checksum,
<a name="l01030"></a>01030                         <a class="code" href="structsvn__checksum__t.html" title="A generic checksum representation.">svn_checksum_t</a> **write_checksum,
<a name="l01031"></a>01031                         <a class="code" href="svn__checksum_8h.html#a7a6c373d03d7e6ec6b832a039f5e0aa1" title="Various types of checksums.">svn_checksum_kind_t</a> checksum_kind,
<a name="l01032"></a>01032                         <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> read_all,
<a name="l01033"></a>01033                         apr_pool_t *pool);
<a name="l01034"></a>01034 <span class="comment"></span>
<a name="l01035"></a>01035 <span class="comment">/**</span>
<a name="l01036"></a>01036 <span class="comment"> * Similar to svn_stream_checksummed2(), but always returning the MD5</span>
<a name="l01037"></a>01037 <span class="comment"> * checksum in @a read_digest and @a write_digest.</span>
<a name="l01038"></a>01038 <span class="comment"> *</span>
<a name="l01039"></a>01039 <span class="comment"> * @since New in 1.4.</span>
<a name="l01040"></a>01040 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.5 API.</span>
<a name="l01041"></a>01041 <span class="comment"> */</span>
<a name="l01042"></a>01042 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01043"></a>01043 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *
<a name="l01044"></a>01044 <a class="code" href="group__svn__io__byte__streams.html#gadda74c8a8bf6d4dc64488979aa197afc" title="Similar to svn_stream_checksummed2(), but always returning the MD5 checksum in read_digest and write_...">svn_stream_checksummed</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l01045"></a>01045                        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> **read_digest,
<a name="l01046"></a>01046                        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> **write_digest,
<a name="l01047"></a>01047                        <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> read_all,
<a name="l01048"></a>01048                        apr_pool_t *pool);
<a name="l01049"></a>01049 <span class="comment"></span>
<a name="l01050"></a>01050 <span class="comment">/** Read from a generic stream. @see svn_stream_t. */</span>
<a name="l01051"></a>01051 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01052"></a>01052 <a class="code" href="group__svn__io__byte__streams.html#ga241e8929f8f7631a629142bd749b25fc" title="Read from a generic stream.">svn_stream_read</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l01053"></a>01053                 <span class="keywordtype">char</span> *buffer,
<a name="l01054"></a>01054                 apr_size_t *len);
<a name="l01055"></a>01055 <span class="comment"></span>
<a name="l01056"></a>01056 <span class="comment">/**</span>
<a name="l01057"></a>01057 <span class="comment"> * Skip @a len bytes from a generic @a stream. If the stream is exhausted</span>
<a name="l01058"></a>01058 <span class="comment"> * before @a len bytes have been read, return an error.</span>
<a name="l01059"></a>01059 <span class="comment"> *</span>
<a name="l01060"></a>01060 <span class="comment"> * @note  No assumption can be made on the semantics of this function</span>
<a name="l01061"></a>01061 <span class="comment"> * other than that the stream read pointer will be advanced by *len</span>
<a name="l01062"></a>01062 <span class="comment"> * bytes. Depending on the capabilities of the underlying stream</span>
<a name="l01063"></a>01063 <span class="comment"> * implementation, this may for instance be translated into a sequence</span>
<a name="l01064"></a>01064 <span class="comment"> * of reads or a simple seek operation. If the stream implementation has</span>
<a name="l01065"></a>01065 <span class="comment"> * not provided a skip function, this will read from the stream and</span>
<a name="l01066"></a>01066 <span class="comment"> * discard the data.</span>
<a name="l01067"></a>01067 <span class="comment"> */</span>
<a name="l01068"></a>01068 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01069"></a>01069 <a class="code" href="group__svn__io__byte__streams.html#ga139e177f2f8600c47f01319f12dc5d4a" title="Skip len bytes from a generic stream.">svn_stream_skip</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l01070"></a>01070                 apr_size_t len);
<a name="l01071"></a>01071 <span class="comment"></span>
<a name="l01072"></a>01072 <span class="comment">/** Write to a generic stream. @see svn_stream_t. */</span>
<a name="l01073"></a>01073 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01074"></a>01074 <a class="code" href="group__svn__io__byte__streams.html#ga0094764a89afdedecac79df9ad1ebccb" title="Write to a generic stream.">svn_stream_write</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l01075"></a>01075                  <span class="keyword">const</span> <span class="keywordtype">char</span> *data,
<a name="l01076"></a>01076                  apr_size_t *len);
<a name="l01077"></a>01077 <span class="comment"></span>
<a name="l01078"></a>01078 <span class="comment">/** Close a generic stream. @see svn_stream_t. */</span>
<a name="l01079"></a>01079 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01080"></a>01080 <a class="code" href="group__svn__io__byte__streams.html#ga7d9cdab4d5d8707d59a1b1d3dab95bb4" title="Close a generic stream.">svn_stream_close</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream);
<a name="l01081"></a>01081 <span class="comment"></span>
<a name="l01082"></a>01082 <span class="comment">/** Reset a generic stream back to its origin. E.g. On a file this would be</span>
<a name="l01083"></a>01083 <span class="comment"> * implemented as a seek to position 0).  This function returns a</span>
<a name="l01084"></a>01084 <span class="comment"> * #SVN_ERR_STREAM_RESET_NOT_SUPPORTED error when the stream doesn&#39;t</span>
<a name="l01085"></a>01085 <span class="comment"> * implement resetting.</span>
<a name="l01086"></a>01086 <span class="comment"> *</span>
<a name="l01087"></a>01087 <span class="comment"> * @since New in 1.7.</span>
<a name="l01088"></a>01088 <span class="comment"> */</span>
<a name="l01089"></a>01089 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01090"></a>01090 <a class="code" href="group__svn__io__byte__streams.html#gac7574ccd5c0f60779bdaef7f5b44febd" title="Reset a generic stream back to its origin.">svn_stream_reset</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream);
<a name="l01091"></a>01091 <span class="comment"></span>
<a name="l01092"></a>01092 <span class="comment">/** Returns @c TRUE if the generic @a stream supports svn_stream_mark().</span>
<a name="l01093"></a>01093 <span class="comment"> *</span>
<a name="l01094"></a>01094 <span class="comment"> * @see svn_stream_mark()</span>
<a name="l01095"></a>01095 <span class="comment"> * @since New in 1.7.</span>
<a name="l01096"></a>01096 <span class="comment"> */</span>
<a name="l01097"></a>01097 <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a>
<a name="l01098"></a>01098 <a class="code" href="group__svn__io__byte__streams.html#gab5dc6f7105e2332ebda600b2d2300eb7" title="Returns TRUE if the generic stream supports svn_stream_mark().">svn_stream_supports_mark</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream);
<a name="l01099"></a>01099 <span class="comment"></span>
<a name="l01100"></a>01100 <span class="comment">/** Set a @a mark at the current position of a generic @a stream,</span>
<a name="l01101"></a>01101 <span class="comment"> * which can later be sought back to using svn_stream_seek().</span>
<a name="l01102"></a>01102 <span class="comment"> * The @a mark is allocated in @a pool.</span>
<a name="l01103"></a>01103 <span class="comment"> *</span>
<a name="l01104"></a>01104 <span class="comment"> * This function returns the #SVN_ERR_STREAM_SEEK_NOT_SUPPORTED error</span>
<a name="l01105"></a>01105 <span class="comment"> * if the stream doesn&#39;t implement seeking.</span>
<a name="l01106"></a>01106 <span class="comment"> *</span>
<a name="l01107"></a>01107 <span class="comment"> * @see svn_stream_seek()</span>
<a name="l01108"></a>01108 <span class="comment"> * @since New in 1.7.</span>
<a name="l01109"></a>01109 <span class="comment"> */</span>
<a name="l01110"></a>01110 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01111"></a>01111 <a class="code" href="group__svn__io__byte__streams.html#ga47c17fbf09effd084d6b426d18175942" title="Set a mark at the current position of a generic stream, which can later be sought back to using svn_s...">svn_stream_mark</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l01112"></a>01112                 <a class="code" href="group__svn__io__byte__streams.html#gaca2f3b74a1215c13b5ae2ca3b99437b9" title="An opaque type which represents a mark on a stream.">svn_stream_mark_t</a> **mark,
<a name="l01113"></a>01113                 apr_pool_t *pool);
<a name="l01114"></a>01114 <span class="comment"></span>
<a name="l01115"></a>01115 <span class="comment">/** Seek to a @a mark in a generic @a stream.</span>
<a name="l01116"></a>01116 <span class="comment"> * This function returns the #SVN_ERR_STREAM_SEEK_NOT_SUPPORTED error</span>
<a name="l01117"></a>01117 <span class="comment"> * if the stream doesn&#39;t implement seeking. Passing NULL as @a mark,</span>
<a name="l01118"></a>01118 <span class="comment"> * seeks to the start of the stream.</span>
<a name="l01119"></a>01119 <span class="comment"> *</span>
<a name="l01120"></a>01120 <span class="comment"> * @see svn_stream_mark()</span>
<a name="l01121"></a>01121 <span class="comment"> * @since New in 1.7.</span>
<a name="l01122"></a>01122 <span class="comment"> */</span>
<a name="l01123"></a>01123 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01124"></a>01124 <a class="code" href="group__svn__io__byte__streams.html#ga1cb32df4e14164a911490bae5e58e99e" title="Seek to a mark in a generic stream.">svn_stream_seek</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream, <span class="keyword">const</span> <a class="code" href="group__svn__io__byte__streams.html#gaca2f3b74a1215c13b5ae2ca3b99437b9" title="An opaque type which represents a mark on a stream.">svn_stream_mark_t</a> *mark);
<a name="l01125"></a>01125 <span class="comment"></span>
<a name="l01126"></a>01126 <span class="comment">/** Return a writable stream which, when written to, writes to both of the</span>
<a name="l01127"></a>01127 <span class="comment"> * underlying streams.  Both of these streams will be closed upon closure of</span>
<a name="l01128"></a>01128 <span class="comment"> * the returned stream; use svn_stream_disown() if this is not the desired</span>
<a name="l01129"></a>01129 <span class="comment"> * behavior.  One or both of @a out1 and @a out2 may be @c NULL.  If both are</span>
<a name="l01130"></a>01130 <span class="comment"> * @c NULL, @c NULL is returned.</span>
<a name="l01131"></a>01131 <span class="comment"> *</span>
<a name="l01132"></a>01132 <span class="comment"> * @since New in 1.7.</span>
<a name="l01133"></a>01133 <span class="comment"> */</span>
<a name="l01134"></a>01134 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *
<a name="l01135"></a>01135 <a class="code" href="group__svn__io__byte__streams.html#ga77fdb810198d9c7832610882fd57546b" title="Return a writable stream which, when written to, writes to both of the underlying streams...">svn_stream_tee</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *out1,
<a name="l01136"></a>01136                <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *out2,
<a name="l01137"></a>01137                apr_pool_t *pool);
<a name="l01138"></a>01138 
<a name="l01139"></a>01139 <span class="comment"></span>
<a name="l01140"></a>01140 <span class="comment">/** Write to @a stream using a printf-style @a fmt specifier, passed through</span>
<a name="l01141"></a>01141 <span class="comment"> * apr_psprintf() using memory from @a pool.</span>
<a name="l01142"></a>01142 <span class="comment"> */</span>
<a name="l01143"></a>01143 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01144"></a>01144 <a class="code" href="group__svn__io__byte__streams.html#ga8665c4828daad13a35fd7e670552d888" title="Write to stream using a printf-style fmt specifier, passed through apr_psprintf() using memory from p...">svn_stream_printf</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l01145"></a>01145                   apr_pool_t *pool,
<a name="l01146"></a>01146                   <span class="keyword">const</span> <span class="keywordtype">char</span> *fmt,
<a name="l01147"></a>01147                   ...)
<a name="l01148"></a>01148        __attribute__((format(printf, 3, 4)));
<a name="l01149"></a>01149 <span class="comment"></span>
<a name="l01150"></a>01150 <span class="comment">/** Write to @a stream using a printf-style @a fmt specifier, passed through</span>
<a name="l01151"></a>01151 <span class="comment"> * apr_psprintf() using memory from @a pool.  The resulting string</span>
<a name="l01152"></a>01152 <span class="comment"> * will be translated to @a encoding before it is sent to @a stream.</span>
<a name="l01153"></a>01153 <span class="comment"> *</span>
<a name="l01154"></a>01154 <span class="comment"> * @note Use @c APR_LOCALE_CHARSET to translate to the encoding of the</span>
<a name="l01155"></a>01155 <span class="comment"> * current locale.</span>
<a name="l01156"></a>01156 <span class="comment"> *</span>
<a name="l01157"></a>01157 <span class="comment"> * @since New in 1.3.</span>
<a name="l01158"></a>01158 <span class="comment"> */</span>
<a name="l01159"></a>01159 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01160"></a>01160 <a class="code" href="group__svn__io__byte__streams.html#gacfb10864df6c3a6fd6e5fc08ae8ef7e8" title="Write to stream using a printf-style fmt specifier, passed through apr_psprintf() using memory from p...">svn_stream_printf_from_utf8</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l01161"></a>01161                             const <span class="keywordtype">char</span> *encoding,
<a name="l01162"></a>01162                             apr_pool_t *pool,
<a name="l01163"></a>01163                             const <span class="keywordtype">char</span> *fmt,
<a name="l01164"></a>01164                             ...)
<a name="l01165"></a>01165        __attribute__((format(printf, 4, 5)));
<a name="l01166"></a>01166 <span class="comment"></span>
<a name="l01167"></a>01167 <span class="comment">/** Allocate @a *stringbuf in @a pool, and read into it one line (terminated</span>
<a name="l01168"></a>01168 <span class="comment"> * by @a eol) from @a stream. The line-terminator is read from the stream,</span>
<a name="l01169"></a>01169 <span class="comment"> * but is not added to the end of the stringbuf.  Instead, the stringbuf</span>
<a name="l01170"></a>01170 <span class="comment"> * ends with a usual &#39;\\0&#39;.</span>
<a name="l01171"></a>01171 <span class="comment"> *</span>
<a name="l01172"></a>01172 <span class="comment"> * If @a stream runs out of bytes before encountering a line-terminator,</span>
<a name="l01173"></a>01173 <span class="comment"> * then set @a *eof to @c TRUE, otherwise set @a *eof to FALSE.</span>
<a name="l01174"></a>01174 <span class="comment"> */</span>
<a name="l01175"></a>01175 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01176"></a>01176 <a class="code" href="group__svn__io__byte__streams.html#gaccbf1cdff3857cad09096f8f01f37260" title="Allocate *stringbuf in pool, and read into it one line (terminated by eol) from stream.">svn_stream_readline</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l01177"></a>01177                     <a class="code" href="structsvn__stringbuf__t.html" title="A buffered string, capable of appending without an allocation and copy for each append.">svn_stringbuf_t</a> **stringbuf,
<a name="l01178"></a>01178                     const <span class="keywordtype">char</span> *eol,
<a name="l01179"></a>01179                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *eof,
<a name="l01180"></a>01180                     apr_pool_t *pool);
<a name="l01181"></a>01181 <span class="comment"></span>
<a name="l01182"></a>01182 <span class="comment">/**</span>
<a name="l01183"></a>01183 <span class="comment"> * Read the contents of the readable stream @a from and write them to the</span>
<a name="l01184"></a>01184 <span class="comment"> * writable stream @a to calling @a cancel_func before copying each chunk.</span>
<a name="l01185"></a>01185 <span class="comment"> *</span>
<a name="l01186"></a>01186 <span class="comment"> * @a cancel_func may be @c NULL.</span>
<a name="l01187"></a>01187 <span class="comment"> *</span>
<a name="l01188"></a>01188 <span class="comment"> * @note both @a from and @a to will be closed upon successful completion of</span>
<a name="l01189"></a>01189 <span class="comment"> * the copy (but an error may still be returned, based on trying to close</span>
<a name="l01190"></a>01190 <span class="comment"> * the two streams). If the closure is not desired, then you can use</span>
<a name="l01191"></a>01191 <span class="comment"> * svn_stream_disown() to protect either or both of the streams from</span>
<a name="l01192"></a>01192 <span class="comment"> * being closed.</span>
<a name="l01193"></a>01193 <span class="comment"> *</span>
<a name="l01194"></a>01194 <span class="comment"> * @since New in 1.6.</span>
<a name="l01195"></a>01195 <span class="comment"> */</span>
<a name="l01196"></a>01196 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01197"></a>01197 <a class="code" href="group__svn__io__byte__streams.html#ga674a71b48f810dd21ad2db6fd611930d" title="Read the contents of the readable stream from and write them to the writable stream to calling cancel...">svn_stream_copy3</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *from,
<a name="l01198"></a>01198                  <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *to,
<a name="l01199"></a>01199                  <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l01200"></a>01200                  <span class="keywordtype">void</span> *cancel_baton,
<a name="l01201"></a>01201                  apr_pool_t *pool);
<a name="l01202"></a>01202 <span class="comment"></span>
<a name="l01203"></a>01203 <span class="comment">/**</span>
<a name="l01204"></a>01204 <span class="comment"> * Same as svn_stream_copy3() but the streams are not closed.</span>
<a name="l01205"></a>01205 <span class="comment"> *</span>
<a name="l01206"></a>01206 <span class="comment"> * @since New in 1.5.</span>
<a name="l01207"></a>01207 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.5 API.</span>
<a name="l01208"></a>01208 <span class="comment"> */</span>
<a name="l01209"></a>01209 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01210"></a>01210 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01211"></a>01211 <a class="code" href="group__svn__io__byte__streams.html#ga1960de4b4eb0cf1a69a5ba5e11aaa6be" title="Same as svn_stream_copy3() but the streams are not closed.">svn_stream_copy2</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *from,
<a name="l01212"></a>01212                  <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *to,
<a name="l01213"></a>01213                  <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l01214"></a>01214                  <span class="keywordtype">void</span> *cancel_baton,
<a name="l01215"></a>01215                  apr_pool_t *pool);
<a name="l01216"></a>01216 <span class="comment"></span>
<a name="l01217"></a>01217 <span class="comment">/**</span>
<a name="l01218"></a>01218 <span class="comment"> * Same as svn_stream_copy3(), but without the cancellation function</span>
<a name="l01219"></a>01219 <span class="comment"> * or stream closing.</span>
<a name="l01220"></a>01220 <span class="comment"> *</span>
<a name="l01221"></a>01221 <span class="comment"> * @since New in 1.1.</span>
<a name="l01222"></a>01222 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.4 API.</span>
<a name="l01223"></a>01223 <span class="comment"> */</span>
<a name="l01224"></a>01224 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01225"></a>01225 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01226"></a>01226 <a class="code" href="group__svn__io__byte__streams.html#ga444db383401ed714a240ff6ca5ca76b3" title="Same as svn_stream_copy3(), but without the cancellation function or stream closing.">svn_stream_copy</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *from,
<a name="l01227"></a>01227                 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *to,
<a name="l01228"></a>01228                 apr_pool_t *pool);
<a name="l01229"></a>01229 
<a name="l01230"></a>01230 <span class="comment"></span>
<a name="l01231"></a>01231 <span class="comment">/** Set @a *same to TRUE if @a stream1 and @a stream2 have the same</span>
<a name="l01232"></a>01232 <span class="comment"> * contents, else set it to FALSE.</span>
<a name="l01233"></a>01233 <span class="comment"> *</span>
<a name="l01234"></a>01234 <span class="comment"> * Both streams will be closed before this function returns (regardless of</span>
<a name="l01235"></a>01235 <span class="comment"> * the result, or any possible error).</span>
<a name="l01236"></a>01236 <span class="comment"> *</span>
<a name="l01237"></a>01237 <span class="comment"> * Use @a scratch_pool for temporary allocations.</span>
<a name="l01238"></a>01238 <span class="comment"> *</span>
<a name="l01239"></a>01239 <span class="comment"> * @since New in 1.7.</span>
<a name="l01240"></a>01240 <span class="comment"> */</span>
<a name="l01241"></a>01241 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01242"></a>01242 <a class="code" href="group__svn__io__byte__streams.html#ga4a84c869ab835792b5e441b5eb426fd6" title="Set *same to TRUE if stream1 and stream2 have the same contents, else set it to FALSE.">svn_stream_contents_same2</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *same,
<a name="l01243"></a>01243                           <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream1,
<a name="l01244"></a>01244                           <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream2,
<a name="l01245"></a>01245                           apr_pool_t *pool);
<a name="l01246"></a>01246 
<a name="l01247"></a>01247 <span class="comment"></span>
<a name="l01248"></a>01248 <span class="comment">/**</span>
<a name="l01249"></a>01249 <span class="comment"> * Same as svn_stream_contents_same2(), but the streams will not be closed.</span>
<a name="l01250"></a>01250 <span class="comment"> *</span>
<a name="l01251"></a>01251 <span class="comment"> * @since New in 1.4.</span>
<a name="l01252"></a>01252 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l01253"></a>01253 <span class="comment"> */</span>
<a name="l01254"></a>01254 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01255"></a>01255 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01256"></a>01256 <a class="code" href="group__svn__io__byte__streams.html#ga14b9375f4e0300888b853650e15a987a" title="Same as svn_stream_contents_same2(), but the streams will not be closed.">svn_stream_contents_same</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *same,
<a name="l01257"></a>01257                          <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream1,
<a name="l01258"></a>01258                          <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream2,
<a name="l01259"></a>01259                          apr_pool_t *pool);
<a name="l01260"></a>01260 
<a name="l01261"></a>01261 <span class="comment"></span>
<a name="l01262"></a>01262 <span class="comment">/** Read the contents of @a stream into memory, returning the data in</span>
<a name="l01263"></a>01263 <span class="comment"> * @a result. The stream will be closed when it has been successfully and</span>
<a name="l01264"></a>01264 <span class="comment"> * completely read.</span>
<a name="l01265"></a>01265 <span class="comment"> *</span>
<a name="l01266"></a>01266 <span class="comment"> * The returned memory is allocated in @a result_pool, and any temporary</span>
<a name="l01267"></a>01267 <span class="comment"> * allocations are performed in @a scratch_pool.</span>
<a name="l01268"></a>01268 <span class="comment"> *</span>
<a name="l01269"></a>01269 <span class="comment"> * @note due to memory pseudo-reallocation behavior (due to pools), this</span>
<a name="l01270"></a>01270 <span class="comment"> *   can be a memory-intensive operation for large files.</span>
<a name="l01271"></a>01271 <span class="comment"> *</span>
<a name="l01272"></a>01272 <span class="comment"> * @since New in 1.6</span>
<a name="l01273"></a>01273 <span class="comment"> */</span>
<a name="l01274"></a>01274 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01275"></a>01275 <a class="code" href="group__svn__io__byte__streams.html#ga91b87b96c3f9a302d390263bd0d451a2" title="Read the contents of stream into memory, returning the data in result.">svn_string_from_stream</a>(<a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> **result,
<a name="l01276"></a>01276                        <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l01277"></a>01277                        apr_pool_t *result_pool,
<a name="l01278"></a>01278                        apr_pool_t *scratch_pool);
<a name="l01279"></a>01279 
<a name="l01280"></a>01280 <span class="comment"></span>
<a name="l01281"></a>01281 <span class="comment">/** @} */</span>
<a name="l01282"></a>01282 <span class="comment"></span>
<a name="l01283"></a>01283 <span class="comment">/** Set @a *result to a string containing the contents of @a</span>
<a name="l01284"></a>01284 <span class="comment"> * filename, which is either &quot;-&quot; (indicating that stdin should be</span>
<a name="l01285"></a>01285 <span class="comment"> * read) or the utf8-encoded path of a real file.</span>
<a name="l01286"></a>01286 <span class="comment"> *</span>
<a name="l01287"></a>01287 <span class="comment"> * @warning Callers should be aware of possible unexpected results</span>
<a name="l01288"></a>01288 <span class="comment"> * when using this function to read from stdin where additional</span>
<a name="l01289"></a>01289 <span class="comment"> * stdin-reading processes abound.  For example, if a program tries</span>
<a name="l01290"></a>01290 <span class="comment"> * both to invoke an external editor and to read from stdin, stdin</span>
<a name="l01291"></a>01291 <span class="comment"> * could be trashed and the editor might act funky or die outright.</span>
<a name="l01292"></a>01292 <span class="comment"> *</span>
<a name="l01293"></a>01293 <span class="comment"> * @note due to memory pseudo-reallocation behavior (due to pools), this</span>
<a name="l01294"></a>01294 <span class="comment"> *   can be a memory-intensive operation for large files.</span>
<a name="l01295"></a>01295 <span class="comment"> *</span>
<a name="l01296"></a>01296 <span class="comment"> * @since New in 1.5.</span>
<a name="l01297"></a>01297 <span class="comment"> */</span>
<a name="l01298"></a>01298 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01299"></a>01299 <a class="code" href="svn__io_8h.html#a9135b41547d59296fc54c8316278a0d6" title="Set *result to a string containing the contents of filename, which is either &quot;-&quot; (indicating that std...">svn_stringbuf_from_file2</a>(<a class="code" href="structsvn__stringbuf__t.html" title="A buffered string, capable of appending without an allocation and copy for each append.">svn_stringbuf_t</a> **result,
<a name="l01300"></a>01300                          const <span class="keywordtype">char</span> *filename,
<a name="l01301"></a>01301                          apr_pool_t *pool);
<a name="l01302"></a>01302 <span class="comment"></span>
<a name="l01303"></a>01303 <span class="comment">/** Similar to svn_stringbuf_from_file2(), except that if @a filename</span>
<a name="l01304"></a>01304 <span class="comment"> * is &quot;-&quot;, return the error #SVN_ERR_UNSUPPORTED_FEATURE and don&#39;t</span>
<a name="l01305"></a>01305 <span class="comment"> * touch @a *result.</span>
<a name="l01306"></a>01306 <span class="comment"> *</span>
<a name="l01307"></a>01307 <span class="comment"> * @deprecated Provided for backwards compatibility with the 1.4 API.</span>
<a name="l01308"></a>01308 <span class="comment"> */</span>
<a name="l01309"></a>01309 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01310"></a>01310 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01311"></a>01311 <a class="code" href="svn__io_8h.html#a2ffefcabf44f9e9fb2f71d409fcf782e" title="Similar to svn_stringbuf_from_file2(), except that if filename is &quot;-&quot;, return the error SVN_ERR_UNS...">svn_stringbuf_from_file</a>(<a class="code" href="structsvn__stringbuf__t.html" title="A buffered string, capable of appending without an allocation and copy for each append.">svn_stringbuf_t</a> **result,
<a name="l01312"></a>01312                         const <span class="keywordtype">char</span> *filename,
<a name="l01313"></a>01313                         apr_pool_t *pool);
<a name="l01314"></a>01314 <span class="comment"></span>
<a name="l01315"></a>01315 <span class="comment">/** Sets @a *result to a string containing the contents of the already opened</span>
<a name="l01316"></a>01316 <span class="comment"> * @a file.  Reads from the current position in file to the end.  Does not</span>
<a name="l01317"></a>01317 <span class="comment"> * close the file or reset the cursor position.</span>
<a name="l01318"></a>01318 <span class="comment"> *</span>
<a name="l01319"></a>01319 <span class="comment"> * @note due to memory pseudo-reallocation behavior (due to pools), this</span>
<a name="l01320"></a>01320 <span class="comment"> *   can be a memory-intensive operation for large files.</span>
<a name="l01321"></a>01321 <span class="comment"> */</span>
<a name="l01322"></a>01322 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01323"></a>01323 <a class="code" href="svn__io_8h.html#a59b7be5b78cc045ed972b226e06ab509" title="Sets *result to a string containing the contents of the already opened file.">svn_stringbuf_from_aprfile</a>(<a class="code" href="structsvn__stringbuf__t.html" title="A buffered string, capable of appending without an allocation and copy for each append.">svn_stringbuf_t</a> **result,
<a name="l01324"></a>01324                            apr_file_t *file,
<a name="l01325"></a>01325                            apr_pool_t *pool);
<a name="l01326"></a>01326 <span class="comment"></span>
<a name="l01327"></a>01327 <span class="comment">/** Remove file @a path, a utf8-encoded path.  This wraps apr_file_remove(),</span>
<a name="l01328"></a>01328 <span class="comment"> * converting any error to a Subversion error. If @a ignore_enoent is TRUE, and</span>
<a name="l01329"></a>01329 <span class="comment"> * the file is not present (APR_STATUS_IS_ENOENT returns TRUE), then no</span>
<a name="l01330"></a>01330 <span class="comment"> * error will be returned.</span>
<a name="l01331"></a>01331 <span class="comment"> *</span>
<a name="l01332"></a>01332 <span class="comment"> * The file will be removed even if it is not writable.  (On Windows and</span>
<a name="l01333"></a>01333 <span class="comment"> * OS/2, this function first clears the file&#39;s read-only bit.)</span>
<a name="l01334"></a>01334 <span class="comment"> *</span>
<a name="l01335"></a>01335 <span class="comment"> * @since New in 1.7.</span>
<a name="l01336"></a>01336 <span class="comment"> */</span>
<a name="l01337"></a>01337 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01338"></a>01338 <a class="code" href="svn__io_8h.html#a528121fa3625ec79bea870b5e53d98c6" title="Remove file path, a utf8-encoded path.">svn_io_remove_file2</a>(const <span class="keywordtype">char</span> *path,
<a name="l01339"></a>01339                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> ignore_enoent,
<a name="l01340"></a>01340                     apr_pool_t *scratch_pool);
<a name="l01341"></a>01341 <span class="comment"></span>
<a name="l01342"></a>01342 <span class="comment">/** Similar to svn_io_remove_file2(), except with @a ignore_enoent set to FALSE.</span>
<a name="l01343"></a>01343 <span class="comment"> *</span>
<a name="l01344"></a>01344 <span class="comment"> * @deprecated Provided for backwards compatibility with the 1.6 API.</span>
<a name="l01345"></a>01345 <span class="comment"> */</span>
<a name="l01346"></a>01346 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01347"></a>01347 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01348"></a>01348 <a class="code" href="svn__io_8h.html#abce28e789f76b15917b28b157d54dcfb" title="Similar to svn_io_remove_file2(), except with ignore_enoent set to FALSE.">svn_io_remove_file</a>(const <span class="keywordtype">char</span> *path,
<a name="l01349"></a>01349                    apr_pool_t *pool);
<a name="l01350"></a>01350 <span class="comment"></span>
<a name="l01351"></a>01351 <span class="comment">/** Recursively remove directory @a path.  @a path is utf8-encoded.</span>
<a name="l01352"></a>01352 <span class="comment"> * If @a ignore_enoent is @c TRUE, don&#39;t fail if the target directory</span>
<a name="l01353"></a>01353 <span class="comment"> * doesn&#39;t exist.  Use @a pool for temporary allocations.</span>
<a name="l01354"></a>01354 <span class="comment"> *</span>
<a name="l01355"></a>01355 <span class="comment"> * Because recursive delete of a directory tree can be a lengthy operation,</span>
<a name="l01356"></a>01356 <span class="comment"> * provide @a cancel_func and @a cancel_baton for interruptibility.</span>
<a name="l01357"></a>01357 <span class="comment"> *</span>
<a name="l01358"></a>01358 <span class="comment"> * @since New in 1.5.</span>
<a name="l01359"></a>01359 <span class="comment"> */</span>
<a name="l01360"></a>01360 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01361"></a>01361 <a class="code" href="svn__io_8h.html#a9a26dab3678b7ee9c8ebdb8e1d60aedc" title="Recursively remove directory path.">svn_io_remove_dir2</a>(const <span class="keywordtype">char</span> *path,
<a name="l01362"></a>01362                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> ignore_enoent,
<a name="l01363"></a>01363                    <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l01364"></a>01364                    <span class="keywordtype">void</span> *cancel_baton,
<a name="l01365"></a>01365                    apr_pool_t *pool);
<a name="l01366"></a>01366 <span class="comment"></span>
<a name="l01367"></a>01367 <span class="comment">/** Similar to svn_io_remove_dir2(), but with @a ignore_enoent set to</span>
<a name="l01368"></a>01368 <span class="comment"> * @c FALSE and @a cancel_func and @a cancel_baton set to @c NULL.</span>
<a name="l01369"></a>01369 <span class="comment"> *</span>
<a name="l01370"></a>01370 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.4 API</span>
<a name="l01371"></a>01371 <span class="comment"> */</span>
<a name="l01372"></a>01372 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01373"></a>01373 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01374"></a>01374 <a class="code" href="svn__io_8h.html#ad7a26505bf041286d02793eb2a17be04" title="Similar to svn_io_remove_dir2(), but with ignore_enoent set to FALSE and cancel_func and cancel_baton...">svn_io_remove_dir</a>(const <span class="keywordtype">char</span> *path,
<a name="l01375"></a>01375                   apr_pool_t *pool);
<a name="l01376"></a>01376 <span class="comment"></span>
<a name="l01377"></a>01377 <span class="comment">/** Read all of the disk entries in directory @a path, a utf8-encoded</span>
<a name="l01378"></a>01378 <span class="comment"> * path.  Set @a *dirents to a hash mapping dirent names (&lt;tt&gt;char *&lt;/tt&gt;) to</span>
<a name="l01379"></a>01379 <span class="comment"> * undefined non-NULL values, allocated in @a pool.</span>
<a name="l01380"></a>01380 <span class="comment"> *</span>
<a name="l01381"></a>01381 <span class="comment"> * @note The `.&#39; and `..&#39; directories normally returned by</span>
<a name="l01382"></a>01382 <span class="comment"> * apr_dir_read() are NOT returned in the hash.</span>
<a name="l01383"></a>01383 <span class="comment"> *</span>
<a name="l01384"></a>01384 <span class="comment"> * @since New in 1.4.</span>
<a name="l01385"></a>01385 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l01386"></a>01386 <span class="comment"> */</span>
<a name="l01387"></a>01387 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01388"></a>01388 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01389"></a>01389 <a class="code" href="svn__io_8h.html#a0f79a74771d956231850979d58b9106e" title="Read all of the disk entries in directory path, a utf8-encoded path.">svn_io_get_dir_filenames</a>(apr_hash_t **dirents,
<a name="l01390"></a>01390                          const <span class="keywordtype">char</span> *path,
<a name="l01391"></a>01391                          apr_pool_t *pool);
<a name="l01392"></a>01392 <span class="comment"></span>
<a name="l01393"></a>01393 <span class="comment">/** Read all of the disk entries in directory @a path, a utf8-encoded</span>
<a name="l01394"></a>01394 <span class="comment"> * path.  Set @a *dirents to a hash mapping dirent names (&lt;tt&gt;char *&lt;/tt&gt;) to</span>
<a name="l01395"></a>01395 <span class="comment"> * #svn_io_dirent2_t structures, allocated in @a pool.</span>
<a name="l01396"></a>01396 <span class="comment"> *</span>
<a name="l01397"></a>01397 <span class="comment"> * If @a only_check_type is set to @c TRUE, only the kind and special</span>
<a name="l01398"></a>01398 <span class="comment"> * fields of the svn_io_dirent2_t are filled.</span>
<a name="l01399"></a>01399 <span class="comment"> *</span>
<a name="l01400"></a>01400 <span class="comment"> * @note The `.&#39; and `..&#39; directories normally returned by</span>
<a name="l01401"></a>01401 <span class="comment"> * apr_dir_read() are NOT returned in the hash.</span>
<a name="l01402"></a>01402 <span class="comment"> *</span>
<a name="l01403"></a>01403 <span class="comment"> * @note The kind field in the @a dirents is set according to the mapping</span>
<a name="l01404"></a>01404 <span class="comment"> *       as documented for svn_io_check_path().</span>
<a name="l01405"></a>01405 <span class="comment"> *</span>
<a name="l01406"></a>01406 <span class="comment"> * @since New in 1.7.</span>
<a name="l01407"></a>01407 <span class="comment"> */</span>
<a name="l01408"></a>01408 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01409"></a>01409 <a class="code" href="svn__io_8h.html#a7cf56b512d7aa14d5330d8b30eec6189" title="Read all of the disk entries in directory path, a utf8-encoded path.">svn_io_get_dirents3</a>(apr_hash_t **dirents,
<a name="l01410"></a>01410                     const <span class="keywordtype">char</span> *path,
<a name="l01411"></a>01411                     <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> only_check_type,
<a name="l01412"></a>01412                     apr_pool_t *result_pool,
<a name="l01413"></a>01413                     apr_pool_t *scratch_pool);
<a name="l01414"></a>01414 
<a name="l01415"></a>01415 <span class="comment"></span>
<a name="l01416"></a>01416 <span class="comment">/** Similar to svn_io_get_dirents3, but returns a mapping to svn_io_dirent_t</span>
<a name="l01417"></a>01417 <span class="comment"> * structures instead of svn_io_dirent2_t and with only a single pool.</span>
<a name="l01418"></a>01418 <span class="comment"> *</span>
<a name="l01419"></a>01419 <span class="comment"> * @since New in 1.3.</span>
<a name="l01420"></a>01420 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l01421"></a>01421 <span class="comment"> */</span>
<a name="l01422"></a>01422 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01423"></a>01423 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01424"></a>01424 <a class="code" href="svn__io_8h.html#a1583e69324a3f820894422f57fa37d57" title="Similar to svn_io_get_dirents3, but returns a mapping to svn_io_dirent_t structures instead of svn_io...">svn_io_get_dirents2</a>(apr_hash_t **dirents,
<a name="l01425"></a>01425                     const <span class="keywordtype">char</span> *path,
<a name="l01426"></a>01426                     apr_pool_t *pool);
<a name="l01427"></a>01427 <span class="comment"></span>
<a name="l01428"></a>01428 <span class="comment">/** Similar to svn_io_get_dirents2(), but @a *dirents is a hash table</span>
<a name="l01429"></a>01429 <span class="comment"> * with #svn_node_kind_t values.</span>
<a name="l01430"></a>01430 <span class="comment"> *</span>
<a name="l01431"></a>01431 <span class="comment"> * @deprecated Provided for backwards compatibility with the 1.2 API.</span>
<a name="l01432"></a>01432 <span class="comment"> */</span>
<a name="l01433"></a>01433 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01434"></a>01434 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01435"></a>01435 <a class="code" href="svn__io_8h.html#a4b09482c9762a2391435a6d1702d59af" title="Similar to svn_io_get_dirents2(), but *dirents is a hash table with svn_node_kind_t values...">svn_io_get_dirents</a>(apr_hash_t **dirents,
<a name="l01436"></a>01436                    const <span class="keywordtype">char</span> *path,
<a name="l01437"></a>01437                    apr_pool_t *pool);
<a name="l01438"></a>01438 <span class="comment"></span>
<a name="l01439"></a>01439 <span class="comment">/** Create a svn_io_dirent2_t instance for path. Specialized variant of</span>
<a name="l01440"></a>01440 <span class="comment"> * svn_io_stat() that directly translates node_kind and special.</span>
<a name="l01441"></a>01441 <span class="comment"> *</span>
<a name="l01442"></a>01442 <span class="comment"> * If @a ignore_enoent is set to @c TRUE, set *dirent_p-&gt;kind to</span>
<a name="l01443"></a>01443 <span class="comment"> * svn_node_none instead of returning an error.</span>
<a name="l01444"></a>01444 <span class="comment"> *</span>
<a name="l01445"></a>01445 <span class="comment"> * @since New in 1.7.</span>
<a name="l01446"></a>01446 <span class="comment"> */</span>
<a name="l01447"></a>01447 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01448"></a>01448 <a class="code" href="svn__io_8h.html#a5f173471fff3a277d315845056e61f94" title="Create a svn_io_dirent2_t instance for path.">svn_io_stat_dirent</a>(const <a class="code" href="structsvn__io__dirent2__t.html" title="A set of directory entry data elements as returned by svn_io_get_dirents.">svn_io_dirent2_t</a> **dirent_p,
<a name="l01449"></a>01449                    const <span class="keywordtype">char</span> *path,
<a name="l01450"></a>01450                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> ignore_enoent,
<a name="l01451"></a>01451                    apr_pool_t *result_pool,
<a name="l01452"></a>01452                    apr_pool_t *scratch_pool);
<a name="l01453"></a>01453 
<a name="l01454"></a>01454 <span class="comment"></span>
<a name="l01455"></a>01455 <span class="comment">/** Callback function type for svn_io_dir_walk() */</span>
<a name="l01456"></a><a class="code" href="svn__io_8h.html#ae3dd33688b3e75430f4720f4d90c1506">01456</a> typedef <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> * (*<a class="code" href="svn__io_8h.html#ae3dd33688b3e75430f4720f4d90c1506" title="Callback function type for svn_io_dir_walk()">svn_io_walk_func_t</a>)(<span class="keywordtype">void</span> *baton,
<a name="l01457"></a>01457                                             const <span class="keywordtype">char</span> *path,
<a name="l01458"></a>01458                                             const apr_finfo_t *finfo,
<a name="l01459"></a>01459                                             apr_pool_t *pool);
<a name="l01460"></a>01460 <span class="comment"></span>
<a name="l01461"></a>01461 <span class="comment">/** Recursively walk the directory rooted at @a dirname, a</span>
<a name="l01462"></a>01462 <span class="comment"> * utf8-encoded path, invoking @a walk_func (with @a walk_baton) for</span>
<a name="l01463"></a>01463 <span class="comment"> * each item in the tree.  For a given directory, invoke @a walk_func</span>
<a name="l01464"></a>01464 <span class="comment"> * on the directory itself before invoking it on any children thereof.</span>
<a name="l01465"></a>01465 <span class="comment"> *</span>
<a name="l01466"></a>01466 <span class="comment"> * Deliver to @a walk_func the information specified by @a wanted,</span>
<a name="l01467"></a>01467 <span class="comment"> * which is a combination of @c APR_FINFO_* flags, plus the</span>
<a name="l01468"></a>01468 <span class="comment"> * information specified by @c APR_FINFO_TYPE and @c APR_FINFO_NAME.</span>
<a name="l01469"></a>01469 <span class="comment"> *</span>
<a name="l01470"></a>01470 <span class="comment"> * Use @a pool for all allocations.</span>
<a name="l01471"></a>01471 <span class="comment"> *</span>
<a name="l01472"></a>01472 <span class="comment"> * @note This function does not currently pass all file types to @a</span>
<a name="l01473"></a>01473 <span class="comment"> * walk_func -- only APR_DIR, APR_REG, and APR_LNK.  We reserve the</span>
<a name="l01474"></a>01474 <span class="comment"> * right to pass additional file types through this interface in the</span>
<a name="l01475"></a>01475 <span class="comment"> * future, though, so implementations of this callback should</span>
<a name="l01476"></a>01476 <span class="comment"> * explicitly test FINFO-&gt;filetype.  See the APR library&#39;s</span>
<a name="l01477"></a>01477 <span class="comment"> * apr_filetype_e enum for the various filetypes and their meanings.</span>
<a name="l01478"></a>01478 <span class="comment"> *</span>
<a name="l01479"></a>01479 <span class="comment"> * @since New in 1.7.</span>
<a name="l01480"></a>01480 <span class="comment"> */</span>
<a name="l01481"></a>01481 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01482"></a>01482 <a class="code" href="svn__io_8h.html#ac47edc693b1106c9b4494017b469d206" title="Recursively walk the directory rooted at dirname, a utf8-encoded path, invoking walk_func (with walk_...">svn_io_dir_walk2</a>(const <span class="keywordtype">char</span> *dirname,
<a name="l01483"></a>01483                  apr_int32_t wanted,
<a name="l01484"></a>01484                  <a class="code" href="svn__io_8h.html#ae3dd33688b3e75430f4720f4d90c1506" title="Callback function type for svn_io_dir_walk()">svn_io_walk_func_t</a> walk_func,
<a name="l01485"></a>01485                  <span class="keywordtype">void</span> *walk_baton,
<a name="l01486"></a>01486                  apr_pool_t *pool);
<a name="l01487"></a>01487 <span class="comment"></span>
<a name="l01488"></a>01488 <span class="comment">/** Similar to svn_io_dir_walk(), but only calls @a walk_func for</span>
<a name="l01489"></a>01489 <span class="comment"> * files of type APR_DIR (directory) and APR_REG (regular file).</span>
<a name="l01490"></a>01490 <span class="comment"> *</span>
<a name="l01491"></a>01491 <span class="comment"> * @deprecated Provided for backwards compatibility with the 1.6 API.</span>
<a name="l01492"></a>01492 <span class="comment"> */</span>
<a name="l01493"></a>01493 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01494"></a>01494 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01495"></a>01495 <a class="code" href="svn__io_8h.html#acac394a2c49dcfb02b8cda55c9281625" title="Similar to svn_io_dir_walk(), but only calls walk_func for files of type APR_DIR (directory) and APR_...">svn_io_dir_walk</a>(const <span class="keywordtype">char</span> *dirname,
<a name="l01496"></a>01496                 apr_int32_t wanted,
<a name="l01497"></a>01497                 <a class="code" href="svn__io_8h.html#ae3dd33688b3e75430f4720f4d90c1506" title="Callback function type for svn_io_dir_walk()">svn_io_walk_func_t</a> walk_func,
<a name="l01498"></a>01498                 <span class="keywordtype">void</span> *walk_baton,
<a name="l01499"></a>01499                 apr_pool_t *pool);
<a name="l01500"></a>01500 <span class="comment"></span>
<a name="l01501"></a>01501 <span class="comment">/**</span>
<a name="l01502"></a>01502 <span class="comment"> * Start @a cmd with @a args, using utf8-encoded @a path as working</span>
<a name="l01503"></a>01503 <span class="comment"> * directory.  Return the process handle for the invoked program in @a</span>
<a name="l01504"></a>01504 <span class="comment"> * *cmd_proc.</span>
<a name="l01505"></a>01505 <span class="comment"> *</span>
<a name="l01506"></a>01506 <span class="comment"> * If @a infile_pipe is TRUE, connect @a cmd&#39;s stdin to a pipe;</span>
<a name="l01507"></a>01507 <span class="comment"> * otherwise, connect it to @a infile (which may be NULL).  If</span>
<a name="l01508"></a>01508 <span class="comment"> * @a outfile_pipe is TRUE, connect @a cmd&#39;s stdout to a pipe; otherwise,</span>
<a name="l01509"></a>01509 <span class="comment"> * connect it to @a outfile (which may be NULL).  If @a errfile_pipe</span>
<a name="l01510"></a>01510 <span class="comment"> * is TRUE, connect @a cmd&#39;s stderr to a pipe; otherwise, connect it</span>
<a name="l01511"></a>01511 <span class="comment"> * to @a errfile (which may be NULL).  (Callers must pass FALSE for</span>
<a name="l01512"></a>01512 <span class="comment"> * each of these boolean values for which the corresponding file</span>
<a name="l01513"></a>01513 <span class="comment"> * handle is non-NULL.)</span>
<a name="l01514"></a>01514 <span class="comment"> *</span>
<a name="l01515"></a>01515 <span class="comment"> * @a args is a list of utf8-encoded &lt;tt&gt;const char *&lt;/tt&gt; arguments,</span>
<a name="l01516"></a>01516 <span class="comment"> * terminated by @c NULL.  @a args[0] is the name of the program, though it</span>
<a name="l01517"></a>01517 <span class="comment"> * need not be the same as @a cmd.</span>
<a name="l01518"></a>01518 <span class="comment"> *</span>
<a name="l01519"></a>01519 <span class="comment"> * If @a inherit is TRUE, the invoked program inherits its environment from</span>
<a name="l01520"></a>01520 <span class="comment"> * the caller and @a cmd, if not absolute, is searched for in PATH.</span>
<a name="l01521"></a>01521 <span class="comment"> * Otherwise, the invoked program runs with an empty environment and @a cmd</span>
<a name="l01522"></a>01522 <span class="comment"> * must be an absolute path.</span>
<a name="l01523"></a>01523 <span class="comment"> *</span>
<a name="l01524"></a>01524 <span class="comment"> * @note On some platforms, failure to execute @a cmd in the child process</span>
<a name="l01525"></a>01525 <span class="comment"> * will result in error output being written to @a errfile, if non-NULL, and</span>
<a name="l01526"></a>01526 <span class="comment"> * a non-zero exit status being returned to the parent process.</span>
<a name="l01527"></a>01527 <span class="comment"> *</span>
<a name="l01528"></a>01528 <span class="comment"> * @since New in 1.7.</span>
<a name="l01529"></a>01529 <span class="comment"> */</span>
<a name="l01530"></a>01530 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *<a class="code" href="svn__io_8h.html#aa9e4a63f9f1c86d6ff712bcb6d51ddf4" title="Start cmd with args, using utf8-encoded path as working directory.">svn_io_start_cmd2</a>(apr_proc_t *cmd_proc,
<a name="l01531"></a>01531                                const <span class="keywordtype">char</span> *path,
<a name="l01532"></a>01532                                const <span class="keywordtype">char</span> *cmd,
<a name="l01533"></a>01533                                const <span class="keywordtype">char</span> *const *args,
<a name="l01534"></a>01534                                <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> inherit,
<a name="l01535"></a>01535                                <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> infile_pipe,
<a name="l01536"></a>01536                                apr_file_t *infile,
<a name="l01537"></a>01537                                <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> outfile_pipe,
<a name="l01538"></a>01538                                apr_file_t *outfile,
<a name="l01539"></a>01539                                <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> errfile_pipe,
<a name="l01540"></a>01540                                apr_file_t *errfile,
<a name="l01541"></a>01541                                apr_pool_t *pool);
<a name="l01542"></a>01542 <span class="comment"></span>
<a name="l01543"></a>01543 <span class="comment">/**</span>
<a name="l01544"></a>01544 <span class="comment"> * Similar to svn_io_start_cmd2() but with @a infile_pipe, @a</span>
<a name="l01545"></a>01545 <span class="comment"> * outfile_pipe, and @a errfile_pipe always FALSE.</span>
<a name="l01546"></a>01546 <span class="comment"> *</span>
<a name="l01547"></a>01547 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API</span>
<a name="l01548"></a>01548 <span class="comment"> * @since New in 1.3.</span>
<a name="l01549"></a>01549 <span class="comment"> */</span>
<a name="l01550"></a>01550 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01551"></a>01551 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01552"></a>01552 <a class="code" href="svn__io_8h.html#a4ee2641c854734f78337aee204b79201" title="Similar to svn_io_start_cmd2() but with infile_pipe, outfile_pipe, and errfile_pipe always FALSE...">svn_io_start_cmd</a>(apr_proc_t *cmd_proc,
<a name="l01553"></a>01553                  const <span class="keywordtype">char</span> *path,
<a name="l01554"></a>01554                  const <span class="keywordtype">char</span> *cmd,
<a name="l01555"></a>01555                  const <span class="keywordtype">char</span> *const *args,
<a name="l01556"></a>01556                  <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> inherit,
<a name="l01557"></a>01557                  apr_file_t *infile,
<a name="l01558"></a>01558                  apr_file_t *outfile,
<a name="l01559"></a>01559                  apr_file_t *errfile,
<a name="l01560"></a>01560                  apr_pool_t *pool);
<a name="l01561"></a>01561 <span class="comment"></span>
<a name="l01562"></a>01562 <span class="comment">/**</span>
<a name="l01563"></a>01563 <span class="comment"> * Wait for the process @a *cmd_proc to complete and optionally retrieve</span>
<a name="l01564"></a>01564 <span class="comment"> * its exit code.  @a cmd is used only in error messages.</span>
<a name="l01565"></a>01565 <span class="comment"> *</span>
<a name="l01566"></a>01566 <span class="comment"> * If @a exitcode is not NULL, set @a *exitcode to the exit code of the</span>
<a name="l01567"></a>01567 <span class="comment"> * process and do not consider any exit code to be an error.  If @a exitcode</span>
<a name="l01568"></a>01568 <span class="comment"> * is NULL, then if the exit code of the process is non-zero then return an</span>
<a name="l01569"></a>01569 <span class="comment"> * #SVN_ERR_EXTERNAL_PROGRAM error.</span>
<a name="l01570"></a>01570 <span class="comment"> *</span>
<a name="l01571"></a>01571 <span class="comment"> * If @a exitwhy is not NULL, set @a *exitwhy to indicate why the process</span>
<a name="l01572"></a>01572 <span class="comment"> * terminated and do not consider any reason to be an error.  If @a exitwhy</span>
<a name="l01573"></a>01573 <span class="comment"> * is NULL, then if the termination reason is not @c APR_PROC_CHECK_EXIT()</span>
<a name="l01574"></a>01574 <span class="comment"> * then return an #SVN_ERR_EXTERNAL_PROGRAM error.</span>
<a name="l01575"></a>01575 <span class="comment"> *</span>
<a name="l01576"></a>01576 <span class="comment"> * @since New in 1.3.</span>
<a name="l01577"></a>01577 <span class="comment"> */</span>
<a name="l01578"></a>01578 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01579"></a>01579 <a class="code" href="svn__io_8h.html#acc0478196081ff559613daf3ac8a39c7" title="Wait for the process *cmd_proc to complete and optionally retrieve its exit code.">svn_io_wait_for_cmd</a>(apr_proc_t *cmd_proc,
<a name="l01580"></a>01580                     const <span class="keywordtype">char</span> *cmd,
<a name="l01581"></a>01581                     <span class="keywordtype">int</span> *exitcode,
<a name="l01582"></a>01582                     apr_exit_why_e *exitwhy,
<a name="l01583"></a>01583                     apr_pool_t *pool);
<a name="l01584"></a>01584 <span class="comment"></span>
<a name="l01585"></a>01585 <span class="comment">/** Run a command to completion, by first calling svn_io_start_cmd() and</span>
<a name="l01586"></a>01586 <span class="comment"> * then calling svn_io_wait_for_cmd().  The parameters correspond to</span>
<a name="l01587"></a>01587 <span class="comment"> * the same-named parameters of those two functions.</span>
<a name="l01588"></a>01588 <span class="comment"> */</span>
<a name="l01589"></a>01589 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01590"></a>01590 <a class="code" href="svn__io_8h.html#ab59c1c8d67cf405ca36a5556858da82d" title="Run a command to completion, by first calling svn_io_start_cmd() and then calling svn_io_wait_for_cmd...">svn_io_run_cmd</a>(const <span class="keywordtype">char</span> *path,
<a name="l01591"></a>01591                const <span class="keywordtype">char</span> *cmd,
<a name="l01592"></a>01592                const <span class="keywordtype">char</span> *const *args,
<a name="l01593"></a>01593                <span class="keywordtype">int</span> *exitcode,
<a name="l01594"></a>01594                apr_exit_why_e *exitwhy,
<a name="l01595"></a>01595                <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> inherit,
<a name="l01596"></a>01596                apr_file_t *infile,
<a name="l01597"></a>01597                apr_file_t *outfile,
<a name="l01598"></a>01598                apr_file_t *errfile,
<a name="l01599"></a>01599                apr_pool_t *pool);
<a name="l01600"></a>01600 <span class="comment"></span>
<a name="l01601"></a>01601 <span class="comment">/** Invoke the configured @c diff program, with @a user_args (an array</span>
<a name="l01602"></a>01602 <span class="comment"> * of utf8-encoded @a num_user_args arguments) if they are specified</span>
<a name="l01603"></a>01603 <span class="comment"> * (that is, if @a user_args is non-NULL), or &quot;-u&quot; if they are not.</span>
<a name="l01604"></a>01604 <span class="comment"> * If @a user_args is NULL, the value of @a num_user_args is ignored.</span>
<a name="l01605"></a>01605 <span class="comment"> *</span>
<a name="l01606"></a>01606 <span class="comment"> * Diff runs in utf8-encoded @a dir, and its exit status is stored in</span>
<a name="l01607"></a>01607 <span class="comment"> * @a exitcode, if it is not @c NULL.</span>
<a name="l01608"></a>01608 <span class="comment"> *</span>
<a name="l01609"></a>01609 <span class="comment"> * If @a label1 and/or @a label2 are not NULL they will be passed to the diff</span>
<a name="l01610"></a>01610 <span class="comment"> * process as the arguments of &quot;-L&quot; options.  @a label1 and @a label2 are also</span>
<a name="l01611"></a>01611 <span class="comment"> * in utf8, and will be converted to native charset along with the other args.</span>
<a name="l01612"></a>01612 <span class="comment"> *</span>
<a name="l01613"></a>01613 <span class="comment"> * @a from is the first file passed to diff, and @a to is the second.  The</span>
<a name="l01614"></a>01614 <span class="comment"> * stdout of diff will be sent to @a outfile, and the stderr to @a errfile.</span>
<a name="l01615"></a>01615 <span class="comment"> *</span>
<a name="l01616"></a>01616 <span class="comment"> * @a diff_cmd must be non-NULL.</span>
<a name="l01617"></a>01617 <span class="comment"> *</span>
<a name="l01618"></a>01618 <span class="comment"> * Do all allocation in @a pool.</span>
<a name="l01619"></a>01619 <span class="comment"> * @since New in 1.6.0.</span>
<a name="l01620"></a>01620 <span class="comment"> */</span>
<a name="l01621"></a>01621 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01622"></a>01622 <a class="code" href="svn__io_8h.html#acabda4f4f591bec06ece8e35829a79f4" title="Invoke the configured diff program, with user_args (an array of utf8-encoded num_user_args arguments)...">svn_io_run_diff2</a>(const <span class="keywordtype">char</span> *dir,
<a name="l01623"></a>01623                  const <span class="keywordtype">char</span> *const *user_args,
<a name="l01624"></a>01624                  <span class="keywordtype">int</span> num_user_args,
<a name="l01625"></a>01625                  const <span class="keywordtype">char</span> *label1,
<a name="l01626"></a>01626                  const <span class="keywordtype">char</span> *label2,
<a name="l01627"></a>01627                  const <span class="keywordtype">char</span> *from,
<a name="l01628"></a>01628                  const <span class="keywordtype">char</span> *to,
<a name="l01629"></a>01629                  <span class="keywordtype">int</span> *exitcode,
<a name="l01630"></a>01630                  apr_file_t *outfile,
<a name="l01631"></a>01631                  apr_file_t *errfile,
<a name="l01632"></a>01632                  const <span class="keywordtype">char</span> *diff_cmd,
<a name="l01633"></a>01633                  apr_pool_t *pool);
<a name="l01634"></a>01634 <span class="comment"></span>
<a name="l01635"></a>01635 <span class="comment">/** Similar to svn_io_run_diff2() but with @a diff_cmd encoded in internal</span>
<a name="l01636"></a>01636 <span class="comment"> * encoding used by APR.</span>
<a name="l01637"></a>01637 <span class="comment"> *</span>
<a name="l01638"></a>01638 <span class="comment"> * @deprecated Provided for backwards compatibility with the 1.5 API. */</span>
<a name="l01639"></a>01639 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01640"></a>01640 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01641"></a>01641 <a class="code" href="svn__io_8h.html#a6c0266e00c285a0b90eef9faf0e31024" title="Similar to svn_io_run_diff2() but with diff_cmd encoded in internal encoding used by APR...">svn_io_run_diff</a>(const <span class="keywordtype">char</span> *dir,
<a name="l01642"></a>01642                 const <span class="keywordtype">char</span> *const *user_args,
<a name="l01643"></a>01643                 <span class="keywordtype">int</span> num_user_args,
<a name="l01644"></a>01644                 const <span class="keywordtype">char</span> *label1,
<a name="l01645"></a>01645                 const <span class="keywordtype">char</span> *label2,
<a name="l01646"></a>01646                 const <span class="keywordtype">char</span> *from,
<a name="l01647"></a>01647                 const <span class="keywordtype">char</span> *to,
<a name="l01648"></a>01648                 <span class="keywordtype">int</span> *exitcode,
<a name="l01649"></a>01649                 apr_file_t *outfile,
<a name="l01650"></a>01650                 apr_file_t *errfile,
<a name="l01651"></a>01651                 const <span class="keywordtype">char</span> *diff_cmd,
<a name="l01652"></a>01652                 apr_pool_t *pool);
<a name="l01653"></a>01653 
<a name="l01654"></a>01654 
<a name="l01655"></a>01655 <span class="comment"></span>
<a name="l01656"></a>01656 <span class="comment">/** Invoke the configured @c diff3 program, in utf8-encoded @a dir</span>
<a name="l01657"></a>01657 <span class="comment"> * like this:</span>
<a name="l01658"></a>01658 <span class="comment"> *</span>
<a name="l01659"></a>01659 <span class="comment"> *          diff3 -E -m @a mine @a older @a yours &gt; @a merged</span>
<a name="l01660"></a>01660 <span class="comment"> *</span>
<a name="l01661"></a>01661 <span class="comment"> * (See the diff3 documentation for details.)</span>
<a name="l01662"></a>01662 <span class="comment"> *</span>
<a name="l01663"></a>01663 <span class="comment"> * If @a user_args is non-NULL, replace &quot;-E&quot; with the &lt;tt&gt;const char*&lt;/tt&gt;</span>
<a name="l01664"></a>01664 <span class="comment"> * elements that @a user_args contains.</span>
<a name="l01665"></a>01665 <span class="comment"> *</span>
<a name="l01666"></a>01666 <span class="comment"> * @a mine, @a older and @a yours are utf8-encoded paths (relative to</span>
<a name="l01667"></a>01667 <span class="comment"> * @a dir or absolute) to three files that already exist.</span>
<a name="l01668"></a>01668 <span class="comment"> *</span>
<a name="l01669"></a>01669 <span class="comment"> * @a merged is an open file handle, and is left open after the merge</span>
<a name="l01670"></a>01670 <span class="comment"> * result is written to it. (@a merged should *not* be the same file</span>
<a name="l01671"></a>01671 <span class="comment"> * as @a mine, or nondeterministic things may happen!)</span>
<a name="l01672"></a>01672 <span class="comment"> *</span>
<a name="l01673"></a>01673 <span class="comment"> * @a mine_label, @a older_label, @a yours_label are utf8-encoded label</span>
<a name="l01674"></a>01674 <span class="comment"> * parameters for diff3&#39;s -L option.  Any of them may be @c NULL, in</span>
<a name="l01675"></a>01675 <span class="comment"> * which case the corresponding @a mine, @a older, or @a yours parameter is</span>
<a name="l01676"></a>01676 <span class="comment"> * used instead.</span>
<a name="l01677"></a>01677 <span class="comment"> *</span>
<a name="l01678"></a>01678 <span class="comment"> * Set @a *exitcode to diff3&#39;s exit status.  If @a *exitcode is anything</span>
<a name="l01679"></a>01679 <span class="comment"> * other than 0 or 1, then return #SVN_ERR_EXTERNAL_PROGRAM.  (Note the</span>
<a name="l01680"></a>01680 <span class="comment"> * following from the diff3 info pages: &quot;An exit status of 0 means</span>
<a name="l01681"></a>01681 <span class="comment"> * `diff3&#39; was successful, 1 means some conflicts were found, and 2</span>
<a name="l01682"></a>01682 <span class="comment"> * means trouble.&quot;)</span>
<a name="l01683"></a>01683 <span class="comment"> *</span>
<a name="l01684"></a>01684 <span class="comment"> * @a diff3_cmd must be non-NULL.</span>
<a name="l01685"></a>01685 <span class="comment"> *</span>
<a name="l01686"></a>01686 <span class="comment"> * Do all allocation in @a pool.</span>
<a name="l01687"></a>01687 <span class="comment"> *</span>
<a name="l01688"></a>01688 <span class="comment"> * @since New in 1.4.</span>
<a name="l01689"></a>01689 <span class="comment"> */</span>
<a name="l01690"></a>01690 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01691"></a>01691 <a class="code" href="svn__io_8h.html#a0ef4f589d31a5578526c3de2d0587cf7" title="Invoke the configured diff3 program, in utf8-encoded dir like this:">svn_io_run_diff3_3</a>(<span class="keywordtype">int</span> *exitcode,
<a name="l01692"></a>01692                    const <span class="keywordtype">char</span> *dir,
<a name="l01693"></a>01693                    const <span class="keywordtype">char</span> *mine,
<a name="l01694"></a>01694                    const <span class="keywordtype">char</span> *older,
<a name="l01695"></a>01695                    const <span class="keywordtype">char</span> *yours,
<a name="l01696"></a>01696                    const <span class="keywordtype">char</span> *mine_label,
<a name="l01697"></a>01697                    const <span class="keywordtype">char</span> *older_label,
<a name="l01698"></a>01698                    const <span class="keywordtype">char</span> *yours_label,
<a name="l01699"></a>01699                    apr_file_t *merged,
<a name="l01700"></a>01700                    const <span class="keywordtype">char</span> *diff3_cmd,
<a name="l01701"></a>01701                    const apr_array_header_t *user_args,
<a name="l01702"></a>01702                    apr_pool_t *pool);
<a name="l01703"></a>01703 <span class="comment"></span>
<a name="l01704"></a>01704 <span class="comment">/** Similar to svn_io_run_diff3_3(), but with @a diff3_cmd encoded in</span>
<a name="l01705"></a>01705 <span class="comment"> * internal encoding used by APR.</span>
<a name="l01706"></a>01706 <span class="comment"> *</span>
<a name="l01707"></a>01707 <span class="comment"> * @deprecated Provided for backwards compatibility with the 1.5 API.</span>
<a name="l01708"></a>01708 <span class="comment"> * @since New in 1.4.</span>
<a name="l01709"></a>01709 <span class="comment"> */</span>
<a name="l01710"></a>01710 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01711"></a>01711 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01712"></a>01712 <a class="code" href="svn__io_8h.html#a284650316c8ceefd30c4dae9aef49ec4" title="Similar to svn_io_run_diff3_3(), but with diff3_cmd encoded in internal encoding used by APR...">svn_io_run_diff3_2</a>(<span class="keywordtype">int</span> *exitcode,
<a name="l01713"></a>01713                    const <span class="keywordtype">char</span> *dir,
<a name="l01714"></a>01714                    const <span class="keywordtype">char</span> *mine,
<a name="l01715"></a>01715                    const <span class="keywordtype">char</span> *older,
<a name="l01716"></a>01716                    const <span class="keywordtype">char</span> *yours,
<a name="l01717"></a>01717                    const <span class="keywordtype">char</span> *mine_label,
<a name="l01718"></a>01718                    const <span class="keywordtype">char</span> *older_label,
<a name="l01719"></a>01719                    const <span class="keywordtype">char</span> *yours_label,
<a name="l01720"></a>01720                    apr_file_t *merged,
<a name="l01721"></a>01721                    const <span class="keywordtype">char</span> *diff3_cmd,
<a name="l01722"></a>01722                    const apr_array_header_t *user_args,
<a name="l01723"></a>01723                    apr_pool_t *pool);
<a name="l01724"></a>01724 <span class="comment"></span>
<a name="l01725"></a>01725 <span class="comment">/** Similar to svn_io_run_diff3_2(), but with @a user_args set to @c NULL.</span>
<a name="l01726"></a>01726 <span class="comment"> *</span>
<a name="l01727"></a>01727 <span class="comment"> * @deprecated Provided for backwards compatibility with the 1.3 API.</span>
<a name="l01728"></a>01728 <span class="comment"> */</span>
<a name="l01729"></a>01729 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01730"></a>01730 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01731"></a>01731 <a class="code" href="svn__io_8h.html#ae800def15e3ffc5e1645b296c4e7a1ca" title="Similar to svn_io_run_diff3_2(), but with user_args set to NULL.">svn_io_run_diff3</a>(const <span class="keywordtype">char</span> *dir,
<a name="l01732"></a>01732                  const <span class="keywordtype">char</span> *mine,
<a name="l01733"></a>01733                  const <span class="keywordtype">char</span> *older,
<a name="l01734"></a>01734                  const <span class="keywordtype">char</span> *yours,
<a name="l01735"></a>01735                  const <span class="keywordtype">char</span> *mine_label,
<a name="l01736"></a>01736                  const <span class="keywordtype">char</span> *older_label,
<a name="l01737"></a>01737                  const <span class="keywordtype">char</span> *yours_label,
<a name="l01738"></a>01738                  apr_file_t *merged,
<a name="l01739"></a>01739                  <span class="keywordtype">int</span> *exitcode,
<a name="l01740"></a>01740                  const <span class="keywordtype">char</span> *diff3_cmd,
<a name="l01741"></a>01741                  apr_pool_t *pool);
<a name="l01742"></a>01742 
<a name="l01743"></a>01743 <span class="comment"></span>
<a name="l01744"></a>01744 <span class="comment">/** Parse utf8-encoded @a mimetypes_file as a MIME types file (such as</span>
<a name="l01745"></a>01745 <span class="comment"> * is provided with Apache HTTP Server), and set @a *type_map to a</span>
<a name="l01746"></a>01746 <span class="comment"> * hash mapping &lt;tt&gt;const char *&lt;/tt&gt; filename extensions to</span>
<a name="l01747"></a>01747 <span class="comment"> * &lt;tt&gt;const char *&lt;/tt&gt; MIME types.</span>
<a name="l01748"></a>01748 <span class="comment"> *</span>
<a name="l01749"></a>01749 <span class="comment"> * @since New in 1.5.</span>
<a name="l01750"></a>01750 <span class="comment"> */</span>
<a name="l01751"></a>01751 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01752"></a>01752 <a class="code" href="svn__io_8h.html#ac4625a082416ccaafdd77e35e14ec4d4" title="Parse utf8-encoded mimetypes_file as a MIME types file (such as is provided with Apache HTTP Server)...">svn_io_parse_mimetypes_file</a>(apr_hash_t **type_map,
<a name="l01753"></a>01753                             const <span class="keywordtype">char</span> *mimetypes_file,
<a name="l01754"></a>01754                             apr_pool_t *pool);
<a name="l01755"></a>01755 
<a name="l01756"></a>01756 <span class="comment"></span>
<a name="l01757"></a>01757 <span class="comment">/** Examine utf8-encoded @a file to determine if it can be described by a</span>
<a name="l01758"></a>01758 <span class="comment"> * known (as in, known by this function) Multipurpose Internet Mail</span>
<a name="l01759"></a>01759 <span class="comment"> * Extension (MIME) type.  If so, set @a *mimetype to a character string</span>
<a name="l01760"></a>01760 <span class="comment"> * describing the MIME type, else set it to @c NULL.</span>
<a name="l01761"></a>01761 <span class="comment"> *</span>
<a name="l01762"></a>01762 <span class="comment"> * If not @c NULL, @a mimetype_map is a hash mapping &lt;tt&gt;const char *&lt;/tt&gt;</span>
<a name="l01763"></a>01763 <span class="comment"> * filename extensions to &lt;tt&gt;const char *&lt;/tt&gt; MIME types, and is the</span>
<a name="l01764"></a>01764 <span class="comment"> * first source consulted regarding @a file&#39;s MIME type.</span>
<a name="l01765"></a>01765 <span class="comment"> *</span>
<a name="l01766"></a>01766 <span class="comment"> * Use @a pool for any necessary allocations.</span>
<a name="l01767"></a>01767 <span class="comment"> *</span>
<a name="l01768"></a>01768 <span class="comment"> * @since New in 1.5.</span>
<a name="l01769"></a>01769 <span class="comment"> */</span>
<a name="l01770"></a>01770 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01771"></a>01771 <a class="code" href="svn__io_8h.html#ac1989d5030f1445f2502258bf4901ab4" title="Examine utf8-encoded file to determine if it can be described by a known (as in, known by this functi...">svn_io_detect_mimetype2</a>(const <span class="keywordtype">char</span> **mimetype,
<a name="l01772"></a>01772                         const <span class="keywordtype">char</span> *file,
<a name="l01773"></a>01773                         apr_hash_t *mimetype_map,
<a name="l01774"></a>01774                         apr_pool_t *pool);
<a name="l01775"></a>01775 
<a name="l01776"></a>01776 <span class="comment"></span>
<a name="l01777"></a>01777 <span class="comment">/** Like svn_io_detect_mimetype2, but with @a mimetypes_map set to</span>
<a name="l01778"></a>01778 <span class="comment"> * @c NULL.</span>
<a name="l01779"></a>01779 <span class="comment"> *</span>
<a name="l01780"></a>01780 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.4 API</span>
<a name="l01781"></a>01781 <span class="comment"> */</span>
<a name="l01782"></a>01782 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01783"></a>01783 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01784"></a>01784 <a class="code" href="svn__io_8h.html#ae1a5fef60e9dde8f5537e637e21d025a" title="Like svn_io_detect_mimetype2, but with mimetypes_map set to NULL.">svn_io_detect_mimetype</a>(const <span class="keywordtype">char</span> **mimetype,
<a name="l01785"></a>01785                        const <span class="keywordtype">char</span> *file,
<a name="l01786"></a>01786                        apr_pool_t *pool);
<a name="l01787"></a>01787 
<a name="l01788"></a>01788 <span class="comment"></span>
<a name="l01789"></a>01789 <span class="comment">/** Examine up to @a len bytes of data in @a buf to determine if the</span>
<a name="l01790"></a>01790 <span class="comment"> * can be considered binary data, in which case return TRUE.</span>
<a name="l01791"></a>01791 <span class="comment"> * If the data can be considered plain-text data, return FALSE.</span>
<a name="l01792"></a>01792 <span class="comment"> *</span>
<a name="l01793"></a>01793 <span class="comment"> * @since New in 1.7.</span>
<a name="l01794"></a>01794 <span class="comment"> */</span>
<a name="l01795"></a>01795 <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a>
<a name="l01796"></a>01796 <a class="code" href="svn__io_8h.html#a9dab9b761a5b9cae7c5610bcce781141" title="Examine up to len bytes of data in buf to determine if the can be considered binary data...">svn_io_is_binary_data</a>(const <span class="keywordtype">void</span> *buf, apr_size_t len);
<a name="l01797"></a>01797 
<a name="l01798"></a>01798 <span class="comment"></span>
<a name="l01799"></a>01799 <span class="comment">/** Wrapper for apr_file_open().  @a fname is utf8-encoded. */</span>
<a name="l01800"></a>01800 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01801"></a>01801 <a class="code" href="svn__io_8h.html#aaafb0039d02ec4d4393c433c9430aa48" title="Wrapper for apr_file_open().">svn_io_file_open</a>(apr_file_t **new_file,
<a name="l01802"></a>01802                  const <span class="keywordtype">char</span> *fname,
<a name="l01803"></a>01803                  apr_int32_t flag,
<a name="l01804"></a>01804                  apr_fileperms_t perm,
<a name="l01805"></a>01805                  apr_pool_t *pool);
<a name="l01806"></a>01806 
<a name="l01807"></a>01807 <span class="comment"></span>
<a name="l01808"></a>01808 <span class="comment">/** Wrapper for apr_file_close(). */</span>
<a name="l01809"></a>01809 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01810"></a>01810 <a class="code" href="svn__io_8h.html#ac53b59ed0d20666286dcc001f1aed43c" title="Wrapper for apr_file_close().">svn_io_file_close</a>(apr_file_t *file,
<a name="l01811"></a>01811                   apr_pool_t *pool);
<a name="l01812"></a>01812 
<a name="l01813"></a>01813 <span class="comment"></span>
<a name="l01814"></a>01814 <span class="comment">/** Wrapper for apr_file_getc(). */</span>
<a name="l01815"></a>01815 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01816"></a>01816 <a class="code" href="svn__io_8h.html#a13cf1ae46bf9a45d01db6cf59d787ecd" title="Wrapper for apr_file_getc().">svn_io_file_getc</a>(<span class="keywordtype">char</span> *ch,
<a name="l01817"></a>01817                  apr_file_t *file,
<a name="l01818"></a>01818                  apr_pool_t *pool);
<a name="l01819"></a>01819 
<a name="l01820"></a>01820 <span class="comment"></span>
<a name="l01821"></a>01821 <span class="comment">/** Wrapper for apr_file_putc().</span>
<a name="l01822"></a>01822 <span class="comment">  * @since New in 1.7</span>
<a name="l01823"></a>01823 <span class="comment">  */</span>
<a name="l01824"></a>01824 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01825"></a>01825 <a class="code" href="svn__io_8h.html#a0e7664bd83efaa663977639c03da878d" title="Wrapper for apr_file_putc().">svn_io_file_putc</a>(<span class="keywordtype">char</span> ch,
<a name="l01826"></a>01826                  apr_file_t *file,
<a name="l01827"></a>01827                  apr_pool_t *pool);
<a name="l01828"></a>01828 
<a name="l01829"></a>01829 <span class="comment"></span>
<a name="l01830"></a>01830 <span class="comment">/** Wrapper for apr_file_info_get(). */</span>
<a name="l01831"></a>01831 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01832"></a>01832 <a class="code" href="svn__io_8h.html#aa9b673694dfebc9fa7018f423b6459c3" title="Wrapper for apr_file_info_get().">svn_io_file_info_get</a>(apr_finfo_t *finfo,
<a name="l01833"></a>01833                      apr_int32_t wanted,
<a name="l01834"></a>01834                      apr_file_t *file,
<a name="l01835"></a>01835                      apr_pool_t *pool);
<a name="l01836"></a>01836 
<a name="l01837"></a>01837 <span class="comment"></span>
<a name="l01838"></a>01838 <span class="comment">/** Wrapper for apr_file_read(). */</span>
<a name="l01839"></a>01839 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01840"></a>01840 <a class="code" href="svn__io_8h.html#a783e5b2a7198107666cba41642610919" title="Wrapper for apr_file_read().">svn_io_file_read</a>(apr_file_t *file,
<a name="l01841"></a>01841                  <span class="keywordtype">void</span> *buf,
<a name="l01842"></a>01842                  apr_size_t *nbytes,
<a name="l01843"></a>01843                  apr_pool_t *pool);
<a name="l01844"></a>01844 
<a name="l01845"></a>01845 <span class="comment"></span>
<a name="l01846"></a>01846 <span class="comment">/** Wrapper for apr_file_read_full().</span>
<a name="l01847"></a>01847 <span class="comment"> *</span>
<a name="l01848"></a>01848 <span class="comment"> * If @a hit_eof is not NULL, EOF will be indicated there and no</span>
<a name="l01849"></a>01849 <span class="comment"> * svn_error_t error object will be created upon EOF.</span>
<a name="l01850"></a>01850 <span class="comment"> *</span>
<a name="l01851"></a>01851 <span class="comment"> * @since New in 1.7</span>
<a name="l01852"></a>01852 <span class="comment"> */</span>
<a name="l01853"></a>01853 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01854"></a>01854 <a class="code" href="svn__io_8h.html#a1230fed18c27d237e6b1747bf1daeb57" title="Wrapper for apr_file_read_full().">svn_io_file_read_full2</a>(apr_file_t *file,
<a name="l01855"></a>01855                        <span class="keywordtype">void</span> *buf,
<a name="l01856"></a>01856                        apr_size_t nbytes,
<a name="l01857"></a>01857                        apr_size_t *bytes_read,
<a name="l01858"></a>01858                        <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *hit_eof,
<a name="l01859"></a>01859                        apr_pool_t *pool);
<a name="l01860"></a>01860 
<a name="l01861"></a>01861 <span class="comment"></span>
<a name="l01862"></a>01862 <span class="comment">/** Similar to svn_io_file_read_full2 with hit_eof being set</span>
<a name="l01863"></a>01863 <span class="comment"> * to @c NULL.</span>
<a name="l01864"></a>01864 <span class="comment"> *</span>
<a name="l01865"></a>01865 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API</span>
<a name="l01866"></a>01866 <span class="comment"> */</span>
<a name="l01867"></a>01867 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l01868"></a>01868 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01869"></a>01869 <a class="code" href="svn__io_8h.html#a58487bc76681879193a9a067dd37b483" title="Similar to svn_io_file_read_full2 with hit_eof being set to NULL.">svn_io_file_read_full</a>(apr_file_t *file,
<a name="l01870"></a>01870                       <span class="keywordtype">void</span> *buf,
<a name="l01871"></a>01871                       apr_size_t nbytes,
<a name="l01872"></a>01872                       apr_size_t *bytes_read,
<a name="l01873"></a>01873                       apr_pool_t *pool);
<a name="l01874"></a>01874 
<a name="l01875"></a>01875 <span class="comment"></span>
<a name="l01876"></a>01876 <span class="comment">/** Wrapper for apr_file_seek(). */</span>
<a name="l01877"></a>01877 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01878"></a>01878 <a class="code" href="svn__io_8h.html#ab296b86da8b825399792d38f68e0e914" title="Wrapper for apr_file_seek().">svn_io_file_seek</a>(apr_file_t *file,
<a name="l01879"></a>01879                  apr_seek_where_t where,
<a name="l01880"></a>01880                  apr_off_t *offset,
<a name="l01881"></a>01881                  apr_pool_t *pool);
<a name="l01882"></a>01882 
<a name="l01883"></a>01883 <span class="comment"></span>
<a name="l01884"></a>01884 <span class="comment">/** Wrapper for apr_file_write(). */</span>
<a name="l01885"></a>01885 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01886"></a>01886 <a class="code" href="svn__io_8h.html#a5a78c172c69437a05e32d3dff6f152d0" title="Wrapper for apr_file_write().">svn_io_file_write</a>(apr_file_t *file,
<a name="l01887"></a>01887                   const <span class="keywordtype">void</span> *buf,
<a name="l01888"></a>01888                   apr_size_t *nbytes,
<a name="l01889"></a>01889                   apr_pool_t *pool);
<a name="l01890"></a>01890 
<a name="l01891"></a>01891 <span class="comment"></span>
<a name="l01892"></a>01892 <span class="comment">/** Wrapper for apr_file_write_full(). */</span>
<a name="l01893"></a>01893 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01894"></a>01894 <a class="code" href="svn__io_8h.html#a6789d12c70d0a2fefb539830183ee773" title="Wrapper for apr_file_write_full().">svn_io_file_write_full</a>(apr_file_t *file,
<a name="l01895"></a>01895                        const <span class="keywordtype">void</span> *buf,
<a name="l01896"></a>01896                        apr_size_t nbytes,
<a name="l01897"></a>01897                        apr_size_t *bytes_written,
<a name="l01898"></a>01898                        apr_pool_t *pool);
<a name="l01899"></a>01899 <span class="comment"></span>
<a name="l01900"></a>01900 <span class="comment">/**</span>
<a name="l01901"></a>01901 <span class="comment"> * Open a unique file in @a dirpath, and write @a nbytes from @a buf to</span>
<a name="l01902"></a>01902 <span class="comment"> * the file before flushing it to disk and closing it.  Return the name</span>
<a name="l01903"></a>01903 <span class="comment"> * of the newly created file in @a *tmp_path, allocated in @a pool.</span>
<a name="l01904"></a>01904 <span class="comment"> *</span>
<a name="l01905"></a>01905 <span class="comment"> * If @a dirpath is @c NULL, use the path returned from svn_io_temp_dir().</span>
<a name="l01906"></a>01906 <span class="comment"> * (Note that when using the system-provided temp directory, it may not</span>
<a name="l01907"></a>01907 <span class="comment"> * be possible to atomically rename the resulting file due to cross-device</span>
<a name="l01908"></a>01908 <span class="comment"> * issues.)</span>
<a name="l01909"></a>01909 <span class="comment"> *</span>
<a name="l01910"></a>01910 <span class="comment"> * The file will be deleted according to @a delete_when.</span>
<a name="l01911"></a>01911 <span class="comment"> *</span>
<a name="l01912"></a>01912 <span class="comment"> * @since New in 1.6.</span>
<a name="l01913"></a>01913 <span class="comment"> */</span>
<a name="l01914"></a>01914 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01915"></a>01915 <a class="code" href="svn__io_8h.html#aabcfef527a38cb25dde9f1e1565bf578" title="Open a unique file in dirpath, and write nbytes from buf to the file before flushing it to disk and c...">svn_io_write_unique</a>(const <span class="keywordtype">char</span> **tmp_path,
<a name="l01916"></a>01916                     const <span class="keywordtype">char</span> *dirpath,
<a name="l01917"></a>01917                     const <span class="keywordtype">void</span> *buf,
<a name="l01918"></a>01918                     apr_size_t nbytes,
<a name="l01919"></a>01919                     <a class="code" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884" title="Used as an argument when creating temporary files to indicate when a file should be removed...">svn_io_file_del_t</a> delete_when,
<a name="l01920"></a>01920                     apr_pool_t *pool);
<a name="l01921"></a>01921 <span class="comment"></span>
<a name="l01922"></a>01922 <span class="comment">/** Wrapper for apr_file_trunc().</span>
<a name="l01923"></a>01923 <span class="comment">  * @since New in 1.6. */</span>
<a name="l01924"></a>01924 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01925"></a>01925 <a class="code" href="svn__io_8h.html#aee7ca5e75c04cd6f947d87199a0313f5" title="Wrapper for apr_file_trunc().">svn_io_file_trunc</a>(apr_file_t *file,
<a name="l01926"></a>01926                   apr_off_t offset,
<a name="l01927"></a>01927                   apr_pool_t *pool);
<a name="l01928"></a>01928 
<a name="l01929"></a>01929 <span class="comment"></span>
<a name="l01930"></a>01930 <span class="comment">/** Wrapper for apr_stat().  @a fname is utf8-encoded. */</span>
<a name="l01931"></a>01931 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01932"></a>01932 <a class="code" href="svn__io_8h.html#a8b3c8bc2bdde3a1a28eb402432e410e0" title="Wrapper for apr_stat().">svn_io_stat</a>(apr_finfo_t *finfo,
<a name="l01933"></a>01933             const <span class="keywordtype">char</span> *fname,
<a name="l01934"></a>01934             apr_int32_t wanted,
<a name="l01935"></a>01935             apr_pool_t *pool);
<a name="l01936"></a>01936 
<a name="l01937"></a>01937 <span class="comment"></span>
<a name="l01938"></a>01938 <span class="comment">/** Rename and/or move the node (not necessarily a regular file) at</span>
<a name="l01939"></a>01939 <span class="comment"> * @a from_path to a new path @a to_path within the same filesystem.</span>
<a name="l01940"></a>01940 <span class="comment"> * In some cases, an existing node at @a to_path will be overwritten.</span>
<a name="l01941"></a>01941 <span class="comment"> *</span>
<a name="l01942"></a>01942 <span class="comment"> * A wrapper for apr_file_rename().  @a from_path and @a to_path are</span>
<a name="l01943"></a>01943 <span class="comment"> * utf8-encoded.</span>
<a name="l01944"></a>01944 <span class="comment"> */</span>
<a name="l01945"></a>01945 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01946"></a>01946 <a class="code" href="svn__io_8h.html#a958d10520c3e99ddcbbf333eed40d86f" title="Rename and/or move the node (not necessarily a regular file) at from_path to a new path to_path withi...">svn_io_file_rename</a>(const <span class="keywordtype">char</span> *from_path,
<a name="l01947"></a>01947                    const <span class="keywordtype">char</span> *to_path,
<a name="l01948"></a>01948                    apr_pool_t *pool);
<a name="l01949"></a>01949 
<a name="l01950"></a>01950 <span class="comment"></span>
<a name="l01951"></a>01951 <span class="comment">/** Move the file from @a from_path to @a to_path, even across device</span>
<a name="l01952"></a>01952 <span class="comment"> * boundaries. Overwrite @a to_path if it exists.</span>
<a name="l01953"></a>01953 <span class="comment"> *</span>
<a name="l01954"></a>01954 <span class="comment"> * @note This function is different from svn_io_file_rename in that the</span>
<a name="l01955"></a>01955 <span class="comment"> * latter fails in the &#39;across device boundaries&#39; case.</span>
<a name="l01956"></a>01956 <span class="comment"> *</span>
<a name="l01957"></a>01957 <span class="comment"> * @since New in 1.3.</span>
<a name="l01958"></a>01958 <span class="comment"> */</span>
<a name="l01959"></a>01959 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01960"></a>01960 <a class="code" href="svn__io_8h.html#a2e4247ed6ed8390f4f7d68a5dea3f0e6" title="Move the file from from_path to to_path, even across device boundaries.">svn_io_file_move</a>(const <span class="keywordtype">char</span> *from_path,
<a name="l01961"></a>01961                  const <span class="keywordtype">char</span> *to_path,
<a name="l01962"></a>01962                  apr_pool_t *pool);
<a name="l01963"></a>01963 
<a name="l01964"></a>01964 <span class="comment"></span>
<a name="l01965"></a>01965 <span class="comment">/** Wrapper for apr_dir_make().  @a path is utf8-encoded. */</span>
<a name="l01966"></a>01966 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01967"></a>01967 <a class="code" href="svn__io_8h.html#a108e7a96396aab7cacbf1e1c3ed5221f" title="Wrapper for apr_dir_make().">svn_io_dir_make</a>(const <span class="keywordtype">char</span> *path,
<a name="l01968"></a>01968                 apr_fileperms_t perm,
<a name="l01969"></a>01969                 apr_pool_t *pool);
<a name="l01970"></a>01970 <span class="comment"></span>
<a name="l01971"></a>01971 <span class="comment">/** Same as svn_io_dir_make(), but sets the hidden attribute on the</span>
<a name="l01972"></a>01972 <span class="comment">    directory on systems that support it. */</span>
<a name="l01973"></a>01973 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01974"></a>01974 <a class="code" href="svn__io_8h.html#a052b330df7626a534833e6329b33d753" title="Same as svn_io_dir_make(), but sets the hidden attribute on the directory on systems that support it...">svn_io_dir_make_hidden</a>(const <span class="keywordtype">char</span> *path,
<a name="l01975"></a>01975                        apr_fileperms_t perm,
<a name="l01976"></a>01976                        apr_pool_t *pool);
<a name="l01977"></a>01977 <span class="comment"></span>
<a name="l01978"></a>01978 <span class="comment">/**</span>
<a name="l01979"></a>01979 <span class="comment"> * Same as svn_io_dir_make(), but attempts to set the sgid on the</span>
<a name="l01980"></a>01980 <span class="comment"> * directory on systems that support it.  Does not return an error if</span>
<a name="l01981"></a>01981 <span class="comment"> * the attempt to set the sgid bit fails.  On Unix filesystems,</span>
<a name="l01982"></a>01982 <span class="comment"> * setting the sgid bit on a directory ensures that files and</span>
<a name="l01983"></a>01983 <span class="comment"> * subdirectories created within inherit group ownership from the</span>
<a name="l01984"></a>01984 <span class="comment"> * parent instead of from the primary gid.</span>
<a name="l01985"></a>01985 <span class="comment"> *</span>
<a name="l01986"></a>01986 <span class="comment"> * @since New in 1.1.</span>
<a name="l01987"></a>01987 <span class="comment"> */</span>
<a name="l01988"></a>01988 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01989"></a>01989 <a class="code" href="svn__io_8h.html#a51baaf892b96c9893bbae4fa5e747495" title="Same as svn_io_dir_make(), but attempts to set the sgid on the directory on systems that support it...">svn_io_dir_make_sgid</a>(const <span class="keywordtype">char</span> *path,
<a name="l01990"></a>01990                      apr_fileperms_t perm,
<a name="l01991"></a>01991                      apr_pool_t *pool);
<a name="l01992"></a>01992 <span class="comment"></span>
<a name="l01993"></a>01993 <span class="comment">/** Wrapper for apr_dir_open().  @a dirname is utf8-encoded. */</span>
<a name="l01994"></a>01994 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01995"></a>01995 <a class="code" href="svn__io_8h.html#a946da2aa39f21a0f6099d2984620b2ff" title="Wrapper for apr_dir_open().">svn_io_dir_open</a>(apr_dir_t **new_dir,
<a name="l01996"></a>01996                 const <span class="keywordtype">char</span> *dirname,
<a name="l01997"></a>01997                 apr_pool_t *pool);
<a name="l01998"></a>01998 <span class="comment"></span>
<a name="l01999"></a>01999 <span class="comment">/** Wrapper for apr_dir_close().</span>
<a name="l02000"></a>02000 <span class="comment"> *</span>
<a name="l02001"></a>02001 <span class="comment"> * @since New in 1.7.</span>
<a name="l02002"></a>02002 <span class="comment"> */</span>
<a name="l02003"></a>02003 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02004"></a>02004 <a class="code" href="svn__io_8h.html#ad06c1a3586d8ca151683f163edbc238d" title="Wrapper for apr_dir_close().">svn_io_dir_close</a>(apr_dir_t *thedir);
<a name="l02005"></a>02005 <span class="comment"></span>
<a name="l02006"></a>02006 <span class="comment">/** Wrapper for apr_dir_remove().  @a dirname is utf8-encoded.</span>
<a name="l02007"></a>02007 <span class="comment"> * @note This function has this name to avoid confusion with</span>
<a name="l02008"></a>02008 <span class="comment"> * svn_io_remove_dir2(), which is recursive.</span>
<a name="l02009"></a>02009 <span class="comment"> */</span>
<a name="l02010"></a>02010 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02011"></a>02011 <a class="code" href="svn__io_8h.html#a09827e5b0404fd70abc39a2193aecb26" title="Wrapper for apr_dir_remove().">svn_io_dir_remove_nonrecursive</a>(const <span class="keywordtype">char</span> *dirname,
<a name="l02012"></a>02012                                apr_pool_t *pool);
<a name="l02013"></a>02013 
<a name="l02014"></a>02014 <span class="comment"></span>
<a name="l02015"></a>02015 <span class="comment">/** Wrapper for apr_dir_read().  Ensures that @a finfo-&gt;name is</span>
<a name="l02016"></a>02016 <span class="comment"> * utf8-encoded, which means allocating @a finfo-&gt;name in @a pool,</span>
<a name="l02017"></a>02017 <span class="comment"> * which may or may not be the same as @a finfo&#39;s pool.  Use @a pool</span>
<a name="l02018"></a>02018 <span class="comment"> * for error allocation as well.</span>
<a name="l02019"></a>02019 <span class="comment"> */</span>
<a name="l02020"></a>02020 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02021"></a>02021 <a class="code" href="svn__io_8h.html#a83669c6c77f141089dcc20ef80453d4a" title="Wrapper for apr_dir_read().">svn_io_dir_read</a>(apr_finfo_t *finfo,
<a name="l02022"></a>02022                 apr_int32_t wanted,
<a name="l02023"></a>02023                 apr_dir_t *thedir,
<a name="l02024"></a>02024                 apr_pool_t *pool);
<a name="l02025"></a>02025 <span class="comment"></span>
<a name="l02026"></a>02026 <span class="comment">/** Wrapper for apr_file_name_get().  @a *filename is utf8-encoded.</span>
<a name="l02027"></a>02027 <span class="comment"> *</span>
<a name="l02028"></a>02028 <span class="comment"> * @note The file name may be NULL.</span>
<a name="l02029"></a>02029 <span class="comment"> *</span>
<a name="l02030"></a>02030 <span class="comment"> * @since New in 1.7. */</span>
<a name="l02031"></a>02031 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02032"></a>02032 <a class="code" href="svn__io_8h.html#acbcb8bfd6df6bbf9c35361b0f17f0ea7" title="Wrapper for apr_file_name_get().">svn_io_file_name_get</a>(const <span class="keywordtype">char</span> **filename,
<a name="l02033"></a>02033                      apr_file_t *file,
<a name="l02034"></a>02034                      apr_pool_t *pool);
<a name="l02035"></a>02035 
<a name="l02036"></a>02036 
<a name="l02037"></a>02037 <span class="comment"></span>
<a name="l02038"></a>02038 <span class="comment">/** Version/format files.</span>
<a name="l02039"></a>02039 <span class="comment"> *</span>
<a name="l02040"></a>02040 <span class="comment"> * @defgroup svn_io_format_files Version/format files</span>
<a name="l02041"></a>02041 <span class="comment"> * @{</span>
<a name="l02042"></a>02042 <span class="comment"> */</span>
<a name="l02043"></a>02043 <span class="comment"></span>
<a name="l02044"></a>02044 <span class="comment">/** Set @a *version to the integer that starts the file at @a path.  If the</span>
<a name="l02045"></a>02045 <span class="comment"> * file does not begin with a series of digits followed by a newline,</span>
<a name="l02046"></a>02046 <span class="comment"> * return the error #SVN_ERR_BAD_VERSION_FILE_FORMAT.  Use @a pool for</span>
<a name="l02047"></a>02047 <span class="comment"> * all allocations.</span>
<a name="l02048"></a>02048 <span class="comment"> */</span>
<a name="l02049"></a>02049 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02050"></a>02050 <a class="code" href="group__svn__io__format__files.html#ga80f0a4330380bafb4cd65e09151f411b" title="Set *version to the integer that starts the file at path.">svn_io_read_version_file</a>(<span class="keywordtype">int</span> *version,
<a name="l02051"></a>02051                          const <span class="keywordtype">char</span> *path,
<a name="l02052"></a>02052                          apr_pool_t *pool);
<a name="l02053"></a>02053 <span class="comment"></span>
<a name="l02054"></a>02054 <span class="comment">/** Create (or overwrite) the file at @a path with new contents,</span>
<a name="l02055"></a>02055 <span class="comment"> * formatted as a non-negative integer @a version followed by a single</span>
<a name="l02056"></a>02056 <span class="comment"> * newline.  On successful completion the file will be read-only.  Use</span>
<a name="l02057"></a>02057 <span class="comment"> * @a pool for all allocations.</span>
<a name="l02058"></a>02058 <span class="comment"> */</span>
<a name="l02059"></a>02059 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l02060"></a>02060 <a class="code" href="group__svn__io__format__files.html#ga29aa0631f0facde88398ad50d9411aca" title="Create (or overwrite) the file at path with new contents, formatted as a non-negative integer version...">svn_io_write_version_file</a>(const <span class="keywordtype">char</span> *path,
<a name="l02061"></a>02061                           <span class="keywordtype">int</span> version,
<a name="l02062"></a>02062                           apr_pool_t *pool);
<a name="l02063"></a>02063 <span class="comment"></span>
<a name="l02064"></a>02064 <span class="comment">/** @} */</span>
<a name="l02065"></a>02065 
<a name="l02066"></a>02066 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l02067"></a>02067 <span class="preprocessor"></span>}
<a name="l02068"></a>02068 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l02069"></a>02069 
<a name="l02070"></a>02070 <span class="preprocessor">#endif </span><span class="comment">/* SVN_IO_H */</span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Fri Dec 23 2011 09:20:36 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>
