<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Subversion: Working copy management</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#groups">Modules</a> &#124;
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Working copy management</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="groups"></a>
Modules</h2></td></tr>
<tr class="memitem:group__translate__flags"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__translate__flags.html">Translation flags</a></td></tr>
<tr class="memdesc:group__translate__flags"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flags for use with <a class="el" href="group__svn__wc__translate.html#ga3572a920c814a44c8c0cc3fb33eeafd7" title="Set xlated_path to a translated copy of src or to src itself if no translation is necessary...">svn_wc_translated_file2()</a> and <a class="el" href="group__svn__wc__translate.html#ga46d04c429bbb7ce66b6d8c24a2cdb9c1" title="Returns a stream allocated in pool with access to the given path taking the file properties from vers...">svn_wc_translated_stream()</a>. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__context"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__context.html">Working copy context</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__adm__access"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__adm__access.html">Adm access batons (deprecated)</a></td></tr>
<tr class="memdesc:group__svn__wc__adm__access"><td class="mdescLeft">&#160;</td><td class="mdescRight">Locking/Opening/Closing using adm access batons. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__adm__dir__name"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__adm__dir__name.html">Name of Subversion's admin dir</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__externals"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__externals.html">Externals</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__notifications"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__notifications.html">Notification callback handling</a></td></tr>
<tr class="memdesc:group__svn__wc__notifications"><td class="mdescLeft">&#160;</td><td class="mdescRight">In many cases, the WC library will scan a working copy and make changes. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__conflict"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__conflict.html">Conflict callback functionality</a></td></tr>
<tr class="memdesc:group__svn__wc__conflict"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interactive conflict handling. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__entries"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__entries.html">Entries and status (deprecated)</a></td></tr>
<tr class="memdesc:group__svn__wc__entries"><td class="mdescLeft">&#160;</td><td class="mdescRight"><ul>
<li></li>
</ul>
<br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__status"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__status.html">Working copy status.</a></td></tr>
<tr class="memdesc:group__svn__wc__status"><td class="mdescLeft">&#160;</td><td class="mdescRight">We have three functions for getting working copy status: one function for getting the status of exactly one thing, another for getting the statuses of (potentially) multiple things and a third for getting the working copy out-of-dateness with respect to the repository. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__roots"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__roots.html">Working copy roots</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__update__switch"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__update__switch.html">Update and switch (update-like functionality)</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__properties"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__properties.html">Properties</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__diffs"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__diffs.html">Diffs</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__merging"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__merging.html">Merging</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__translate"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__translate.html">EOL conversion and keyword expansion</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__deltas"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__deltas.html">Text/Prop Deltas Using an Editor</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__ignore"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__ignore.html">Ignoring unversioned files and directories</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:group__svn__wc__repos__locks"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc__repos__locks.html">Repository locks</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__wc__diff__callbacks4__t.html">svn_wc_diff_callbacks4_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A callback vtable invoked by our diff-editors, as they receive diffs from the server.  <a href="structsvn__wc__diff__callbacks4__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__wc__diff__callbacks3__t.html">svn_wc_diff_callbacks3_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="structsvn__wc__diff__callbacks4__t.html" title="A callback vtable invoked by our diff-editors, as they receive diffs from the server. ">svn_wc_diff_callbacks4_t</a>, but without <em>copyfrom_path</em> and <em>copyfrom_revision</em> arguments to <code>file_added</code> and <code>dir_added</code> functions.  <a href="structsvn__wc__diff__callbacks3__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__wc__diff__callbacks2__t.html">svn_wc_diff_callbacks2_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="structsvn__wc__diff__callbacks3__t.html" title="Similar to svn_wc_diff_callbacks4_t, but without copyfrom_path and copyfrom_revision arguments to fil...">svn_wc_diff_callbacks3_t</a>, but without the <code>dir_opened</code> and <code>dir_closed</code> functions, and without the <em>tree_conflicted</em> argument to the functions.  <a href="structsvn__wc__diff__callbacks2__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__wc__diff__callbacks__t.html">svn_wc_diff_callbacks_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="structsvn__wc__diff__callbacks2__t.html" title="Similar to svn_wc_diff_callbacks3_t, but without the dir_opened and dir_closed functions, and without the tree_conflicted argument to the functions. ">svn_wc_diff_callbacks2_t</a>, but with file additions/content changes and property changes split into different functions.  <a href="structsvn__wc__diff__callbacks__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__wc__info__t.html">svn_wc_info_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This struct contains information about a working copy node.  <a href="structsvn__wc__info__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__wc__entry__callbacks2__t.html">svn_wc_entry_callbacks2_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A callback vtable invoked by the generic entry-walker function.  <a href="structsvn__wc__entry__callbacks2__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__wc__entry__callbacks__t.html">svn_wc_entry_callbacks_t</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsvn__wc__revision__status__t.html">svn_wc_revision_status_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A structure to report a summary of a working copy, including the mix of revisions found within it, whether any parts are switched or locally modified, and whether it is a sparse checkout.  <a href="structsvn__wc__revision__status__t.html#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ga12cc0b7a4774fa997dc40e80b646c2a3"><td class="memItemLeft" align="right" valign="top">typedef struct <br class="typebreak"/>
<a class="el" href="structsvn__wc__diff__callbacks4__t.html">svn_wc_diff_callbacks4_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga12cc0b7a4774fa997dc40e80b646c2a3">svn_wc_diff_callbacks4_t</a></td></tr>
<tr class="memdesc:ga12cc0b7a4774fa997dc40e80b646c2a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">A callback vtable invoked by our diff-editors, as they receive diffs from the server.  <a href="#ga12cc0b7a4774fa997dc40e80b646c2a3">More...</a><br/></td></tr>
<tr class="separator:ga12cc0b7a4774fa997dc40e80b646c2a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3d7e3b30deaa61826c859cd6c436b9c5"><td class="memItemLeft" align="right" valign="top">typedef struct <br class="typebreak"/>
<a class="el" href="structsvn__wc__diff__callbacks3__t.html">svn_wc_diff_callbacks3_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga3d7e3b30deaa61826c859cd6c436b9c5">svn_wc_diff_callbacks3_t</a></td></tr>
<tr class="memdesc:ga3d7e3b30deaa61826c859cd6c436b9c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="structsvn__wc__diff__callbacks4__t.html" title="A callback vtable invoked by our diff-editors, as they receive diffs from the server. ">svn_wc_diff_callbacks4_t</a>, but without <em>copyfrom_path</em> and <em>copyfrom_revision</em> arguments to <code>file_added</code> and <code>dir_added</code> functions.  <a href="#ga3d7e3b30deaa61826c859cd6c436b9c5">More...</a><br/></td></tr>
<tr class="separator:ga3d7e3b30deaa61826c859cd6c436b9c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga851c3850ab946b02bf83cf12e8d25346"><td class="memItemLeft" align="right" valign="top">typedef struct <br class="typebreak"/>
<a class="el" href="structsvn__wc__diff__callbacks2__t.html">svn_wc_diff_callbacks2_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga851c3850ab946b02bf83cf12e8d25346">svn_wc_diff_callbacks2_t</a></td></tr>
<tr class="memdesc:ga851c3850ab946b02bf83cf12e8d25346"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="structsvn__wc__diff__callbacks3__t.html" title="Similar to svn_wc_diff_callbacks4_t, but without copyfrom_path and copyfrom_revision arguments to fil...">svn_wc_diff_callbacks3_t</a>, but without the <code>dir_opened</code> and <code>dir_closed</code> functions, and without the <em>tree_conflicted</em> argument to the functions.  <a href="#ga851c3850ab946b02bf83cf12e8d25346">More...</a><br/></td></tr>
<tr class="separator:ga851c3850ab946b02bf83cf12e8d25346"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3875762dadb2468b7f962a7fec4d1099"><td class="memItemLeft" align="right" valign="top">typedef struct <br class="typebreak"/>
<a class="el" href="structsvn__wc__diff__callbacks__t.html">svn_wc_diff_callbacks_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga3875762dadb2468b7f962a7fec4d1099">svn_wc_diff_callbacks_t</a></td></tr>
<tr class="memdesc:ga3875762dadb2468b7f962a7fec4d1099"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="structsvn__wc__diff__callbacks2__t.html" title="Similar to svn_wc_diff_callbacks3_t, but without the dir_opened and dir_closed functions, and without the tree_conflicted argument to the functions. ">svn_wc_diff_callbacks2_t</a>, but with file additions/content changes and property changes split into different functions.  <a href="#ga3875762dadb2468b7f962a7fec4d1099">More...</a><br/></td></tr>
<tr class="separator:ga3875762dadb2468b7f962a7fec4d1099"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf3977bd5adec3cc4f4a7a45b9d022d58"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structsvn__wc__info__t.html">svn_wc_info_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaf3977bd5adec3cc4f4a7a45b9d022d58">svn_wc_info_t</a></td></tr>
<tr class="memdesc:gaf3977bd5adec3cc4f4a7a45b9d022d58"><td class="mdescLeft">&#160;</td><td class="mdescRight">This struct contains information about a working copy node.  <a href="#gaf3977bd5adec3cc4f4a7a45b9d022d58">More...</a><br/></td></tr>
<tr class="separator:gaf3977bd5adec3cc4f4a7a45b9d022d58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae57827536e4cfe627f777a4033ca668d"><td class="memItemLeft" align="right" valign="top">typedef struct <br class="typebreak"/>
<a class="el" href="structsvn__wc__entry__callbacks2__t.html">svn_wc_entry_callbacks2_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gae57827536e4cfe627f777a4033ca668d">svn_wc_entry_callbacks2_t</a></td></tr>
<tr class="memdesc:gae57827536e4cfe627f777a4033ca668d"><td class="mdescLeft">&#160;</td><td class="mdescRight">A callback vtable invoked by the generic entry-walker function.  <a href="#gae57827536e4cfe627f777a4033ca668d">More...</a><br/></td></tr>
<tr class="separator:gae57827536e4cfe627f777a4033ca668d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga55f4e859d73f34dfdd0a970422e624c0"><td class="memItemLeft" align="right" valign="top">typedef struct <br class="typebreak"/>
<a class="el" href="structsvn__wc__entry__callbacks__t.html">svn_wc_entry_callbacks_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga55f4e859d73f34dfdd0a970422e624c0">svn_wc_entry_callbacks_t</a></td></tr>
<tr class="separator:ga55f4e859d73f34dfdd0a970422e624c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab5313e08f94a081034e8453609bb7638"><td class="memItemLeft" align="right" valign="top">typedef struct <br class="typebreak"/>
<a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a></td></tr>
<tr class="memdesc:gab5313e08f94a081034e8453609bb7638"><td class="mdescLeft">&#160;</td><td class="mdescRight">Storage type for queued post-commit data.  <a href="#gab5313e08f94a081034e8453609bb7638">More...</a><br/></td></tr>
<tr class="separator:gab5313e08f94a081034e8453609bb7638"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga23bb8de568e76b867d26f5385729a760"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga23bb8de568e76b867d26f5385729a760">svn_wc_upgrade_get_repos_info_t</a> )(const char **repos_root, const char **repos_uuid, void *baton, const char *url, apr_pool_t *result_pool, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga23bb8de568e76b867d26f5385729a760"><td class="mdescLeft">&#160;</td><td class="mdescRight">Callback for retrieving a repository root for a url from upgrade.  <a href="#ga23bb8de568e76b867d26f5385729a760">More...</a><br/></td></tr>
<tr class="separator:ga23bb8de568e76b867d26f5385729a760"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa9addd7cee0df1441c76efe39ac8e0bd"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaa9addd7cee0df1441c76efe39ac8e0bd">svn_wc_relocation_validator3_t</a> )(void *baton, const char *uuid, const char *url, const char *root_url, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gaa9addd7cee0df1441c76efe39ac8e0bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Relocation validation callback typedef.  <a href="#gaa9addd7cee0df1441c76efe39ac8e0bd">More...</a><br/></td></tr>
<tr class="separator:gaa9addd7cee0df1441c76efe39ac8e0bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3156f48a76033908b9dd80ac347938b8"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga3156f48a76033908b9dd80ac347938b8">svn_wc_relocation_validator2_t</a> )(void *baton, const char *uuid, const char *url, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> root, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga3156f48a76033908b9dd80ac347938b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gaa9addd7cee0df1441c76efe39ac8e0bd" title="Relocation validation callback typedef. ">svn_wc_relocation_validator3_t</a>, but with the <em>root</em> argument.  <a href="#ga3156f48a76033908b9dd80ac347938b8">More...</a><br/></td></tr>
<tr class="separator:ga3156f48a76033908b9dd80ac347938b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5aef0943027834b2d1a4b7eda408f321"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga5aef0943027834b2d1a4b7eda408f321">svn_wc_relocation_validator_t</a> )(void *baton, const char *uuid, const char *url)</td></tr>
<tr class="memdesc:ga5aef0943027834b2d1a4b7eda408f321"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga3156f48a76033908b9dd80ac347938b8" title="Similar to svn_wc_relocation_validator3_t, but with the root argument. ">svn_wc_relocation_validator2_t</a>, but without the <em>root</em> and <em>pool</em> arguments.  <a href="#ga5aef0943027834b2d1a4b7eda408f321">More...</a><br/></td></tr>
<tr class="separator:ga5aef0943027834b2d1a4b7eda408f321"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7afb4e33a741065b8b079325240589ea"><td class="memItemLeft" align="right" valign="top">typedef struct <br class="typebreak"/>
<a class="el" href="structsvn__wc__revision__status__t.html">svn_wc_revision_status_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga7afb4e33a741065b8b079325240589ea">svn_wc_revision_status_t</a></td></tr>
<tr class="memdesc:ga7afb4e33a741065b8b079325240589ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">A structure to report a summary of a working copy, including the mix of revisions found within it, whether any parts are switched or locally modified, and whether it is a sparse checkout.  <a href="#ga7afb4e33a741065b8b079325240589ea">More...</a><br/></td></tr>
<tr class="separator:ga7afb4e33a741065b8b079325240589ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaae18ec52a5dadbfa1f56a67cd70c0bfc"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaae18ec52a5dadbfa1f56a67cd70c0bfc">svn_changelist_receiver_t</a> )(void *baton, const char *path, const char *changelist, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gaae18ec52a5dadbfa1f56a67cd70c0bfc"><td class="mdescLeft">&#160;</td><td class="mdescRight">The callback type used by <a class="el" href="group__svn__wc.html#ga21d7e4b68ec86a8cb2f62e09fef67bc3" title="Beginning at local_abspath, crawl to depth to discover every path in or under local_abspath which bel...">svn_wc_get_changelists()</a> and <a class="el" href="group__svn__client__changelist__funcs.html#gabfbb2f162cd296e4360fa3276523bc01" title="Beginning at path, crawl to depth to discover every path in or under path which belongs to one of the...">svn_client_get_changelists()</a>.  <a href="#gaae18ec52a5dadbfa1f56a67cd70c0bfc">More...</a><br/></td></tr>
<tr class="separator:gaae18ec52a5dadbfa1f56a67cd70c0bfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga54914757b40d17e4c82604ac10eef3c7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga54914757b40d17e4c82604ac10eef3c7">svn_wc_locked2</a> (<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *locked_here, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *locked, <a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga54914757b40d17e4c82604ac10eef3c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets up to two booleans indicating whether a path is locked for writing.  <a href="#ga54914757b40d17e4c82604ac10eef3c7">More...</a><br/></td></tr>
<tr class="separator:ga54914757b40d17e4c82604ac10eef3c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8b66a2c9cc512699bc7e764f2ccd13b3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga8b66a2c9cc512699bc7e764f2ccd13b3">svn_wc_locked</a> (<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *locked, const char *path, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga8b66a2c9cc512699bc7e764f2ccd13b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*locked</em> to non-zero if <em>path</em> is locked, else set it to zero.  <a href="#ga8b66a2c9cc512699bc7e764f2ccd13b3">More...</a><br/></td></tr>
<tr class="separator:ga8b66a2c9cc512699bc7e764f2ccd13b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga98de33bfd6613cba23a78ae51bf093d1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga98de33bfd6613cba23a78ae51bf093d1">svn_wc_check_wc2</a> (int *wc_format, <a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga98de33bfd6613cba23a78ae51bf093d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*wc_format</em> to <em>local_abspath's</em> working copy format version number if <em>local_abspath</em> is a valid working copy directory, else set it to 0.  <a href="#ga98de33bfd6613cba23a78ae51bf093d1">More...</a><br/></td></tr>
<tr class="separator:ga98de33bfd6613cba23a78ae51bf093d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2056dc218d262eca9102e0260b6bc0d7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga2056dc218d262eca9102e0260b6bc0d7">svn_wc_check_wc</a> (const char *path, int *wc_format, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga2056dc218d262eca9102e0260b6bc0d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga98de33bfd6613cba23a78ae51bf093d1" title="Set *wc_format to local_abspath&#39;s working copy format version number if local_abspath is a valid work...">svn_wc_check_wc2()</a>, but with a relative path and no supplied working copy context.  <a href="#ga2056dc218d262eca9102e0260b6bc0d7">More...</a><br/></td></tr>
<tr class="separator:ga2056dc218d262eca9102e0260b6bc0d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaccda369a983115a74223f53ec160f2ee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaccda369a983115a74223f53ec160f2ee">svn_wc_has_binary_prop</a> (<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *has_binary_prop, const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gaccda369a983115a74223f53ec160f2ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*has_binary_prop</em> to <code>TRUE</code> iff <em>path</em> has been marked with a property indicating that it is non-text (in other words, binary).  <a href="#gaccda369a983115a74223f53ec160f2ee">More...</a><br/></td></tr>
<tr class="separator:gaccda369a983115a74223f53ec160f2ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab70aa1d77a95d19552423c786e788140"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gab70aa1d77a95d19552423c786e788140">svn_wc_text_modified_p2</a> (<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *modified_p, <a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> unused, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gab70aa1d77a95d19552423c786e788140"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*modified_p</em> to non-zero if <em>local_abspath's</em> text is modified with regard to the base revision, else set <em>*modified_p</em> to zero.  <a href="#gab70aa1d77a95d19552423c786e788140">More...</a><br/></td></tr>
<tr class="separator:gab70aa1d77a95d19552423c786e788140"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf2804bd7bd17bd98989976ff2c62d7a8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaf2804bd7bd17bd98989976ff2c62d7a8">svn_wc_text_modified_p</a> (<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *modified_p, const char *filename, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> force_comparison, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gaf2804bd7bd17bd98989976ff2c62d7a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gab70aa1d77a95d19552423c786e788140" title="Set *modified_p to non-zero if local_abspath&#39;s text is modified with regard to the base revision...">svn_wc_text_modified_p2()</a>, but with a relative path and adm_access baton?  <a href="#gaf2804bd7bd17bd98989976ff2c62d7a8">More...</a><br/></td></tr>
<tr class="separator:gaf2804bd7bd17bd98989976ff2c62d7a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b4a29e114c1f337129efb8acb733150"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga0b4a29e114c1f337129efb8acb733150">svn_wc_props_modified_p2</a> (<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *modified_p, <a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga0b4a29e114c1f337129efb8acb733150"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*modified_p</em> to non-zero if <em>path's</em> properties are modified with regard to the base revision, else set <em>modified_p</em> to zero.  <a href="#ga0b4a29e114c1f337129efb8acb733150">More...</a><br/></td></tr>
<tr class="separator:ga0b4a29e114c1f337129efb8acb733150"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac4aaab4da6f4a003371551bd535ac70d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gac4aaab4da6f4a003371551bd535ac70d">svn_wc_props_modified_p</a> (<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *modified_p, const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gac4aaab4da6f4a003371551bd535ac70d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga0b4a29e114c1f337129efb8acb733150" title="Set *modified_p to non-zero if path&#39;s properties are modified with regard to the base revision...">svn_wc_props_modified_p2()</a>, but with a relative path and adm_access baton.  <a href="#gac4aaab4da6f4a003371551bd535ac70d">More...</a><br/></td></tr>
<tr class="separator:gac4aaab4da6f4a003371551bd535ac70d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9bb4e37e7b54bb8270ea23841c53139d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__wc__info__t.html">svn_wc_info_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga9bb4e37e7b54bb8270ea23841c53139d">svn_wc_info_dup</a> (const <a class="el" href="structsvn__wc__info__t.html">svn_wc_info_t</a> *info, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga9bb4e37e7b54bb8270ea23841c53139d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a duplicate of <em>info</em>, allocated in <em>pool</em>.  <a href="#ga9bb4e37e7b54bb8270ea23841c53139d">More...</a><br/></td></tr>
<tr class="separator:ga9bb4e37e7b54bb8270ea23841c53139d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabf3a26b636143b05fdf3b38542321275"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gabf3a26b636143b05fdf3b38542321275">svn_wc_conflicted_p3</a> (<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *text_conflicted_p, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *prop_conflicted_p, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *tree_conflicted_p, <a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gabf3a26b636143b05fdf3b38542321275"><td class="mdescLeft">&#160;</td><td class="mdescRight">Given <em>local_abspath</em> in a dir under version control, decide if it is in a state of conflict; return the answers in <em>*text_conflicted_p</em>, <em>*prop_conflicted_p</em>, and <em>*tree_conflicted_p</em>.  <a href="#gabf3a26b636143b05fdf3b38542321275">More...</a><br/></td></tr>
<tr class="separator:gabf3a26b636143b05fdf3b38542321275"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac5c8afaab3705c51213f2443c106826b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gac5c8afaab3705c51213f2443c106826b">svn_wc_conflicted_p2</a> (<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *text_conflicted_p, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *prop_conflicted_p, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *tree_conflicted_p, const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gac5c8afaab3705c51213f2443c106826b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gabf3a26b636143b05fdf3b38542321275" title="Given local_abspath in a dir under version control, decide if it is in a state of conflict; return th...">svn_wc_conflicted_p3()</a>, but with a path/adm_access parameter pair in place of a wc_ctx/local_abspath pair.  <a href="#gac5c8afaab3705c51213f2443c106826b">More...</a><br/></td></tr>
<tr class="separator:gac5c8afaab3705c51213f2443c106826b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf436fc679467645939ab22ba9b7b504f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaf436fc679467645939ab22ba9b7b504f">svn_wc_conflicted_p</a> (<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *text_conflicted_p, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *prop_conflicted_p, const char *dir_path, const <a class="el" href="structsvn__wc__entry__t.html">svn_wc_entry_t</a> *entry, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gaf436fc679467645939ab22ba9b7b504f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Given a <em>dir_path</em> under version control, decide if one of its entries (<em>entry</em>) is in a state of conflict; return the answers in <em>text_conflicted_p</em> and <em>prop_conflicted_p</em>.  <a href="#gaf436fc679467645939ab22ba9b7b504f">More...</a><br/></td></tr>
<tr class="separator:gaf436fc679467645939ab22ba9b7b504f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga204e46eaf18913808556e9b1f40a6bcb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga204e46eaf18913808556e9b1f40a6bcb">svn_wc_get_ancestry</a> (char **url, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *rev, const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga204e46eaf18913808556e9b1f40a6bcb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*url</em> and <em>*rev</em> to the ancestor URL and revision for <em>path</em>, allocating in <em>pool</em>.  <a href="#ga204e46eaf18913808556e9b1f40a6bcb">More...</a><br/></td></tr>
<tr class="separator:ga204e46eaf18913808556e9b1f40a6bcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga17374d3b79862d5faa4887ed0f4366c3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga17374d3b79862d5faa4887ed0f4366c3">svn_wc_walk_entries3</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, const <a class="el" href="structsvn__wc__entry__callbacks2__t.html">svn_wc_entry_callbacks2_t</a> *walk_callbacks, void *walk_baton, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> show_hidden, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga17374d3b79862d5faa4887ed0f4366c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">A generic entry-walker.  <a href="#ga17374d3b79862d5faa4887ed0f4366c3">More...</a><br/></td></tr>
<tr class="separator:ga17374d3b79862d5faa4887ed0f4366c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0fc8c326b020e64cfb8d183f4a10a684"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga0fc8c326b020e64cfb8d183f4a10a684">svn_wc_walk_entries2</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, const <a class="el" href="structsvn__wc__entry__callbacks__t.html">svn_wc_entry_callbacks_t</a> *walk_callbacks, void *walk_baton, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> show_hidden, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga0fc8c326b020e64cfb8d183f4a10a684"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga17374d3b79862d5faa4887ed0f4366c3" title="A generic entry-walker. ">svn_wc_walk_entries3()</a>, but without cancellation support or error handling from <em>walk_callbacks</em>, and with <em>depth</em> always set to <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>.  <a href="#ga0fc8c326b020e64cfb8d183f4a10a684">More...</a><br/></td></tr>
<tr class="separator:ga0fc8c326b020e64cfb8d183f4a10a684"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga93c39ae07d4de5f49f1d5adcb45eab22"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga93c39ae07d4de5f49f1d5adcb45eab22">svn_wc_walk_entries</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, const <a class="el" href="structsvn__wc__entry__callbacks__t.html">svn_wc_entry_callbacks_t</a> *walk_callbacks, void *walk_baton, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> show_hidden, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga93c39ae07d4de5f49f1d5adcb45eab22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga0fc8c326b020e64cfb8d183f4a10a684" title="Similar to svn_wc_walk_entries3(), but without cancellation support or error handling from walk_callb...">svn_wc_walk_entries2()</a>, but without cancellation support.  <a href="#ga93c39ae07d4de5f49f1d5adcb45eab22">More...</a><br/></td></tr>
<tr class="separator:ga93c39ae07d4de5f49f1d5adcb45eab22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d95390b7527954903f5d491de17a1aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga5d95390b7527954903f5d491de17a1aa">svn_wc_mark_missing_deleted</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *parent, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga5d95390b7527954903f5d491de17a1aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mark missing <em>path</em> as 'deleted' in its <em>parent's</em> list of entries.  <a href="#ga5d95390b7527954903f5d491de17a1aa">More...</a><br/></td></tr>
<tr class="separator:ga5d95390b7527954903f5d491de17a1aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf21372f91fa4944913741a2971587605"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaf21372f91fa4944913741a2971587605">svn_wc_ensure_adm4</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, const char *url, const char *repos_root_url, const char *repos_uuid, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gaf21372f91fa4944913741a2971587605"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ensure that an administrative area exists for <em>local_abspath</em>, so that <em>local_abspath</em> is a working copy subdir based on <em>url</em> at <em>revision</em>, with depth <em>depth</em>, and with repository UUID <em>repos_uuid</em> and repository root URL <em>repos_root_url</em>.  <a href="#gaf21372f91fa4944913741a2971587605">More...</a><br/></td></tr>
<tr class="separator:gaf21372f91fa4944913741a2971587605"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab109796faf4e8919506658dc904ba63c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gab109796faf4e8919506658dc904ba63c">svn_wc_ensure_adm3</a> (const char *path, const char *uuid, const char *url, const char *repos, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gab109796faf4e8919506658dc904ba63c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gaf21372f91fa4944913741a2971587605" title="Ensure that an administrative area exists for local_abspath, so that local_abspath is a working copy ...">svn_wc_ensure_adm4()</a>, but without the wc context parameter.  <a href="#gab109796faf4e8919506658dc904ba63c">More...</a><br/></td></tr>
<tr class="separator:gab109796faf4e8919506658dc904ba63c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga713231987f37479d004ba0621e9f92bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga713231987f37479d004ba0621e9f92bb">svn_wc_ensure_adm2</a> (const char *path, const char *uuid, const char *url, const char *repos, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga713231987f37479d004ba0621e9f92bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gab109796faf4e8919506658dc904ba63c" title="Similar to svn_wc_ensure_adm4(), but without the wc context parameter. ">svn_wc_ensure_adm3()</a>, but with <em>depth</em> set to <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>.  <a href="#ga713231987f37479d004ba0621e9f92bb">More...</a><br/></td></tr>
<tr class="separator:ga713231987f37479d004ba0621e9f92bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb898d9f94516ba81d4db5784ba57d75"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gadb898d9f94516ba81d4db5784ba57d75">svn_wc_ensure_adm</a> (const char *path, const char *uuid, const char *url, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> revision, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gadb898d9f94516ba81d4db5784ba57d75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga713231987f37479d004ba0621e9f92bb" title="Similar to svn_wc_ensure_adm3(), but with depth set to svn_depth_infinity. ">svn_wc_ensure_adm2()</a>, but with <em>repos</em> set to <code>NULL</code>.  <a href="#gadb898d9f94516ba81d4db5784ba57d75">More...</a><br/></td></tr>
<tr class="separator:gadb898d9f94516ba81d4db5784ba57d75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4362bbf450311e0cce2b0559d9c5bef7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga4362bbf450311e0cce2b0559d9c5bef7">svn_wc_maybe_set_repos_root</a> (<a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, const char *path, const char *repos, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga4362bbf450311e0cce2b0559d9c5bef7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the repository root URL of <em>path</em> to <em>repos</em>, if possible.  <a href="#ga4362bbf450311e0cce2b0559d9c5bef7">More...</a><br/></td></tr>
<tr class="separator:ga4362bbf450311e0cce2b0559d9c5bef7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa7be3f311d11c3dd5a59550d25eb4e6d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaa7be3f311d11c3dd5a59550d25eb4e6d">svn_wc_copy3</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *src_abspath, const char *dst_abspath, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> metadata_only, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gaa7be3f311d11c3dd5a59550d25eb4e6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy <em>src_abspath</em> to <em>dst_abspath</em>, and schedule <em>dst_abspath</em> for addition to the repository, remembering the copy history.  <a href="#gaa7be3f311d11c3dd5a59550d25eb4e6d">More...</a><br/></td></tr>
<tr class="separator:gaa7be3f311d11c3dd5a59550d25eb4e6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4db028d5bd4921e3e087137274f6cd8f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga4db028d5bd4921e3e087137274f6cd8f">svn_wc_copy2</a> (const char *src, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *dst_parent, const char *dst_basename, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga4db028d5bd4921e3e087137274f6cd8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gaa7be3f311d11c3dd5a59550d25eb4e6d" title="Copy src_abspath to dst_abspath, and schedule dst_abspath for addition to the repository, remembering the copy history. ">svn_wc_copy3()</a>, but takes access batons and a relative path and a basename instead of absolute paths and a working copy context.  <a href="#ga4db028d5bd4921e3e087137274f6cd8f">More...</a><br/></td></tr>
<tr class="separator:ga4db028d5bd4921e3e087137274f6cd8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga196abed06b6cc8d3e385c40172fd8a9f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga196abed06b6cc8d3e385c40172fd8a9f">svn_wc_copy</a> (const char *src, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *dst_parent, const char *dst_basename, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2">svn_wc_notify_func_t</a> notify_func, void *notify_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga196abed06b6cc8d3e385c40172fd8a9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga4db028d5bd4921e3e087137274f6cd8f" title="Similar to svn_wc_copy3(), but takes access batons and a relative path and a basename instead of abso...">svn_wc_copy2()</a>, but takes an <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2" title="Similar to svn_wc_notify_func2_t, but takes the information as arguments instead of struct fields...">svn_wc_notify_func_t</a> instead.  <a href="#ga196abed06b6cc8d3e385c40172fd8a9f">More...</a><br/></td></tr>
<tr class="separator:ga196abed06b6cc8d3e385c40172fd8a9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae7754ab49be10d4cd2811e8eac34a837"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gae7754ab49be10d4cd2811e8eac34a837">svn_wc_move</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *src_abspath, const char *dst_abspath, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> metadata_only, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gae7754ab49be10d4cd2811e8eac34a837"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move <em>src_abspath</em> to <em>dst_abspath</em>, by scheduling <em>dst_abspath</em> for addition to the repository, remembering the history.  <a href="#gae7754ab49be10d4cd2811e8eac34a837">More...</a><br/></td></tr>
<tr class="separator:gae7754ab49be10d4cd2811e8eac34a837"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga72c78b3fa4fc0fc282a0f3d1f42b0ff7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga72c78b3fa4fc0fc282a0f3d1f42b0ff7">svn_wc_delete4</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> keep_local, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> delete_unversioned_target, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga72c78b3fa4fc0fc282a0f3d1f42b0ff7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Schedule <em>local_abspath</em> for deletion.  <a href="#ga72c78b3fa4fc0fc282a0f3d1f42b0ff7">More...</a><br/></td></tr>
<tr class="separator:ga72c78b3fa4fc0fc282a0f3d1f42b0ff7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf6efdb929f507a21a089722d6432ebab"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaf6efdb929f507a21a089722d6432ebab">svn_wc_delete3</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> keep_local, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gaf6efdb929f507a21a089722d6432ebab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to svn_wc_delete4, but uses an access baton and relative path instead of a working copy context and absolute path.  <a href="#gaf6efdb929f507a21a089722d6432ebab">More...</a><br/></td></tr>
<tr class="separator:gaf6efdb929f507a21a089722d6432ebab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga139d40a7260782c3c6b7fefebde4e82c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga139d40a7260782c3c6b7fefebde4e82c">svn_wc_delete2</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga139d40a7260782c3c6b7fefebde4e82c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gaf6efdb929f507a21a089722d6432ebab" title="Similar to svn_wc_delete4, but uses an access baton and relative path instead of a working copy conte...">svn_wc_delete3()</a>, but with <em>keep_local</em> always set to FALSE.  <a href="#ga139d40a7260782c3c6b7fefebde4e82c">More...</a><br/></td></tr>
<tr class="separator:ga139d40a7260782c3c6b7fefebde4e82c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac06874bc919b5c51a8d2f56ad8dbaa08"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gac06874bc919b5c51a8d2f56ad8dbaa08">svn_wc_delete</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2">svn_wc_notify_func_t</a> notify_func, void *notify_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gac06874bc919b5c51a8d2f56ad8dbaa08"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga139d40a7260782c3c6b7fefebde4e82c" title="Similar to svn_wc_delete3(), but with keep_local always set to FALSE. ">svn_wc_delete2()</a>, but takes an <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2" title="Similar to svn_wc_notify_func2_t, but takes the information as arguments instead of struct fields...">svn_wc_notify_func_t</a> instead.  <a href="#gac06874bc919b5c51a8d2f56ad8dbaa08">More...</a><br/></td></tr>
<tr class="separator:gac06874bc919b5c51a8d2f56ad8dbaa08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaebcf11f4ddd19e1fa943ed66ea8a1b6c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaebcf11f4ddd19e1fa943ed66ea8a1b6c">svn_wc_add_from_disk3</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, const apr_hash_t *props, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> skip_checks, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gaebcf11f4ddd19e1fa943ed66ea8a1b6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Schedule the single node that exists on disk at <em>local_abspath</em> for addition to the working copy.  <a href="#gaebcf11f4ddd19e1fa943ed66ea8a1b6c">More...</a><br/></td></tr>
<tr class="separator:gaebcf11f4ddd19e1fa943ed66ea8a1b6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7546c57880019ee44a89b6c792b3c3e4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga7546c57880019ee44a89b6c792b3c3e4">svn_wc_add_from_disk2</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, const apr_hash_t *props, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga7546c57880019ee44a89b6c792b3c3e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gaebcf11f4ddd19e1fa943ed66ea8a1b6c" title="Schedule the single node that exists on disk at local_abspath for addition to the working copy...">svn_wc_add_from_disk3()</a>, but always passes FALSE for <em>skip_checks</em>.  <a href="#ga7546c57880019ee44a89b6c792b3c3e4">More...</a><br/></td></tr>
<tr class="separator:ga7546c57880019ee44a89b6c792b3c3e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0d22e8a0836c52681f01896c0fb6f48a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga0d22e8a0836c52681f01896c0fb6f48a">svn_wc_add_from_disk</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga0d22e8a0836c52681f01896c0fb6f48a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga7546c57880019ee44a89b6c792b3c3e4" title="Similar to svn_wc_add_from_disk3(), but always passes FALSE for skip_checks. ">svn_wc_add_from_disk2()</a>, but always passes NULL for <em>props</em>.  <a href="#ga0d22e8a0836c52681f01896c0fb6f48a">More...</a><br/></td></tr>
<tr class="separator:ga0d22e8a0836c52681f01896c0fb6f48a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadaafaffaeabd943d0fb33c82938e9708"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gadaafaffaeabd943d0fb33c82938e9708">svn_wc_add4</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, const char *copyfrom_url, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> copyfrom_rev, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gadaafaffaeabd943d0fb33c82938e9708"><td class="mdescLeft">&#160;</td><td class="mdescRight">Put <em>local_abspath</em> under version control by registering it as addition or copy in the database containing its parent.  <a href="#gadaafaffaeabd943d0fb33c82938e9708">More...</a><br/></td></tr>
<tr class="separator:gadaafaffaeabd943d0fb33c82938e9708"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf5a440e1bbb7f13d80995d64c55b1044"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaf5a440e1bbb7f13d80995d64c55b1044">svn_wc_add3</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *parent_access, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, const char *copyfrom_url, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> copyfrom_rev, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gaf5a440e1bbb7f13d80995d64c55b1044"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gadaafaffaeabd943d0fb33c82938e9708" title="Put local_abspath under version control by registering it as addition or copy in the database contain...">svn_wc_add4()</a>, but with an access baton and relative path instead of a context and absolute path.  <a href="#gaf5a440e1bbb7f13d80995d64c55b1044">More...</a><br/></td></tr>
<tr class="separator:gaf5a440e1bbb7f13d80995d64c55b1044"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab9c690a572a5e13418e8f58d4e58d9b6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gab9c690a572a5e13418e8f58d4e58d9b6">svn_wc_add2</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *parent_access, const char *copyfrom_url, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> copyfrom_rev, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gab9c690a572a5e13418e8f58d4e58d9b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gaf5a440e1bbb7f13d80995d64c55b1044" title="Similar to svn_wc_add4(), but with an access baton and relative path instead of a context and absolut...">svn_wc_add3()</a>, but with the <em>depth</em> parameter always <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>.  <a href="#gab9c690a572a5e13418e8f58d4e58d9b6">More...</a><br/></td></tr>
<tr class="separator:gab9c690a572a5e13418e8f58d4e58d9b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gace37ab3ad1f94adf21e30e0795e9179f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gace37ab3ad1f94adf21e30e0795e9179f">svn_wc_add</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *parent_access, const char *copyfrom_url, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> copyfrom_rev, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2">svn_wc_notify_func_t</a> notify_func, void *notify_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gace37ab3ad1f94adf21e30e0795e9179f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gab9c690a572a5e13418e8f58d4e58d9b6" title="Similar to svn_wc_add3(), but with the depth parameter always svn_depth_infinity. ...">svn_wc_add2()</a>, but takes an <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2" title="Similar to svn_wc_notify_func2_t, but takes the information as arguments instead of struct fields...">svn_wc_notify_func_t</a> instead.  <a href="#gace37ab3ad1f94adf21e30e0795e9179f">More...</a><br/></td></tr>
<tr class="separator:gace37ab3ad1f94adf21e30e0795e9179f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7f664885f3e4478f713ccbfa3d80b9f0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga7f664885f3e4478f713ccbfa3d80b9f0">svn_wc_add_repos_file4</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af">svn_stream_t</a> *new_base_contents, <a class="el" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af">svn_stream_t</a> *new_contents, apr_hash_t *new_base_props, apr_hash_t *new_props, const char *copyfrom_url, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> copyfrom_rev, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga7f664885f3e4478f713ccbfa3d80b9f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a file to a working copy at <em>local_abspath</em>, obtaining the text-base's contents from <em>new_base_contents</em>, the wc file's content from <em>new_contents</em>, its unmodified properties from <em>new_base_props</em> and its actual properties from <em>new_props</em>.  <a href="#ga7f664885f3e4478f713ccbfa3d80b9f0">More...</a><br/></td></tr>
<tr class="separator:ga7f664885f3e4478f713ccbfa3d80b9f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9cf3280194d1e52abc4afbbf467413e2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga9cf3280194d1e52abc4afbbf467413e2">svn_wc_add_repos_file3</a> (const char *dst_path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af">svn_stream_t</a> *new_base_contents, <a class="el" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af">svn_stream_t</a> *new_contents, apr_hash_t *new_base_props, apr_hash_t *new_props, const char *copyfrom_url, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> copyfrom_rev, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga9cf3280194d1e52abc4afbbf467413e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to svn_wc_add_repos_file4, but uses access batons and a relative path instead of a working copy context and absolute path.  <a href="#ga9cf3280194d1e52abc4afbbf467413e2">More...</a><br/></td></tr>
<tr class="separator:ga9cf3280194d1e52abc4afbbf467413e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacd74be608158aacf75d1e18ffe24100f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gacd74be608158aacf75d1e18ffe24100f">svn_wc_add_repos_file2</a> (const char *dst_path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, const char *new_text_base_path, const char *new_text_path, apr_hash_t *new_base_props, apr_hash_t *new_props, const char *copyfrom_url, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> copyfrom_rev, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gacd74be608158aacf75d1e18ffe24100f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="group__svn__wc.html#ga9cf3280194d1e52abc4afbbf467413e2" title="Similar to svn_wc_add_repos_file4, but uses access batons and a relative path instead of a working co...">svn_wc_add_repos_file3()</a>, except that it has pathnames rather than streams for the text base, and actual text, and has no cancellation.  <a href="#gacd74be608158aacf75d1e18ffe24100f">More...</a><br/></td></tr>
<tr class="separator:gacd74be608158aacf75d1e18ffe24100f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2bec19fd4aeda3a9ed2c667dd4df879c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga2bec19fd4aeda3a9ed2c667dd4df879c">svn_wc_add_repos_file</a> (const char *dst_path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, const char *new_text_path, apr_hash_t *new_props, const char *copyfrom_url, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> copyfrom_rev, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga2bec19fd4aeda3a9ed2c667dd4df879c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="group__svn__wc.html#ga9cf3280194d1e52abc4afbbf467413e2" title="Similar to svn_wc_add_repos_file4, but uses access batons and a relative path instead of a working co...">svn_wc_add_repos_file3()</a>, except that it doesn't have the BASE arguments or cancellation.  <a href="#ga2bec19fd4aeda3a9ed2c667dd4df879c">More...</a><br/></td></tr>
<tr class="separator:ga2bec19fd4aeda3a9ed2c667dd4df879c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga24d515e760153e9fd648b1911e218b77"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga24d515e760153e9fd648b1911e218b77">svn_wc_remove_from_revision_control2</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> destroy_wf, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> instant_error, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga24d515e760153e9fd648b1911e218b77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove <em>local_abspath</em> from revision control.  <a href="#ga24d515e760153e9fd648b1911e218b77">More...</a><br/></td></tr>
<tr class="separator:ga24d515e760153e9fd648b1911e218b77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaac573ae3466f4367cb57aeb7b4289637"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaac573ae3466f4367cb57aeb7b4289637">svn_wc_remove_from_revision_control</a> (<a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, const char *name, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> destroy_wf, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> instant_error, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gaac573ae3466f4367cb57aeb7b4289637"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga24d515e760153e9fd648b1911e218b77" title="Remove local_abspath from revision control. ">svn_wc_remove_from_revision_control2()</a> but with a name and access baton.  <a href="#gaac573ae3466f4367cb57aeb7b4289637">More...</a><br/></td></tr>
<tr class="separator:gaac573ae3466f4367cb57aeb7b4289637"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa76d8a7b197bb9103738e1efa0dad68c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaa76d8a7b197bb9103738e1efa0dad68c">svn_wc_resolved_conflict5</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> resolve_text, const char *resolve_prop, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> resolve_tree, <a class="el" href="group__svn__wc__conflict.html#ga040e000024033dd2721a4ddce5561431">svn_wc_conflict_choice_t</a> conflict_choice, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gaa76d8a7b197bb9103738e1efa0dad68c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assuming <em>local_abspath</em> is under version control or a tree conflict victim and in a state of conflict, then take <em>local_abspath</em> <em>out</em> of this state.  <a href="#gaa76d8a7b197bb9103738e1efa0dad68c">More...</a><br/></td></tr>
<tr class="separator:gaa76d8a7b197bb9103738e1efa0dad68c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8eeabb76dc33dfd32dbdd70a1065a7fe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga8eeabb76dc33dfd32dbdd70a1065a7fe">svn_wc_resolved_conflict4</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> resolve_text, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> resolve_props, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> resolve_tree, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="group__svn__wc__conflict.html#ga040e000024033dd2721a4ddce5561431">svn_wc_conflict_choice_t</a> conflict_choice, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga8eeabb76dc33dfd32dbdd70a1065a7fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to svn_wc_resolved_conflict5, but takes an absolute path and an access baton.  <a href="#ga8eeabb76dc33dfd32dbdd70a1065a7fe">More...</a><br/></td></tr>
<tr class="separator:ga8eeabb76dc33dfd32dbdd70a1065a7fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga552cd6679dec494a65a793ba2d658066"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga552cd6679dec494a65a793ba2d658066">svn_wc_resolved_conflict3</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> resolve_text, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> resolve_props, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="group__svn__wc__conflict.html#ga040e000024033dd2721a4ddce5561431">svn_wc_conflict_choice_t</a> conflict_choice, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga552cd6679dec494a65a793ba2d658066"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga8eeabb76dc33dfd32dbdd70a1065a7fe" title="Similar to svn_wc_resolved_conflict5, but takes an absolute path and an access baton. ">svn_wc_resolved_conflict4()</a>, but without tree-conflict resolution support.  <a href="#ga552cd6679dec494a65a793ba2d658066">More...</a><br/></td></tr>
<tr class="separator:ga552cd6679dec494a65a793ba2d658066"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga54e3128550adfc252c3b3c622897e698"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga54e3128550adfc252c3b3c622897e698">svn_wc_resolved_conflict2</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> resolve_text, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> resolve_props, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga54e3128550adfc252c3b3c622897e698"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga552cd6679dec494a65a793ba2d658066" title="Similar to svn_wc_resolved_conflict4(), but without tree-conflict resolution support. ">svn_wc_resolved_conflict3()</a>, but without automatic conflict resolution support, and with <em>depth</em> set according to <em>recurse:</em> if <em>recurse</em> is TRUE, <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>, else it is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345" title="D + its file children, but not subdirs. ">svn_depth_files</a>.  <a href="#ga54e3128550adfc252c3b3c622897e698">More...</a><br/></td></tr>
<tr class="separator:ga54e3128550adfc252c3b3c622897e698"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad065d03c864e45af71d0b26dcc4e8552"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gad065d03c864e45af71d0b26dcc4e8552">svn_wc_resolved_conflict</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> resolve_text, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> resolve_props, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2">svn_wc_notify_func_t</a> notify_func, void *notify_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gad065d03c864e45af71d0b26dcc4e8552"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga54e3128550adfc252c3b3c622897e698" title="Similar to svn_wc_resolved_conflict3(), but without automatic conflict resolution support...">svn_wc_resolved_conflict2()</a>, but takes an svn_wc_notify_func_t and doesn't have cancellation support.  <a href="#gad065d03c864e45af71d0b26dcc4e8552">More...</a><br/></td></tr>
<tr class="separator:gad065d03c864e45af71d0b26dcc4e8552"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga32461ffb9ca12374861ec37b79718a73"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga32461ffb9ca12374861ec37b79718a73">svn_wc_committed_queue_create</a> (apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga32461ffb9ca12374861ec37b79718a73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a queue for use with <a class="el" href="group__svn__wc.html#ga7856266623140d568a76f03672f9b1c3" title="Same as svn_wc_queue_committed2() but the queue parameter has an extra indirection and digest is supp...">svn_wc_queue_committed()</a> and <a class="el" href="group__svn__wc.html#gaf1d8b8294ad80550d7d0c90f002c7a1c">svn_wc_process_committed_queue()</a>.  <a href="#ga32461ffb9ca12374861ec37b79718a73">More...</a><br/></td></tr>
<tr class="separator:ga32461ffb9ca12374861ec37b79718a73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga98c2bd15044c9c402d0d883bb62c812e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga98c2bd15044c9c402d0d883bb62c812e">svn_wc_queue_committed4</a> (<a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a> *queue, <a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> is_committed, const apr_array_header_t *wcprop_changes, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> remove_lock, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> remove_changelist, const <a class="el" href="structsvn__checksum__t.html">svn_checksum_t</a> *sha1_checksum, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga98c2bd15044c9c402d0d883bb62c812e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Queue committed items to be processed later by <a class="el" href="group__svn__wc.html#ga72fc390a891af297d845c72055e0b6f2" title="Bump all items in queue to new_revnum after a commit succeeds. ">svn_wc_process_committed_queue2()</a>.  <a href="#ga98c2bd15044c9c402d0d883bb62c812e">More...</a><br/></td></tr>
<tr class="separator:ga98c2bd15044c9c402d0d883bb62c812e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8da2f5064372bda0fcf2c4f8fb84eb62"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga8da2f5064372bda0fcf2c4f8fb84eb62">svn_wc_queue_committed3</a> (<a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a> *queue, <a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, const apr_array_header_t *wcprop_changes, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> remove_lock, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> remove_changelist, const <a class="el" href="structsvn__checksum__t.html">svn_checksum_t</a> *sha1_checksum, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga8da2f5064372bda0fcf2c4f8fb84eb62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to svn_wc_queue_committed4, but with is_committed always TRUE.  <a href="#ga8da2f5064372bda0fcf2c4f8fb84eb62">More...</a><br/></td></tr>
<tr class="separator:ga8da2f5064372bda0fcf2c4f8fb84eb62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf90b126117f2446776ea25f6b0328e38"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaf90b126117f2446776ea25f6b0328e38">svn_wc_queue_committed2</a> (<a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a> *queue, const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, const apr_array_header_t *wcprop_changes, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> remove_lock, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> remove_changelist, const <a class="el" href="structsvn__checksum__t.html">svn_checksum_t</a> *md5_checksum, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gaf90b126117f2446776ea25f6b0328e38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="group__svn__wc.html#ga8da2f5064372bda0fcf2c4f8fb84eb62" title="Similar to svn_wc_queue_committed4, but with is_committed always TRUE. ">svn_wc_queue_committed3()</a> except <em>path</em> doesn't have to be an abspath and <em>adm_access</em> is unused and a SHA-1 checksum cannot be specified.  <a href="#gaf90b126117f2446776ea25f6b0328e38">More...</a><br/></td></tr>
<tr class="separator:gaf90b126117f2446776ea25f6b0328e38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7856266623140d568a76f03672f9b1c3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga7856266623140d568a76f03672f9b1c3">svn_wc_queue_committed</a> (<a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a> **queue, const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, const apr_array_header_t *wcprop_changes, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> remove_lock, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> remove_changelist, const unsigned char *digest, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga7856266623140d568a76f03672f9b1c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="group__svn__wc.html#gaf90b126117f2446776ea25f6b0328e38" title="Same as svn_wc_queue_committed3() except path doesn&#39;t have to be an abspath and adm_access is unused ...">svn_wc_queue_committed2()</a> but the <em>queue</em> parameter has an extra indirection and <em>digest</em> is supplied instead of a checksum type.  <a href="#ga7856266623140d568a76f03672f9b1c3">More...</a><br/></td></tr>
<tr class="separator:ga7856266623140d568a76f03672f9b1c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga72fc390a891af297d845c72055e0b6f2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga72fc390a891af297d845c72055e0b6f2">svn_wc_process_committed_queue2</a> (<a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a> *queue, <a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> new_revnum, const char *rev_date, const char *rev_author, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga72fc390a891af297d845c72055e0b6f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bump all items in <em>queue</em> to <em>new_revnum</em> after a commit succeeds.  <a href="#ga72fc390a891af297d845c72055e0b6f2">More...</a><br/></td></tr>
<tr class="separator:ga72fc390a891af297d845c72055e0b6f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf1d8b8294ad80550d7d0c90f002c7a1c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaf1d8b8294ad80550d7d0c90f002c7a1c">svn_wc_process_committed_queue</a> (<a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a> *queue, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> new_revnum, const char *rev_date, const char *rev_author, apr_pool_t *pool)</td></tr>
<tr class="separator:gaf1d8b8294ad80550d7d0c90f002c7a1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8e947b4ad57c711e67596dc2d249114a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga8e947b4ad57c711e67596dc2d249114a">svn_wc_process_committed4</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> new_revnum, const char *rev_date, const char *rev_author, const apr_array_header_t *wcprop_changes, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> remove_lock, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> remove_changelist, const unsigned char *digest, apr_pool_t *pool)</td></tr>
<tr class="separator:ga8e947b4ad57c711e67596dc2d249114a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga90687846b22a6003da49351ea5834c86"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga90687846b22a6003da49351ea5834c86">svn_wc_process_committed3</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> new_revnum, const char *rev_date, const char *rev_author, const apr_array_header_t *wcprop_changes, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> remove_lock, const unsigned char *digest, apr_pool_t *pool)</td></tr>
<tr class="separator:ga90687846b22a6003da49351ea5834c86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5e775715b8f275e3facb463a344565a4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga5e775715b8f275e3facb463a344565a4">svn_wc_process_committed2</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> new_revnum, const char *rev_date, const char *rev_author, const apr_array_header_t *wcprop_changes, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> remove_lock, apr_pool_t *pool)</td></tr>
<tr class="separator:ga5e775715b8f275e3facb463a344565a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba7900e76522e26b9b223e8ea738fa2a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaba7900e76522e26b9b223e8ea738fa2a">svn_wc_process_committed</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> new_revnum, const char *rev_date, const char *rev_author, const apr_array_header_t *wcprop_changes, apr_pool_t *pool)</td></tr>
<tr class="separator:gaba7900e76522e26b9b223e8ea738fa2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaafdb7545191f898b01cef68f232539c8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaafdb7545191f898b01cef68f232539c8">svn_wc_crawl_revisions5</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, const <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a> *reporter, void *report_baton, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> restore_files, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> honor_depth_exclude, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> depth_compatibility_trick, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> use_commit_times, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gaafdb7545191f898b01cef68f232539c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do a depth-first crawl in a working copy, beginning at <em>local_abspath</em>, using <em>wc_ctx</em> for accessing the working copy.  <a href="#gaafdb7545191f898b01cef68f232539c8">More...</a><br/></td></tr>
<tr class="separator:gaafdb7545191f898b01cef68f232539c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4c9e88432451dd2348b65b8c9976e3ec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga4c9e88432451dd2348b65b8c9976e3ec">svn_wc_crawl_revisions4</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, const <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a> *reporter, void *report_baton, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> restore_files, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> honor_depth_exclude, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> depth_compatibility_trick, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> use_commit_times, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, <a class="el" href="group__svn__wc__externals.html#gae9a070074e7daebdd81214b0a692c9bf">svn_wc_traversal_info_t</a> *traversal_info, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga4c9e88432451dd2348b65b8c9976e3ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to svn_wc_crawl_revisions5, but with a relative path and access baton instead of an absolute path and wc_ctx.  <a href="#ga4c9e88432451dd2348b65b8c9976e3ec">More...</a><br/></td></tr>
<tr class="separator:ga4c9e88432451dd2348b65b8c9976e3ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2868b152e3e698645a7a0962f238b72c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga2868b152e3e698645a7a0962f238b72c">svn_wc_crawl_revisions3</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, const <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a> *reporter, void *report_baton, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> restore_files, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> depth_compatibility_trick, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> use_commit_times, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, <a class="el" href="group__svn__wc__externals.html#gae9a070074e7daebdd81214b0a692c9bf">svn_wc_traversal_info_t</a> *traversal_info, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga2868b152e3e698645a7a0962f238b72c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to svn_wc_crawl_revisions4, but with <em>honor_depth_exclude</em> always set to false.  <a href="#ga2868b152e3e698645a7a0962f238b72c">More...</a><br/></td></tr>
<tr class="separator:ga2868b152e3e698645a7a0962f238b72c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9aacdf613889a86c23af70544103132a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga9aacdf613889a86c23af70544103132a">svn_wc_crawl_revisions2</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, const <a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a> *reporter, void *report_baton, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> restore_files, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> use_commit_times, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, <a class="el" href="group__svn__wc__externals.html#gae9a070074e7daebdd81214b0a692c9bf">svn_wc_traversal_info_t</a> *traversal_info, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga9aacdf613889a86c23af70544103132a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to svn_wc_crawl_revisions3, but taking <a class="el" href="structsvn__ra__reporter2__t.html" title="Similar to svn_ra_reporter3_t, but without support for depths. ">svn_ra_reporter2_t</a> instead of <a class="el" href="structsvn__ra__reporter3__t.html" title="The update Reporter. ">svn_ra_reporter3_t</a>, and therefore only able to report <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a> for depths; and taking <em>recurse</em> instead of <em>depth</em>; and with <em>depth_compatibility_trick</em> always false.  <a href="#ga9aacdf613889a86c23af70544103132a">More...</a><br/></td></tr>
<tr class="separator:ga9aacdf613889a86c23af70544103132a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6fd1aa796f77881329c0a4cd49c2faea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga6fd1aa796f77881329c0a4cd49c2faea">svn_wc_crawl_revisions</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, const <a class="el" href="structsvn__ra__reporter__t.html">svn_ra_reporter_t</a> *reporter, void *report_baton, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> restore_files, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> use_commit_times, <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2">svn_wc_notify_func_t</a> notify_func, void *notify_baton, <a class="el" href="group__svn__wc__externals.html#gae9a070074e7daebdd81214b0a692c9bf">svn_wc_traversal_info_t</a> *traversal_info, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga6fd1aa796f77881329c0a4cd49c2faea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga9aacdf613889a86c23af70544103132a" title="Similar to svn_wc_crawl_revisions3, but taking svn_ra_reporter2_t instead of svn_ra_reporter3_t, and therefore only able to report svn_depth_infinity for depths; and taking recurse instead of depth; and with depth_compatibility_trick always false. ">svn_wc_crawl_revisions2()</a>, but takes an <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2" title="Similar to svn_wc_notify_func2_t, but takes the information as arguments instead of struct fields...">svn_wc_notify_func_t</a> and a <a class="el" href="structsvn__ra__reporter__t.html" title="Similar to svn_ra_reporter2_t, but without support for lock tokens. ">svn_ra_reporter_t</a> instead.  <a href="#ga6fd1aa796f77881329c0a4cd49c2faea">More...</a><br/></td></tr>
<tr class="separator:ga6fd1aa796f77881329c0a4cd49c2faea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9b96325abcf1b9433c2001facddd1c83"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga9b96325abcf1b9433c2001facddd1c83">svn_wc_get_actual_target2</a> (const char **anchor, const char **target, <a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *path, apr_pool_t *result_pool, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga9b96325abcf1b9433c2001facddd1c83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Conditionally split <em>path</em> into an <em>anchor</em> and <em>target</em> for the purpose of updating and committing.  <a href="#ga9b96325abcf1b9433c2001facddd1c83">More...</a><br/></td></tr>
<tr class="separator:ga9b96325abcf1b9433c2001facddd1c83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab56f7f5c239f34d5ac75fb65567410e6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gab56f7f5c239f34d5ac75fb65567410e6">svn_wc_get_actual_target</a> (const char *path, const char **anchor, const char **target, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gab56f7f5c239f34d5ac75fb65567410e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga9b96325abcf1b9433c2001facddd1c83" title="Conditionally split path into an anchor and target for the purpose of updating and committing...">svn_wc_get_actual_target2()</a>, but without the wc context, and with a absolute path.  <a href="#gab56f7f5c239f34d5ac75fb65567410e6">More...</a><br/></td></tr>
<tr class="separator:gab56f7f5c239f34d5ac75fb65567410e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadbea4ed49d75849cf5879f46792caf4e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gadbea4ed49d75849cf5879f46792caf4e">svn_wc_get_pristine_contents2</a> (<a class="el" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af">svn_stream_t</a> **contents, <a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, apr_pool_t *result_pool, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gadbea4ed49d75849cf5879f46792caf4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Given a <em>path</em> to a wc file, return in <em>*contents</em> a readonly stream to the pristine contents of the file that would serve as base content for the next commit.  <a href="#gadbea4ed49d75849cf5879f46792caf4e">More...</a><br/></td></tr>
<tr class="separator:gadbea4ed49d75849cf5879f46792caf4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga473bc0e61177ce7030af195ba09ee66a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga473bc0e61177ce7030af195ba09ee66a">svn_wc_get_pristine_contents</a> (<a class="el" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af">svn_stream_t</a> **contents, const char *path, apr_pool_t *result_pool, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga473bc0e61177ce7030af195ba09ee66a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to svn_wc_get_pristine_contents2, but takes no working copy context and a path that can be relative.  <a href="#ga473bc0e61177ce7030af195ba09ee66a">More...</a><br/></td></tr>
<tr class="separator:ga473bc0e61177ce7030af195ba09ee66a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9e0206f3daf7dbcdf677433ffd44bf48"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga9e0206f3daf7dbcdf677433ffd44bf48">svn_wc_get_pristine_copy_path</a> (const char *path, const char **pristine_path, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga9e0206f3daf7dbcdf677433ffd44bf48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*pristine_path</em> to the path of the "normal" pristine text file for the versioned file <em>path</em>.  <a href="#ga9e0206f3daf7dbcdf677433ffd44bf48">More...</a><br/></td></tr>
<tr class="separator:ga9e0206f3daf7dbcdf677433ffd44bf48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4c77b2d812929959910478118658b304"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga4c77b2d812929959910478118658b304">svn_wc_cleanup4</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> break_locks, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> fix_recorded_timestamps, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> clear_dav_cache, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> vacuum_pristines, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga4c77b2d812929959910478118658b304"><td class="mdescLeft">&#160;</td><td class="mdescRight">Recurse from <em>local_abspath</em>, cleaning up unfinished tasks.  <a href="#ga4c77b2d812929959910478118658b304">More...</a><br/></td></tr>
<tr class="separator:ga4c77b2d812929959910478118658b304"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad2c000b7ccf5f8e14f7d44d4a62ea3d7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gad2c000b7ccf5f8e14f7d44d4a62ea3d7">svn_wc_cleanup3</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gad2c000b7ccf5f8e14f7d44d4a62ea3d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga4c77b2d812929959910478118658b304" title="Recurse from local_abspath, cleaning up unfinished tasks. ">svn_wc_cleanup4()</a> but will always break locks, fix recorded timestamps, clear the dav cache and vacuum pristines.  <a href="#gad2c000b7ccf5f8e14f7d44d4a62ea3d7">More...</a><br/></td></tr>
<tr class="separator:gad2c000b7ccf5f8e14f7d44d4a62ea3d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa5b2ce85bad8598f27ece55359b37e40"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaa5b2ce85bad8598f27ece55359b37e40">svn_wc_cleanup2</a> (const char *path, const char *diff3_cmd, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gaa5b2ce85bad8598f27ece55359b37e40"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gad2c000b7ccf5f8e14f7d44d4a62ea3d7" title="Similar to svn_wc_cleanup4() but will always break locks, fix recorded timestamps, clear the dav cache and vacuum pristines. ">svn_wc_cleanup3()</a> but uses relative paths and creates its own <a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae" title="The context for all working copy interactions. ">svn_wc_context_t</a>.  <a href="#gaa5b2ce85bad8598f27ece55359b37e40">More...</a><br/></td></tr>
<tr class="separator:gaa5b2ce85bad8598f27ece55359b37e40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabaac0f153e57c4f63ef5700256ff6fa7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gabaac0f153e57c4f63ef5700256ff6fa7">svn_wc_cleanup</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *optional_adm_access, const char *diff3_cmd, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gabaac0f153e57c4f63ef5700256ff6fa7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gaa5b2ce85bad8598f27ece55359b37e40" title="Similar to svn_wc_cleanup3() but uses relative paths and creates its own svn_wc_context_t. ">svn_wc_cleanup2()</a>.  <a href="#gabaac0f153e57c4f63ef5700256ff6fa7">More...</a><br/></td></tr>
<tr class="separator:gabaac0f153e57c4f63ef5700256ff6fa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac2608b41140a8604b873e1b6eacbfc86"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gac2608b41140a8604b873e1b6eacbfc86">svn_wc_upgrade</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="group__svn__wc.html#ga23bb8de568e76b867d26f5385729a760">svn_wc_upgrade_get_repos_info_t</a> repos_info_func, void *repos_info_baton, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gac2608b41140a8604b873e1b6eacbfc86"><td class="mdescLeft">&#160;</td><td class="mdescRight">Upgrade the working copy at <em>local_abspath</em> to the latest metadata storage format.  <a href="#gac2608b41140a8604b873e1b6eacbfc86">More...</a><br/></td></tr>
<tr class="separator:gac2608b41140a8604b873e1b6eacbfc86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1a2fe02864df26f13e45f07d01ade7e5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga1a2fe02864df26f13e45f07d01ade7e5">svn_wc_relocate4</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *wcroot_abspath, const char *from, const char *to, <a class="el" href="group__svn__wc.html#gaa9addd7cee0df1441c76efe39ac8e0bd">svn_wc_relocation_validator3_t</a> validator, void *validator_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga1a2fe02864df26f13e45f07d01ade7e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Recursively change repository references at <em>wcroot_abspath</em> (which is the root directory of a working copy).  <a href="#ga1a2fe02864df26f13e45f07d01ade7e5">More...</a><br/></td></tr>
<tr class="separator:ga1a2fe02864df26f13e45f07d01ade7e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gada9d3d66c69c0f31cede9c90c4ab226e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gada9d3d66c69c0f31cede9c90c4ab226e">svn_wc_relocate3</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, const char *from, const char *to, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="group__svn__wc.html#gaa9addd7cee0df1441c76efe39ac8e0bd">svn_wc_relocation_validator3_t</a> validator, void *validator_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gada9d3d66c69c0f31cede9c90c4ab226e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga1a2fe02864df26f13e45f07d01ade7e5" title="Recursively change repository references at wcroot_abspath (which is the root directory of a working ...">svn_wc_relocate4()</a>, but with a <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577" title="Baton for access to a working copy administrative area. ">svn_wc_adm_access_t</a> / relative path parameter pair.  <a href="#gada9d3d66c69c0f31cede9c90c4ab226e">More...</a><br/></td></tr>
<tr class="separator:gada9d3d66c69c0f31cede9c90c4ab226e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga50cd30da614df6879b7882c55df93171"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga50cd30da614df6879b7882c55df93171">svn_wc_relocate2</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, const char *from, const char *to, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="group__svn__wc.html#ga3156f48a76033908b9dd80ac347938b8">svn_wc_relocation_validator2_t</a> validator, void *validator_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga50cd30da614df6879b7882c55df93171"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gada9d3d66c69c0f31cede9c90c4ab226e" title="Similar to svn_wc_relocate4(), but with a svn_wc_adm_access_t / relative path parameter pair...">svn_wc_relocate3()</a>, but uses <a class="el" href="group__svn__wc.html#ga3156f48a76033908b9dd80ac347938b8" title="Similar to svn_wc_relocation_validator3_t, but with the root argument. ">svn_wc_relocation_validator2_t</a>.  <a href="#ga50cd30da614df6879b7882c55df93171">More...</a><br/></td></tr>
<tr class="separator:ga50cd30da614df6879b7882c55df93171"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad72d6f9c9cf2db5d0199cc2c332dd50d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gad72d6f9c9cf2db5d0199cc2c332dd50d">svn_wc_relocate</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, const char *from, const char *to, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recurse, <a class="el" href="group__svn__wc.html#ga5aef0943027834b2d1a4b7eda408f321">svn_wc_relocation_validator_t</a> validator, void *validator_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gad72d6f9c9cf2db5d0199cc2c332dd50d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga50cd30da614df6879b7882c55df93171" title="Similar to svn_wc_relocate3(), but uses svn_wc_relocation_validator2_t. ">svn_wc_relocate2()</a>, but uses <a class="el" href="group__svn__wc.html#ga5aef0943027834b2d1a4b7eda408f321" title="Similar to svn_wc_relocation_validator2_t, but without the root and pool arguments. ">svn_wc_relocation_validator_t</a>.  <a href="#gad72d6f9c9cf2db5d0199cc2c332dd50d">More...</a><br/></td></tr>
<tr class="separator:gad72d6f9c9cf2db5d0199cc2c332dd50d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2931d682c608702834d05a6cfbcfcfea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga2931d682c608702834d05a6cfbcfcfea">svn_wc_revert5</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> use_commit_times, const apr_array_header_t *changelist_filter, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> clear_changelists, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> metadata_only, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga2931d682c608702834d05a6cfbcfcfea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Revert changes to <em>local_abspath</em>.  <a href="#ga2931d682c608702834d05a6cfbcfcfea">More...</a><br/></td></tr>
<tr class="separator:ga2931d682c608702834d05a6cfbcfcfea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaae2c0d170fed186462868bdb83d1dcf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaaae2c0d170fed186462868bdb83d1dcf">svn_wc_revert4</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> use_commit_times, const apr_array_header_t *changelist_filter, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gaaae2c0d170fed186462868bdb83d1dcf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga2931d682c608702834d05a6cfbcfcfea" title="Revert changes to local_abspath. ">svn_wc_revert5()</a> but with <em>clear_changelists</em> always set to FALSE and <em>metadata_only</em> set to FALSE.  <a href="#gaaae2c0d170fed186462868bdb83d1dcf">More...</a><br/></td></tr>
<tr class="separator:gaaae2c0d170fed186462868bdb83d1dcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac3acf6396c162b33e4842df433662314"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gac3acf6396c162b33e4842df433662314">svn_wc_revert3</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *parent_access, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> use_commit_times, const apr_array_header_t *changelist_filter, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gac3acf6396c162b33e4842df433662314"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gaaae2c0d170fed186462868bdb83d1dcf" title="Similar to svn_wc_revert5() but with clear_changelists always set to FALSE and metadata_only set to F...">svn_wc_revert4()</a> but takes a relative path and access baton.  <a href="#gac3acf6396c162b33e4842df433662314">More...</a><br/></td></tr>
<tr class="separator:gac3acf6396c162b33e4842df433662314"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa0b3f2d0d6603b376cb4043891c630ee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaa0b3f2d0d6603b376cb4043891c630ee">svn_wc_revert2</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *parent_access, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recursive, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> use_commit_times, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gaa0b3f2d0d6603b376cb4043891c630ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gac3acf6396c162b33e4842df433662314" title="Similar to svn_wc_revert4() but takes a relative path and access baton. ">svn_wc_revert3()</a>, but with <em>changelist_filter</em> passed as <code>NULL</code>, and <em>depth</em> set according to <em>recursive:</em> if <em>recursive</em> is TRUE, <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>; if FALSE, <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries. ">svn_depth_empty</a>.  <a href="#gaa0b3f2d0d6603b376cb4043891c630ee">More...</a><br/></td></tr>
<tr class="separator:gaa0b3f2d0d6603b376cb4043891c630ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga30293931c5ad5d6ba77c7c11a59cc912"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga30293931c5ad5d6ba77c7c11a59cc912">svn_wc_revert</a> (const char *path, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *parent_access, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> recursive, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> use_commit_times, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2">svn_wc_notify_func_t</a> notify_func, void *notify_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga30293931c5ad5d6ba77c7c11a59cc912"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gaa0b3f2d0d6603b376cb4043891c630ee" title="Similar to svn_wc_revert3(), but with changelist_filter passed as NULL, and depth set according to re...">svn_wc_revert2()</a>, but takes an <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2" title="Similar to svn_wc_notify_func2_t, but takes the information as arguments instead of struct fields...">svn_wc_notify_func_t</a> instead.  <a href="#ga30293931c5ad5d6ba77c7c11a59cc912">More...</a><br/></td></tr>
<tr class="separator:ga30293931c5ad5d6ba77c7c11a59cc912"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5b5fd7f34e31327571a1620596a00256"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga5b5fd7f34e31327571a1620596a00256">svn_wc_restore</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> use_commit_times, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga5b5fd7f34e31327571a1620596a00256"><td class="mdescLeft">&#160;</td><td class="mdescRight">Restores a missing node, <em>local_abspath</em> using the <em>wc_ctx</em>.  <a href="#ga5b5fd7f34e31327571a1620596a00256">More...</a><br/></td></tr>
<tr class="separator:ga5b5fd7f34e31327571a1620596a00256"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6818b0d51ffe2cf8c53b19397e41ddbc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga6818b0d51ffe2cf8c53b19397e41ddbc">svn_wc_create_tmp_file2</a> (apr_file_t **fp, const char **new_name, const char *path, <a class="el" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884">svn_io_file_del_t</a> delete_when, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga6818b0d51ffe2cf8c53b19397e41ddbc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a unique temporary file in administrative tmp/ area of directory <em>path</em>.  <a href="#ga6818b0d51ffe2cf8c53b19397e41ddbc">More...</a><br/></td></tr>
<tr class="separator:ga6818b0d51ffe2cf8c53b19397e41ddbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae048d6d99e03b9f8abb0afb82864c241"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gae048d6d99e03b9f8abb0afb82864c241">svn_wc_create_tmp_file</a> (apr_file_t **fp, const char *path, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> delete_on_close, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gae048d6d99e03b9f8abb0afb82864c241"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="group__svn__wc.html#ga6818b0d51ffe2cf8c53b19397e41ddbc" title="Create a unique temporary file in administrative tmp/ area of directory path. ">svn_wc_create_tmp_file2()</a>, but with <em>new_name</em> set to <code>NULL</code>, and without the ability to delete the file on pool cleanup.  <a href="#gae048d6d99e03b9f8abb0afb82864c241">More...</a><br/></td></tr>
<tr class="separator:gae048d6d99e03b9f8abb0afb82864c241"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaa0081a19ffa8b8f80d09951bca432c2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaaa0081a19ffa8b8f80d09951bca432c2">svn_wc_revision_status2</a> (<a class="el" href="structsvn__wc__revision__status__t.html">svn_wc_revision_status_t</a> **result_p, <a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, const char *trail_url, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> committed, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *result_pool, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gaaa0081a19ffa8b8f80d09951bca432c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*result_p</em> to point to a new <a class="el" href="structsvn__wc__revision__status__t.html" title="A structure to report a summary of a working copy, including the mix of revisions found within it...">svn_wc_revision_status_t</a> structure containing a summary of the revision range and status of the working copy at <em>local_abspath</em> (not including "externals").  <a href="#gaaa0081a19ffa8b8f80d09951bca432c2">More...</a><br/></td></tr>
<tr class="separator:gaaa0081a19ffa8b8f80d09951bca432c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6401b9142564d0ad162cae5cc0403d7f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga6401b9142564d0ad162cae5cc0403d7f">svn_wc_revision_status</a> (<a class="el" href="structsvn__wc__revision__status__t.html">svn_wc_revision_status_t</a> **result_p, const char *wc_path, const char *trail_url, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> committed, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga6401b9142564d0ad162cae5cc0403d7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#gaaa0081a19ffa8b8f80d09951bca432c2" title="Set *result_p to point to a new svn_wc_revision_status_t structure containing a summary of the revisi...">svn_wc_revision_status2()</a>, but with a (possibly) local path and no wc_ctx parameter.  <a href="#ga6401b9142564d0ad162cae5cc0403d7f">More...</a><br/></td></tr>
<tr class="separator:ga6401b9142564d0ad162cae5cc0403d7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0234016e89a6666f503e84fcbb21de6c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga0234016e89a6666f503e84fcbb21de6c">svn_wc_set_changelist2</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, const char *changelist, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, const apr_array_header_t *changelist_filter, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga0234016e89a6666f503e84fcbb21de6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>local_abspath's</em> 'changelist' attribute to <em>changelist</em> iff <em>changelist</em> is not <code>NULL</code>; otherwise, remove any current changelist assignment from <em>local_abspath</em>.  <a href="#ga0234016e89a6666f503e84fcbb21de6c">More...</a><br/></td></tr>
<tr class="separator:ga0234016e89a6666f503e84fcbb21de6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaad29afe2a97824e108b08567d5f8a143"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gaad29afe2a97824e108b08567d5f8a143">svn_wc_set_changelist</a> (const char *path, const char *changelist, <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *adm_access, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gaad29afe2a97824e108b08567d5f8a143"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga0234016e89a6666f503e84fcbb21de6c" title="Set local_abspath&#39;s &#39;changelist&#39; attribute to changelist iff changelist is not NULL; otherwise...">svn_wc_set_changelist2()</a>, but with an access baton and relative path.  <a href="#gaad29afe2a97824e108b08567d5f8a143">More...</a><br/></td></tr>
<tr class="separator:gaad29afe2a97824e108b08567d5f8a143"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga21d7e4b68ec86a8cb2f62e09fef67bc3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga21d7e4b68ec86a8cb2f62e09fef67bc3">svn_wc_get_changelists</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, const apr_array_header_t *changelist_filter, <a class="el" href="group__svn__wc.html#gaae18ec52a5dadbfa1f56a67cd70c0bfc">svn_changelist_receiver_t</a> callback_func, void *callback_baton, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga21d7e4b68ec86a8cb2f62e09fef67bc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Beginning at <em>local_abspath</em>, crawl to <em>depth</em> to discover every path in or under <em>local_abspath</em> which belongs to one of the changelists in <em>changelist_filter</em> (an array of <code>const char *</code> changelist names).  <a href="#ga21d7e4b68ec86a8cb2f62e09fef67bc3">More...</a><br/></td></tr>
<tr class="separator:ga21d7e4b68ec86a8cb2f62e09fef67bc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga559310a4178b394103f6cb04c7467267"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga559310a4178b394103f6cb04c7467267">svn_wc_crop_tree2</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga559310a4178b394103f6cb04c7467267"><td class="mdescLeft">&#160;</td><td class="mdescRight">Crop <em>local_abspath</em> according to <em>depth</em>.  <a href="#ga559310a4178b394103f6cb04c7467267">More...</a><br/></td></tr>
<tr class="separator:ga559310a4178b394103f6cb04c7467267"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6d1f174d2299f53237e6cc4d4f32ef04"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#ga6d1f174d2299f53237e6cc4d4f32ef04">svn_wc_crop_tree</a> (<a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *anchor, const char *target, <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a> depth, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga6d1f174d2299f53237e6cc4d4f32ef04"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="group__svn__wc.html#ga559310a4178b394103f6cb04c7467267" title="Crop local_abspath according to depth. ">svn_wc_crop_tree2()</a>, but uses an access baton and target.  <a href="#ga6d1f174d2299f53237e6cc4d4f32ef04">More...</a><br/></td></tr>
<tr class="separator:ga6d1f174d2299f53237e6cc4d4f32ef04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafe9ee9559ad3de4d7d81c6c63329b083"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__wc.html#gafe9ee9559ad3de4d7d81c6c63329b083">svn_wc_exclude</a> (<a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *wc_ctx, const char *local_abspath, <a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a> cancel_func, void *cancel_baton, <a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a> notify_func, void *notify_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:gafe9ee9559ad3de4d7d81c6c63329b083"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove the local node for <em>local_abspath</em> from the working copy and add an excluded node placeholder in its place.  <a href="#gafe9ee9559ad3de4d7d81c6c63329b083">More...</a><br/></td></tr>
<tr class="separator:gafe9ee9559ad3de4d7d81c6c63329b083"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="gaae18ec52a5dadbfa1f56a67cd70c0bfc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* svn_changelist_receiver_t)(void *baton, const char *path, const char *changelist, apr_pool_t *pool)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The callback type used by <a class="el" href="group__svn__wc.html#ga21d7e4b68ec86a8cb2f62e09fef67bc3" title="Beginning at local_abspath, crawl to depth to discover every path in or under local_abspath which bel...">svn_wc_get_changelists()</a> and <a class="el" href="group__svn__client__changelist__funcs.html#gabfbb2f162cd296e4360fa3276523bc01" title="Beginning at path, crawl to depth to discover every path in or under path which belongs to one of the...">svn_client_get_changelists()</a>. </p>
<p>On each invocation, <em>path</em> is a newly discovered member of the changelist, and <em>baton</em> is a private function closure.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

<p>Definition at line <a class="el" href="svn__wc_8h_source.html#l08227">8227</a> of file <a class="el" href="svn__wc_8h_source.html">svn_wc.h</a>.</p>

</div>
</div>
<a class="anchor" id="gab5313e08f94a081034e8453609bb7638"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a> <a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Storage type for queued post-commit data. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

<p>Definition at line <a class="el" href="svn__wc_8h_source.html#l05161">5161</a> of file <a class="el" href="svn__wc_8h_source.html">svn_wc.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga851c3850ab946b02bf83cf12e8d25346"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__wc__diff__callbacks2__t.html">svn_wc_diff_callbacks2_t</a>  <a class="el" href="structsvn__wc__diff__callbacks2__t.html">svn_wc_diff_callbacks2_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="structsvn__wc__diff__callbacks3__t.html" title="Similar to svn_wc_diff_callbacks4_t, but without copyfrom_path and copyfrom_revision arguments to fil...">svn_wc_diff_callbacks3_t</a>, but without the <code>dir_opened</code> and <code>dir_closed</code> functions, and without the <em>tree_conflicted</em> argument to the functions. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000492">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.2 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga3d7e3b30deaa61826c859cd6c436b9c5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__wc__diff__callbacks3__t.html">svn_wc_diff_callbacks3_t</a>  <a class="el" href="structsvn__wc__diff__callbacks3__t.html">svn_wc_diff_callbacks3_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="structsvn__wc__diff__callbacks4__t.html" title="A callback vtable invoked by our diff-editors, as they receive diffs from the server. ">svn_wc_diff_callbacks4_t</a>, but without <em>copyfrom_path</em> and <em>copyfrom_revision</em> arguments to <code>file_added</code> and <code>dir_added</code> functions. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000491">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga12cc0b7a4774fa997dc40e80b646c2a3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__wc__diff__callbacks4__t.html">svn_wc_diff_callbacks4_t</a>  <a class="el" href="structsvn__wc__diff__callbacks4__t.html">svn_wc_diff_callbacks4_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A callback vtable invoked by our diff-editors, as they receive diffs from the server. </p>
<p>'svn diff' and 'svn merge' implement their own versions of this vtable.</p>
<p>Common parameters:</p>
<p>If <em>state</em> is non-NULL, set <em>*state</em> to the state of the item after the operation has been performed. (In practice, this is only useful with merge, not diff; diff callbacks will probably set <em>*state</em> to <a class="el" href="group__svn__wc__notifications.html#gga86188fa68605f8c57b7849857b1e6543a62b31c3bfdff8fff8b059bfa988084c5" title="Notifier doesn&#39;t know or isn&#39;t saying. ">svn_wc_notify_state_unknown</a>, since they do not change the state and therefore do not bother to know the state after the operation.) By default, <em>state</em> refers to the item's content state. Functions concerned with property state have separate <em>contentstate</em> and <em>propstate</em> arguments.</p>
<p>If <em>tree_conflicted</em> is non-NULL, set <em>*tree_conflicted</em> to true if this operation caused a tree conflict, else to false. (Like with <em>state</em>, this is only useful with merge, not diff; diff callbacks should set this to false.)</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga3875762dadb2468b7f962a7fec4d1099"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__wc__diff__callbacks__t.html">svn_wc_diff_callbacks_t</a>  <a class="el" href="structsvn__wc__diff__callbacks__t.html">svn_wc_diff_callbacks_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="structsvn__wc__diff__callbacks2__t.html" title="Similar to svn_wc_diff_callbacks3_t, but without the dir_opened and dir_closed functions, and without the tree_conflicted argument to the functions. ">svn_wc_diff_callbacks2_t</a>, but with file additions/content changes and property changes split into different functions. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000493">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gae57827536e4cfe627f777a4033ca668d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__wc__entry__callbacks2__t.html">svn_wc_entry_callbacks2_t</a>  <a class="el" href="structsvn__wc__entry__callbacks2__t.html">svn_wc_entry_callbacks2_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A callback vtable invoked by the generic entry-walker function. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="ga55f4e859d73f34dfdd0a970422e624c0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__wc__entry__callbacks__t.html">svn_wc_entry_callbacks_t</a>  <a class="el" href="structsvn__wc__entry__callbacks__t.html">svn_wc_entry_callbacks_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000508">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf3977bd5adec3cc4f4a7a45b9d022d58"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__wc__info__t.html">svn_wc_info_t</a>  <a class="el" href="structsvn__wc__info__t.html">svn_wc_info_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This struct contains information about a working copy node. </p>
<dl class="section note"><dt>Note</dt><dd>Fields may be added to the end of this structure in future versions. Therefore, users shouldn't allocate structures of this type, to preserve binary compatibility.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga3156f48a76033908b9dd80ac347938b8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* svn_wc_relocation_validator2_t)(void *baton, const char *uuid, const char *url, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> root, apr_pool_t *pool)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gaa9addd7cee0df1441c76efe39ac8e0bd" title="Relocation validation callback typedef. ">svn_wc_relocation_validator3_t</a>, but with the <em>root</em> argument. </p>
<p>If <em>root</em> is TRUE, then the implementation should make sure that <em>url</em> is the repository root. Else, it can be a URL inside the repository.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000603">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.4 API. </dd></dl>

<p>Definition at line <a class="el" href="svn__wc_8h_source.html#l07454">7454</a> of file <a class="el" href="svn__wc_8h_source.html">svn_wc.h</a>.</p>

</div>
</div>
<a class="anchor" id="gaa9addd7cee0df1441c76efe39ac8e0bd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* svn_wc_relocation_validator3_t)(void *baton, const char *uuid, const char *url, const char *root_url, apr_pool_t *pool)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Relocation validation callback typedef. </p>
<p>Called for each relocated file/directory. <em>uuid</em>, if non-NULL, contains the expected repository UUID, <em>url</em> contains the tentative URL.</p>
<p><em>baton</em> is a closure object; it should be provided by the implementation, and passed by the caller.</p>
<p>If <em>root_url</em> is passed, then the implementation should make sure that <em>url</em> is the repository root. <em>pool</em> may be used for temporary allocations.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

<p>Definition at line <a class="el" href="svn__wc_8h_source.html#l07440">7440</a> of file <a class="el" href="svn__wc_8h_source.html">svn_wc.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga5aef0943027834b2d1a4b7eda408f321"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* svn_wc_relocation_validator_t)(void *baton, const char *uuid, const char *url)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga3156f48a76033908b9dd80ac347938b8" title="Similar to svn_wc_relocation_validator3_t, but with the root argument. ">svn_wc_relocation_validator2_t</a>, but without the <em>root</em> and <em>pool</em> arguments. </p>
<p><em>uuid</em> will not be NULL in this version of the function.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000604">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.3 API. </dd></dl>

<p>Definition at line <a class="el" href="svn__wc_8h_source.html#l07466">7466</a> of file <a class="el" href="svn__wc_8h_source.html">svn_wc.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga7afb4e33a741065b8b079325240589ea"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structsvn__wc__revision__status__t.html">svn_wc_revision_status_t</a>  <a class="el" href="structsvn__wc__revision__status__t.html">svn_wc_revision_status_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A structure to report a summary of a working copy, including the mix of revisions found within it, whether any parts are switched or locally modified, and whether it is a sparse checkout. </p>
<dl class="section note"><dt>Note</dt><dd>Fields may be added to the end of this structure in future versions. Therefore, to preserve binary compatibility, users should not directly allocate structures of this type.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.4 </dd></dl>

</div>
</div>
<a class="anchor" id="ga23bb8de568e76b867d26f5385729a760"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* svn_wc_upgrade_get_repos_info_t)(const char **repos_root, const char **repos_uuid, void *baton, const char *url, apr_pool_t *result_pool, apr_pool_t *scratch_pool)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Callback for retrieving a repository root for a url from upgrade. </p>
<p>Called by <a class="el" href="group__svn__wc.html#gac2608b41140a8604b873e1b6eacbfc86" title="Upgrade the working copy at local_abspath to the latest metadata storage format. ">svn_wc_upgrade()</a> when no repository root and/or repository uuid are recorded in the working copy. For normal Subversion 1.5 and later working copies, this callback will not be used.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

<p>Definition at line <a class="el" href="svn__wc_8h_source.html#l07385">7385</a> of file <a class="el" href="svn__wc_8h_source.html">svn_wc.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="gace37ab3ad1f94adf21e30e0795e9179f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_add </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>parent_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>copyfrom_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>copyfrom_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2">svn_wc_notify_func_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gab9c690a572a5e13418e8f58d4e58d9b6" title="Similar to svn_wc_add3(), but with the depth parameter always svn_depth_infinity. ...">svn_wc_add2()</a>, but takes an <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2" title="Similar to svn_wc_notify_func2_t, but takes the information as arguments instead of struct fields...">svn_wc_notify_func_t</a> instead. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000541">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gab9c690a572a5e13418e8f58d4e58d9b6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_add2 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>parent_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>copyfrom_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>copyfrom_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gaf5a440e1bbb7f13d80995d64c55b1044" title="Similar to svn_wc_add4(), but with an access baton and relative path instead of a context and absolut...">svn_wc_add3()</a>, but with the <em>depth</em> parameter always <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.2. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000540">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.5 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf5a440e1bbb7f13d80995d64c55b1044"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_add3 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>parent_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>copyfrom_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>copyfrom_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gadaafaffaeabd943d0fb33c82938e9708" title="Put local_abspath under version control by registering it as addition or copy in the database contain...">svn_wc_add4()</a>, but with an access baton and relative path instead of a context and absolute path. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000539">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gadaafaffaeabd943d0fb33c82938e9708"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_add4 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>copyfrom_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>copyfrom_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Put <em>local_abspath</em> under version control by registering it as addition or copy in the database containing its parent. </p>
<p>The new node is scheduled for addition to the repository below its parent node.</p>
<p>1) If the node is already versioned, it MUST BE the root of a separate working copy from the same repository as the parent WC. The new node and anything below it will be scheduled for addition inside the parent working copy as a copy of the original location. The separate working copy will be integrated by this step. In this case, which is only used by code like that of "svn cp URL@rev path" <em>copyfrom_url</em> and <em>copyfrom_rev</em> MUST BE the url and revision of <em>local_abspath</em> in the separate working copy.</p>
<p>2a) If the node was not versioned before it will be scheduled as a local addition or 2b) if <em>copyfrom_url</em> and <em>copyfrom_rev</em> are set as a copy of that location. In this last case the function doesn't set the pristine version (of a file) and/or pristine properties, which callers should handle via different APIs. Usually it is easier to call <a class="el" href="group__svn__wc.html#ga7f664885f3e4478f713ccbfa3d80b9f0" title="Add a file to a working copy at local_abspath, obtaining the text-base&#39;s contents from new_base_conte...">svn_wc_add_repos_file4()</a> (### or a possible svn_wc_add_repos_dir()) than using this variant.</p>
<p>If <em>local_abspath</em> does not exist as file, directory or symlink, return <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a42d1fe7f35ccb4c21411520c80c2fe00" title="&quot;Can&#39;t find a working copy path&quot; ">SVN_ERR_WC_PATH_NOT_FOUND</a>.</p>
<p>If <em>local_abspath</em> is an unversioned directory, record <em>depth</em> on it; otherwise, ignore <em>depth</em>. (Use <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a> unless you exactly know what you are doing, or you may create an unexpected sparse working copy)</p>
<p>If <em>cancel_func</em> is non-NULL, call it with <em>cancel_baton</em> at various points during the operation. If it returns an error (typically <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a879a10e8184482c5fb71e48ab0bb28a9" title="&quot;The operation was interrupted&quot; ">SVN_ERR_CANCELLED</a>), return that error immediately.</p>
<p>When the <em>local_abspath</em> has been added, then <em>notify_func</em> will be called (if it is not <code>NULL</code>) with the <em>notify_baton</em> and the path.</p>
<dl class="section note"><dt>Note</dt><dd>Case 1 is deprecated. Consider doing a WC-to-WC copy instead. </dd>
<dd>
For case 2a, prefer <a class="el" href="group__svn__wc.html#ga0d22e8a0836c52681f01896c0fb6f48a" title="Similar to svn_wc_add_from_disk2(), but always passes NULL for props. ">svn_wc_add_from_disk()</a>.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga0d22e8a0836c52681f01896c0fb6f48a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_add_from_disk </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga7546c57880019ee44a89b6c792b3c3e4" title="Similar to svn_wc_add_from_disk3(), but always passes FALSE for skip_checks. ">svn_wc_add_from_disk2()</a>, but always passes NULL for <em>props</em>. </p>
<p>This is a replacement for <a class="el" href="group__svn__wc.html#gadaafaffaeabd943d0fb33c82938e9708" title="Put local_abspath under version control by registering it as addition or copy in the database contain...">svn_wc_add4()</a> case 2a (which see for details).</p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__svn__wc.html#gadaafaffaeabd943d0fb33c82938e9708" title="Put local_abspath under version control by registering it as addition or copy in the database contain...">svn_wc_add4()</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000538">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.7 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga7546c57880019ee44a89b6c792b3c3e4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_add_from_disk2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_hash_t *&#160;</td>
          <td class="paramname"><em>props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gaebcf11f4ddd19e1fa943ed66ea8a1b6c" title="Schedule the single node that exists on disk at local_abspath for addition to the working copy...">svn_wc_add_from_disk3()</a>, but always passes FALSE for <em>skip_checks</em>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.8. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000537">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.8 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaebcf11f4ddd19e1fa943ed66ea8a1b6c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_add_from_disk3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_hash_t *&#160;</td>
          <td class="paramname"><em>props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>skip_checks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Schedule the single node that exists on disk at <em>local_abspath</em> for addition to the working copy. </p>
<p>The added node will have the properties provided in <em>props</em>, or none if that is NULL.</p>
<p>Unless <em>skip_checks</em> is TRUE, check and canonicalize the properties in the same way as <a class="el" href="group__svn__wc__properties.html#ga899d15ace8e7cedc959c6fcc850761c6" title="Set property name to value for local_abspath, or if value is NULL, remove property name from local_ab...">svn_wc_prop_set4()</a>. Return an error and don't add the node if the properties are not valid on this node.</p>
<h3>The error code on validity check failure should be specified, and</h3>
<p>preferably should be a single code.</p>
<p>The versioned state of the parent path must be a modifiable directory, and the versioned state of <em>local_abspath</em> must be either nonexistent or deleted; if deleted, the new node will be a replacement.</p>
<p>If <em>local_abspath</em> does not exist as file, directory or symlink, return <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a42d1fe7f35ccb4c21411520c80c2fe00" title="&quot;Can&#39;t find a working copy path&quot; ">SVN_ERR_WC_PATH_NOT_FOUND</a>.</p>
<p>If <em>notify_func</em> is non-NULL, invoke it with <em>notify_baton</em> to report the item being added.</p>
<h3>TODO: Split into add_dir, add_file, add_symlink?</h3>
<dl class="section since"><dt>Since</dt><dd>New in 1.9. </dd></dl>

</div>
</div>
<a class="anchor" id="ga2bec19fd4aeda3a9ed2c667dd4df879c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_add_repos_file </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>dst_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>new_text_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>new_props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>copyfrom_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>copyfrom_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Same as <a class="el" href="group__svn__wc.html#ga9cf3280194d1e52abc4afbbf467413e2" title="Similar to svn_wc_add_repos_file4, but uses access batons and a relative path instead of a working co...">svn_wc_add_repos_file3()</a>, except that it doesn't have the BASE arguments or cancellation. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000544">Deprecated:</a></b></dt><dd>Provided for compatibility with the 1.3 API </dd></dl>

</div>
</div>
<a class="anchor" id="gacd74be608158aacf75d1e18ffe24100f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_add_repos_file2 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>dst_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>new_text_base_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>new_text_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>new_base_props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>new_props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>copyfrom_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>copyfrom_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Same as <a class="el" href="group__svn__wc.html#ga9cf3280194d1e52abc4afbbf467413e2" title="Similar to svn_wc_add_repos_file4, but uses access batons and a relative path instead of a working co...">svn_wc_add_repos_file3()</a>, except that it has pathnames rather than streams for the text base, and actual text, and has no cancellation. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.4. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000543">Deprecated:</a></b></dt><dd>Provided for compatibility with the 1.5 API </dd></dl>

</div>
</div>
<a class="anchor" id="ga9cf3280194d1e52abc4afbbf467413e2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_add_repos_file3 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>dst_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af">svn_stream_t</a> *&#160;</td>
          <td class="paramname"><em>new_base_contents</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af">svn_stream_t</a> *&#160;</td>
          <td class="paramname"><em>new_contents</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>new_base_props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>new_props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>copyfrom_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>copyfrom_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to svn_wc_add_repos_file4, but uses access batons and a relative path instead of a working copy context and absolute path. </p>
<h3>NOTE: the notification callback/baton is not yet used.</h3>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000542">Deprecated:</a></b></dt><dd>Provided for compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga7f664885f3e4478f713ccbfa3d80b9f0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_add_repos_file4 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af">svn_stream_t</a> *&#160;</td>
          <td class="paramname"><em>new_base_contents</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af">svn_stream_t</a> *&#160;</td>
          <td class="paramname"><em>new_contents</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>new_base_props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>new_props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>copyfrom_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>copyfrom_rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a file to a working copy at <em>local_abspath</em>, obtaining the text-base's contents from <em>new_base_contents</em>, the wc file's content from <em>new_contents</em>, its unmodified properties from <em>new_base_props</em> and its actual properties from <em>new_props</em>. </p>
<p>Use <em>wc_ctx</em> for accessing the working copy.</p>
<p>The unmodified text and props normally come from the repository file represented by the copyfrom args, see below. The new file will be marked as copy.</p>
<p><em>new_contents</em> and <em>new_props</em> may be NULL, in which case the working copy text and props are taken from the base files with appropriate translation of the file's content.</p>
<p><em>new_contents</em> must be provided in Normal Form. This is required in order to pass both special and non-special files through a stream.</p>
<p><em>wc_ctx</em> must contain a write lock for the parent of <em>local_abspath</em>.</p>
<p>If <em>copyfrom_url</em> is non-NULL, then <em>copyfrom_rev</em> must be a valid revision number, and together they are the copyfrom history for the new file.</p>
<p>The <em>cancel_func</em> and <em>cancel_baton</em> are a standard cancellation callback, or NULL if no callback is needed. <em>notify_func</em> and <em>notify_baton</em> are a notification callback, and (if not NULL) will be notified of the addition of this file.</p>
<p>Use <em>scratch_pool</em> for temporary allocations.</p>
<h3>This function is very redundant with <a class="el" href="group__svn__wc.html#gace37ab3ad1f94adf21e30e0795e9179f" title="Similar to svn_wc_add2(), but takes an svn_wc_notify_func_t instead. ">svn_wc_add()</a>. Ideally,</h3>
<p>we'd merge them, so that <a class="el" href="group__svn__wc.html#gace37ab3ad1f94adf21e30e0795e9179f" title="Similar to svn_wc_add2(), but takes an svn_wc_notify_func_t instead. ">svn_wc_add()</a> would just take optional new_props and optional copyfrom information. That way it could be used for both 'svn add somefilesittingonmydisk' and for adding files from repositories, with or without copyfrom history.</p>
<p>The problem with this Ideal Plan is that <a class="el" href="group__svn__wc.html#gace37ab3ad1f94adf21e30e0795e9179f" title="Similar to svn_wc_add2(), but takes an svn_wc_notify_func_t instead. ">svn_wc_add()</a> also takes care of recursive URL-rewriting. There's a whole comment in its doc string about how that's really weird, outside its core mission, etc, etc. So another part of the Ideal Plan is that that functionality of <a class="el" href="group__svn__wc.html#gace37ab3ad1f94adf21e30e0795e9179f" title="Similar to svn_wc_add2(), but takes an svn_wc_notify_func_t instead. ">svn_wc_add()</a> would move into a separate function.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga2056dc218d262eca9102e0260b6bc0d7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_check_wc </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>wc_format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga98de33bfd6613cba23a78ae51bf093d1" title="Set *wc_format to local_abspath&#39;s working copy format version number if local_abspath is a valid work...">svn_wc_check_wc2()</a>, but with a relative path and no supplied working copy context. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000494">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga98de33bfd6613cba23a78ae51bf093d1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_check_wc2 </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>wc_format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set <em>*wc_format</em> to <em>local_abspath's</em> working copy format version number if <em>local_abspath</em> is a valid working copy directory, else set it to 0. </p>
<p>Return error <code>APR_ENOENT</code> if <em>local_abspath</em> does not exist at all.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="gabaac0f153e57c4f63ef5700256ff6fa7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_cleanup </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>optional_adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>diff3_cmd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gaa5b2ce85bad8598f27ece55359b37e40" title="Similar to svn_wc_cleanup3() but uses relative paths and creates its own svn_wc_context_t. ">svn_wc_cleanup2()</a>. </p>
<p><em>optional_adm_access</em> is an historic relic and not used, it may be NULL.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000602">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa5b2ce85bad8598f27ece55359b37e40"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_cleanup2 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>diff3_cmd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gad2c000b7ccf5f8e14f7d44d4a62ea3d7" title="Similar to svn_wc_cleanup4() but will always break locks, fix recorded timestamps, clear the dav cache and vacuum pristines. ">svn_wc_cleanup3()</a> but uses relative paths and creates its own <a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae" title="The context for all working copy interactions. ">svn_wc_context_t</a>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.2. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000601">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gad2c000b7ccf5f8e14f7d44d4a62ea3d7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_cleanup3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga4c77b2d812929959910478118658b304" title="Recurse from local_abspath, cleaning up unfinished tasks. ">svn_wc_cleanup4()</a> but will always break locks, fix recorded timestamps, clear the dav cache and vacuum pristines. </p>
<p>This function also doesn't support notifications.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000600">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.8 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga4c77b2d812929959910478118658b304"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_cleanup4 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>break_locks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>fix_recorded_timestamps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>clear_dav_cache</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>vacuum_pristines</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Recurse from <em>local_abspath</em>, cleaning up unfinished tasks. </p>
<p>Perform any temporary allocations in <em>scratch_pool</em>. If <em>break_locks</em> is TRUE Any working copy locks under <em>local_abspath</em> will be taken over and then cleared by this function. WARNING: If <em>break_locks</em> is TRUE there is no mechanism that will protect locks that are still being used.</p>
<p>If <em>fix_recorded_timestamps</em> is TRUE the recorded timestamps of unmodified files will be updated, which will improve performance of future is-modified checks.</p>
<p>If <em>clear_dav_cache</em> is <code>TRUE</code>, the caching of DAV information for older mod_dav served repositories is cleared. This clearing invalidates some cached information used for pre-HTTPv2 repositories.</p>
<p>If <em>vacuum_pristines</em> is TRUE, try to remove unreferenced pristines from the working copy. (Will not remove anything unless the obtained lock applies to the entire working copy)</p>
<p>If <em>cancel_func</em> is non-NULL, invoke it with <em>cancel_baton</em> at various points during the operation. If it returns an error (typically <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a879a10e8184482c5fb71e48ab0bb28a9" title="&quot;The operation was interrupted&quot; ">SVN_ERR_CANCELLED</a>), return that error immediately.</p>
<p>If <em>notify_func</em> is non-NULL, invoke it with <em>notify_baton</em> to report the progress of the operation.</p>
<dl class="section note"><dt>Note</dt><dd>In 1.9, <em>notify_func</em> does not get called at all. This may change in later releases.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.9. </dd></dl>

</div>
</div>
<a class="anchor" id="ga32461ffb9ca12374861ec37b79718a73"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a>* svn_wc_committed_queue_create </td>
          <td>(</td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a queue for use with <a class="el" href="group__svn__wc.html#ga7856266623140d568a76f03672f9b1c3" title="Same as svn_wc_queue_committed2() but the queue parameter has an extra indirection and digest is supp...">svn_wc_queue_committed()</a> and <a class="el" href="group__svn__wc.html#gaf1d8b8294ad80550d7d0c90f002c7a1c">svn_wc_process_committed_queue()</a>. </p>
<p>The returned queue and all further allocations required for queuing new items will also be done from <em>pool</em>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf436fc679467645939ab22ba9b7b504f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_conflicted_p </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>text_conflicted_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>prop_conflicted_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>dir_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__wc__entry__t.html">svn_wc_entry_t</a> *&#160;</td>
          <td class="paramname"><em>entry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Given a <em>dir_path</em> under version control, decide if one of its entries (<em>entry</em>) is in a state of conflict; return the answers in <em>text_conflicted_p</em> and <em>prop_conflicted_p</em>. </p>
<p>These pointers must not be null.</p>
<p>If the <em>entry</em> mentions that text conflict files (with suffix .mine, .theirs, etc.) exist, but they cannot be found, assume the text conflict has been resolved by the user and return FALSE in <em>*text_conflicted_p</em>.</p>
<p>Similarly, if the <em>entry</em> mentions that a property conflicts file (.prej suffix) exists, but it cannot be found, assume the property conflicts have been resolved by the user and return FALSE in <em>*prop_conflicted_p</em>.</p>
<p>The <em>entry</em> is not updated.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000506">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.5 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gac5c8afaab3705c51213f2443c106826b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_conflicted_p2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>text_conflicted_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>prop_conflicted_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>tree_conflicted_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gabf3a26b636143b05fdf3b38542321275" title="Given local_abspath in a dir under version control, decide if it is in a state of conflict; return th...">svn_wc_conflicted_p3()</a>, but with a path/adm_access parameter pair in place of a wc_ctx/local_abspath pair. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000505">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gabf3a26b636143b05fdf3b38542321275"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_conflicted_p3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>text_conflicted_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>prop_conflicted_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>tree_conflicted_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Given <em>local_abspath</em> in a dir under version control, decide if it is in a state of conflict; return the answers in <em>*text_conflicted_p</em>, <em>*prop_conflicted_p</em>, and <em>*tree_conflicted_p</em>. </p>
<p>If one or two of the answers are uninteresting, simply pass <code>NULL</code> pointers for those.</p>
<p>If <em>local_abspath</em> is unversioned or does not exist, return <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a42d1fe7f35ccb4c21411520c80c2fe00" title="&quot;Can&#39;t find a working copy path&quot; ">SVN_ERR_WC_PATH_NOT_FOUND</a>.</p>
<p>If the <em>local_abspath</em> has corresponding text conflict files (with suffix .mine, .theirs, etc.) that cannot be found, assume that the text conflict has been resolved by the user and return <code>FALSE</code> in <em>*text_conflicted_p</em>.</p>
<p>Similarly, if a property conflicts file (.prej suffix) is said to exist, but it cannot be found, assume that the property conflicts have been resolved by the user and return <code>FALSE</code> in <em>*prop_conflicted_p</em>.</p>
<p><em>*tree_conflicted_p</em> can't be auto-resolved in this fashion. An explicit `resolved' is needed.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga196abed06b6cc8d3e385c40172fd8a9f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_copy </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>dst_parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>dst_basename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2">svn_wc_notify_func_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga4db028d5bd4921e3e087137274f6cd8f" title="Similar to svn_wc_copy3(), but takes access batons and a relative path and a basename instead of abso...">svn_wc_copy2()</a>, but takes an <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2" title="Similar to svn_wc_notify_func2_t, but takes the information as arguments instead of struct fields...">svn_wc_notify_func_t</a> instead. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000532">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga4db028d5bd4921e3e087137274f6cd8f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_copy2 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>dst_parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>dst_basename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gaa7be3f311d11c3dd5a59550d25eb4e6d" title="Copy src_abspath to dst_abspath, and schedule dst_abspath for addition to the repository, remembering the copy history. ">svn_wc_copy3()</a>, but takes access batons and a relative path and a basename instead of absolute paths and a working copy context. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.2. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000531">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa7be3f311d11c3dd5a59550d25eb4e6d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_copy3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>src_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>dst_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>metadata_only</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy <em>src_abspath</em> to <em>dst_abspath</em>, and schedule <em>dst_abspath</em> for addition to the repository, remembering the copy history. </p>
<p><em>wc_ctx</em> is used for accessing the working copy and must contain a write lock for the parent directory of <em>dst_abspath</em>,</p>
<p>If <em>metadata_only</em> is TRUE then this is a database-only operation and the working directories and files are not copied.</p>
<p><em>src_abspath</em> must be a file or directory under version control; the parent of <em>dst_abspath</em> must be a directory under version control in the same working copy; <em>dst_abspath</em> will be the name of the copied item, and it must not exist already if <em>metadata_only</em> is FALSE. Note that when <em>src</em> points to a versioned file, the working file doesn't necessarily exist in which case its text-base is used instead.</p>
<p>If <em>cancel_func</em> is non-NULL, call it with <em>cancel_baton</em> at various points during the operation. If it returns an error (typically <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a879a10e8184482c5fb71e48ab0bb28a9" title="&quot;The operation was interrupted&quot; ">SVN_ERR_CANCELLED</a>), return that error immediately.</p>
<p>If <em>notify_func</em> is non-NULL, call it with <em>notify_baton</em> and the path of the root node (only) of the destination.</p>
<p>Use <em>scratch_pool</em> for temporary allocations.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga6fd1aa796f77881329c0a4cd49c2faea"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_crawl_revisions </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__reporter__t.html">svn_ra_reporter_t</a> *&#160;</td>
          <td class="paramname"><em>reporter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>report_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>restore_files</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>use_commit_times</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2">svn_wc_notify_func_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__externals.html#gae9a070074e7daebdd81214b0a692c9bf">svn_wc_traversal_info_t</a> *&#160;</td>
          <td class="paramname"><em>traversal_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga9aacdf613889a86c23af70544103132a" title="Similar to svn_wc_crawl_revisions3, but taking svn_ra_reporter2_t instead of svn_ra_reporter3_t, and therefore only able to report svn_depth_infinity for depths; and taking recurse instead of depth; and with depth_compatibility_trick always false. ">svn_wc_crawl_revisions2()</a>, but takes an <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2" title="Similar to svn_wc_notify_func2_t, but takes the information as arguments instead of struct fields...">svn_wc_notify_func_t</a> and a <a class="el" href="structsvn__ra__reporter__t.html" title="Similar to svn_ra_reporter2_t, but without support for lock tokens. ">svn_ra_reporter_t</a> instead. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000561">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga9aacdf613889a86c23af70544103132a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_crawl_revisions2 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__reporter2__t.html">svn_ra_reporter2_t</a> *&#160;</td>
          <td class="paramname"><em>reporter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>report_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>restore_files</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>use_commit_times</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__externals.html#gae9a070074e7daebdd81214b0a692c9bf">svn_wc_traversal_info_t</a> *&#160;</td>
          <td class="paramname"><em>traversal_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to svn_wc_crawl_revisions3, but taking <a class="el" href="structsvn__ra__reporter2__t.html" title="Similar to svn_ra_reporter3_t, but without support for depths. ">svn_ra_reporter2_t</a> instead of <a class="el" href="structsvn__ra__reporter3__t.html" title="The update Reporter. ">svn_ra_reporter3_t</a>, and therefore only able to report <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a> for depths; and taking <em>recurse</em> instead of <em>depth</em>; and with <em>depth_compatibility_trick</em> always false. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000560">Deprecated:</a></b></dt><dd>Provided for compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga2868b152e3e698645a7a0962f238b72c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_crawl_revisions3 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a> *&#160;</td>
          <td class="paramname"><em>reporter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>report_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>restore_files</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>depth_compatibility_trick</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>use_commit_times</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__externals.html#gae9a070074e7daebdd81214b0a692c9bf">svn_wc_traversal_info_t</a> *&#160;</td>
          <td class="paramname"><em>traversal_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to svn_wc_crawl_revisions4, but with <em>honor_depth_exclude</em> always set to false. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000559">Deprecated:</a></b></dt><dd>Provided for compatibility with the 1.5 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga4c9e88432451dd2348b65b8c9976e3ec"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_crawl_revisions4 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a> *&#160;</td>
          <td class="paramname"><em>reporter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>report_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>restore_files</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>honor_depth_exclude</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>depth_compatibility_trick</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>use_commit_times</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__externals.html#gae9a070074e7daebdd81214b0a692c9bf">svn_wc_traversal_info_t</a> *&#160;</td>
          <td class="paramname"><em>traversal_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to svn_wc_crawl_revisions5, but with a relative path and access baton instead of an absolute path and wc_ctx. </p>
<p>Passes NULL for <em>cancel_func</em> and <em>cancel_baton</em>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000558">Deprecated:</a></b></dt><dd>Provided for compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaafdb7545191f898b01cef68f232539c8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_crawl_revisions5 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__ra__reporter3__t.html">svn_ra_reporter3_t</a> *&#160;</td>
          <td class="paramname"><em>reporter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>report_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>restore_files</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>honor_depth_exclude</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>depth_compatibility_trick</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>use_commit_times</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Do a depth-first crawl in a working copy, beginning at <em>local_abspath</em>, using <em>wc_ctx</em> for accessing the working copy. </p>
<p>Communicate the `state' of the working copy's revisions and depths to <em>reporter/<em>report_baton</em>.</em> Obviously, if <em>local_abspath</em> is a file instead of a directory, this depth-first crawl will be a short one.</p>
<p>No locks or logs are created, nor are any animals harmed in the process unless <em>restore_files</em> is TRUE. No cleanup is necessary.</p>
<p>After all revisions are reported, <em>reporter-&gt;finish_report()</em> is called, which immediately causes the RA layer to update the working copy. Thus the return value may very well reflect the result of the update!</p>
<p>If <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries. ">svn_depth_empty</a>, then report state only for <em>path</em> itself. If <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345" title="D + its file children, but not subdirs. ">svn_depth_files</a>, do the same and include immediate file children of <em>path</em>. If <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca68873e015456e384e4f63f3bbd515c8a" title="D + immediate children (D and its entries). ">svn_depth_immediates</a>, then behave as if for <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345" title="D + its file children, but not subdirs. ">svn_depth_files</a> but also report the property states of immediate subdirectories. If <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>, then report state fully recursively. All descents are only as deep as <em>path's</em> own depth permits, of course. If <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2cacf4538edb8e8823b0b9cdeaaac245ebf" title="Depth undetermined or ignored. ">svn_depth_unknown</a>, then just use <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>, which in practice means depth of <em>path</em>.</p>
<p>Iff <em>honor_depth_exclude</em> is TRUE, the crawler will report paths whose ambient depth is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca1bc611e0caf428575d07287adca72603" title="Exclude (i.e., don&#39;t descend into) directory D. ">svn_depth_exclude</a> as being excluded, and thus prevent the server from pushing update data for those paths; therefore, don't set this flag if you wish to pull in excluded paths. Note that <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca1bc611e0caf428575d07287adca72603" title="Exclude (i.e., don&#39;t descend into) directory D. ">svn_depth_exclude</a> on the target <em>path</em> is never honored, even if <em>honor_depth_exclude</em> is TRUE, because we need to be able to explicitly pull in a target. For example, if this is the working copy...</p>
<p>svn co greek_tree_repos wc_dir svn up &ndash;set-depth exclude wc_dir/A/B/E # now A/B/E is excluded</p>
<p>...then 'svn up wc_dir/A/B' would report E as excluded (assuming <em>honor_depth_exclude</em> is TRUE), but 'svn up wc_dir/A/B/E' would not, because the latter is trying to explicitly pull in E. In general, we never report the update target as excluded.</p>
<p>Iff <em>depth_compatibility_trick</em> is TRUE, then set the <code>start_empty</code> flag on <em>reporter-&gt;set_path()</em> and <em>reporter-&gt;link_path()</em> calls as necessary to trick a pre-1.5 (i.e., depth-unaware) server into sending back all the items the client might need to upgrade a working copy from a shallower depth to a deeper one.</p>
<p>If <em>restore_files</em> is TRUE, then unexpectedly missing working files will be restored from the administrative directory's cache. For each file restored, the <em>notify_func</em> function will be called with the <em>notify_baton</em> and the path of the restored file. <em>notify_func</em> may be <code>NULL</code> if this notification is not required. If <em>use_commit_times</em> is TRUE, then set restored files' timestamps to their last-commit-times.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="gae048d6d99e03b9f8abb0afb82864c241"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_create_tmp_file </td>
          <td>(</td>
          <td class="paramtype">apr_file_t **&#160;</td>
          <td class="paramname"><em>fp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>delete_on_close</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Same as <a class="el" href="group__svn__wc.html#ga6818b0d51ffe2cf8c53b19397e41ddbc" title="Create a unique temporary file in administrative tmp/ area of directory path. ">svn_wc_create_tmp_file2()</a>, but with <em>new_name</em> set to <code>NULL</code>, and without the ability to delete the file on pool cleanup. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000613">Deprecated:</a></b></dt><dd>For compatibility with 1.3 API </dd></dl>

</div>
</div>
<a class="anchor" id="ga6818b0d51ffe2cf8c53b19397e41ddbc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_create_tmp_file2 </td>
          <td>(</td>
          <td class="paramtype">apr_file_t **&#160;</td>
          <td class="paramname"><em>fp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>new_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884">svn_io_file_del_t</a>&#160;</td>
          <td class="paramname"><em>delete_when</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a unique temporary file in administrative tmp/ area of directory <em>path</em>. </p>
<p>Return a handle in <em>*fp</em> and the path in <em>*new_name</em>. Either <em>fp</em> or <em>new_name</em> can be NULL.</p>
<p>The flags will be <code>APR_WRITE | APR_CREATE | APR_EXCL</code> and optionally <code>APR_DELONCLOSE</code> (if the <em>delete_when</em> argument is set to <a class="el" href="svn__io_8h.html#aa78fffc81af962281813070c753d7884a6256344ca6b43868daa12365d75834d2" title="Remove when the file is closed. ">svn_io_file_del_on_close</a>).</p>
<p>This means that as soon as <em>fp</em> is closed, the tmp file will vanish.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.4 </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000612">Deprecated:</a></b></dt><dd>For compatibility with 1.6 API </dd></dl>

</div>
</div>
<a class="anchor" id="ga6d1f174d2299f53237e6cc4d4f32ef04"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_crop_tree </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>anchor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga559310a4178b394103f6cb04c7467267" title="Crop local_abspath according to depth. ">svn_wc_crop_tree2()</a>, but uses an access baton and target. </p>
<p><a class="el" href="group__svn__wc.html#ga6d1f174d2299f53237e6cc4d4f32ef04" title="Similar to svn_wc_crop_tree2(), but uses an access baton and target. ">svn_wc_crop_tree()</a> also allows <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca1bc611e0caf428575d07287adca72603" title="Exclude (i.e., don&#39;t descend into) directory D. ">svn_depth_exclude</a>, which is now handled via <a class="el" href="group__svn__wc.html#gafe9ee9559ad3de4d7d81c6c63329b083" title="Remove the local node for local_abspath from the working copy and add an excluded node placeholder in...">svn_wc_exclude()</a></p>
<p><em>target</em> is a basename in <em>anchor</em> or "" for <em>anchor</em> itself.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6 </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000625">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga559310a4178b394103f6cb04c7467267"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_crop_tree2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Crop <em>local_abspath</em> according to <em>depth</em>. </p>
<p>Remove any item that exceeds the boundary of <em>depth</em> (relative to <em>local_abspath</em>) from revision control. Leave modified items behind (unversioned), while removing unmodified ones completely.</p>
<p><em>depth</em> can be svn_depth_empty, svn_depth_files or svn_depth_immediates. Excluding nodes is handled by <a class="el" href="group__svn__wc.html#gafe9ee9559ad3de4d7d81c6c63329b083" title="Remove the local node for local_abspath from the working copy and add an excluded node placeholder in...">svn_wc_exclude()</a>.</p>
<p>If <em>local_abspath</em> starts out with a shallower depth than <em>depth</em>, do not upgrade it to <em>depth</em> (that would not be cropping); however, do check children and crop them appropriately according to <em>depth</em>.</p>
<p>Returns immediately with an <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a4152fa8f6143f7bcd6f2f7d656096c8b" title="&quot;Trying to use an unsupported feature&quot; ">SVN_ERR_UNSUPPORTED_FEATURE</a> error if <em>local_abspath</em> is not a directory, or if <em>depth</em> is not restrictive (e.g., <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>).</p>
<p><em>wc_ctx</em> contains a tree lock, for the local path to the working copy which will be used as the root of this operation.</p>
<p>If <em>cancel_func</em> is not <code>NULL</code>, call it with <em>cancel_baton</em> at various points to determine if the client has canceled the operation.</p>
<p>If <em>notify_func</em> is not <code>NULL</code>, call it with <em>notify_baton</em> to report changes as they are made.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7 </dd></dl>

</div>
</div>
<a class="anchor" id="gac06874bc919b5c51a8d2f56ad8dbaa08"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_delete </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2">svn_wc_notify_func_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga139d40a7260782c3c6b7fefebde4e82c" title="Similar to svn_wc_delete3(), but with keep_local always set to FALSE. ">svn_wc_delete2()</a>, but takes an <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2" title="Similar to svn_wc_notify_func2_t, but takes the information as arguments instead of struct fields...">svn_wc_notify_func_t</a> instead. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000536">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga139d40a7260782c3c6b7fefebde4e82c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_delete2 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gaf6efdb929f507a21a089722d6432ebab" title="Similar to svn_wc_delete4, but uses an access baton and relative path instead of a working copy conte...">svn_wc_delete3()</a>, but with <em>keep_local</em> always set to FALSE. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000535">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf6efdb929f507a21a089722d6432ebab"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_delete3 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>keep_local</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to svn_wc_delete4, but uses an access baton and relative path instead of a working copy context and absolute path. </p>
<p><em>adm_access</em> must hold a write lock for the parent of <em>path</em>.</p>
<p><code>delete_unversioned_target</code> will always be set to TRUE.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000534">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga72c78b3fa4fc0fc282a0f3d1f42b0ff7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_delete4 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>keep_local</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>delete_unversioned_target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Schedule <em>local_abspath</em> for deletion. </p>
<p>It will be deleted from the repository on the next commit. If <em>local_abspath</em> refers to a directory, then a recursive deletion will occur. <em>wc_ctx</em> must hold a write lock for the parent of <em>local_abspath</em>, <em>local_abspath</em> itself and everything below <em>local_abspath</em>.</p>
<p>If <em>keep_local</em> is FALSE, this function immediately deletes all files, modified and unmodified, versioned and of <em>delete_unversioned</em> is TRUE, unversioned from the working copy. It also immediately deletes unversioned directories and directories that are scheduled to be added below <em>local_abspath</em>. Only versioned may remain in the working copy, these get deleted by the update following the commit.</p>
<p>If <em>keep_local</em> is TRUE, all files and directories will be kept in the working copy (and will become unversioned on the next commit).</p>
<p>If <em>delete_unversioned_target</em> is TRUE and <em>local_abspath</em> is not versioned, <em>local_abspath</em> will be handled as an added files without history. So it will be deleted if <em>keep_local</em> is FALSE. If <em>delete_unversioned</em> is FALSE and <em>local_abspath</em> is not versioned a <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a42d1fe7f35ccb4c21411520c80c2fe00" title="&quot;Can&#39;t find a working copy path&quot; ">SVN_ERR_WC_PATH_NOT_FOUND</a> error will be returned.</p>
<p>If <em>cancel_func</em> is non-NULL, call it with <em>cancel_baton</em> at various points during the operation. If it returns an error (typically <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a879a10e8184482c5fb71e48ab0bb28a9" title="&quot;The operation was interrupted&quot; ">SVN_ERR_CANCELLED</a>), return that error immediately.</p>
<p>For each path marked for deletion, <em>notify_func</em> will be called with the <em>notify_baton</em> and that path. The <em>notify_func</em> callback may be <code>NULL</code> if notification is not needed.</p>
<p>Use <em>scratch_pool</em> for temporary allocations. It may be cleared immediately upon returning from this function.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="gadb898d9f94516ba81d4db5784ba57d75"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_ensure_adm </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>uuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga713231987f37479d004ba0621e9f92bb" title="Similar to svn_wc_ensure_adm3(), but with depth set to svn_depth_infinity. ">svn_wc_ensure_adm2()</a>, but with <em>repos</em> set to <code>NULL</code>. </p>
<dl class="section note"><dt>Note</dt><dd>as of 1.7, this function always returns <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a0fd6f16300eed25a33d9b1f46b31b320" title="&quot;Bogus URL&quot; ">SVN_ERR_BAD_URL</a> since the <em>repos</em> parameter may not be <code>NULL</code>.</dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000515">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.2 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga713231987f37479d004ba0621e9f92bb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_ensure_adm2 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>uuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>repos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gab109796faf4e8919506658dc904ba63c" title="Similar to svn_wc_ensure_adm4(), but without the wc context parameter. ">svn_wc_ensure_adm3()</a>, but with <em>depth</em> set to <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>. </p>
<p>See the note on <a class="el" href="group__svn__wc.html#gab109796faf4e8919506658dc904ba63c" title="Similar to svn_wc_ensure_adm4(), but without the wc context parameter. ">svn_wc_ensure_adm3()</a> regarding the <em>repos</em> and <em>uuid</em> parameters.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.3. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000514">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gab109796faf4e8919506658dc904ba63c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_ensure_adm3 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>uuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>repos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gaf21372f91fa4944913741a2971587605" title="Ensure that an administrative area exists for local_abspath, so that local_abspath is a working copy ...">svn_wc_ensure_adm4()</a>, but without the wc context parameter. </p>
<dl class="section note"><dt>Note</dt><dd>the <em>uuid</em> and <em>repos</em> parameters were documented as allowing <code>NULL</code> to be passed. Beginning with 1.7, this will return an error, contrary to prior documented behavior: see 'notes/api-errata/1.7/wc005.txt'.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000513">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf21372f91fa4944913741a2971587605"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_ensure_adm4 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>repos_root_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>repos_uuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>revision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Ensure that an administrative area exists for <em>local_abspath</em>, so that <em>local_abspath</em> is a working copy subdir based on <em>url</em> at <em>revision</em>, with depth <em>depth</em>, and with repository UUID <em>repos_uuid</em> and repository root URL <em>repos_root_url</em>. </p>
<p><em>depth</em> must be a definite depth, it cannot be <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2cacf4538edb8e8823b0b9cdeaaac245ebf" title="Depth undetermined or ignored. ">svn_depth_unknown</a>. <em>repos_uuid</em> and <em>repos_root_url</em> MUST NOT be <code>NULL</code>, and <em>repos_root_url</em> must be a prefix of <em>url</em>.</p>
<p>If the administrative area does not exist, then create it and initialize it to an unlocked state.</p>
<p>If the administrative area already exists then the given <em>url</em> must match the URL in the administrative area and the given <em>revision</em> must match the BASE of the working copy dir unless the admin directory is scheduled for deletion or the <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a27bd9ef18e2e73381940af69f7e55922" title="&quot;Obstructed update&quot; ">SVN_ERR_WC_OBSTRUCTED_UPDATE</a> error will be returned.</p>
<p>Do not ensure existence of <em>local_abspath</em> itself; if <em>local_abspath</em> does not exist, return error.</p>
<p>Use <em>scratch_pool</em> for temporary allocations.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="gafe9ee9559ad3de4d7d81c6c63329b083"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_exclude </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove the local node for <em>local_abspath</em> from the working copy and add an excluded node placeholder in its place. </p>
<p>This feature is only supported for unmodified nodes. An <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a4152fa8f6143f7bcd6f2f7d656096c8b" title="&quot;Trying to use an unsupported feature&quot; ">SVN_ERR_UNSUPPORTED_FEATURE</a> error is returned if the node can't be excluded in its current state.</p>
<p><em>wc_ctx</em> contains a tree lock, for the local path to the working copy which will be used as the root of this operation</p>
<p>If <em>notify_func</em> is not <code>NULL</code>, call it with <em>notify_baton</em> to report changes as they are made.</p>
<p>If <em>cancel_func</em> is not <code>NULL</code>, call it with <em>cancel_baton</em> at various points to determine if the client has canceled the operation.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7 </dd></dl>

</div>
</div>
<a class="anchor" id="gab56f7f5c239f34d5ac75fb65567410e6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_get_actual_target </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>anchor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga9b96325abcf1b9433c2001facddd1c83" title="Conditionally split path into an anchor and target for the purpose of updating and committing...">svn_wc_get_actual_target2()</a>, but without the wc context, and with a absolute path. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000564">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga9b96325abcf1b9433c2001facddd1c83"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_get_actual_target2 </td>
          <td>(</td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>anchor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>result_pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Conditionally split <em>path</em> into an <em>anchor</em> and <em>target</em> for the purpose of updating and committing. </p>
<p><em>anchor</em> is the directory at which the update or commit editor should be rooted.</p>
<p><em>target</em> is the actual subject (relative to the <em>anchor</em>) of the update/commit, or "" if the <em>anchor</em> itself is the subject.</p>
<p>Allocate <em>anchor</em> and <em>target</em> in <em>result_pool</em>; <em>scratch_pool</em> is used for temporary allocations.</p>
<dl class="section note"><dt>Note</dt><dd>Even though this API uses a <a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae" title="The context for all working copy interactions. ">svn_wc_context_t</a>, it accepts a (possibly) relative path and returns a (possibly) relative path in <em>*anchor</em>. The reason being that the outputs are generally used to open access batons, and such opening currently requires relative paths. In the long-run, I expect this API to be removed from 1.7, due to the remove of access batons, but for the time being, the <a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae" title="The context for all working copy interactions. ">svn_wc_context_t</a> parameter allows us to avoid opening a duplicate database, just for this function.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga204e46eaf18913808556e9b1f40a6bcb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_get_ancestry </td>
          <td>(</td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a> *&#160;</td>
          <td class="paramname"><em>rev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set <em>*url</em> and <em>*rev</em> to the ancestor URL and revision for <em>path</em>, allocating in <em>pool</em>. </p>
<p><em>adm_access</em> must be an access baton for <em>path</em>.</p>
<p>If <em>url</em> or <em>rev</em> is NULL, then ignore it (just don't return the corresponding information).</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000507">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga21d7e4b68ec86a8cb2f62e09fef67bc3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_get_changelists </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>changelist_filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc.html#gaae18ec52a5dadbfa1f56a67cd70c0bfc">svn_changelist_receiver_t</a>&#160;</td>
          <td class="paramname"><em>callback_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>callback_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Beginning at <em>local_abspath</em>, crawl to <em>depth</em> to discover every path in or under <em>local_abspath</em> which belongs to one of the changelists in <em>changelist_filter</em> (an array of <code>const char *</code> changelist names). </p>
<p>If <em>changelist_filter</em> is <code>NULL</code>, discover paths with any changelist. Call <em>callback_func</em> (with <em>callback_baton</em>) each time a changelist-having path is discovered.</p>
<p><em>local_abspath</em> is a local WC path.</p>
<p>If <em>cancel_func</em> is not <code>NULL</code>, invoke it passing <em>cancel_baton</em> during the recursive walk.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga473bc0e61177ce7030af195ba09ee66a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_get_pristine_contents </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af">svn_stream_t</a> **&#160;</td>
          <td class="paramname"><em>contents</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>result_pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to svn_wc_get_pristine_contents2, but takes no working copy context and a path that can be relative. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000598">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gadbea4ed49d75849cf5879f46792caf4e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_get_pristine_contents2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af">svn_stream_t</a> **&#160;</td>
          <td class="paramname"><em>contents</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>result_pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Given a <em>path</em> to a wc file, return in <em>*contents</em> a readonly stream to the pristine contents of the file that would serve as base content for the next commit. </p>
<p>That means:</p>
<p>When there is no change in node history scheduled, i.e. when there are only local text-mods, prop-mods or a delete, return the last checked-out or updated-/switched-to contents of the file.</p>
<p>If the file is simply added or replaced (no copy-/move-here involved), set <em>*contents</em> to <code>NULL</code>.</p>
<p>When the file has been locally copied-/moved-here, return the contents of the copy/move source (even if the copy-/move-here replaces a locally deleted file).</p>
<p>If <em>local_abspath</em> refers to an unversioned or non-existent path, return <code>SVN_ERR_WC_PATH_NOT_FOUND</code>. Use <em>wc_ctx</em> to access the working copy. <em>contents</em> may not be <code>NULL</code> (unlike <em>*contents</em>).</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga9e0206f3daf7dbcdf677433ffd44bf48"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_get_pristine_copy_path </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>pristine_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set <em>*pristine_path</em> to the path of the "normal" pristine text file for the versioned file <em>path</em>. </p>
<p>If <em>path</em> does not have a pristine text, set <em>*pristine_path</em> to a path where nothing exists on disk (in a directory that does exist).</p>
<dl class="section note"><dt>Note</dt><dd>: Before version 1.7, the behaviour in that case was to provide the path where the pristine text <em>would be</em> if it were present. The new behaviour is intended to provide backward compatibility for callers that open or test the provided path immediately, and not for callers that store the path for later use.</dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000599">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.5 API. Callers should use <a class="el" href="group__svn__wc.html#ga473bc0e61177ce7030af195ba09ee66a" title="Similar to svn_wc_get_pristine_contents2, but takes no working copy context and a path that can be re...">svn_wc_get_pristine_contents()</a> instead. </dd></dl>

</div>
</div>
<a class="anchor" id="gaccda369a983115a74223f53ec160f2ee"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_has_binary_prop </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>has_binary_prop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set <em>*has_binary_prop</em> to <code>TRUE</code> iff <em>path</em> has been marked with a property indicating that it is non-text (in other words, binary). </p>
<p><em>adm_access</em> is an access baton set that contains <em>path</em>.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000495">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. As a replacement for this functionality,</dd></dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="svn__types_8h.html#aae95025cb6c9c2010e4c479b2cad0a31" title="Return FALSE iff mime_type is a textual type. ">svn_mime_type_is_binary</a> and <a class="el" href="group__svn__prop__visible__props.html#ga8438cf81da5f708760ea92f5408b812f" title="The mime-type of a given file. ">SVN_PROP_MIME_TYPE</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="ga9bb4e37e7b54bb8270ea23841c53139d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__wc__info__t.html">svn_wc_info_t</a>* svn_wc_info_dup </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structsvn__wc__info__t.html">svn_wc_info_t</a> *&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a duplicate of <em>info</em>, allocated in <em>pool</em>. </p>
<p>No part of the new structure will be shared with <em>info</em>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga8b66a2c9cc512699bc7e764f2ccd13b3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_locked </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>locked</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set <em>*locked</em> to non-zero if <em>path</em> is locked, else set it to zero. </p>
<p>New code should use <a class="el" href="group__svn__wc.html#ga54914757b40d17e4c82604ac10eef3c7" title="Gets up to two booleans indicating whether a path is locked for writing. ">svn_wc_locked2()</a> instead.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000472">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga54914757b40d17e4c82604ac10eef3c7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_locked2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>locked_here</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>locked</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets up to two booleans indicating whether a path is locked for writing. </p>
<p><em>locked_here</em> is set to TRUE when a write lock on <em>local_abspath</em> exists in <em>wc_ctx</em>. <em>locked</em> is set to TRUE when there is a write_lock on <em>local_abspath</em> </p>
<p><em>locked_here</em> and/or <em>locked</em> can be NULL when you are not interested in a specific value</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga5d95390b7527954903f5d491de17a1aa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_mark_missing_deleted </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Mark missing <em>path</em> as 'deleted' in its <em>parent's</em> list of entries. </p>
<p><em>path</em> should be a directory that is both deleted (via svn_wc_delete4) and removed (via a system call). This function should only be called during post-commit processing following a successful commit editor drive.</p>
<p>Return <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a23fd41040904c3893770b83171d4b0d0" title="&quot;Found a working copy path&quot; ">SVN_ERR_WC_PATH_FOUND</a> if <em>path</em> isn't actually missing.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000512">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga4362bbf450311e0cce2b0559d9c5bef7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_maybe_set_repos_root </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>repos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the repository root URL of <em>path</em> to <em>repos</em>, if possible. </p>
<p>Before Subversion 1.7 there could be working copy directories that didn't have a stored repository root in some specific circumstances. This function allowed setting this root later.</p>
<p>Since Subversion 1.7 this function just returns <a class="el" href="svn__error_8h.html#a657398222a237c3c8cc77dcabf427f63" title="the best kind of (svn_error_t *) ! ">SVN_NO_ERROR</a>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.3. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000516">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gae7754ab49be10d4cd2811e8eac34a837"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_move </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>src_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>dst_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>metadata_only</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Move <em>src_abspath</em> to <em>dst_abspath</em>, by scheduling <em>dst_abspath</em> for addition to the repository, remembering the history. </p>
<p>Mark <em>src_abspath</em> as deleted after moving.<em>wc_ctx</em> is used for accessing the working copy and must contain a write lock for the parent directory of <em>src_abspath</em> and <em>dst_abspath</em>.</p>
<p>If <em>metadata_only</em> is TRUE then this is a database-only operation and the working directories and files are not changed.</p>
<p><em>src_abspath</em> must be a file or directory under version control; the parent of <em>dst_abspath</em> must be a directory under version control in the same working copy; <em>dst_abspath</em> will be the name of the copied item, and it must not exist already if <em>metadata_only</em> is FALSE. Note that when <em>src</em> points to a versioned file, the working file doesn't necessarily exist in which case its text-base is used instead.</p>
<p>If <em>cancel_func</em> is non-NULL, call it with <em>cancel_baton</em> at various points during the operation. If it returns an error (typically <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a879a10e8184482c5fb71e48ab0bb28a9" title="&quot;The operation was interrupted&quot; ">SVN_ERR_CANCELLED</a>), return that error immediately.</p>
<p>If <em>notify_func</em> is non-NULL, call it with <em>notify_baton</em> and the path of the root node (only) of the destination.</p>
<p>Use <em>scratch_pool</em> for temporary allocations.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000533">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.7 API. </dd></dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__Move.html#ga66e9a43f19b88dbdf36131c4f0e0c416" title="Move src_paths to dst_path. ">svn_client_move7()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="gaba7900e76522e26b9b223e8ea738fa2a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_process_committed </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>new_revnum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rev_date</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rev_author</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>wcprop_changes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__svn__wc.html#ga8e947b4ad57c711e67596dc2d249114a">svn_wc_process_committed4()</a></dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000557">Deprecated:</a></b></dt><dd>Use the svn_wc_committed_queue_* functions instead. Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga5e775715b8f275e3facb463a344565a4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_process_committed2 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>new_revnum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rev_date</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rev_author</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>wcprop_changes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>remove_lock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__svn__wc.html#ga8e947b4ad57c711e67596dc2d249114a">svn_wc_process_committed4()</a></dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000556">Deprecated:</a></b></dt><dd>Use the svn_wc_committed_queue_* functions instead. Provided for backwards compatibility with the 1.3 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga90687846b22a6003da49351ea5834c86"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_process_committed3 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>new_revnum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rev_date</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rev_author</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>wcprop_changes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>remove_lock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned char *&#160;</td>
          <td class="paramname"><em>digest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__svn__wc.html#ga8e947b4ad57c711e67596dc2d249114a">svn_wc_process_committed4()</a></dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000555">Deprecated:</a></b></dt><dd>Use the svn_wc_committed_queue_* functions instead. Provided for backwards compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga8e947b4ad57c711e67596dc2d249114a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_process_committed4 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>new_revnum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rev_date</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rev_author</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>wcprop_changes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>remove_lock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>remove_changelist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned char *&#160;</td>
          <td class="paramname"><em>digest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section note"><dt>Note</dt><dd>this function has improper expectations around the operation and execution of other parts of the Subversion WC library. The resulting coupling makes this interface near-impossible to support. Documentation has been removed, as a result.</dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000554">Deprecated:</a></b></dt><dd>Use the svn_wc_committed_queue_* functions instead. Provided for backwards compatibility with the 1.5 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf1d8b8294ad80550d7d0c90f002c7a1c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_process_committed_queue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a> *&#160;</td>
          <td class="paramname"><em>queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>new_revnum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rev_date</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rev_author</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__svn__wc.html#ga72fc390a891af297d845c72055e0b6f2" title="Bump all items in queue to new_revnum after a commit succeeds. ">svn_wc_process_committed_queue2()</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000553">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga72fc390a891af297d845c72055e0b6f2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_process_committed_queue2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a> *&#160;</td>
          <td class="paramname"><em>queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89">svn_revnum_t</a>&#160;</td>
          <td class="paramname"><em>new_revnum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rev_date</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rev_author</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Bump all items in <em>queue</em> to <em>new_revnum</em> after a commit succeeds. </p>
<p><em>rev_date</em> and <em>rev_author</em> are the (server-side) date and author of the new revision; one or both may be <code>NULL</code>.</p>
<p>If <em>cancel_func</em> is non-NULL, call it with <em>cancel_baton</em> to determine if the client wants to cancel the operation.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="gac4aaab4da6f4a003371551bd535ac70d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_props_modified_p </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>modified_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga0b4a29e114c1f337129efb8acb733150" title="Set *modified_p to non-zero if path&#39;s properties are modified with regard to the base revision...">svn_wc_props_modified_p2()</a>, but with a relative path and adm_access baton. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000497">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga0b4a29e114c1f337129efb8acb733150"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_props_modified_p2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>modified_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set <em>*modified_p</em> to non-zero if <em>path's</em> properties are modified with regard to the base revision, else set <em>modified_p</em> to zero. </p>
<p><em>adm_access</em> must be an access baton for <em>path</em>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga7856266623140d568a76f03672f9b1c3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_queue_committed </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a> **&#160;</td>
          <td class="paramname"><em>queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>wcprop_changes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>remove_lock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>remove_changelist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned char *&#160;</td>
          <td class="paramname"><em>digest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Same as <a class="el" href="group__svn__wc.html#gaf90b126117f2446776ea25f6b0328e38" title="Same as svn_wc_queue_committed3() except path doesn&#39;t have to be an abspath and adm_access is unused ...">svn_wc_queue_committed2()</a> but the <em>queue</em> parameter has an extra indirection and <em>digest</em> is supplied instead of a checksum type. </p>
<dl class="section note"><dt>Note</dt><dd>despite the extra indirection, this function does NOT allocate the queue for you. <a class="el" href="group__svn__wc.html#ga32461ffb9ca12374861ec37b79718a73" title="Create a queue for use with svn_wc_queue_committed() and svn_wc_process_committed_queue(). ">svn_wc_committed_queue_create()</a> must be called.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.5</dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000552">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with 1.5 </dd></dl>

</div>
</div>
<a class="anchor" id="gaf90b126117f2446776ea25f6b0328e38"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_queue_committed2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a> *&#160;</td>
          <td class="paramname"><em>queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>wcprop_changes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>remove_lock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>remove_changelist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__checksum__t.html">svn_checksum_t</a> *&#160;</td>
          <td class="paramname"><em>md5_checksum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Same as <a class="el" href="group__svn__wc.html#ga8da2f5064372bda0fcf2c4f8fb84eb62" title="Similar to svn_wc_queue_committed4, but with is_committed always TRUE. ">svn_wc_queue_committed3()</a> except <em>path</em> doesn't have to be an abspath and <em>adm_access</em> is unused and a SHA-1 checksum cannot be specified. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6.</dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000551">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga8da2f5064372bda0fcf2c4f8fb84eb62"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_queue_committed3 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a> *&#160;</td>
          <td class="paramname"><em>queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>wcprop_changes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>remove_lock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>remove_changelist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__checksum__t.html">svn_checksum_t</a> *&#160;</td>
          <td class="paramname"><em>sha1_checksum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to svn_wc_queue_committed4, but with is_committed always TRUE. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000550">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.8 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga98c2bd15044c9c402d0d883bb62c812e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_queue_committed4 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc.html#gab5313e08f94a081034e8453609bb7638">svn_wc_committed_queue_t</a> *&#160;</td>
          <td class="paramname"><em>queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>is_committed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>wcprop_changes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>remove_lock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>remove_changelist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__checksum__t.html">svn_checksum_t</a> *&#160;</td>
          <td class="paramname"><em>sha1_checksum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Queue committed items to be processed later by <a class="el" href="group__svn__wc.html#ga72fc390a891af297d845c72055e0b6f2" title="Bump all items in queue to new_revnum after a commit succeeds. ">svn_wc_process_committed_queue2()</a>. </p>
<p>Record in <em>queue</em> that <em>local_abspath</em> will need to be bumped after a commit succeeds.</p>
<p>If non-NULL, <em>wcprop_changes</em> is an array of <code><a class="el" href="structsvn__prop__t.html" title="A general in-memory representation of a single property. ">svn_prop_t</a> *</code> changes to wc properties; if an <a class="el" href="structsvn__prop__t.html" title="A general in-memory representation of a single property. ">svn_prop_t</a>-&gt;value is NULL, then that property is deleted. </p>
<h3>[JAF] No, a prop whose value is NULL is ignored, not deleted. This</h3>
<h3>seems to be not a set of changes but rather the new complete set of</h3>
<h3>props. And it's renamed to 'new_dav_cache' inside; why?</h3>
<p>If <em>is_committed</em> is <code>TRUE</code>, the node will be processed as committed. This turns the node and its implied descendants as the new unmodified state at the new specified revision. Unless <em>recurse</em> is TRUE, changes on descendants are not committed as changes directly. In this case they should be queueud as their own changes.</p>
<p>If <em>remove_lock</em> is <code>TRUE</code>, any entryprops related to a repository lock will be removed.</p>
<p>If <em>remove_changelist</em> is <code>TRUE</code>, any association with a changelist will be removed.</p>
<p>If <em>sha1_checksum</em> is non-NULL, use it to identify the node's pristine text.</p>
<p>If <em>recurse</em> is TRUE and <em>local_abspath</em> is a directory, then bump every versioned object at or under <em>local_abspath</em>. This is usually done for copied trees.</p>
<h3>In the present implementation, if a recursive directory item is in</h3>
<p>the queue, then any children (at any depth) of that directory that are also in the queue as separate items will get: 'wcprop_changes' = NULL; 'remove_lock' = FALSE; 'remove_changelist' from the recursive parent item; and any children (at any depth) of that directory that are NOT in the queue as separate items will get: 'wcprop_changes' = NULL; 'remove_lock' = FALSE; 'remove_changelist' from the recursive parent item;</p>
<dl class="section note"><dt>Note</dt><dd>the <em>recurse</em> parameter should be used with extreme care since it will bump ALL nodes under the directory, regardless of their actual inclusion in the new revision.</dd></dl>
<p>All pointer data passed to this function (<em>local_abspath</em>, <em>wcprop_changes</em> and the checksums) should remain valid until the queue has been processed by <a class="el" href="group__svn__wc.html#ga72fc390a891af297d845c72055e0b6f2" title="Bump all items in queue to new_revnum after a commit succeeds. ">svn_wc_process_committed_queue2()</a>.</p>
<p>Temporary allocations will be performed in <em>scratch_pool</em>, and persistent allocations will use the same pool as <em>queue</em> used when it was created.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.9. </dd></dl>

</div>
</div>
<a class="anchor" id="gad72d6f9c9cf2db5d0199cc2c332dd50d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_relocate </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc.html#ga5aef0943027834b2d1a4b7eda408f321">svn_wc_relocation_validator_t</a>&#160;</td>
          <td class="paramname"><em>validator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>validator_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga50cd30da614df6879b7882c55df93171" title="Similar to svn_wc_relocate3(), but uses svn_wc_relocation_validator2_t. ">svn_wc_relocate2()</a>, but uses <a class="el" href="group__svn__wc.html#ga5aef0943027834b2d1a4b7eda408f321" title="Similar to svn_wc_relocation_validator2_t, but without the root and pool arguments. ">svn_wc_relocation_validator_t</a>. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000607">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.3 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga50cd30da614df6879b7882c55df93171"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_relocate2 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc.html#ga3156f48a76033908b9dd80ac347938b8">svn_wc_relocation_validator2_t</a>&#160;</td>
          <td class="paramname"><em>validator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>validator_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gada9d3d66c69c0f31cede9c90c4ab226e" title="Similar to svn_wc_relocate4(), but with a svn_wc_adm_access_t / relative path parameter pair...">svn_wc_relocate3()</a>, but uses <a class="el" href="group__svn__wc.html#ga3156f48a76033908b9dd80ac347938b8" title="Similar to svn_wc_relocation_validator3_t, but with the root argument. ">svn_wc_relocation_validator2_t</a>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.4. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000606">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gada9d3d66c69c0f31cede9c90c4ab226e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_relocate3 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc.html#gaa9addd7cee0df1441c76efe39ac8e0bd">svn_wc_relocation_validator3_t</a>&#160;</td>
          <td class="paramname"><em>validator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>validator_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga1a2fe02864df26f13e45f07d01ade7e5" title="Recursively change repository references at wcroot_abspath (which is the root directory of a working ...">svn_wc_relocate4()</a>, but with a <a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577" title="Baton for access to a working copy administrative area. ">svn_wc_adm_access_t</a> / relative path parameter pair. </p>
<dl class="section note"><dt>Note</dt><dd>As of the 1.7 API, <em>path</em> is required to be a working copy root directory, and <em>recurse</em> is required to be TRUE.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000605">Deprecated:</a></b></dt><dd>Provided for limited backwards compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga1a2fe02864df26f13e45f07d01ade7e5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_relocate4 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>wcroot_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc.html#gaa9addd7cee0df1441c76efe39ac8e0bd">svn_wc_relocation_validator3_t</a>&#160;</td>
          <td class="paramname"><em>validator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>validator_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Recursively change repository references at <em>wcroot_abspath</em> (which is the root directory of a working copy). </p>
<p>The pre-change URL should begin with <em>from</em>, and the post-change URL will begin with <em>to</em>. <em>validator</em> (and its baton, <em>validator_baton</em>), will be called for the newly generated base URL and calculated repo root.</p>
<p><em>wc_ctx</em> is an working copy context.</p>
<p><em>scratch_pool</em> will be used for temporary allocations.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="gaac573ae3466f4367cb57aeb7b4289637"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_remove_from_revision_control </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>destroy_wf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>instant_error</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga24d515e760153e9fd648b1911e218b77" title="Remove local_abspath from revision control. ">svn_wc_remove_from_revision_control2()</a> but with a name and access baton. </p>
<p>WARNING: This routine was exported for careful, measured use by libsvn_client. Do <em>not</em> call this routine unless you really understand what the heck you're doing.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000545">Deprecated:</a></b></dt><dd>Provided for compatibility with the 1.6 API </dd></dl>

</div>
</div>
<a class="anchor" id="ga24d515e760153e9fd648b1911e218b77"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_remove_from_revision_control2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>destroy_wf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>instant_error</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove <em>local_abspath</em> from revision control. </p>
<p><em>wc_ctx</em> must hold a write lock on the parent of <em>local_abspath</em>, or if that is a WC root then on <em>local_abspath</em> itself.</p>
<p>If <em>local_abspath</em> is a file, all its info will be removed from the administrative area. If <em>local_abspath</em> is a directory, then the administrative area will be deleted, along with <em>all</em> the administrative areas anywhere in the tree below <em>adm_access</em>.</p>
<p>Normally, only administrative data is removed. However, if <em>destroy_wf</em> is TRUE, then all working file(s) and dirs are deleted from disk as well. When called with <em>destroy_wf</em>, any locally modified files will <em>not</em> be deleted, and the special error <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a8c9f26d2bb0c9dfa3dac0e72690de6f6" title="&quot;Left locally modified or unversioned files&quot; ">SVN_ERR_WC_LEFT_LOCAL_MOD</a> might be returned. (Callers only need to check for this special return value if <em>destroy_wf</em> is TRUE.)</p>
<p>If <em>instant_error</em> is TRUE, then return <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a8c9f26d2bb0c9dfa3dac0e72690de6f6" title="&quot;Left locally modified or unversioned files&quot; ">SVN_ERR_WC_LEFT_LOCAL_MOD</a> the instant a locally modified file is encountered. Otherwise, leave locally modified files in place and return the error only after all the recursion is complete.</p>
<p>If <em>cancel_func</em> is non-NULL, call it with <em>cancel_baton</em> at various points during the removal. If it returns an error (typically <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a879a10e8184482c5fb71e48ab0bb28a9" title="&quot;The operation was interrupted&quot; ">SVN_ERR_CANCELLED</a>), return that error immediately.</p>
<p>WARNING: This routine is exported for careful, measured use by libsvn_client. Do <em>not</em> call this routine unless you really understand what the heck you're doing.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="gad065d03c864e45af71d0b26dcc4e8552"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_resolved_conflict </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>resolve_text</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>resolve_props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2">svn_wc_notify_func_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga54e3128550adfc252c3b3c622897e698" title="Similar to svn_wc_resolved_conflict3(), but without automatic conflict resolution support...">svn_wc_resolved_conflict2()</a>, but takes an svn_wc_notify_func_t and doesn't have cancellation support. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000549">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga54e3128550adfc252c3b3c622897e698"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_resolved_conflict2 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>resolve_text</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>resolve_props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recurse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga552cd6679dec494a65a793ba2d658066" title="Similar to svn_wc_resolved_conflict4(), but without tree-conflict resolution support. ">svn_wc_resolved_conflict3()</a>, but without automatic conflict resolution support, and with <em>depth</em> set according to <em>recurse:</em> if <em>recurse</em> is TRUE, <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>, else it is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345" title="D + its file children, but not subdirs. ">svn_depth_files</a>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.2. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000548">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga552cd6679dec494a65a793ba2d658066"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_resolved_conflict3 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>resolve_text</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>resolve_props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__conflict.html#ga040e000024033dd2721a4ddce5561431">svn_wc_conflict_choice_t</a>&#160;</td>
          <td class="paramname"><em>conflict_choice</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga8eeabb76dc33dfd32dbdd70a1065a7fe" title="Similar to svn_wc_resolved_conflict5, but takes an absolute path and an access baton. ">svn_wc_resolved_conflict4()</a>, but without tree-conflict resolution support. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000547">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.5 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga8eeabb76dc33dfd32dbdd70a1065a7fe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_resolved_conflict4 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>resolve_text</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>resolve_props</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>resolve_tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__conflict.html#ga040e000024033dd2721a4ddce5561431">svn_wc_conflict_choice_t</a>&#160;</td>
          <td class="paramname"><em>conflict_choice</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to svn_wc_resolved_conflict5, but takes an absolute path and an access baton. </p>
<p>This version doesn't support resolving a specific property.conflict.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000546">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa76d8a7b197bb9103738e1efa0dad68c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_resolved_conflict5 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>resolve_text</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>resolve_prop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>resolve_tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__conflict.html#ga040e000024033dd2721a4ddce5561431">svn_wc_conflict_choice_t</a>&#160;</td>
          <td class="paramname"><em>conflict_choice</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assuming <em>local_abspath</em> is under version control or a tree conflict victim and in a state of conflict, then take <em>local_abspath</em> <em>out</em> of this state. </p>
<p>If <em>resolve_text</em> is TRUE then any text conflict is resolved, if <em>resolve_tree</em> is TRUE then any tree conflicts are resolved. If <em>resolve_prop</em> is set to "" all property conflicts are resolved, if it is set to any other string value, conflicts on that specific property are resolved and when resolve_prop is NULL, no property conflicts are resolved.</p>
<p>If <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries. ">svn_depth_empty</a>, act only on <em>local_abspath</em>; if <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345" title="D + its file children, but not subdirs. ">svn_depth_files</a>, resolve <em>local_abspath</em> and its conflicted file children (if any); if <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca68873e015456e384e4f63f3bbd515c8a" title="D + immediate children (D and its entries). ">svn_depth_immediates</a>, resolve <em>local_abspath</em> and all its immediate conflicted children (both files and directories, if any); if <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>, resolve <em>local_abspath</em> and every conflicted file or directory anywhere beneath it.</p>
<p>If <em>conflict_choice</em> is <a class="el" href="group__svn__wc__conflict.html#gga040e000024033dd2721a4ddce5561431af6b88569447793363567212f22ab06dc" title="If there were files to choose from, select one as a way of resolving the conflict here and now...">svn_wc_conflict_choose_base</a>, resolve the conflict with the old file contents; if <a class="el" href="group__svn__wc__conflict.html#gga040e000024033dd2721a4ddce5561431a7b1b41a511fa96f1b59139f9d5976889" title="own version ">svn_wc_conflict_choose_mine_full</a>, use the original working contents; if <a class="el" href="group__svn__wc__conflict.html#gga040e000024033dd2721a4ddce5561431a2627b0594636fd14b1d7732e3b80f89d" title="incoming version ">svn_wc_conflict_choose_theirs_full</a>, the new contents; and if <a class="el" href="group__svn__wc__conflict.html#gga040e000024033dd2721a4ddce5561431ab3663bb754e92e589f1ad77149b54765" title="merged version ">svn_wc_conflict_choose_merged</a>, don't change the contents at all, just remove the conflict status, which is the pre-1.5 behavior.</p>
<p><a class="el" href="group__svn__wc__conflict.html#gga040e000024033dd2721a4ddce5561431abd13f571ab3e57737f0387e946818a3a" title="incoming (for conflicted hunks) ">svn_wc_conflict_choose_theirs_conflict</a> and <a class="el" href="group__svn__wc__conflict.html#gga040e000024033dd2721a4ddce5561431a16c70981a4cfba8460e21d4b9052b057" title="own (for conflicted hunks) ">svn_wc_conflict_choose_mine_conflict</a> are not legal for binary files or properties.</p>
<p><em>wc_ctx</em> is a working copy context, with a write lock, for <em>local_abspath</em>.</p>
<p>Needless to say, this function doesn't touch conflict markers or anything of that sort &ndash; only a human can semantically resolve a conflict. Instead, this function simply marks a file as "having
been resolved", clearing the way for a commit.</p>
<p>The implementation details are opaque, as our "conflicted" criteria might change over time. (At the moment, this routine removes the three fulltext 'backup' files and any .prej file created in a conflict, and modifies <em>local_abspath's</em> entry.)</p>
<p>If <em>local_abspath</em> is not under version control and not a tree conflict, return <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a3b8131c84b5fb6369d784ad72970826d" title="&quot;Can&#39;t find an entry&quot; ">SVN_ERR_ENTRY_NOT_FOUND</a>. If <em>path</em> isn't in a state of conflict to begin with, do nothing, and return <a class="el" href="svn__error_8h.html#a657398222a237c3c8cc77dcabf427f63" title="the best kind of (svn_error_t *) ! ">SVN_NO_ERROR</a>.</p>
<p>If <code>local_abspath</code> was successfully taken out of a state of conflict, report this information to <code>notify_func</code> (if non-<code>NULL</code>.) If only text, only property, or only tree conflict resolution was requested, and it was successful, then success gets reported.</p>
<p>Temporary allocations will be performed in <em>scratch_pool</em>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga5b5fd7f34e31327571a1620596a00256"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_restore </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>use_commit_times</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Restores a missing node, <em>local_abspath</em> using the <em>wc_ctx</em>. </p>
<p>Records the new last modified time of the file for status processing.</p>
<p>If <em>use_commit_times</em> is TRUE, then set restored files' timestamps to their last-commit-times.</p>
<p>Returns SVN_ERROR_WC_PATH_NOT_FOUND if LOCAL_ABSPATH is not versioned and SVN_ERROR_WC_PATH_UNEXPECTED_STATUS if LOCAL_ABSPATH is in a status where it can't be restored.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga30293931c5ad5d6ba77c7c11a59cc912"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_revert </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>parent_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recursive</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>use_commit_times</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2">svn_wc_notify_func_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gaa0b3f2d0d6603b376cb4043891c630ee" title="Similar to svn_wc_revert3(), but with changelist_filter passed as NULL, and depth set according to re...">svn_wc_revert2()</a>, but takes an <a class="el" href="group__svn__wc__notifications.html#ga77d705cbd8f4c23c0c29492f84f8f6c2" title="Similar to svn_wc_notify_func2_t, but takes the information as arguments instead of struct fields...">svn_wc_notify_func_t</a> instead. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000611">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa0b3f2d0d6603b376cb4043891c630ee"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_revert2 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>parent_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>recursive</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>use_commit_times</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gac3acf6396c162b33e4842df433662314" title="Similar to svn_wc_revert4() but takes a relative path and access baton. ">svn_wc_revert3()</a>, but with <em>changelist_filter</em> passed as <code>NULL</code>, and <em>depth</em> set according to <em>recursive:</em> if <em>recursive</em> is TRUE, <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>; if FALSE, <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries. ">svn_depth_empty</a>. </p>
<dl class="section note"><dt>Note</dt><dd>Most APIs map <em>recurse==FALSE</em> to <em>depth==svn_depth_files</em>; revert is deliberately different.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.2. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000610">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gac3acf6396c162b33e4842df433662314"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_revert3 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>parent_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>use_commit_times</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>changelist_filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gaaae2c0d170fed186462868bdb83d1dcf" title="Similar to svn_wc_revert5() but with clear_changelists always set to FALSE and metadata_only set to F...">svn_wc_revert4()</a> but takes a relative path and access baton. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000609">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaaae2c0d170fed186462868bdb83d1dcf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_revert4 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>use_commit_times</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>changelist_filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga2931d682c608702834d05a6cfbcfcfea" title="Revert changes to local_abspath. ">svn_wc_revert5()</a> but with <em>clear_changelists</em> always set to FALSE and <em>metadata_only</em> set to FALSE. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000608">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.8 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga2931d682c608702834d05a6cfbcfcfea"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_revert5 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>use_commit_times</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>changelist_filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>clear_changelists</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>metadata_only</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Revert changes to <em>local_abspath</em>. </p>
<p>Perform necessary allocations in <em>scratch_pool</em>.</p>
<p><em>wc_ctx</em> contains the necessary locks required for performing the operation.</p>
<p>If <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries. ">svn_depth_empty</a>, revert just <em>path</em> (if a directory, then revert just the properties on that directory). Else if <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345" title="D + its file children, but not subdirs. ">svn_depth_files</a>, revert <em>path</em> and any files directly under <em>path</em> if it is directory. Else if <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca68873e015456e384e4f63f3bbd515c8a" title="D + immediate children (D and its entries). ">svn_depth_immediates</a>, revert all of the preceding plus properties on immediate subdirectories; else if <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>, revert path and everything under it fully recursively.</p>
<p><em>changelist_filter</em> is an array of <code>const char *</code> changelist names, used as a restrictive filter on items reverted; that is, don't revert any item unless it's a member of one of those changelists. If <em>changelist_filter</em> is empty (or altogether <code>NULL</code>), no changelist filtering occurs.</p>
<p>If <em>clear_changelists</em> is TRUE, then changelist information for the paths is cleared.</p>
<p>If <em>metadata_only</em> is TRUE, the working copy files are untouched, but if there are conflict marker files attached to these files these markers are removed.</p>
<p>If <em>cancel_func</em> is non-NULL, call it with <em>cancel_baton</em> at various points during the reversion process. If it returns an error (typically <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a879a10e8184482c5fb71e48ab0bb28a9" title="&quot;The operation was interrupted&quot; ">SVN_ERR_CANCELLED</a>), return that error immediately.</p>
<p>If <em>use_commit_times</em> is TRUE, then all reverted working-files will have their timestamp set to the last-committed-time. If FALSE, the reverted working-files will be touched with the 'now' time.</p>
<p>For each item reverted, <em>notify_func</em> will be called with <em>notify_baton</em> and the path of the reverted item. <em>notify_func</em> may be <code>NULL</code> if this notification is not needed.</p>
<p>If <em>path</em> is not under version control, return the error <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660ab2aa0e1c71bfdeee3046249a272cd4ea" title="&quot;Tried a versioning operation on an unversioned resource&quot; ">SVN_ERR_UNVERSIONED_RESOURCE</a>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.9. </dd></dl>

</div>
</div>
<a class="anchor" id="ga6401b9142564d0ad162cae5cc0403d7f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_revision_status </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__wc__revision__status__t.html">svn_wc_revision_status_t</a> **&#160;</td>
          <td class="paramname"><em>result_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>wc_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>trail_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>committed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gaaa0081a19ffa8b8f80d09951bca432c2" title="Set *result_p to point to a new svn_wc_revision_status_t structure containing a summary of the revisi...">svn_wc_revision_status2()</a>, but with a (possibly) local path and no wc_ctx parameter. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.4. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000623">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gaaa0081a19ffa8b8f80d09951bca432c2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_revision_status2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsvn__wc__revision__status__t.html">svn_wc_revision_status_t</a> **&#160;</td>
          <td class="paramname"><em>result_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>trail_url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>committed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>result_pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set <em>*result_p</em> to point to a new <a class="el" href="structsvn__wc__revision__status__t.html" title="A structure to report a summary of a working copy, including the mix of revisions found within it...">svn_wc_revision_status_t</a> structure containing a summary of the revision range and status of the working copy at <em>local_abspath</em> (not including "externals"). </p>
<p><em>local_abspath</em> must be absolute. Return SVN_ERR_WC_PATH_NOT_FOUND if <em>local_abspath</em> is not a working copy path.</p>
<p>Set <em></em>(*result_p)-&gt;min_rev and <em></em>(*result_p)-&gt;max_rev respectively to the lowest and highest revision numbers in the working copy. If <em>committed</em> is TRUE, summarize the last-changed revisions, else the base revisions.</p>
<p>Set <em></em>(*result_p)-&gt;switched to indicate whether any item in the WC is switched relative to its parent. If <em>trail_url</em> is non-NULL, use it to determine if <em>local_abspath</em> itself is switched. It should be any trailing portion of <em>local_abspath's</em> expected URL, long enough to include any parts that the caller considers might be changed by a switch. If it does not match the end of <em>local_abspath's</em> actual URL, then report a "switched" status.</p>
<p>Set <em></em>(*result_p)-&gt;modified to indicate whether any item is locally modified.</p>
<p>If <em>cancel_func</em> is non-NULL, call it with <em>cancel_baton</em> to determine if the client has canceled the operation.</p>
<p>Allocate *result_p in <em>result_pool</em>, use <em>scratch_pool</em> for temporary allocations.</p>
<p><em>wc_ctx</em> should be a valid working copy context.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7 </dd></dl>

</div>
</div>
<a class="anchor" id="gaad29afe2a97824e108b08567d5f8a143"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_set_changelist </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>changelist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga0234016e89a6666f503e84fcbb21de6c" title="Set local_abspath&#39;s &#39;changelist&#39; attribute to changelist iff changelist is not NULL; otherwise...">svn_wc_set_changelist2()</a>, but with an access baton and relative path. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000624">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga0234016e89a6666f503e84fcbb21de6c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_set_changelist2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>changelist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>changelist_filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set <em>local_abspath's</em> 'changelist' attribute to <em>changelist</em> iff <em>changelist</em> is not <code>NULL</code>; otherwise, remove any current changelist assignment from <em>local_abspath</em>. </p>
<p><em>changelist</em> may not be the empty string. Recurse to <em>depth</em>.</p>
<p><em>changelist_filter</em> is an array of <code>const char *</code> changelist names, used as a restrictive filter on items whose changelist assignments are adjusted; that is, don't tweak the changeset of any item unless it's currently a member of one of those changelists. If <em>changelist_filter</em> is empty (or altogether <code>NULL</code>), no changelist filtering occurs.</p>
<p>If <em>cancel_func</em> is not <code>NULL</code>, call it with <em>cancel_baton</em> to determine if the client has canceled the operation.</p>
<p>If <em>notify_func</em> is not <code>NULL</code>, call it with <em>notify_baton</em> to report the change (using notification types <a class="el" href="group__svn__wc__notifications.html#gga816dd065327746637bb9af6322959dfba563a2c5f0fca434557f1dfa65e5be531" title="Changelist name set. ">svn_wc_notify_changelist_set</a> and <a class="el" href="group__svn__wc__notifications.html#gga816dd065327746637bb9af6322959dfba891fc169afaad316a47369ff5aa13ac8" title="Changelist name cleared. ">svn_wc_notify_changelist_clear</a>).</p>
<p>Use <em>scratch_pool</em> for temporary allocations.</p>
<dl class="section note"><dt>Note</dt><dd>For now, directories are NOT allowed to be associated with changelists; there is confusion about whether they should behave as depth-0 or depth-infinity objects. If <em>local_abspath</em> is a directory, return an error.</dd>
<dd>
This metadata is purely a client-side "bookkeeping" convenience, and is entirely managed by the working copy.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf2804bd7bd17bd98989976ff2c62d7a8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_text_modified_p </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>modified_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>force_comparison</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#gab70aa1d77a95d19552423c786e788140" title="Set *modified_p to non-zero if local_abspath&#39;s text is modified with regard to the base revision...">svn_wc_text_modified_p2()</a>, but with a relative path and adm_access baton? </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000496">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="gab70aa1d77a95d19552423c786e788140"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_text_modified_p2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>modified_p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>unused</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set <em>*modified_p</em> to non-zero if <em>local_abspath's</em> text is modified with regard to the base revision, else set <em>*modified_p</em> to zero. </p>
<p><em>local_abspath</em> is the absolute path to the file.</p>
<p>This function uses some heuristics to avoid byte-by-byte comparisons against the base text (eg. file size and its modification time).</p>
<p>If <em>local_abspath</em> does not exist, consider it unmodified. If it exists but is not under revision control (not even scheduled for addition), return the error <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a3b8131c84b5fb6369d784ad72970826d" title="&quot;Can&#39;t find an entry&quot; ">SVN_ERR_ENTRY_NOT_FOUND</a>.</p>
<p><em>unused</em> is ignored.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="gac2608b41140a8604b873e1b6eacbfc86"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_upgrade </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__svn__wc__context.html#ga0db3536906d8b476d8189d7fd4277bae">svn_wc_context_t</a> *&#160;</td>
          <td class="paramname"><em>wc_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>local_abspath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc.html#ga23bb8de568e76b867d26f5385729a760">svn_wc_upgrade_get_repos_info_t</a>&#160;</td>
          <td class="paramname"><em>repos_info_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>repos_info_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__notifications.html#ga0b8a69b4e319400ddfd72c9b682abe62">svn_wc_notify_func2_t</a>&#160;</td>
          <td class="paramname"><em>notify_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>notify_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Upgrade the working copy at <em>local_abspath</em> to the latest metadata storage format. </p>
<p><em>local_abspath</em> should be an absolute path to the root of the working copy.</p>
<p>If <em>cancel_func</em> is non-NULL, invoke it with <em>cancel_baton</em> at various points during the operation. If it returns an error (typically <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a879a10e8184482c5fb71e48ab0bb28a9" title="&quot;The operation was interrupted&quot; ">SVN_ERR_CANCELLED</a>), return that error immediately.</p>
<p>For each directory converted, <em>notify_func</em> will be called with in <em>notify_baton</em> action <a class="el" href="group__svn__wc__notifications.html#gga816dd065327746637bb9af6322959dfba0cf955ea28c2e9ba88b1c8e4716c9282" title="A working copy directory was upgraded to the latest format. ">svn_wc_notify_upgraded_path</a> and as path the path of the upgraded directory. <em>notify_func</em> may be <code>NULL</code> if this notification is not needed.</p>
<p>If the old working copy doesn't contain a repository root and/or repository uuid, <em>repos_info_func</em> (if non-NULL) will be called with <em>repos_info_baton</em> to provide the missing information.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga93c39ae07d4de5f49f1d5adcb45eab22"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_walk_entries </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__wc__entry__callbacks__t.html">svn_wc_entry_callbacks_t</a> *&#160;</td>
          <td class="paramname"><em>walk_callbacks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>walk_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>show_hidden</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga0fc8c326b020e64cfb8d183f4a10a684" title="Similar to svn_wc_walk_entries3(), but without cancellation support or error handling from walk_callb...">svn_wc_walk_entries2()</a>, but without cancellation support. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000511">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.1 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga0fc8c326b020e64cfb8d183f4a10a684"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_walk_entries2 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__wc__entry__callbacks__t.html">svn_wc_entry_callbacks_t</a> *&#160;</td>
          <td class="paramname"><em>walk_callbacks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>walk_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>show_hidden</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="group__svn__wc.html#ga17374d3b79862d5faa4887ed0f4366c3" title="A generic entry-walker. ">svn_wc_walk_entries3()</a>, but without cancellation support or error handling from <em>walk_callbacks</em>, and with <em>depth</em> always set to <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.2. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000510">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.4 API. </dd></dl>

</div>
</div>
<a class="anchor" id="ga17374d3b79862d5faa4887ed0f4366c3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_wc_walk_entries3 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__svn__wc__adm__access.html#ga2c3046ab8806025e6670a763aa223577">svn_wc_adm_access_t</a> *&#160;</td>
          <td class="paramname"><em>adm_access</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsvn__wc__entry__callbacks2__t.html">svn_wc_entry_callbacks2_t</a> *&#160;</td>
          <td class="paramname"><em>walk_callbacks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>walk_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c">svn_depth_t</a>&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>show_hidden</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc">svn_cancel_func_t</a>&#160;</td>
          <td class="paramname"><em>cancel_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cancel_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A generic entry-walker. </p>
<p>Do a potentially recursive depth-first entry-walk beginning on <em>path</em>, which can be a file or dir. Call callbacks in <em>walk_callbacks</em>, passing <em>walk_baton</em> to each. Use <em>pool</em> for looping, recursion, and to allocate all entries returned. <em>adm_access</em> must be an access baton for <em>path</em>. The pool passed to <em>walk_callbacks</em> is a temporary subpool of <em>pool</em>.</p>
<p>If <em>depth</em> is <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca8783254e886077b74a05341491fc353c" title="Just the named directory D, no entries. ">svn_depth_empty</a>, invoke the callbacks on <em>path</em> and return without recursing further. If <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca0c4df7073a6d268f0e26bbf961f35345" title="D + its file children, but not subdirs. ">svn_depth_files</a>, do the same and invoke the callbacks on file children (if any) of <em>path</em>, then return. If <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca68873e015456e384e4f63f3bbd515c8a" title="D + immediate children (D and its entries). ">svn_depth_immediates</a>, do the preceding but also invoke callbacks on immediate subdirectories, then return. If <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca9c9a00ca9d05799d0d2a7646d4f0cbf2" title="D + all descendants (full recursion from D). ">svn_depth_infinity</a>, recurse fully starting from <em>path</em>.</p>
<p>If <em>cancel_func</em> is non-NULL, call it with <em>cancel_baton</em> to determine if the client has canceled the operation.</p>
<p>Like our other entries interfaces, entries that are in a 'excluded', 'deleted' or 'absent' state (and not scheduled for re-addition) are not discovered, unless <em>show_hidden</em> is TRUE. Excluded entries are those with their depth set to <a class="el" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2ca1bc611e0caf428575d07287adca72603" title="Exclude (i.e., don&#39;t descend into) directory D. ">svn_depth_exclude</a>.</p>
<p>When a new directory is entered, <a class="el" href="group__svn__wc__entries.html#ga24a4e11f4582a56ea1b7e3809fa27467" title="How an entries file&#39;s owner dir is named in the entries file. ">SVN_WC_ENTRY_THIS_DIR</a> will always be returned first.</p>
<dl class="section note"><dt>Note</dt><dd>Callers should be aware that each directory will be returned <em>twice</em>: first as an entry within its parent, and subsequently as the '.' entry within itself. The two calls can be distinguished by looking for <a class="el" href="group__svn__wc__entries.html#ga24a4e11f4582a56ea1b7e3809fa27467" title="How an entries file&#39;s owner dir is named in the entries file. ">SVN_WC_ENTRY_THIS_DIR</a> in the 'name' field of the entry.</dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.5. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000509">Deprecated:</a></b></dt><dd>Provided for backward compatibility with the 1.6 API. </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 19 2015 09:17:28 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
