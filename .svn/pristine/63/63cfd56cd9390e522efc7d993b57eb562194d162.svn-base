<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Subversion: svn_delta.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">svn_delta.h</div>  </div>
</div>
<div class="contents">
<a href="svn__delta_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**</span>
<a name="l00002"></a>00002 <span class="comment"> * @copyright</span>
<a name="l00003"></a>00003 <span class="comment"> * ====================================================================</span>
<a name="l00004"></a>00004 <span class="comment"> *    Licensed to the Apache Software Foundation (ASF) under one</span>
<a name="l00005"></a>00005 <span class="comment"> *    or more contributor license agreements.  See the NOTICE file</span>
<a name="l00006"></a>00006 <span class="comment"> *    distributed with this work for additional information</span>
<a name="l00007"></a>00007 <span class="comment"> *    regarding copyright ownership.  The ASF licenses this file</span>
<a name="l00008"></a>00008 <span class="comment"> *    to you under the Apache License, Version 2.0 (the</span>
<a name="l00009"></a>00009 <span class="comment"> *    &quot;License&quot;); you may not use this file except in compliance</span>
<a name="l00010"></a>00010 <span class="comment"> *    with the License.  You may obtain a copy of the License at</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00013"></a>00013 <span class="comment"> *</span>
<a name="l00014"></a>00014 <span class="comment"> *    Unless required by applicable law or agreed to in writing,</span>
<a name="l00015"></a>00015 <span class="comment"> *    software distributed under the License is distributed on an</span>
<a name="l00016"></a>00016 <span class="comment"> *    &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span>
<a name="l00017"></a>00017 <span class="comment"> *    KIND, either express or implied.  See the License for the</span>
<a name="l00018"></a>00018 <span class="comment"> *    specific language governing permissions and limitations</span>
<a name="l00019"></a>00019 <span class="comment"> *    under the License.</span>
<a name="l00020"></a>00020 <span class="comment"> * ====================================================================</span>
<a name="l00021"></a>00021 <span class="comment"> * @endcopyright</span>
<a name="l00022"></a>00022 <span class="comment"> *</span>
<a name="l00023"></a>00023 <span class="comment"> * @file svn_delta.h</span>
<a name="l00024"></a>00024 <span class="comment"> * @brief Delta-parsing</span>
<a name="l00025"></a>00025 <span class="comment"> */</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="comment">/* ==================================================================== */</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#ifndef SVN_DELTA_H</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#define SVN_DELTA_H</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;apr.h&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;apr_pools.h&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;apr_hash.h&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;apr_tables.h&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;apr_file_io.h&gt;</span>  <span class="comment">/* for apr_file_t */</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="svn__types_8h.html" title="Subversion&#39;s data types.">svn_types.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="svn__string_8h.html" title="Counted-length strings for Subversion, plus some C string goodies.">svn_string.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="svn__io_8h.html" title="General file I/O for Subversion.">svn_io.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="svn__checksum_8h.html" title="Subversion checksum routines.">svn_checksum.h</a>&quot;</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {
<a name="l00047"></a>00047 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="comment"></span>
<a name="l00051"></a>00051 <span class="comment">/** This compression level effectively disables data compression.</span>
<a name="l00052"></a>00052 <span class="comment"> * However, the data pre-processing costs may still not be zero.</span>
<a name="l00053"></a>00053 <span class="comment"> *</span>
<a name="l00054"></a>00054 <span class="comment"> * @since New in 1.7.</span>
<a name="l00055"></a>00055 <span class="comment"> */</span>
<a name="l00056"></a><a class="code" href="svn__delta_8h.html#a80283060c477309cbfdaab8dbdefdc5b">00056</a> <span class="preprocessor">#define SVN_DELTA_COMPRESSION_LEVEL_NONE 0</span>
<a name="l00057"></a>00057 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00058"></a>00058 <span class="comment">/** This is the maximum compression level we can pass to zlib.</span>
<a name="l00059"></a>00059 <span class="comment"> *</span>
<a name="l00060"></a>00060 <span class="comment"> * @since New in 1.7.</span>
<a name="l00061"></a>00061 <span class="comment"> */</span>
<a name="l00062"></a><a class="code" href="svn__delta_8h.html#a0490b5f0ea0affaabf65b44d67ff00f7">00062</a> <span class="preprocessor">#define SVN_DELTA_COMPRESSION_LEVEL_MAX 9</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00064"></a>00064 <span class="comment">/** This is the default compression level we pass to zlib.  It</span>
<a name="l00065"></a>00065 <span class="comment"> * should be between 0 and 9, with higher numbers resulting in</span>
<a name="l00066"></a>00066 <span class="comment"> * better compression rates but slower operation.</span>
<a name="l00067"></a>00067 <span class="comment"> *</span>
<a name="l00068"></a>00068 <span class="comment"> * @since New in 1.7.</span>
<a name="l00069"></a>00069 <span class="comment"> */</span>
<a name="l00070"></a><a class="code" href="svn__delta_8h.html#a5b7cb7c7d6f12be314f8524e71cd6ae2">00070</a> <span class="preprocessor">#define SVN_DELTA_COMPRESSION_LEVEL_DEFAULT 5</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00072"></a>00072 <span class="comment">/**</span>
<a name="l00073"></a>00073 <span class="comment"> * Get libsvn_delta version information.</span>
<a name="l00074"></a>00074 <span class="comment"> *</span>
<a name="l00075"></a>00075 <span class="comment"> * @since New in 1.1.</span>
<a name="l00076"></a>00076 <span class="comment"> */</span>
<a name="l00077"></a>00077 <span class="keyword">const</span> <a class="code" href="structsvn__version__t.html" title="Version information.">svn_version_t</a> *
<a name="l00078"></a>00078 <a class="code" href="svn__delta_8h.html#a4434a6bc2790cf35ca92db7f90c50a9d" title="Get libsvn_delta version information.">svn_delta_version</a>(<span class="keywordtype">void</span>);
<a name="l00079"></a>00079 <span class="comment"></span>
<a name="l00080"></a>00080 <span class="comment">/**</span>
<a name="l00081"></a>00081 <span class="comment"> * @defgroup delta_support Delta generation and handling</span>
<a name="l00082"></a>00082 <span class="comment"> *</span>
<a name="l00083"></a>00083 <span class="comment"> * @{</span>
<a name="l00084"></a>00084 <span class="comment"> */</span>
<a name="l00085"></a>00085 <span class="comment"></span>
<a name="l00086"></a>00086 <span class="comment">/**  Text deltas.</span>
<a name="l00087"></a>00087 <span class="comment"> *</span>
<a name="l00088"></a>00088 <span class="comment"> * A text delta represents the difference between two strings of</span>
<a name="l00089"></a>00089 <span class="comment"> * bytes, the `source&#39; string and the `target&#39; string.  Given a source</span>
<a name="l00090"></a>00090 <span class="comment"> * string and a target string, we can compute a text delta; given a</span>
<a name="l00091"></a>00091 <span class="comment"> * source string and a delta, we can reconstruct the target string.</span>
<a name="l00092"></a>00092 <span class="comment"> * However, note that deltas are not reversible: you cannot always</span>
<a name="l00093"></a>00093 <span class="comment"> * reconstruct the source string given the target string and delta.</span>
<a name="l00094"></a>00094 <span class="comment"> *</span>
<a name="l00095"></a>00095 <span class="comment"> * Since text deltas can be very large, the interface here allows us</span>
<a name="l00096"></a>00096 <span class="comment"> * to produce and consume them in pieces.  Each piece, represented by</span>
<a name="l00097"></a>00097 <span class="comment"> * an #svn_txdelta_window_t structure, describes how to produce the</span>
<a name="l00098"></a>00098 <span class="comment"> * next section of the target string.</span>
<a name="l00099"></a>00099 <span class="comment"> *</span>
<a name="l00100"></a>00100 <span class="comment"> * To compute a new text delta:</span>
<a name="l00101"></a>00101 <span class="comment"> *</span>
<a name="l00102"></a>00102 <span class="comment"> * - We call svn_txdelta() on the streams we want to compare.  That</span>
<a name="l00103"></a>00103 <span class="comment"> *   returns us an #svn_txdelta_stream_t object.</span>
<a name="l00104"></a>00104 <span class="comment"> *</span>
<a name="l00105"></a>00105 <span class="comment"> * - We then call svn_txdelta_next_window() on the stream object</span>
<a name="l00106"></a>00106 <span class="comment"> *   repeatedly.  Each call returns a new #svn_txdelta_window_t</span>
<a name="l00107"></a>00107 <span class="comment"> *   object, which describes the next portion of the target string.</span>
<a name="l00108"></a>00108 <span class="comment"> *   When svn_txdelta_next_window() returns zero, we are done building</span>
<a name="l00109"></a>00109 <span class="comment"> *   the target string.</span>
<a name="l00110"></a>00110 <span class="comment"> *</span>
<a name="l00111"></a>00111 <span class="comment"> * @defgroup svn_delta_txt_delta Text deltas</span>
<a name="l00112"></a>00112 <span class="comment"> * @{</span>
<a name="l00113"></a>00113 <span class="comment"> */</span>
<a name="l00114"></a>00114 <span class="comment"></span>
<a name="l00115"></a>00115 <span class="comment">/** Action codes for text delta instructions. */</span>
<a name="l00116"></a><a class="code" href="group__svn__delta__txt__delta.html#gaf3573b839c4304ba1da5b1439670f8b2">00116</a> <span class="keyword">enum</span> <a class="code" href="group__svn__delta__txt__delta.html#gaf3573b839c4304ba1da5b1439670f8b2" title="Action codes for text delta instructions.">svn_delta_action</a> {
<a name="l00117"></a>00117     <span class="comment">/* Note: The svndiff implementation relies on the values assigned in</span>
<a name="l00118"></a>00118 <span class="comment">     * this enumeration matching the instruction encoding values. */</span>
<a name="l00119"></a>00119 <span class="comment"></span>
<a name="l00120"></a>00120 <span class="comment">    /** Append the @a length bytes at @a offset in the source view to the</span>
<a name="l00121"></a>00121 <span class="comment">     * target.</span>
<a name="l00122"></a>00122 <span class="comment">     *</span>
<a name="l00123"></a>00123 <span class="comment">     * It must be the case that 0 &lt;= @a offset &lt; @a offset +</span>
<a name="l00124"></a>00124 <span class="comment">     * @a length &lt;= size of source view.</span>
<a name="l00125"></a>00125 <span class="comment">     */</span>
<a name="l00126"></a><a class="code" href="group__svn__delta__txt__delta.html#ggaf3573b839c4304ba1da5b1439670f8b2afe06d9c8967b916063ecb3f5f9b55def">00126</a>     <a class="code" href="group__svn__delta__txt__delta.html#ggaf3573b839c4304ba1da5b1439670f8b2afe06d9c8967b916063ecb3f5f9b55def" title="Append the length bytes at offset in the source view to the target.">svn_txdelta_source</a>,
<a name="l00127"></a>00127 <span class="comment"></span>
<a name="l00128"></a>00128 <span class="comment">    /** Append the @a length bytes at @a offset in the target view, to the</span>
<a name="l00129"></a>00129 <span class="comment">     * target.</span>
<a name="l00130"></a>00130 <span class="comment">     *</span>
<a name="l00131"></a>00131 <span class="comment">     * It must be the case that 0 &lt;= @a offset &lt; current position in the</span>
<a name="l00132"></a>00132 <span class="comment">     * target view.</span>
<a name="l00133"></a>00133 <span class="comment">     *</span>
<a name="l00134"></a>00134 <span class="comment">     * However!  @a offset + @a length may be *beyond* the end of the existing</span>
<a name="l00135"></a>00135 <span class="comment">     * target data.  &quot;Where the heck does the text come from, then?&quot;</span>
<a name="l00136"></a>00136 <span class="comment">     * If you start at @a offset, and append @a length bytes one at a time,</span>
<a name="l00137"></a>00137 <span class="comment">     * it&#39;ll work out --- you&#39;re adding new bytes to the end at the</span>
<a name="l00138"></a>00138 <span class="comment">     * same rate you&#39;re reading them from the middle.  Thus, if your</span>
<a name="l00139"></a>00139 <span class="comment">     * current target text is &quot;abcdefgh&quot;, and you get an #svn_txdelta_target</span>
<a name="l00140"></a>00140 <span class="comment">     * instruction whose @a offset is 6 and whose @a length is 7,</span>
<a name="l00141"></a>00141 <span class="comment">     * the resulting string is &quot;abcdefghghghghg&quot;.  This trick is actually</span>
<a name="l00142"></a>00142 <span class="comment">     * useful in encoding long runs of consecutive characters, long runs</span>
<a name="l00143"></a>00143 <span class="comment">     * of CR/LF pairs, etc.</span>
<a name="l00144"></a>00144 <span class="comment">     */</span>
<a name="l00145"></a><a class="code" href="group__svn__delta__txt__delta.html#ggaf3573b839c4304ba1da5b1439670f8b2a062da1724f5f9232e50204d4fbb50099">00145</a>     <a class="code" href="group__svn__delta__txt__delta.html#ggaf3573b839c4304ba1da5b1439670f8b2a062da1724f5f9232e50204d4fbb50099" title="Append the length bytes at offset in the target view, to the target.">svn_txdelta_target</a>,
<a name="l00146"></a>00146 <span class="comment"></span>
<a name="l00147"></a>00147 <span class="comment">    /** Append the @a length bytes at @a offset in the window&#39;s @a new string</span>
<a name="l00148"></a>00148 <span class="comment">     * to the target.</span>
<a name="l00149"></a>00149 <span class="comment">     *</span>
<a name="l00150"></a>00150 <span class="comment">     * It must be the case that 0 &lt;= @a offset &lt; @a offset +</span>
<a name="l00151"></a>00151 <span class="comment">     * @a length &lt;= length of @a new.  Windows MUST use new data in ascending</span>
<a name="l00152"></a>00152 <span class="comment">     * order with no overlap at the moment; svn_txdelta_to_svndiff()</span>
<a name="l00153"></a>00153 <span class="comment">     * depends on this.</span>
<a name="l00154"></a>00154 <span class="comment">     */</span>
<a name="l00155"></a><a class="code" href="group__svn__delta__txt__delta.html#ggaf3573b839c4304ba1da5b1439670f8b2a3200127b02e484799d0ad81c6761db60">00155</a>     <a class="code" href="group__svn__delta__txt__delta.html#ggaf3573b839c4304ba1da5b1439670f8b2a3200127b02e484799d0ad81c6761db60" title="Append the length bytes at offset in the window&#39;s new string to the target.">svn_txdelta_new</a>
<a name="l00156"></a>00156 };
<a name="l00157"></a>00157 <span class="comment"></span>
<a name="l00158"></a>00158 <span class="comment">/** A single text delta instruction.  */</span>
<a name="l00159"></a><a class="code" href="structsvn__txdelta__op__t.html">00159</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__txdelta__op__t.html" title="A single text delta instruction.">svn_txdelta_op_t</a>
<a name="l00160"></a>00160 {<span class="comment"></span>
<a name="l00161"></a>00161 <span class="comment">  /** Action code of delta instruction */</span>
<a name="l00162"></a><a class="code" href="structsvn__txdelta__op__t.html#ac68cff5ee352e1343d41ee46560b8d88">00162</a>   <span class="keyword">enum</span> <a class="code" href="group__svn__delta__txt__delta.html#gaf3573b839c4304ba1da5b1439670f8b2" title="Action codes for text delta instructions.">svn_delta_action</a> <a class="code" href="structsvn__txdelta__op__t.html#ac68cff5ee352e1343d41ee46560b8d88" title="Action code of delta instruction.">action_code</a>;<span class="comment"></span>
<a name="l00163"></a>00163 <span class="comment">  /** Offset of delta, see #svn_delta_action for more details. */</span>
<a name="l00164"></a><a class="code" href="structsvn__txdelta__op__t.html#a3b049c920e76de38786b4ba7f9de16f0">00164</a>   apr_size_t <a class="code" href="structsvn__txdelta__op__t.html#a3b049c920e76de38786b4ba7f9de16f0" title="Offset of delta, see svn_delta_action for more details.">offset</a>;<span class="comment"></span>
<a name="l00165"></a>00165 <span class="comment">   /** Number of bytes of delta, see #svn_delta_action for more details. */</span>
<a name="l00166"></a><a class="code" href="structsvn__txdelta__op__t.html#a9806c35696fdbcfa75020bf108218236">00166</a>   apr_size_t <a class="code" href="structsvn__txdelta__op__t.html#a9806c35696fdbcfa75020bf108218236" title="Number of bytes of delta, see svn_delta_action for more details.">length</a>;
<a name="l00167"></a>00167 } <a class="code" href="group__svn__delta__txt__delta.html#ga0c60d5b6ad779d143512fcf717bdd7b4" title="A single text delta instruction.">svn_txdelta_op_t</a>;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 <span class="comment"></span>
<a name="l00170"></a>00170 <span class="comment">/** An #svn_txdelta_window_t object describes how to reconstruct a</span>
<a name="l00171"></a>00171 <span class="comment"> * contiguous section of the target string (the &quot;target view&quot;) using a</span>
<a name="l00172"></a>00172 <span class="comment"> * specified contiguous region of the source string (the &quot;source</span>
<a name="l00173"></a>00173 <span class="comment"> * view&quot;).  It contains a series of instructions which assemble the</span>
<a name="l00174"></a>00174 <span class="comment"> * new target string text by pulling together substrings from:</span>
<a name="l00175"></a>00175 <span class="comment"> *</span>
<a name="l00176"></a>00176 <span class="comment"> *   - the source view,</span>
<a name="l00177"></a>00177 <span class="comment"> *</span>
<a name="l00178"></a>00178 <span class="comment"> *   - the previously constructed portion of the target view,</span>
<a name="l00179"></a>00179 <span class="comment"> *</span>
<a name="l00180"></a>00180 <span class="comment"> *   - a string of new data contained within the window structure</span>
<a name="l00181"></a>00181 <span class="comment"> *</span>
<a name="l00182"></a>00182 <span class="comment"> * The source view must always slide forward from one window to the</span>
<a name="l00183"></a>00183 <span class="comment"> * next; that is, neither the beginning nor the end of the source view</span>
<a name="l00184"></a>00184 <span class="comment"> * may move to the left as we read from a window stream.  This</span>
<a name="l00185"></a>00185 <span class="comment"> * property allows us to apply deltas to non-seekable source streams</span>
<a name="l00186"></a>00186 <span class="comment"> * without making a full copy of the source stream.</span>
<a name="l00187"></a>00187 <span class="comment"> */</span>
<a name="l00188"></a><a class="code" href="structsvn__txdelta__window__t.html">00188</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__txdelta__window__t.html" title="An svn_txdelta_window_t object describes how to reconstruct a contiguous section of the target string...">svn_txdelta_window_t</a>
<a name="l00189"></a>00189 {
<a name="l00190"></a>00190 <span class="comment"></span>
<a name="l00191"></a>00191 <span class="comment">  /** The offset of the source view for this window.  */</span>
<a name="l00192"></a><a class="code" href="structsvn__txdelta__window__t.html#a10d2a40ac83e175617f62655f0406bc6">00192</a>   <a class="code" href="svn__types_8h.html#a726e581898461c1d3e7dbdb16d99dad0" title="The size of a file in the Subversion FS.">svn_filesize_t</a> <a class="code" href="structsvn__txdelta__window__t.html#a10d2a40ac83e175617f62655f0406bc6" title="The offset of the source view for this window.">sview_offset</a>;
<a name="l00193"></a>00193 <span class="comment"></span>
<a name="l00194"></a>00194 <span class="comment">  /** The length of the source view for this window.  */</span>
<a name="l00195"></a><a class="code" href="structsvn__txdelta__window__t.html#a21b7264822ac959a9b83cc1774ac7ba4">00195</a>   apr_size_t <a class="code" href="structsvn__txdelta__window__t.html#a21b7264822ac959a9b83cc1774ac7ba4" title="The length of the source view for this window.">sview_len</a>;
<a name="l00196"></a>00196 <span class="comment"></span>
<a name="l00197"></a>00197 <span class="comment">  /** The length of the target view for this window, i.e. the number of</span>
<a name="l00198"></a>00198 <span class="comment">   * bytes which will be reconstructed by the instruction stream.  */</span>
<a name="l00199"></a><a class="code" href="structsvn__txdelta__window__t.html#a3593f77347e4fcf652d874ba42437e77">00199</a>   apr_size_t <a class="code" href="structsvn__txdelta__window__t.html#a3593f77347e4fcf652d874ba42437e77" title="The length of the target view for this window, i.e.">tview_len</a>;
<a name="l00200"></a>00200 <span class="comment"></span>
<a name="l00201"></a>00201 <span class="comment">  /** The number of instructions in this window.  */</span>
<a name="l00202"></a><a class="code" href="structsvn__txdelta__window__t.html#aade33ee11bba85cae28b7f41dd68dcfb">00202</a>   <span class="keywordtype">int</span> <a class="code" href="structsvn__txdelta__window__t.html#aade33ee11bba85cae28b7f41dd68dcfb" title="The number of instructions in this window.">num_ops</a>;
<a name="l00203"></a>00203 <span class="comment"></span>
<a name="l00204"></a>00204 <span class="comment">  /** The number of svn_txdelta_source instructions in this window. If</span>
<a name="l00205"></a>00205 <span class="comment">   * this number is 0, we don&#39;t need to read the source in order to</span>
<a name="l00206"></a>00206 <span class="comment">   * reconstruct the target view.</span>
<a name="l00207"></a>00207 <span class="comment">   */</span>
<a name="l00208"></a><a class="code" href="structsvn__txdelta__window__t.html#a96c0e790ae607343ac43346864f4e9b3">00208</a>   <span class="keywordtype">int</span> <a class="code" href="structsvn__txdelta__window__t.html#a96c0e790ae607343ac43346864f4e9b3" title="The number of svn_txdelta_source instructions in this window.">src_ops</a>;
<a name="l00209"></a>00209 <span class="comment"></span>
<a name="l00210"></a>00210 <span class="comment">  /** The instructions for this window.  */</span>
<a name="l00211"></a><a class="code" href="structsvn__txdelta__window__t.html#a6b1a3158d09c4f45b3c293a6e5621753">00211</a>   <span class="keyword">const</span> <a class="code" href="structsvn__txdelta__op__t.html" title="A single text delta instruction.">svn_txdelta_op_t</a> *<a class="code" href="structsvn__txdelta__window__t.html#a6b1a3158d09c4f45b3c293a6e5621753" title="The instructions for this window.">ops</a>;
<a name="l00212"></a>00212 <span class="comment"></span>
<a name="l00213"></a>00213 <span class="comment">  /** New data, for use by any `svn_txdelta_new&#39; instructions.  */</span>
<a name="l00214"></a><a class="code" href="structsvn__txdelta__window__t.html#a4b52b256b6129d69e33966eefc2fc007">00214</a>   <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *<a class="code" href="structsvn__txdelta__window__t.html#a4b52b256b6129d69e33966eefc2fc007" title="New data, for use by any `svn_txdelta_new&#39; instructions.">new_data</a>;
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 } <a class="code" href="group__svn__delta__txt__delta.html#ga6e0e01f29123ab12ad69d21966a8007a" title="An svn_txdelta_window_t object describes how to reconstruct a contiguous section of the target string...">svn_txdelta_window_t</a>;
<a name="l00217"></a>00217 <span class="comment"></span>
<a name="l00218"></a>00218 <span class="comment">/**</span>
<a name="l00219"></a>00219 <span class="comment"> * Return a deep copy of @a window, allocated in @a pool.</span>
<a name="l00220"></a>00220 <span class="comment"> *</span>
<a name="l00221"></a>00221 <span class="comment"> * @since New in 1.3.</span>
<a name="l00222"></a>00222 <span class="comment"> */</span>
<a name="l00223"></a>00223 <a class="code" href="structsvn__txdelta__window__t.html" title="An svn_txdelta_window_t object describes how to reconstruct a contiguous section of the target string...">svn_txdelta_window_t</a> *
<a name="l00224"></a>00224 <a class="code" href="group__svn__delta__txt__delta.html#ga743bfce28d8d52bfe5aead62362e9c16" title="Return a deep copy of window, allocated in pool.">svn_txdelta_window_dup</a>(<span class="keyword">const</span> <a class="code" href="structsvn__txdelta__window__t.html" title="An svn_txdelta_window_t object describes how to reconstruct a contiguous section of the target string...">svn_txdelta_window_t</a> *window,
<a name="l00225"></a>00225                        apr_pool_t *pool);
<a name="l00226"></a>00226 <span class="comment"></span>
<a name="l00227"></a>00227 <span class="comment">/**</span>
<a name="l00228"></a>00228 <span class="comment"> * Compose two delta windows, yielding a third, allocated in @a pool.</span>
<a name="l00229"></a>00229 <span class="comment"> *</span>
<a name="l00230"></a>00230 <span class="comment"> * @since New in 1.4</span>
<a name="l00231"></a>00231 <span class="comment"> *</span>
<a name="l00232"></a>00232 <span class="comment"> */</span>
<a name="l00233"></a>00233 <a class="code" href="structsvn__txdelta__window__t.html" title="An svn_txdelta_window_t object describes how to reconstruct a contiguous section of the target string...">svn_txdelta_window_t</a> *
<a name="l00234"></a>00234 <a class="code" href="group__svn__delta__txt__delta.html#ga208f3793d9c65578c6fc85bb0d8246d9" title="Compose two delta windows, yielding a third, allocated in pool.">svn_txdelta_compose_windows</a>(<span class="keyword">const</span> <a class="code" href="structsvn__txdelta__window__t.html" title="An svn_txdelta_window_t object describes how to reconstruct a contiguous section of the target string...">svn_txdelta_window_t</a> *window_A,
<a name="l00235"></a>00235                             <span class="keyword">const</span> <a class="code" href="structsvn__txdelta__window__t.html" title="An svn_txdelta_window_t object describes how to reconstruct a contiguous section of the target string...">svn_txdelta_window_t</a> *window_B,
<a name="l00236"></a>00236                             apr_pool_t *pool);
<a name="l00237"></a>00237 <span class="comment"></span>
<a name="l00238"></a>00238 <span class="comment">/**</span>
<a name="l00239"></a>00239 <span class="comment"> * Apply the instructions from @a window to a source view @a sbuf to</span>
<a name="l00240"></a>00240 <span class="comment"> *  produce a target view @a tbuf.</span>
<a name="l00241"></a>00241 <span class="comment"> *</span>
<a name="l00242"></a>00242 <span class="comment"> * @a sbuf is assumed to have @a window-&gt;sview_len bytes of data and</span>
<a name="l00243"></a>00243 <span class="comment"> * @a tbuf is assumed to have room for @a tlen bytes of output.  @a</span>
<a name="l00244"></a>00244 <span class="comment"> * tlen may be more than @a window-&gt;tview_len, so return the actual</span>
<a name="l00245"></a>00245 <span class="comment"> * number of bytes written.  @a sbuf is not touched and may be NULL if</span>
<a name="l00246"></a>00246 <span class="comment"> * @a window contains no source-copy operations. This is purely a</span>
<a name="l00247"></a>00247 <span class="comment"> * memory operation; nothing can go wrong as long as we have a valid</span>
<a name="l00248"></a>00248 <span class="comment"> * window.</span>
<a name="l00249"></a>00249 <span class="comment"> *</span>
<a name="l00250"></a>00250 <span class="comment"> * @since New in 1.4</span>
<a name="l00251"></a>00251 <span class="comment"> *</span>
<a name="l00252"></a>00252 <span class="comment"> */</span>
<a name="l00253"></a>00253 <span class="keywordtype">void</span>
<a name="l00254"></a>00254 <a class="code" href="group__svn__delta__txt__delta.html#ga91ce8c5539fd82aa891da56d10262677" title="Apply the instructions from window to a source view sbuf to produce a target view tbuf...">svn_txdelta_apply_instructions</a>(<a class="code" href="structsvn__txdelta__window__t.html" title="An svn_txdelta_window_t object describes how to reconstruct a contiguous section of the target string...">svn_txdelta_window_t</a> *window,
<a name="l00255"></a>00255                                <span class="keyword">const</span> <span class="keywordtype">char</span> *sbuf, <span class="keywordtype">char</span> *tbuf,
<a name="l00256"></a>00256                                apr_size_t *tlen);
<a name="l00257"></a>00257 <span class="comment"></span>
<a name="l00258"></a>00258 <span class="comment">/** A typedef for functions that consume a series of delta windows, for</span>
<a name="l00259"></a>00259 <span class="comment"> * use in caller-pushes interfaces.  Such functions will typically</span>
<a name="l00260"></a>00260 <span class="comment"> * apply the delta windows to produce some file, or save the windows</span>
<a name="l00261"></a>00261 <span class="comment"> * somewhere.  At the end of the delta window stream, you must call</span>
<a name="l00262"></a>00262 <span class="comment"> * this function passing zero for the @a window argument.</span>
<a name="l00263"></a>00263 <span class="comment"> */</span>
<a name="l00264"></a><a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219">00264</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_txdelta_window_handler_t)(
<a name="l00265"></a>00265   <a class="code" href="structsvn__txdelta__window__t.html" title="An svn_txdelta_window_t object describes how to reconstruct a contiguous section of the target string...">svn_txdelta_window_t</a> *window, <span class="keywordtype">void</span> *baton);
<a name="l00266"></a>00266 
<a name="l00267"></a>00267 <span class="comment"></span>
<a name="l00268"></a>00268 <span class="comment">/** This function will generate delta windows that turn @a source into</span>
<a name="l00269"></a>00269 <span class="comment"> * @a target, and pushing these windows into the @a handler window handler</span>
<a name="l00270"></a>00270 <span class="comment"> * callback (passing @a handler_baton to each invocation).</span>
<a name="l00271"></a>00271 <span class="comment"> *</span>
<a name="l00272"></a>00272 <span class="comment"> * If @a checksum is not NULL, then a checksum (of kind @a checksum_kind)</span>
<a name="l00273"></a>00273 <span class="comment"> * will be computed for the target stream, and placed into *checksum.</span>
<a name="l00274"></a>00274 <span class="comment"> *</span>
<a name="l00275"></a>00275 <span class="comment"> * If @a cancel_func is not NULL, then it should refer to a cancellation</span>
<a name="l00276"></a>00276 <span class="comment"> * function (along with @a cancel_baton).</span>
<a name="l00277"></a>00277 <span class="comment"> *</span>
<a name="l00278"></a>00278 <span class="comment"> * Results (the checksum) will be allocated from @a result_pool, and all</span>
<a name="l00279"></a>00279 <span class="comment"> * temporary allocations will be performed in @a scratch_pool.</span>
<a name="l00280"></a>00280 <span class="comment"> *</span>
<a name="l00281"></a>00281 <span class="comment"> * Note: this function replaces the combination of svn_txdelta() and</span>
<a name="l00282"></a>00282 <span class="comment"> *   svn_txdelta_send_txstream().</span>
<a name="l00283"></a>00283 <span class="comment"> *</span>
<a name="l00284"></a>00284 <span class="comment"> * @since New in 1.6.</span>
<a name="l00285"></a>00285 <span class="comment"> */</span>
<a name="l00286"></a>00286 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00287"></a>00287 <a class="code" href="group__svn__delta__txt__delta.html#gaea2ff65d216625dc40c87eccd8ee2f30" title="This function will generate delta windows that turn source into target, and pushing these windows int...">svn_txdelta_run</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *source,
<a name="l00288"></a>00288                 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *target,
<a name="l00289"></a>00289                 <a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> handler,
<a name="l00290"></a>00290                 <span class="keywordtype">void</span> *handler_baton,
<a name="l00291"></a>00291                 <a class="code" href="svn__checksum_8h.html#a7a6c373d03d7e6ec6b832a039f5e0aa1" title="Various types of checksums.">svn_checksum_kind_t</a> checksum_kind,
<a name="l00292"></a>00292                 <a class="code" href="structsvn__checksum__t.html" title="A generic checksum representation.">svn_checksum_t</a> **checksum,
<a name="l00293"></a>00293                 <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l00294"></a>00294                 <span class="keywordtype">void</span> *cancel_baton,
<a name="l00295"></a>00295                 apr_pool_t *result_pool,
<a name="l00296"></a>00296                 apr_pool_t *scratch_pool);
<a name="l00297"></a>00297 
<a name="l00298"></a>00298 <span class="comment"></span>
<a name="l00299"></a>00299 <span class="comment">/** A delta stream --- this is the hat from which we pull a series of</span>
<a name="l00300"></a>00300 <span class="comment"> * svn_txdelta_window_t objects, which, taken in order, describe the</span>
<a name="l00301"></a>00301 <span class="comment"> * entire target string.  This type is defined within libsvn_delta, and</span>
<a name="l00302"></a>00302 <span class="comment"> * opaque outside that library.</span>
<a name="l00303"></a>00303 <span class="comment"> */</span>
<a name="l00304"></a><a class="code" href="group__svn__delta__txt__delta.html#gaf599af000e3c3b976c17fd4e101ff7cf">00304</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="group__svn__delta__txt__delta.html#gaf599af000e3c3b976c17fd4e101ff7cf" title="A delta stream --- this is the hat from which we pull a series of svn_txdelta_window_t objects...">svn_txdelta_stream_t</a> <a class="code" href="group__svn__delta__txt__delta.html#gaf599af000e3c3b976c17fd4e101ff7cf" title="A delta stream --- this is the hat from which we pull a series of svn_txdelta_window_t objects...">svn_txdelta_stream_t</a>;
<a name="l00305"></a>00305 
<a name="l00306"></a>00306 <span class="comment"></span>
<a name="l00307"></a>00307 <span class="comment">/** A typedef for a function that will set @a *window to the next</span>
<a name="l00308"></a>00308 <span class="comment"> * window from a #svn_txdelta_stream_t object.  If there are no more</span>
<a name="l00309"></a>00309 <span class="comment"> * delta windows, NULL will be used.  The returned window, if any,</span>
<a name="l00310"></a>00310 <span class="comment"> * will be allocated in @a pool.  @a baton is the baton specified</span>
<a name="l00311"></a>00311 <span class="comment"> * when the stream was created.</span>
<a name="l00312"></a>00312 <span class="comment"> *</span>
<a name="l00313"></a>00313 <span class="comment"> * @since New in 1.4.</span>
<a name="l00314"></a>00314 <span class="comment"> */</span>
<a name="l00315"></a>00315 <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00316"></a><a class="code" href="group__svn__delta__txt__delta.html#ga296cf74e5f15272c6c3d00004eddf406">00316</a> (*svn_txdelta_next_window_fn_t)(<a class="code" href="structsvn__txdelta__window__t.html" title="An svn_txdelta_window_t object describes how to reconstruct a contiguous section of the target string...">svn_txdelta_window_t</a> **window,
<a name="l00317"></a>00317                                 <span class="keywordtype">void</span> *baton,
<a name="l00318"></a>00318                                 apr_pool_t *pool);
<a name="l00319"></a>00319 <span class="comment"></span>
<a name="l00320"></a>00320 <span class="comment">/** A typedef for a function that will return the md5 checksum of the</span>
<a name="l00321"></a>00321 <span class="comment"> * fulltext deltified by a #svn_txdelta_stream_t object.  Will</span>
<a name="l00322"></a>00322 <span class="comment"> * return NULL if the final null window hasn&#39;t yet been returned by</span>
<a name="l00323"></a>00323 <span class="comment"> * the stream.  The returned value will be allocated in the same pool</span>
<a name="l00324"></a>00324 <span class="comment"> * as the stream.  @a baton is the baton specified when the stream was</span>
<a name="l00325"></a>00325 <span class="comment"> * created.</span>
<a name="l00326"></a>00326 <span class="comment"> *</span>
<a name="l00327"></a>00327 <span class="comment"> * @since New in 1.4.</span>
<a name="l00328"></a>00328 <span class="comment"> */</span>
<a name="l00329"></a>00329 <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *
<a name="l00330"></a><a class="code" href="group__svn__delta__txt__delta.html#gacda8999d7a2265e755f242046e28b5e9">00330</a> (*svn_txdelta_md5_digest_fn_t)(<span class="keywordtype">void</span> *baton);
<a name="l00331"></a>00331 <span class="comment"></span>
<a name="l00332"></a>00332 <span class="comment">/** Create and return a generic text delta stream with @a baton, @a</span>
<a name="l00333"></a>00333 <span class="comment"> * next_window and @a md5_digest.  Allocate the new stream in @a</span>
<a name="l00334"></a>00334 <span class="comment"> * pool.</span>
<a name="l00335"></a>00335 <span class="comment"> *</span>
<a name="l00336"></a>00336 <span class="comment"> * @since New in 1.4.</span>
<a name="l00337"></a>00337 <span class="comment"> */</span>
<a name="l00338"></a>00338 <a class="code" href="group__svn__delta__txt__delta.html#gaf599af000e3c3b976c17fd4e101ff7cf" title="A delta stream --- this is the hat from which we pull a series of svn_txdelta_window_t objects...">svn_txdelta_stream_t</a> *
<a name="l00339"></a>00339 <a class="code" href="group__svn__delta__txt__delta.html#gab4e0ec602322485190a512512e874d73" title="Create and return a generic text delta stream with baton, next_window and md5_digest.">svn_txdelta_stream_create</a>(<span class="keywordtype">void</span> *baton,
<a name="l00340"></a>00340                           <a class="code" href="group__svn__delta__txt__delta.html#ga296cf74e5f15272c6c3d00004eddf406" title="A typedef for a function that will set *window to the next window from a svn_txdelta_stream_t object...">svn_txdelta_next_window_fn_t</a> next_window,
<a name="l00341"></a>00341                           <a class="code" href="group__svn__delta__txt__delta.html#gacda8999d7a2265e755f242046e28b5e9" title="A typedef for a function that will return the md5 checksum of the fulltext deltified by a svn_txdelta...">svn_txdelta_md5_digest_fn_t</a> md5_digest,
<a name="l00342"></a>00342                           apr_pool_t *pool);
<a name="l00343"></a>00343 <span class="comment"></span>
<a name="l00344"></a>00344 <span class="comment">/** Set @a *window to a pointer to the next window from the delta stream</span>
<a name="l00345"></a>00345 <span class="comment"> * @a stream.  When we have completely reconstructed the target string,</span>
<a name="l00346"></a>00346 <span class="comment"> * set @a *window to zero.</span>
<a name="l00347"></a>00347 <span class="comment"> *</span>
<a name="l00348"></a>00348 <span class="comment"> * The window will be allocated in @a pool.</span>
<a name="l00349"></a>00349 <span class="comment"> */</span>
<a name="l00350"></a>00350 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00351"></a>00351 <a class="code" href="group__svn__delta__txt__delta.html#gac27c74c1dacbb03d733367858e397d51" title="Set *window to a pointer to the next window from the delta stream stream.">svn_txdelta_next_window</a>(<a class="code" href="structsvn__txdelta__window__t.html" title="An svn_txdelta_window_t object describes how to reconstruct a contiguous section of the target string...">svn_txdelta_window_t</a> **window,
<a name="l00352"></a>00352                         <a class="code" href="group__svn__delta__txt__delta.html#gaf599af000e3c3b976c17fd4e101ff7cf" title="A delta stream --- this is the hat from which we pull a series of svn_txdelta_window_t objects...">svn_txdelta_stream_t</a> *stream,
<a name="l00353"></a>00353                         apr_pool_t *pool);
<a name="l00354"></a>00354 
<a name="l00355"></a>00355 <span class="comment"></span>
<a name="l00356"></a>00356 <span class="comment">/** Return the md5 digest for the complete fulltext deltified by</span>
<a name="l00357"></a>00357 <span class="comment"> * @a stream, or @c NULL if @a stream has not yet returned its final</span>
<a name="l00358"></a>00358 <span class="comment"> * @c NULL window.  The digest is allocated in the same memory as @a</span>
<a name="l00359"></a>00359 <span class="comment"> * STREAM.</span>
<a name="l00360"></a>00360 <span class="comment"> */</span>
<a name="l00361"></a>00361 <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *
<a name="l00362"></a>00362 <a class="code" href="group__svn__delta__txt__delta.html#ga5c19d9f9e5049865212fa5cd1ae3df0b" title="Return the md5 digest for the complete fulltext deltified by stream, or NULL if stream has not yet re...">svn_txdelta_md5_digest</a>(<a class="code" href="group__svn__delta__txt__delta.html#gaf599af000e3c3b976c17fd4e101ff7cf" title="A delta stream --- this is the hat from which we pull a series of svn_txdelta_window_t objects...">svn_txdelta_stream_t</a> *stream);
<a name="l00363"></a>00363 <span class="comment"></span>
<a name="l00364"></a>00364 <span class="comment">/** Set @a *stream to a pointer to a delta stream that will turn the byte</span>
<a name="l00365"></a>00365 <span class="comment"> * string from @a source into the byte stream from @a target.</span>
<a name="l00366"></a>00366 <span class="comment"> *</span>
<a name="l00367"></a>00367 <span class="comment"> * @a source and @a target are both readable generic streams.  When we call</span>
<a name="l00368"></a>00368 <span class="comment"> * svn_txdelta_next_window() on @a *stream, it will read from @a source and</span>
<a name="l00369"></a>00369 <span class="comment"> * @a target to gather as much data as it needs.</span>
<a name="l00370"></a>00370 <span class="comment"> *</span>
<a name="l00371"></a>00371 <span class="comment"> * Do any necessary allocation in a sub-pool of @a pool.</span>
<a name="l00372"></a>00372 <span class="comment"> */</span>
<a name="l00373"></a>00373 <span class="keywordtype">void</span>
<a name="l00374"></a>00374 <a class="code" href="group__svn__delta__txt__delta.html#gaa0b249e231d98783f961cde277b908e7" title="Set *stream to a pointer to a delta stream that will turn the byte string from source into the byte s...">svn_txdelta</a>(<a class="code" href="group__svn__delta__txt__delta.html#gaf599af000e3c3b976c17fd4e101ff7cf" title="A delta stream --- this is the hat from which we pull a series of svn_txdelta_window_t objects...">svn_txdelta_stream_t</a> **stream,
<a name="l00375"></a>00375             <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *source,
<a name="l00376"></a>00376             <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *target,
<a name="l00377"></a>00377             apr_pool_t *pool);
<a name="l00378"></a>00378 
<a name="l00379"></a>00379 <span class="comment"></span>
<a name="l00380"></a>00380 <span class="comment">/**</span>
<a name="l00381"></a>00381 <span class="comment"> * Return a writable stream which, when fed target data, will send</span>
<a name="l00382"></a>00382 <span class="comment"> * delta windows to @a handler/@a handler_baton which transform the</span>
<a name="l00383"></a>00383 <span class="comment"> * data in @a source to the target data.  As usual, the window handler</span>
<a name="l00384"></a>00384 <span class="comment"> * will receive a NULL window to signify the end of the window stream.</span>
<a name="l00385"></a>00385 <span class="comment"> * The stream handler functions will read data from @a source as</span>
<a name="l00386"></a>00386 <span class="comment"> * necessary.</span>
<a name="l00387"></a>00387 <span class="comment"> *</span>
<a name="l00388"></a>00388 <span class="comment"> * @since New in 1.1.</span>
<a name="l00389"></a>00389 <span class="comment"> */</span>
<a name="l00390"></a>00390 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *
<a name="l00391"></a>00391 <a class="code" href="group__svn__delta__txt__delta.html#gaa2f6fd3e26aafb6fb9e283c0f9a0f50c" title="Return a writable stream which, when fed target data, will send delta windows to handler/handler_bato...">svn_txdelta_target_push</a>(<a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> handler,
<a name="l00392"></a>00392                         <span class="keywordtype">void</span> *handler_baton,
<a name="l00393"></a>00393                         <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *source,
<a name="l00394"></a>00394                         apr_pool_t *pool);
<a name="l00395"></a>00395 
<a name="l00396"></a>00396 <span class="comment"></span>
<a name="l00397"></a>00397 <span class="comment">/** Send the contents of @a string to window-handler @a handler/@a baton.</span>
<a name="l00398"></a>00398 <span class="comment"> * This is effectively a &#39;copy&#39; operation, resulting in delta windows that</span>
<a name="l00399"></a>00399 <span class="comment"> * make the target equivalent to the value of @a string.</span>
<a name="l00400"></a>00400 <span class="comment"> *</span>
<a name="l00401"></a>00401 <span class="comment"> * All temporary allocation is performed in @a pool.</span>
<a name="l00402"></a>00402 <span class="comment"> */</span>
<a name="l00403"></a>00403 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00404"></a>00404 <a class="code" href="group__svn__delta__txt__delta.html#ga3ec9b8d77259b8de4edf33ad775dc4b0" title="Send the contents of string to window-handler handler/baton. ">svn_txdelta_send_string</a>(<span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *<span class="keywordtype">string</span>,
<a name="l00405"></a>00405                         <a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> handler,
<a name="l00406"></a>00406                         <span class="keywordtype">void</span> *handler_baton,
<a name="l00407"></a>00407                         apr_pool_t *pool);
<a name="l00408"></a>00408 <span class="comment"></span>
<a name="l00409"></a>00409 <span class="comment">/** Send the contents of @a stream to window-handler @a handler/@a baton.</span>
<a name="l00410"></a>00410 <span class="comment"> * This is effectively a &#39;copy&#39; operation, resulting in delta windows that</span>
<a name="l00411"></a>00411 <span class="comment"> * make the target equivalent to the stream.</span>
<a name="l00412"></a>00412 <span class="comment"> *</span>
<a name="l00413"></a>00413 <span class="comment"> * If @a digest is non-NULL, populate it with the md5 checksum for the</span>
<a name="l00414"></a>00414 <span class="comment"> * fulltext that was deltified (@a digest must be at least</span>
<a name="l00415"></a>00415 <span class="comment"> * @c APR_MD5_DIGESTSIZE bytes long).</span>
<a name="l00416"></a>00416 <span class="comment"> *</span>
<a name="l00417"></a>00417 <span class="comment"> * All temporary allocation is performed in @a pool.</span>
<a name="l00418"></a>00418 <span class="comment"> */</span>
<a name="l00419"></a>00419 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00420"></a>00420 <a class="code" href="group__svn__delta__txt__delta.html#ga2ff49b23d075adb6a70576e122692df5" title="Send the contents of stream to window-handler handler/baton. ">svn_txdelta_send_stream</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l00421"></a>00421                         <a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> handler,
<a name="l00422"></a>00422                         <span class="keywordtype">void</span> *handler_baton,
<a name="l00423"></a>00423                         <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *digest,
<a name="l00424"></a>00424                         apr_pool_t *pool);
<a name="l00425"></a>00425 <span class="comment"></span>
<a name="l00426"></a>00426 <span class="comment">/** Send the contents of @a txstream to window-handler @a handler/@a baton.</span>
<a name="l00427"></a>00427 <span class="comment"> * Windows will be extracted from the stream and delivered to the handler.</span>
<a name="l00428"></a>00428 <span class="comment"> *</span>
<a name="l00429"></a>00429 <span class="comment"> * All temporary allocation is performed in @a pool.</span>
<a name="l00430"></a>00430 <span class="comment"> */</span>
<a name="l00431"></a>00431 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00432"></a>00432 <a class="code" href="group__svn__delta__txt__delta.html#ga9e98ac11b1719e838de16eac06812e9d" title="Send the contents of txstream to window-handler handler/baton. ">svn_txdelta_send_txstream</a>(<a class="code" href="group__svn__delta__txt__delta.html#gaf599af000e3c3b976c17fd4e101ff7cf" title="A delta stream --- this is the hat from which we pull a series of svn_txdelta_window_t objects...">svn_txdelta_stream_t</a> *txstream,
<a name="l00433"></a>00433                           <a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> handler,
<a name="l00434"></a>00434                           <span class="keywordtype">void</span> *handler_baton,
<a name="l00435"></a>00435                           apr_pool_t *pool);
<a name="l00436"></a>00436 
<a name="l00437"></a>00437 <span class="comment"></span>
<a name="l00438"></a>00438 <span class="comment">/** Prepare to apply a text delta.  @a source is a readable generic stream</span>
<a name="l00439"></a>00439 <span class="comment"> * yielding the source data, @a target is a writable generic stream to</span>
<a name="l00440"></a>00440 <span class="comment"> * write target data to, and allocation takes place in a sub-pool of</span>
<a name="l00441"></a>00441 <span class="comment"> * @a pool.  On return, @a *handler is set to a window handler function and</span>
<a name="l00442"></a>00442 <span class="comment"> * @a *handler_baton is set to the value to pass as the @a baton argument to</span>
<a name="l00443"></a>00443 <span class="comment"> * @a *handler.</span>
<a name="l00444"></a>00444 <span class="comment"> *</span>
<a name="l00445"></a>00445 <span class="comment"> * If @a result_digest is non-NULL, it points to APR_MD5_DIGESTSIZE bytes</span>
<a name="l00446"></a>00446 <span class="comment"> * of storage, and the final call to @a handler populates it with the</span>
<a name="l00447"></a>00447 <span class="comment"> * MD5 digest of the resulting fulltext.</span>
<a name="l00448"></a>00448 <span class="comment"> *</span>
<a name="l00449"></a>00449 <span class="comment"> * If @a error_info is non-NULL, it is inserted parenthetically into</span>
<a name="l00450"></a>00450 <span class="comment"> * the error string for any error returned by svn_txdelta_apply() or</span>
<a name="l00451"></a>00451 <span class="comment"> * @a *handler.  (It is normally used to provide path information,</span>
<a name="l00452"></a>00452 <span class="comment"> * since there&#39;s nothing else in the delta application&#39;s context to</span>
<a name="l00453"></a>00453 <span class="comment"> * supply a path for error messages.)</span>
<a name="l00454"></a>00454 <span class="comment"> *</span>
<a name="l00455"></a>00455 <span class="comment"> * @note To avoid lifetime issues, @a error_info is copied into</span>
<a name="l00456"></a>00456 <span class="comment"> * @a pool or a subpool thereof.</span>
<a name="l00457"></a>00457 <span class="comment"> */</span>
<a name="l00458"></a>00458 <span class="keywordtype">void</span>
<a name="l00459"></a>00459 <a class="code" href="group__svn__delta__txt__delta.html#gaa3a54c3cdde467a57666ee8d13141738" title="Prepare to apply a text delta.">svn_txdelta_apply</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *source,
<a name="l00460"></a>00460                   <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *target,
<a name="l00461"></a>00461                   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *result_digest,
<a name="l00462"></a>00462                   <span class="keyword">const</span> <span class="keywordtype">char</span> *error_info,
<a name="l00463"></a>00463                   apr_pool_t *pool,
<a name="l00464"></a>00464                   <a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> *handler,
<a name="l00465"></a>00465                   <span class="keywordtype">void</span> **handler_baton);
<a name="l00466"></a>00466 
<a name="l00467"></a>00467 
<a name="l00468"></a>00468 
<a name="l00469"></a>00469 <span class="comment">/*** Producing and consuming svndiff-format text deltas.  ***/</span>
<a name="l00470"></a>00470 <span class="comment"></span>
<a name="l00471"></a>00471 <span class="comment">/** Prepare to produce an svndiff-format diff from text delta windows.</span>
<a name="l00472"></a>00472 <span class="comment"> * @a output is a writable generic stream to write the svndiff data to.</span>
<a name="l00473"></a>00473 <span class="comment"> * Allocation takes place in a sub-pool of @a pool.  On return, @a *handler</span>
<a name="l00474"></a>00474 <span class="comment"> * is set to a window handler function and @a *handler_baton is set to</span>
<a name="l00475"></a>00475 <span class="comment"> * the value to pass as the @a baton argument to @a *handler. The svndiff</span>
<a name="l00476"></a>00476 <span class="comment"> * version is @a svndiff_version. @a compression_level is the zlib</span>
<a name="l00477"></a>00477 <span class="comment"> * compression level from 0 (no compression) and 9 (maximum compression).</span>
<a name="l00478"></a>00478 <span class="comment"> *</span>
<a name="l00479"></a>00479 <span class="comment"> * @since New in 1.7.</span>
<a name="l00480"></a>00480 <span class="comment"> */</span>
<a name="l00481"></a>00481 <span class="keywordtype">void</span>
<a name="l00482"></a>00482 <a class="code" href="group__svn__delta__txt__delta.html#gac740dfd3301e44eadfee646be84b7638" title="Prepare to produce an svndiff-format diff from text delta windows.">svn_txdelta_to_svndiff3</a>(<a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> *handler,
<a name="l00483"></a>00483                         <span class="keywordtype">void</span> **handler_baton,
<a name="l00484"></a>00484                         <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *output,
<a name="l00485"></a>00485                         <span class="keywordtype">int</span> svndiff_version,
<a name="l00486"></a>00486                         <span class="keywordtype">int</span> compression_level,
<a name="l00487"></a>00487                         apr_pool_t *pool);
<a name="l00488"></a>00488 <span class="comment"></span>
<a name="l00489"></a>00489 <span class="comment">/** Similar to svn_txdelta_to_svndiff3(), but always using the SVN default</span>
<a name="l00490"></a>00490 <span class="comment"> * compression level (#SVN_DELTA_COMPRESSION_LEVEL_DEFAULT).</span>
<a name="l00491"></a>00491 <span class="comment"> *</span>
<a name="l00492"></a>00492 <span class="comment"> * @since New in 1.4.</span>
<a name="l00493"></a>00493 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l00494"></a>00494 <span class="comment"> */</span>
<a name="l00495"></a>00495 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00496"></a>00496 <span class="keywordtype">void</span>
<a name="l00497"></a>00497 <a class="code" href="group__svn__delta__txt__delta.html#gaf7354f923339d3338c3083e91bfee472" title="Similar to svn_txdelta_to_svndiff3(), but always using the SVN default compression level (SVN_DELTA_C...">svn_txdelta_to_svndiff2</a>(<a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> *handler,
<a name="l00498"></a>00498                         <span class="keywordtype">void</span> **handler_baton,
<a name="l00499"></a>00499                         <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *output,
<a name="l00500"></a>00500                         <span class="keywordtype">int</span> svndiff_version,
<a name="l00501"></a>00501                         apr_pool_t *pool);
<a name="l00502"></a>00502 <span class="comment"></span>
<a name="l00503"></a>00503 <span class="comment">/** Similar to svn_txdelta_to_svndiff2, but always using svndiff</span>
<a name="l00504"></a>00504 <span class="comment"> * version 0.</span>
<a name="l00505"></a>00505 <span class="comment"> *</span>
<a name="l00506"></a>00506 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.3 API.</span>
<a name="l00507"></a>00507 <span class="comment"> */</span>
<a name="l00508"></a>00508 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00509"></a>00509 <span class="keywordtype">void</span>
<a name="l00510"></a>00510 <a class="code" href="group__svn__delta__txt__delta.html#ga21c7186240b711f22c195bee3afcdcc1" title="Similar to svn_txdelta_to_svndiff2, but always using svndiff version 0.">svn_txdelta_to_svndiff</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *output,
<a name="l00511"></a>00511                        apr_pool_t *pool,
<a name="l00512"></a>00512                        <a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> *handler,
<a name="l00513"></a>00513                        <span class="keywordtype">void</span> **handler_baton);
<a name="l00514"></a>00514 <span class="comment"></span>
<a name="l00515"></a>00515 <span class="comment">/** Return a writable generic stream which will parse svndiff-format</span>
<a name="l00516"></a>00516 <span class="comment"> * data into a text delta, invoking @a handler with @a handler_baton</span>
<a name="l00517"></a>00517 <span class="comment"> * whenever a new window is ready.  If @a error_on_early_close is @c</span>
<a name="l00518"></a>00518 <span class="comment"> * TRUE, attempting to close this stream before it has handled the entire</span>
<a name="l00519"></a>00519 <span class="comment"> * svndiff data set will result in #SVN_ERR_SVNDIFF_UNEXPECTED_END,</span>
<a name="l00520"></a>00520 <span class="comment"> * else this error condition will be ignored.</span>
<a name="l00521"></a>00521 <span class="comment"> */</span>
<a name="l00522"></a>00522 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *
<a name="l00523"></a>00523 <a class="code" href="group__svn__delta__txt__delta.html#gaa1bf544259b22caf4652535e748ad1cf" title="Return a writable generic stream which will parse svndiff-format data into a text delta...">svn_txdelta_parse_svndiff</a>(<a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> handler,
<a name="l00524"></a>00524                           <span class="keywordtype">void</span> *handler_baton,
<a name="l00525"></a>00525                           <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> error_on_early_close,
<a name="l00526"></a>00526                           apr_pool_t *pool);
<a name="l00527"></a>00527 <span class="comment"></span>
<a name="l00528"></a>00528 <span class="comment">/**</span>
<a name="l00529"></a>00529 <span class="comment"> * Read and parse one delta window in svndiff format from the</span>
<a name="l00530"></a>00530 <span class="comment"> * readable stream @a stream and place it in @a *window, allocating</span>
<a name="l00531"></a>00531 <span class="comment"> * the result in @a pool.  The caller must take responsibility for</span>
<a name="l00532"></a>00532 <span class="comment"> * stripping off the four-byte &#39;SVN@&lt;ver@&gt;&#39; header at the beginning of</span>
<a name="l00533"></a>00533 <span class="comment"> * the svndiff document before reading the first window, and must</span>
<a name="l00534"></a>00534 <span class="comment"> * provide the version number (the value of the fourth byte) to each</span>
<a name="l00535"></a>00535 <span class="comment"> * invocation of this routine with the @a svndiff_version argument.</span>
<a name="l00536"></a>00536 <span class="comment"> *</span>
<a name="l00537"></a>00537 <span class="comment"> * @since New in 1.1.</span>
<a name="l00538"></a>00538 <span class="comment"> */</span>
<a name="l00539"></a>00539 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00540"></a>00540 <a class="code" href="group__svn__delta__txt__delta.html#ga57e1426719fe0dce03fbe227c7bc93e4" title="Read and parse one delta window in svndiff format from the readable stream stream and place it in *wi...">svn_txdelta_read_svndiff_window</a>(<a class="code" href="structsvn__txdelta__window__t.html" title="An svn_txdelta_window_t object describes how to reconstruct a contiguous section of the target string...">svn_txdelta_window_t</a> **window,
<a name="l00541"></a>00541                                 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l00542"></a>00542                                 <span class="keywordtype">int</span> svndiff_version,
<a name="l00543"></a>00543                                 apr_pool_t *pool);
<a name="l00544"></a>00544 <span class="comment"></span>
<a name="l00545"></a>00545 <span class="comment">/**</span>
<a name="l00546"></a>00546 <span class="comment"> * Read and skip one delta window in svndiff format from the</span>
<a name="l00547"></a>00547 <span class="comment"> * file @a file.  @a pool is used for temporary allocations.  The</span>
<a name="l00548"></a>00548 <span class="comment"> * caller must take responsibility for stripping off the four-byte</span>
<a name="l00549"></a>00549 <span class="comment"> * &#39;SVN@&lt;ver@&gt;&#39; header at the beginning of the svndiff document before</span>
<a name="l00550"></a>00550 <span class="comment"> * reading or skipping the first window, and must provide the version</span>
<a name="l00551"></a>00551 <span class="comment"> * number (the value of the fourth byte) to each invocation of this</span>
<a name="l00552"></a>00552 <span class="comment"> * routine with the @a svndiff_version argument.</span>
<a name="l00553"></a>00553 <span class="comment"> *</span>
<a name="l00554"></a>00554 <span class="comment"> * @since New in 1.1.</span>
<a name="l00555"></a>00555 <span class="comment"> */</span>
<a name="l00556"></a>00556 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00557"></a>00557 <a class="code" href="group__svn__delta__txt__delta.html#ga210cb0b472413741f63b903f413450f3" title="Read and skip one delta window in svndiff format from the file file.">svn_txdelta_skip_svndiff_window</a>(apr_file_t *file,
<a name="l00558"></a>00558                                 <span class="keywordtype">int</span> svndiff_version,
<a name="l00559"></a>00559                                 apr_pool_t *pool);
<a name="l00560"></a>00560 <span class="comment"></span>
<a name="l00561"></a>00561 <span class="comment">/** @} */</span>
<a name="l00562"></a>00562 
<a name="l00563"></a>00563 <span class="comment"></span>
<a name="l00564"></a>00564 <span class="comment">/** Traversing tree deltas.</span>
<a name="l00565"></a>00565 <span class="comment"> *</span>
<a name="l00566"></a>00566 <span class="comment"> * In Subversion, we&#39;ve got various producers and consumers of tree</span>
<a name="l00567"></a>00567 <span class="comment"> * deltas.</span>
<a name="l00568"></a>00568 <span class="comment"> *</span>
<a name="l00569"></a>00569 <span class="comment"> * In processing a `commit&#39; command:</span>
<a name="l00570"></a>00570 <span class="comment"> * - The client examines its working copy data, and produces a tree</span>
<a name="l00571"></a>00571 <span class="comment"> *   delta describing the changes to be committed.</span>
<a name="l00572"></a>00572 <span class="comment"> * - The client networking library consumes that delta, and sends them</span>
<a name="l00573"></a>00573 <span class="comment"> *   across the wire as an equivalent series of network requests (for</span>
<a name="l00574"></a>00574 <span class="comment"> *   example, to svnserve as an ra_svn protocol stream, or to an</span>
<a name="l00575"></a>00575 <span class="comment"> *   Apache httpd server as WebDAV commands)</span>
<a name="l00576"></a>00576 <span class="comment"> * - The server receives those requests and produces a tree delta ---</span>
<a name="l00577"></a>00577 <span class="comment"> *   hopefully equivalent to the one the client produced above.</span>
<a name="l00578"></a>00578 <span class="comment"> * - The Subversion server module consumes that delta and commits an</span>
<a name="l00579"></a>00579 <span class="comment"> *   appropriate transaction to the filesystem.</span>
<a name="l00580"></a>00580 <span class="comment"> *</span>
<a name="l00581"></a>00581 <span class="comment"> * In processing an `update&#39; command, the process is reversed:</span>
<a name="l00582"></a>00582 <span class="comment"> * - The Subversion server module talks to the filesystem and produces</span>
<a name="l00583"></a>00583 <span class="comment"> *   a tree delta describing the changes necessary to bring the</span>
<a name="l00584"></a>00584 <span class="comment"> *   client&#39;s working copy up to date.</span>
<a name="l00585"></a>00585 <span class="comment"> * - The server consumes this delta, and assembles a reply</span>
<a name="l00586"></a>00586 <span class="comment"> *   representing the appropriate changes.</span>
<a name="l00587"></a>00587 <span class="comment"> * - The client networking library receives that reply, and produces a</span>
<a name="l00588"></a>00588 <span class="comment"> *   tree delta --- hopefully equivalent to the one the Subversion</span>
<a name="l00589"></a>00589 <span class="comment"> *   server produced above.</span>
<a name="l00590"></a>00590 <span class="comment"> * - The working copy library consumes that delta, and makes the</span>
<a name="l00591"></a>00591 <span class="comment"> *   appropriate changes to the working copy.</span>
<a name="l00592"></a>00592 <span class="comment"> *</span>
<a name="l00593"></a>00593 <span class="comment"> * The simplest approach would be to represent tree deltas using the</span>
<a name="l00594"></a>00594 <span class="comment"> * obvious data structure.  To do an update, the server would</span>
<a name="l00595"></a>00595 <span class="comment"> * construct a delta structure, and the working copy library would</span>
<a name="l00596"></a>00596 <span class="comment"> * apply that structure to the working copy; the network layer&#39;s job</span>
<a name="l00597"></a>00597 <span class="comment"> * would simply be to get the structure across the net intact.</span>
<a name="l00598"></a>00598 <span class="comment"> *</span>
<a name="l00599"></a>00599 <span class="comment"> * However, we expect that these deltas will occasionally be too large</span>
<a name="l00600"></a>00600 <span class="comment"> * to fit in a typical workstation&#39;s swap area.  For example, in</span>
<a name="l00601"></a>00601 <span class="comment"> * checking out a 200Mb source tree, the entire source tree is</span>
<a name="l00602"></a>00602 <span class="comment"> * represented by a single tree delta.  So it&#39;s important to handle</span>
<a name="l00603"></a>00603 <span class="comment"> * deltas that are too large to fit in swap all at once.</span>
<a name="l00604"></a>00604 <span class="comment"> *</span>
<a name="l00605"></a>00605 <span class="comment"> * So instead of representing the tree delta explicitly, we define a</span>
<a name="l00606"></a>00606 <span class="comment"> * standard way for a consumer to process each piece of a tree delta</span>
<a name="l00607"></a>00607 <span class="comment"> * as soon as the producer creates it.  The #svn_delta_editor_t</span>
<a name="l00608"></a>00608 <span class="comment"> * structure is a set of callback functions to be defined by a delta</span>
<a name="l00609"></a>00609 <span class="comment"> * consumer, and invoked by a delta producer.  Each invocation of a</span>
<a name="l00610"></a>00610 <span class="comment"> * callback function describes a piece of the delta --- a file&#39;s</span>
<a name="l00611"></a>00611 <span class="comment"> * contents changing, something being renamed, etc.</span>
<a name="l00612"></a>00612 <span class="comment"> *</span>
<a name="l00613"></a>00613 <span class="comment"> * @defgroup svn_delta_tree_deltas Tree deltas</span>
<a name="l00614"></a>00614 <span class="comment"> * @{</span>
<a name="l00615"></a>00615 <span class="comment"> */</span>
<a name="l00616"></a>00616 <span class="comment"></span>
<a name="l00617"></a>00617 <span class="comment">/** A structure full of callback functions the delta source will invoke</span>
<a name="l00618"></a>00618 <span class="comment"> * as it produces the delta.</span>
<a name="l00619"></a>00619 <span class="comment"> *</span>
<a name="l00620"></a>00620 <span class="comment"> * @note Don&#39;t try to allocate one of these yourself.  Instead, always</span>
<a name="l00621"></a>00621 <span class="comment"> * use svn_delta_default_editor() or some other constructor, to ensure</span>
<a name="l00622"></a>00622 <span class="comment"> * that unused slots are filled in with no-op functions.</span>
<a name="l00623"></a>00623 <span class="comment"> *</span>
<a name="l00624"></a>00624 <span class="comment"> * &lt;h3&gt;Function Usage&lt;/h3&gt;</span>
<a name="l00625"></a>00625 <span class="comment"> *</span>
<a name="l00626"></a>00626 <span class="comment"> * Here&#39;s how to use these functions to express a tree delta.</span>
<a name="l00627"></a>00627 <span class="comment"> *</span>
<a name="l00628"></a>00628 <span class="comment"> * The delta consumer implements the callback functions described in</span>
<a name="l00629"></a>00629 <span class="comment"> * this structure, and the delta producer invokes them.  So the</span>
<a name="l00630"></a>00630 <span class="comment"> * caller (producer) is pushing tree delta data at the callee</span>
<a name="l00631"></a>00631 <span class="comment"> * (consumer).</span>
<a name="l00632"></a>00632 <span class="comment"> *</span>
<a name="l00633"></a>00633 <span class="comment"> * At the start of traversal, the consumer provides @a edit_baton, a</span>
<a name="l00634"></a>00634 <span class="comment"> * baton global to the entire delta edit.  If there is a target</span>
<a name="l00635"></a>00635 <span class="comment"> * revision that needs to be set for this operation, the producer</span>
<a name="l00636"></a>00636 <span class="comment"> * should call the @c set_target_revision function at this point.</span>
<a name="l00637"></a>00637 <span class="comment"> *</span>
<a name="l00638"></a>00638 <span class="comment"> * Next, if there are any tree deltas to express, the producer should</span>
<a name="l00639"></a>00639 <span class="comment"> * pass the @a edit_baton to the @c open_root function, to get a baton</span>
<a name="l00640"></a>00640 <span class="comment"> * representing root of the tree being edited.</span>
<a name="l00641"></a>00641 <span class="comment"> *</span>
<a name="l00642"></a>00642 <span class="comment"> * Most of the callbacks work in the obvious way:</span>
<a name="l00643"></a>00643 <span class="comment"> *</span>
<a name="l00644"></a>00644 <span class="comment"> *     @c delete_entry</span>
<a name="l00645"></a>00645 <span class="comment"> *     @c add_file</span>
<a name="l00646"></a>00646 <span class="comment"> *     @c add_directory</span>
<a name="l00647"></a>00647 <span class="comment"> *     @c open_file</span>
<a name="l00648"></a>00648 <span class="comment"> *     @c open_directory</span>
<a name="l00649"></a>00649 <span class="comment"> *</span>
<a name="l00650"></a>00650 <span class="comment"> * Each of these takes a directory baton, indicating the directory</span>
<a name="l00651"></a>00651 <span class="comment"> * in which the change takes place, and a @a path argument, giving the</span>
<a name="l00652"></a>00652 <span class="comment"> * path (relative to the root of the edit) of the file,</span>
<a name="l00653"></a>00653 <span class="comment"> * subdirectory, or directory entry to change. Editors will usually</span>
<a name="l00654"></a>00654 <span class="comment"> * want to join this relative path with some base stored in the edit</span>
<a name="l00655"></a>00655 <span class="comment"> * baton (e.g. a URL, a location in the OS filesystem).</span>
<a name="l00656"></a>00656 <span class="comment"> *</span>
<a name="l00657"></a>00657 <span class="comment"> * Since every call requires a parent directory baton, including</span>
<a name="l00658"></a>00658 <span class="comment"> * @c add_directory and @c open_directory, where do we ever get our</span>
<a name="l00659"></a>00659 <span class="comment"> * initial directory baton, to get things started?  The @c open_root</span>
<a name="l00660"></a>00660 <span class="comment"> * function returns a baton for the top directory of the change.  In</span>
<a name="l00661"></a>00661 <span class="comment"> * general, the producer needs to invoke the editor&#39;s @c open_root</span>
<a name="l00662"></a>00662 <span class="comment"> * function before it can get anything of interest done.</span>
<a name="l00663"></a>00663 <span class="comment"> *</span>
<a name="l00664"></a>00664 <span class="comment"> * While @c open_root provides a directory baton for the root of</span>
<a name="l00665"></a>00665 <span class="comment"> * the tree being changed, the @c add_directory and @c open_directory</span>
<a name="l00666"></a>00666 <span class="comment"> * callbacks provide batons for other directories.  Like the</span>
<a name="l00667"></a>00667 <span class="comment"> * callbacks above, they take a @a parent_baton and a relative path</span>
<a name="l00668"></a>00668 <span class="comment"> * @a path, and then return a new baton for the subdirectory being</span>
<a name="l00669"></a>00669 <span class="comment"> * created / modified --- @a child_baton.  The producer can then use</span>
<a name="l00670"></a>00670 <span class="comment"> * @a child_baton to make further changes in that subdirectory.</span>
<a name="l00671"></a>00671 <span class="comment"> *</span>
<a name="l00672"></a>00672 <span class="comment"> * So, if we already have subdirectories named `foo&#39; and `foo/bar&#39;,</span>
<a name="l00673"></a>00673 <span class="comment"> * then the producer can create a new file named `foo/bar/baz.c&#39; by</span>
<a name="l00674"></a>00674 <span class="comment"> * calling:</span>
<a name="l00675"></a>00675 <span class="comment"> *</span>
<a name="l00676"></a>00676 <span class="comment"> *    - @c open_root () --- yielding a baton @a root for the top directory</span>
<a name="l00677"></a>00677 <span class="comment"> *</span>
<a name="l00678"></a>00678 <span class="comment"> *    - @c open_directory (@a root, &quot;foo&quot;) --- yielding a baton @a f for `foo&#39;</span>
<a name="l00679"></a>00679 <span class="comment"> *</span>
<a name="l00680"></a>00680 <span class="comment"> *    - @c open_directory (@a f, &quot;foo/bar&quot;) --- yielding a baton @a b for</span>
<a name="l00681"></a>00681 <span class="comment"> *      `foo/bar&#39;</span>
<a name="l00682"></a>00682 <span class="comment"> *</span>
<a name="l00683"></a>00683 <span class="comment"> *    - @c add_file (@a b, &quot;foo/bar/baz.c&quot;)</span>
<a name="l00684"></a>00684 <span class="comment"> *</span>
<a name="l00685"></a>00685 <span class="comment"> * When the producer is finished making changes to a directory, it</span>
<a name="l00686"></a>00686 <span class="comment"> * should call @c close_directory.  This lets the consumer do any</span>
<a name="l00687"></a>00687 <span class="comment"> * necessary cleanup, and free the baton&#39;s storage.</span>
<a name="l00688"></a>00688 <span class="comment"> *</span>
<a name="l00689"></a>00689 <span class="comment"> * The @c add_file and @c open_file callbacks each return a baton</span>
<a name="l00690"></a>00690 <span class="comment"> * for the file being created or changed.  This baton can then be</span>
<a name="l00691"></a>00691 <span class="comment"> * passed to @c apply_textdelta to change the file&#39;s contents, or</span>
<a name="l00692"></a>00692 <span class="comment"> * @c change_file_prop to change the file&#39;s properties.  When the</span>
<a name="l00693"></a>00693 <span class="comment"> * producer is finished making changes to a file, it should call</span>
<a name="l00694"></a>00694 <span class="comment"> * @c close_file, to let the consumer clean up and free the baton.</span>
<a name="l00695"></a>00695 <span class="comment"> *</span>
<a name="l00696"></a>00696 <span class="comment"> * The @c add_file and @c add_directory functions each take arguments</span>
<a name="l00697"></a>00697 <span class="comment"> * @a copyfrom_path and @a copyfrom_revision.  If @a copyfrom_path is</span>
<a name="l00698"></a>00698 <span class="comment"> * non-@c NULL, then @a copyfrom_path and @a copyfrom_revision indicate where</span>
<a name="l00699"></a>00699 <span class="comment"> * the file or directory should be copied from (to create the file</span>
<a name="l00700"></a>00700 <span class="comment"> * or directory being added).  In that case, @a copyfrom_path must be</span>
<a name="l00701"></a>00701 <span class="comment"> * either a path relative to the root of the edit, or a URI from the</span>
<a name="l00702"></a>00702 <span class="comment"> * repository being edited.  If @a copyfrom_path is @c NULL, then @a</span>
<a name="l00703"></a>00703 <span class="comment"> * copyfrom_revision must be #SVN_INVALID_REVNUM; it is invalid to</span>
<a name="l00704"></a>00704 <span class="comment"> * pass a mix of valid and invalid copyfrom arguments.</span>
<a name="l00705"></a>00705 <span class="comment"> *</span>
<a name="l00706"></a>00706 <span class="comment"> *</span>
<a name="l00707"></a>00707 <span class="comment"> * &lt;h3&gt;Function Call Ordering&lt;/h3&gt;</span>
<a name="l00708"></a>00708 <span class="comment"> *</span>
<a name="l00709"></a>00709 <span class="comment"> * There are six restrictions on the order in which the producer</span>
<a name="l00710"></a>00710 <span class="comment"> * may use the batons:</span>
<a name="l00711"></a>00711 <span class="comment"> *</span>
<a name="l00712"></a>00712 <span class="comment"> * 1. The producer may call @c open_directory, @c add_directory,</span>
<a name="l00713"></a>00713 <span class="comment"> *    @c open_file, @c add_file at most once on any given directory</span>
<a name="l00714"></a>00714 <span class="comment"> *    entry.  @c delete_entry may be called at most once on any given</span>
<a name="l00715"></a>00715 <span class="comment"> *    directory entry and may later be followed by @c add_directory or</span>
<a name="l00716"></a>00716 <span class="comment"> *    @c add_file on the same directory entry.  @c delete_entry may</span>
<a name="l00717"></a>00717 <span class="comment"> *    not be called on any directory entry after @c open_directory,</span>
<a name="l00718"></a>00718 <span class="comment"> *    @c add_directory, @c open_file or @c add_file has been called on</span>
<a name="l00719"></a>00719 <span class="comment"> *    that directory entry.</span>
<a name="l00720"></a>00720 <span class="comment"> *</span>
<a name="l00721"></a>00721 <span class="comment"> * 2. The producer may not close a directory baton until it has</span>
<a name="l00722"></a>00722 <span class="comment"> *    closed all batons for its subdirectories.</span>
<a name="l00723"></a>00723 <span class="comment"> *</span>
<a name="l00724"></a>00724 <span class="comment"> * 3. When a producer calls @c open_directory or @c add_directory,</span>
<a name="l00725"></a>00725 <span class="comment"> *    it must specify the most recently opened of the currently open</span>
<a name="l00726"></a>00726 <span class="comment"> *    directory batons.  Put another way, the producer cannot have</span>
<a name="l00727"></a>00727 <span class="comment"> *    two sibling directory batons open at the same time.</span>
<a name="l00728"></a>00728 <span class="comment"> *</span>
<a name="l00729"></a>00729 <span class="comment"> * 4. A producer must call @c change_dir_prop on a directory either</span>
<a name="l00730"></a>00730 <span class="comment"> *    before opening any of the directory&#39;s subdirs or after closing</span>
<a name="l00731"></a>00731 <span class="comment"> *    them, but not in the middle.</span>
<a name="l00732"></a>00732 <span class="comment"> *</span>
<a name="l00733"></a>00733 <span class="comment"> * 5. When the producer calls @c open_file or @c add_file, either:</span>
<a name="l00734"></a>00734 <span class="comment"> *</span>
<a name="l00735"></a>00735 <span class="comment"> *    (a) The producer must follow with any changes to the file</span>
<a name="l00736"></a>00736 <span class="comment"> *    (@c change_file_prop and/or @c apply_textdelta, as applicable),</span>
<a name="l00737"></a>00737 <span class="comment"> *    followed by a @c close_file call, before issuing any other file</span>
<a name="l00738"></a>00738 <span class="comment"> *    or directory calls, or</span>
<a name="l00739"></a>00739 <span class="comment"> *</span>
<a name="l00740"></a>00740 <span class="comment"> *    (b) The producer must follow with a @c change_file_prop call if</span>
<a name="l00741"></a>00741 <span class="comment"> *    it is applicable, before issuing any other file or directory</span>
<a name="l00742"></a>00742 <span class="comment"> *    calls; later, after all directory batons including the root</span>
<a name="l00743"></a>00743 <span class="comment"> *    have been closed, the producer must issue @c apply_textdelta</span>
<a name="l00744"></a>00744 <span class="comment"> *    and @c close_file calls.</span>
<a name="l00745"></a>00745 <span class="comment"> *</span>
<a name="l00746"></a>00746 <span class="comment"> * 6. When the producer calls @c apply_textdelta, it must make all of</span>
<a name="l00747"></a>00747 <span class="comment"> *    the window handler calls (including the @c NULL window at the</span>
<a name="l00748"></a>00748 <span class="comment"> *    end) before issuing any other #svn_delta_editor_t calls.</span>
<a name="l00749"></a>00749 <span class="comment"> *</span>
<a name="l00750"></a>00750 <span class="comment"> * So, the producer needs to use directory and file batons as if it</span>
<a name="l00751"></a>00751 <span class="comment"> * is doing a single depth-first traversal of the tree, with the</span>
<a name="l00752"></a>00752 <span class="comment"> * exception that the producer may keep file batons open in order to</span>
<a name="l00753"></a>00753 <span class="comment"> * make @c apply_textdelta calls at the end.</span>
<a name="l00754"></a>00754 <span class="comment"> *</span>
<a name="l00755"></a>00755 <span class="comment"> *</span>
<a name="l00756"></a>00756 <span class="comment"> * &lt;h3&gt;Pool Usage&lt;/h3&gt;</span>
<a name="l00757"></a>00757 <span class="comment"> *</span>
<a name="l00758"></a>00758 <span class="comment"> * Many editor functions are invoked multiple times, in a sequence</span>
<a name="l00759"></a>00759 <span class="comment"> * determined by the editor &quot;driver&quot;. The driver is responsible for</span>
<a name="l00760"></a>00760 <span class="comment"> * creating a pool for use on each iteration of the editor function,</span>
<a name="l00761"></a>00761 <span class="comment"> * and clearing that pool between each iteration. The driver passes</span>
<a name="l00762"></a>00762 <span class="comment"> * the appropriate pool on each function invocation.</span>
<a name="l00763"></a>00763 <span class="comment"> *</span>
<a name="l00764"></a>00764 <span class="comment"> * Based on the requirement of calling the editor functions in a</span>
<a name="l00765"></a>00765 <span class="comment"> * depth-first style, it is usually customary for the driver to similarly</span>
<a name="l00766"></a>00766 <span class="comment"> * nest the pools. However, this is only a safety feature to ensure</span>
<a name="l00767"></a>00767 <span class="comment"> * that pools associated with deeper items are always cleared when the</span>
<a name="l00768"></a>00768 <span class="comment"> * top-level items are also cleared. The interface does not assume, nor</span>
<a name="l00769"></a>00769 <span class="comment"> * require, any particular organization of the pools passed to these</span>
<a name="l00770"></a>00770 <span class="comment"> * functions. In fact, if &quot;postfix deltas&quot; are used for files, the file</span>
<a name="l00771"></a>00771 <span class="comment"> * pools definitely need to live outside the scope of their parent</span>
<a name="l00772"></a>00772 <span class="comment"> * directories&#39; pools.</span>
<a name="l00773"></a>00773 <span class="comment"> *</span>
<a name="l00774"></a>00774 <span class="comment"> * Note that close_directory can be called *before* a file in that</span>
<a name="l00775"></a>00775 <span class="comment"> * directory has been closed. That is, the directory&#39;s baton is</span>
<a name="l00776"></a>00776 <span class="comment"> * closed before the file&#39;s baton. The implication is that</span>
<a name="l00777"></a>00777 <span class="comment"> * @c apply_textdelta and @c close_file should not refer to a parent</span>
<a name="l00778"></a>00778 <span class="comment"> * directory baton UNLESS the editor has taken precautions to</span>
<a name="l00779"></a>00779 <span class="comment"> * allocate it in a pool of the appropriate lifetime (the @a dir_pool</span>
<a name="l00780"></a>00780 <span class="comment"> * passed to @c open_directory and @c add_directory definitely does not</span>
<a name="l00781"></a>00781 <span class="comment"> * have the proper lifetime). In general, it is recommended to simply</span>
<a name="l00782"></a>00782 <span class="comment"> * avoid keeping a parent directory baton in a file baton.</span>
<a name="l00783"></a>00783 <span class="comment"> *</span>
<a name="l00784"></a>00784 <span class="comment"> *</span>
<a name="l00785"></a>00785 <span class="comment"> * &lt;h3&gt;Errors&lt;/h3&gt;</span>
<a name="l00786"></a>00786 <span class="comment"> *</span>
<a name="l00787"></a>00787 <span class="comment"> * At least one implementation of the editor interface is</span>
<a name="l00788"></a>00788 <span class="comment"> * asynchronous; an error from one operation may be detected some</span>
<a name="l00789"></a>00789 <span class="comment"> * number of operations later.  As a result, an editor driver must not</span>
<a name="l00790"></a>00790 <span class="comment"> * assume that an error from an editing function resulted from the</span>
<a name="l00791"></a>00791 <span class="comment"> * particular operation being detected.  Moreover, once an editing</span>
<a name="l00792"></a>00792 <span class="comment"> * function returns an error, the edit is dead; the only further</span>
<a name="l00793"></a>00793 <span class="comment"> * operation which may be called on the editor is abort_edit.</span>
<a name="l00794"></a>00794 <span class="comment"> */</span>
<a name="l00795"></a><a class="code" href="structsvn__delta__editor__t.html">00795</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a>
<a name="l00796"></a>00796 {<span class="comment"></span>
<a name="l00797"></a>00797 <span class="comment">  /** Set the target revision for this edit to @a target_revision.  This</span>
<a name="l00798"></a>00798 <span class="comment">   * call, if used, should precede all other editor calls.</span>
<a name="l00799"></a>00799 <span class="comment">   *</span>
<a name="l00800"></a>00800 <span class="comment">   * @note This is typically used only for server-&gt;client update-type</span>
<a name="l00801"></a>00801 <span class="comment">   * operations.  It doesn&#39;t really make much sense for commit-type</span>
<a name="l00802"></a>00802 <span class="comment">   * operations, because the revision of a commit isn&#39;t known until</span>
<a name="l00803"></a>00803 <span class="comment">   * the commit is finalized.</span>
<a name="l00804"></a>00804 <span class="comment">   *</span>
<a name="l00805"></a>00805 <span class="comment">   * Any temporary allocations may be performed in @a scratch_pool.</span>
<a name="l00806"></a>00806 <span class="comment">   */</span>
<a name="l00807"></a><a class="code" href="structsvn__delta__editor__t.html#a4375094b3fb8a42093a00ce6207db227">00807</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*set_target_revision)(<span class="keywordtype">void</span> *edit_baton,
<a name="l00808"></a>00808                                       <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> target_revision,
<a name="l00809"></a>00809                                       apr_pool_t *scratch_pool);
<a name="l00810"></a>00810 <span class="comment"></span>
<a name="l00811"></a>00811 <span class="comment">  /** Set @a *root_baton to a baton for the top directory of the change.</span>
<a name="l00812"></a>00812 <span class="comment">   * (This is the top of the subtree being changed, not necessarily</span>
<a name="l00813"></a>00813 <span class="comment">   * the root of the filesystem.)  As with any other directory baton, the</span>
<a name="l00814"></a>00814 <span class="comment">   * producer should call @c close_directory on @a root_baton when done.</span>
<a name="l00815"></a>00815 <span class="comment">   * And as with other @c open_* calls, the @a base_revision here is the</span>
<a name="l00816"></a>00816 <span class="comment">   * current revision of the directory (before getting bumped up to the</span>
<a name="l00817"></a>00817 <span class="comment">   * new target revision set with @c set_target_revision).</span>
<a name="l00818"></a>00818 <span class="comment">   *</span>
<a name="l00819"></a>00819 <span class="comment">   * Allocations for the returned @a root_baton should be performed in</span>
<a name="l00820"></a>00820 <span class="comment">   * @a result_pool. It is also typical to (possibly) save this pool for</span>
<a name="l00821"></a>00821 <span class="comment">   * later usage by @c close_directory.</span>
<a name="l00822"></a>00822 <span class="comment">   */</span>
<a name="l00823"></a><a class="code" href="structsvn__delta__editor__t.html#aafad22a55f10d21d603b4ba6282c34ac">00823</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*open_root)(<span class="keywordtype">void</span> *edit_baton,
<a name="l00824"></a>00824                             <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> base_revision,
<a name="l00825"></a>00825                             apr_pool_t *result_pool,
<a name="l00826"></a>00826                             <span class="keywordtype">void</span> **root_baton);
<a name="l00827"></a>00827 
<a name="l00828"></a>00828 <span class="comment"></span>
<a name="l00829"></a>00829 <span class="comment">  /** Remove the directory entry named @a path, a child of the directory</span>
<a name="l00830"></a>00830 <span class="comment">   * represented by @a parent_baton.  If @a revision is a valid</span>
<a name="l00831"></a>00831 <span class="comment">   * revision number, it is used as a sanity check to ensure that you</span>
<a name="l00832"></a>00832 <span class="comment">   * are really removing the revision of @a path that you think you are.</span>
<a name="l00833"></a>00833 <span class="comment">   *</span>
<a name="l00834"></a>00834 <span class="comment">   * Any temporary allocations may be performed in @a scratch_pool.</span>
<a name="l00835"></a>00835 <span class="comment">   *</span>
<a name="l00836"></a>00836 <span class="comment">   * @note The @a revision parameter is typically used only for</span>
<a name="l00837"></a>00837 <span class="comment">   * client-&gt;server commit-type operations, allowing the server to</span>
<a name="l00838"></a>00838 <span class="comment">   * verify that it is deleting what the client thinks it should be</span>
<a name="l00839"></a>00839 <span class="comment">   * deleting.  It only really makes sense in the opposite direction</span>
<a name="l00840"></a>00840 <span class="comment">   * (during server-&gt;client update-type operations) when the trees</span>
<a name="l00841"></a>00841 <span class="comment">   * whose delta is being described are ancestrally related (that is,</span>
<a name="l00842"></a>00842 <span class="comment">   * one tree is an ancestor of the other).</span>
<a name="l00843"></a>00843 <span class="comment">   */</span>
<a name="l00844"></a><a class="code" href="structsvn__delta__editor__t.html#a503deefa3a3ddab167d466ae0d1540d3">00844</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*delete_entry)(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00845"></a>00845                                <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> revision,
<a name="l00846"></a>00846                                <span class="keywordtype">void</span> *parent_baton,
<a name="l00847"></a>00847                                apr_pool_t *scratch_pool);
<a name="l00848"></a>00848 
<a name="l00849"></a>00849 <span class="comment"></span>
<a name="l00850"></a>00850 <span class="comment">  /** We are going to add a new subdirectory named @a path.  We will use</span>
<a name="l00851"></a>00851 <span class="comment">   * the value this callback stores in @a *child_baton as the</span>
<a name="l00852"></a>00852 <span class="comment">   * @a parent_baton for further changes in the new subdirectory.</span>
<a name="l00853"></a>00853 <span class="comment">   *</span>
<a name="l00854"></a>00854 <span class="comment">   * If @a copyfrom_path is non-@c NULL, this add has history (i.e., is a</span>
<a name="l00855"></a>00855 <span class="comment">   * copy), and the origin of the copy may be recorded as</span>
<a name="l00856"></a>00856 <span class="comment">   * @a copyfrom_path under @a copyfrom_revision.</span>
<a name="l00857"></a>00857 <span class="comment">   *</span>
<a name="l00858"></a>00858 <span class="comment">   * Allocations for the returned @a child_baton should be performed in</span>
<a name="l00859"></a>00859 <span class="comment">   * @a result_pool. It is also typical to (possibly) save this pool for</span>
<a name="l00860"></a>00860 <span class="comment">   * later usage by @c close_directory.</span>
<a name="l00861"></a>00861 <span class="comment">   */</span>
<a name="l00862"></a><a class="code" href="structsvn__delta__editor__t.html#a02b3b28501ae8bcab5de36e468aa359b">00862</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*add_directory)(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00863"></a>00863                                 <span class="keywordtype">void</span> *parent_baton,
<a name="l00864"></a>00864                                 <span class="keyword">const</span> <span class="keywordtype">char</span> *copyfrom_path,
<a name="l00865"></a>00865                                 <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> copyfrom_revision,
<a name="l00866"></a>00866                                 apr_pool_t *result_pool,
<a name="l00867"></a>00867                                 <span class="keywordtype">void</span> **child_baton);
<a name="l00868"></a>00868 <span class="comment"></span>
<a name="l00869"></a>00869 <span class="comment">  /** We are going to make changes in a subdirectory (of the directory</span>
<a name="l00870"></a>00870 <span class="comment">   * identified by @a parent_baton). The subdirectory is specified by</span>
<a name="l00871"></a>00871 <span class="comment">   * @a path. The callback must store a value in @a *child_baton that</span>
<a name="l00872"></a>00872 <span class="comment">   * should be used as the @a parent_baton for subsequent changes in this</span>
<a name="l00873"></a>00873 <span class="comment">   * subdirectory.  If a valid revnum, @a base_revision is the current</span>
<a name="l00874"></a>00874 <span class="comment">   * revision of the subdirectory.</span>
<a name="l00875"></a>00875 <span class="comment">   *</span>
<a name="l00876"></a>00876 <span class="comment">   * Allocations for the returned @a child_baton should be performed in</span>
<a name="l00877"></a>00877 <span class="comment">   * @a result_pool. It is also typical to (possibly) save this pool for</span>
<a name="l00878"></a>00878 <span class="comment">   * later usage by @c close_directory.</span>
<a name="l00879"></a>00879 <span class="comment">   */</span>
<a name="l00880"></a><a class="code" href="structsvn__delta__editor__t.html#afb8c0de1130a873b8326b628101d64b2">00880</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*open_directory)(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00881"></a>00881                                  <span class="keywordtype">void</span> *parent_baton,
<a name="l00882"></a>00882                                  <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> base_revision,
<a name="l00883"></a>00883                                  apr_pool_t *result_pool,
<a name="l00884"></a>00884                                  <span class="keywordtype">void</span> **child_baton);
<a name="l00885"></a>00885 <span class="comment"></span>
<a name="l00886"></a>00886 <span class="comment">  /** Change the value of a directory&#39;s property.</span>
<a name="l00887"></a>00887 <span class="comment">   * - @a dir_baton specifies the directory whose property should change.</span>
<a name="l00888"></a>00888 <span class="comment">   * - @a name is the name of the property to change.</span>
<a name="l00889"></a>00889 <span class="comment">   * - @a value is the new (final) value of the property, or @c NULL if the</span>
<a name="l00890"></a>00890 <span class="comment">   *   property should be removed altogether.</span>
<a name="l00891"></a>00891 <span class="comment">   *</span>
<a name="l00892"></a>00892 <span class="comment">   * The callback is guaranteed to be called exactly once for each property</span>
<a name="l00893"></a>00893 <span class="comment">   * whose value differs between the start and the end of the edit.</span>
<a name="l00894"></a>00894 <span class="comment">   *</span>
<a name="l00895"></a>00895 <span class="comment">   * Any temporary allocations may be performed in @a scratch_pool.</span>
<a name="l00896"></a>00896 <span class="comment">   */</span>
<a name="l00897"></a><a class="code" href="structsvn__delta__editor__t.html#a180a3aa344e970a469f2c77279578c17">00897</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*change_dir_prop)(<span class="keywordtype">void</span> *dir_baton,
<a name="l00898"></a>00898                                   <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l00899"></a>00899                                   <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *value,
<a name="l00900"></a>00900                                   apr_pool_t *scratch_pool);
<a name="l00901"></a>00901 <span class="comment"></span>
<a name="l00902"></a>00902 <span class="comment">  /** We are done processing a subdirectory, whose baton is @a dir_baton</span>
<a name="l00903"></a>00903 <span class="comment">   * (set by @c add_directory or @c open_directory).  We won&#39;t be using</span>
<a name="l00904"></a>00904 <span class="comment">   * the baton any more, so whatever resources it refers to may now be</span>
<a name="l00905"></a>00905 <span class="comment">   * freed.</span>
<a name="l00906"></a>00906 <span class="comment">   *</span>
<a name="l00907"></a>00907 <span class="comment">   * Any temporary allocations may be performed in @a scratch_pool.</span>
<a name="l00908"></a>00908 <span class="comment">   */</span>
<a name="l00909"></a><a class="code" href="structsvn__delta__editor__t.html#a0ba478ecca3d28a3cd7bbf3c1da8f9c8">00909</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*close_directory)(<span class="keywordtype">void</span> *dir_baton,
<a name="l00910"></a>00910                                   apr_pool_t *scratch_pool);
<a name="l00911"></a>00911 
<a name="l00912"></a>00912 <span class="comment"></span>
<a name="l00913"></a>00913 <span class="comment">  /** In the directory represented by @a parent_baton, indicate that</span>
<a name="l00914"></a>00914 <span class="comment">   * @a path is present as a subdirectory in the edit source, but</span>
<a name="l00915"></a>00915 <span class="comment">   * cannot be conveyed to the edit consumer (perhaps because of</span>
<a name="l00916"></a>00916 <span class="comment">   * authorization restrictions).</span>
<a name="l00917"></a>00917 <span class="comment">   *</span>
<a name="l00918"></a>00918 <span class="comment">   * Any temporary allocations may be performed in @a scratch_pool.</span>
<a name="l00919"></a>00919 <span class="comment">   */</span>
<a name="l00920"></a><a class="code" href="structsvn__delta__editor__t.html#a4e32c6977e6576c3e6e47e08a8036356">00920</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*absent_directory)(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00921"></a>00921                                    <span class="keywordtype">void</span> *parent_baton,
<a name="l00922"></a>00922                                    apr_pool_t *scratch_pool);
<a name="l00923"></a>00923 <span class="comment"></span>
<a name="l00924"></a>00924 <span class="comment">  /** We are going to add a new file named @a path.  The callback can</span>
<a name="l00925"></a>00925 <span class="comment">   * store a baton for this new file in @a **file_baton; whatever value</span>
<a name="l00926"></a>00926 <span class="comment">   * it stores there should be passed through to @c apply_textdelta.</span>
<a name="l00927"></a>00927 <span class="comment">   *</span>
<a name="l00928"></a>00928 <span class="comment">   * If @a copyfrom_path is non-@c NULL, this add has history (i.e., is a</span>
<a name="l00929"></a>00929 <span class="comment">   * copy), and the origin of the copy may be recorded as</span>
<a name="l00930"></a>00930 <span class="comment">   * @a copyfrom_path under @a copyfrom_revision.</span>
<a name="l00931"></a>00931 <span class="comment">   *</span>
<a name="l00932"></a>00932 <span class="comment">   * Allocations for the returned @a file_baton should be performed in</span>
<a name="l00933"></a>00933 <span class="comment">   * @a result_pool. It is also typical to save this pool for later usage</span>
<a name="l00934"></a>00934 <span class="comment">   * by @c apply_textdelta and possibly @c close_file.</span>
<a name="l00935"></a>00935 <span class="comment">   *</span>
<a name="l00936"></a>00936 <span class="comment">   * @note Because the editor driver could be employing the &quot;postfix</span>
<a name="l00937"></a>00937 <span class="comment">   * deltas&quot; paradigm, @a result_pool could potentially be relatively</span>
<a name="l00938"></a>00938 <span class="comment">   * long-lived.  Every file baton created by the editor for a given</span>
<a name="l00939"></a>00939 <span class="comment">   * editor drive might be resident in memory similtaneously.  Editor</span>
<a name="l00940"></a>00940 <span class="comment">   * implementations should ideally keep their file batons as</span>
<a name="l00941"></a>00941 <span class="comment">   * conservative (memory-usage-wise) as possible, and use @a result_pool</span>
<a name="l00942"></a>00942 <span class="comment">   * only for those batons.  (Consider using a subpool of @a result_pool</span>
<a name="l00943"></a>00943 <span class="comment">   * for scratch work, destroying the subpool before exiting this</span>
<a name="l00944"></a>00944 <span class="comment">   * function&#39;s implementation.)</span>
<a name="l00945"></a>00945 <span class="comment">   */</span>
<a name="l00946"></a><a class="code" href="structsvn__delta__editor__t.html#a5ae525cca4fa62884c9ffba34a2f1785">00946</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*add_file)(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00947"></a>00947                            <span class="keywordtype">void</span> *parent_baton,
<a name="l00948"></a>00948                            <span class="keyword">const</span> <span class="keywordtype">char</span> *copyfrom_path,
<a name="l00949"></a>00949                            <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> copyfrom_revision,
<a name="l00950"></a>00950                            apr_pool_t *result_pool,
<a name="l00951"></a>00951                            <span class="keywordtype">void</span> **file_baton);
<a name="l00952"></a>00952 <span class="comment"></span>
<a name="l00953"></a>00953 <span class="comment">  /** We are going to make change to a file named @a path, which resides</span>
<a name="l00954"></a>00954 <span class="comment">   * in the directory identified by @a parent_baton.</span>
<a name="l00955"></a>00955 <span class="comment">   *</span>
<a name="l00956"></a>00956 <span class="comment">   * The callback can store a baton for this new file in @a **file_baton;</span>
<a name="l00957"></a>00957 <span class="comment">   * whatever value it stores there should be passed through to</span>
<a name="l00958"></a>00958 <span class="comment">   * @c apply_textdelta.  If a valid revnum, @a base_revision is the</span>
<a name="l00959"></a>00959 <span class="comment">   * current revision of the file.</span>
<a name="l00960"></a>00960 <span class="comment">   *</span>
<a name="l00961"></a>00961 <span class="comment">   * Allocations for the returned @a file_baton should be performed in</span>
<a name="l00962"></a>00962 <span class="comment">   * @a result_pool. It is also typical to save this pool for later usage</span>
<a name="l00963"></a>00963 <span class="comment">   * by @c apply_textdelta and possibly @c close_file.</span>
<a name="l00964"></a>00964 <span class="comment">   *</span>
<a name="l00965"></a>00965 <span class="comment">   * @note See note about memory usage on @a add_file, which also</span>
<a name="l00966"></a>00966 <span class="comment">   * applies here.</span>
<a name="l00967"></a>00967 <span class="comment">   */</span>
<a name="l00968"></a><a class="code" href="structsvn__delta__editor__t.html#a00fdc00d372b4db32a08404a1deb8df0">00968</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*open_file)(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00969"></a>00969                             <span class="keywordtype">void</span> *parent_baton,
<a name="l00970"></a>00970                             <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> base_revision,
<a name="l00971"></a>00971                             apr_pool_t *result_pool,
<a name="l00972"></a>00972                             <span class="keywordtype">void</span> **file_baton);
<a name="l00973"></a>00973 <span class="comment"></span>
<a name="l00974"></a>00974 <span class="comment">  /** Apply a text delta, yielding the new revision of a file.</span>
<a name="l00975"></a>00975 <span class="comment">   *</span>
<a name="l00976"></a>00976 <span class="comment">   * @a file_baton indicates the file we&#39;re creating or updating, and the</span>
<a name="l00977"></a>00977 <span class="comment">   * ancestor file on which it is based; it is the baton set by some</span>
<a name="l00978"></a>00978 <span class="comment">   * prior @c add_file or @c open_file callback.</span>
<a name="l00979"></a>00979 <span class="comment">   *</span>
<a name="l00980"></a>00980 <span class="comment">   * The callback should set @a *handler to a text delta window</span>
<a name="l00981"></a>00981 <span class="comment">   * handler; we will then call @a *handler on successive text</span>
<a name="l00982"></a>00982 <span class="comment">   * delta windows as we receive them.  The callback should set</span>
<a name="l00983"></a>00983 <span class="comment">   * @a *handler_baton to the value we should pass as the @a baton</span>
<a name="l00984"></a>00984 <span class="comment">   * argument to @a *handler. These values should be allocated within</span>
<a name="l00985"></a>00985 <span class="comment">   * @a result_pool.</span>
<a name="l00986"></a>00986 <span class="comment">   *</span>
<a name="l00987"></a>00987 <span class="comment">   * @a base_checksum is the hex MD5 digest for the base text against</span>
<a name="l00988"></a>00988 <span class="comment">   * which the delta is being applied; it is ignored if NULL, and may</span>
<a name="l00989"></a>00989 <span class="comment">   * be ignored even if not NULL.  If it is not ignored, it must match</span>
<a name="l00990"></a>00990 <span class="comment">   * the checksum of the base text against which svndiff data is being</span>
<a name="l00991"></a>00991 <span class="comment">   * applied; if it does not, @c apply_textdelta or the @a *handler call</span>
<a name="l00992"></a>00992 <span class="comment">   * which detects the mismatch will return the error</span>
<a name="l00993"></a>00993 <span class="comment">   * SVN_ERR_CHECKSUM_MISMATCH (if there is no base text, there may</span>
<a name="l00994"></a>00994 <span class="comment">   * still be an error if @a base_checksum is neither NULL nor the hex</span>
<a name="l00995"></a>00995 <span class="comment">   * MD5 checksum of the empty string).</span>
<a name="l00996"></a>00996 <span class="comment">   */</span>
<a name="l00997"></a><a class="code" href="structsvn__delta__editor__t.html#a226fe466b1c6fbe66c0145fae86e3baa">00997</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*apply_textdelta)(<span class="keywordtype">void</span> *file_baton,
<a name="l00998"></a>00998                                   <span class="keyword">const</span> <span class="keywordtype">char</span> *base_checksum,
<a name="l00999"></a>00999                                   apr_pool_t *result_pool,
<a name="l01000"></a>01000                                   <a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> *handler,
<a name="l01001"></a>01001                                   <span class="keywordtype">void</span> **handler_baton);
<a name="l01002"></a>01002 <span class="comment"></span>
<a name="l01003"></a>01003 <span class="comment">  /** Change the value of a file&#39;s property.</span>
<a name="l01004"></a>01004 <span class="comment">   * - @a file_baton specifies the file whose property should change.</span>
<a name="l01005"></a>01005 <span class="comment">   * - @a name is the name of the property to change.</span>
<a name="l01006"></a>01006 <span class="comment">   * - @a value is the new (final) value of the property, or @c NULL if the</span>
<a name="l01007"></a>01007 <span class="comment">   *   property should be removed altogether.</span>
<a name="l01008"></a>01008 <span class="comment">   *</span>
<a name="l01009"></a>01009 <span class="comment">   * The callback is guaranteed to be called exactly once for each property</span>
<a name="l01010"></a>01010 <span class="comment">   * whose value differs between the start and the end of the edit.</span>
<a name="l01011"></a>01011 <span class="comment">   *</span>
<a name="l01012"></a>01012 <span class="comment">   * Any temporary allocations may be performed in @a scratch_pool.</span>
<a name="l01013"></a>01013 <span class="comment">   */</span>
<a name="l01014"></a><a class="code" href="structsvn__delta__editor__t.html#aa0a2546f4b6d93089d2e743771fa3006">01014</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*change_file_prop)(<span class="keywordtype">void</span> *file_baton,
<a name="l01015"></a>01015                                    <span class="keyword">const</span> <span class="keywordtype">char</span> *name,
<a name="l01016"></a>01016                                    <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *value,
<a name="l01017"></a>01017                                    apr_pool_t *scratch_pool);
<a name="l01018"></a>01018 <span class="comment"></span>
<a name="l01019"></a>01019 <span class="comment">  /** We are done processing a file, whose baton is @a file_baton (set by</span>
<a name="l01020"></a>01020 <span class="comment">   * @c add_file or @c open_file).  We won&#39;t be using the baton any</span>
<a name="l01021"></a>01021 <span class="comment">   * more, so whatever resources it refers to may now be freed.</span>
<a name="l01022"></a>01022 <span class="comment">   *</span>
<a name="l01023"></a>01023 <span class="comment">   * @a text_checksum is the hex MD5 digest for the fulltext that</span>
<a name="l01024"></a>01024 <span class="comment">   * resulted from a delta application, see @c apply_textdelta.  The</span>
<a name="l01025"></a>01025 <span class="comment">   * checksum is ignored if NULL.  If not null, it is compared to the</span>
<a name="l01026"></a>01026 <span class="comment">   * checksum of the new fulltext, and the error</span>
<a name="l01027"></a>01027 <span class="comment">   * SVN_ERR_CHECKSUM_MISMATCH is returned if they do not match.  If</span>
<a name="l01028"></a>01028 <span class="comment">   * there is no new fulltext, @a text_checksum is ignored.</span>
<a name="l01029"></a>01029 <span class="comment">   *</span>
<a name="l01030"></a>01030 <span class="comment">   * Any temporary allocations may be performed in @a scratch_pool.</span>
<a name="l01031"></a>01031 <span class="comment">   */</span>
<a name="l01032"></a><a class="code" href="structsvn__delta__editor__t.html#a38de9ed7cf0a80ebfd8069ca6738db9b">01032</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*close_file)(<span class="keywordtype">void</span> *file_baton,
<a name="l01033"></a>01033                              <span class="keyword">const</span> <span class="keywordtype">char</span> *text_checksum,
<a name="l01034"></a>01034                              apr_pool_t *scratch_pool);
<a name="l01035"></a>01035 <span class="comment"></span>
<a name="l01036"></a>01036 <span class="comment">  /** In the directory represented by @a parent_baton, indicate that</span>
<a name="l01037"></a>01037 <span class="comment">   * @a path is present as a file in the edit source, but cannot be</span>
<a name="l01038"></a>01038 <span class="comment">   * conveyed to the edit consumer (perhaps because of authorization</span>
<a name="l01039"></a>01039 <span class="comment">   * restrictions).</span>
<a name="l01040"></a>01040 <span class="comment">   *</span>
<a name="l01041"></a>01041 <span class="comment">   * Any temporary allocations may be performed in @a scratch_pool.</span>
<a name="l01042"></a>01042 <span class="comment">   */</span>
<a name="l01043"></a><a class="code" href="structsvn__delta__editor__t.html#a34170a213cdeae5dea75335016799b9e">01043</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*absent_file)(<span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01044"></a>01044                               <span class="keywordtype">void</span> *parent_baton,
<a name="l01045"></a>01045                               apr_pool_t *scratch_pool);
<a name="l01046"></a>01046 <span class="comment"></span>
<a name="l01047"></a>01047 <span class="comment">  /** All delta processing is done.  Call this, with the @a edit_baton for</span>
<a name="l01048"></a>01048 <span class="comment">   * the entire edit.</span>
<a name="l01049"></a>01049 <span class="comment">   *</span>
<a name="l01050"></a>01050 <span class="comment">   * Any temporary allocations may be performed in @a scratch_pool.</span>
<a name="l01051"></a>01051 <span class="comment">   */</span>
<a name="l01052"></a><a class="code" href="structsvn__delta__editor__t.html#a618a2c968387bf760f1d223b35631302">01052</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*close_edit)(<span class="keywordtype">void</span> *edit_baton,
<a name="l01053"></a>01053                              apr_pool_t *scratch_pool);
<a name="l01054"></a>01054 <span class="comment"></span>
<a name="l01055"></a>01055 <span class="comment">  /** The editor-driver has decided to bail out.  Allow the editor to</span>
<a name="l01056"></a>01056 <span class="comment">   * gracefully clean up things if it needs to.</span>
<a name="l01057"></a>01057 <span class="comment">   *</span>
<a name="l01058"></a>01058 <span class="comment">   * Any temporary allocations may be performed in @a scratch_pool.</span>
<a name="l01059"></a>01059 <span class="comment">   */</span>
<a name="l01060"></a><a class="code" href="structsvn__delta__editor__t.html#a3fab58046111861ad43364aa04326fc6">01060</a>   <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*abort_edit)(<span class="keywordtype">void</span> *edit_baton,
<a name="l01061"></a>01061                              apr_pool_t *scratch_pool);
<a name="l01062"></a>01062 
<a name="l01063"></a>01063   <span class="comment">/* Be sure to update svn_delta_get_cancellation_editor() and</span>
<a name="l01064"></a>01064 <span class="comment">   * svn_delta_default_editor() if you add a new callback here. */</span>
<a name="l01065"></a>01065 } <a class="code" href="group__svn__delta__tree__deltas.html#gae53a39b99de02552a81ca4c917de177a" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a>;
<a name="l01066"></a>01066 
<a name="l01067"></a>01067 <span class="comment"></span>
<a name="l01068"></a>01068 <span class="comment">/** Return a default delta editor template, allocated in @a pool.</span>
<a name="l01069"></a>01069 <span class="comment"> *</span>
<a name="l01070"></a>01070 <span class="comment"> * The editor functions in the template do only the most basic</span>
<a name="l01071"></a>01071 <span class="comment"> * baton-swapping: each editor function that produces a baton does so</span>
<a name="l01072"></a>01072 <span class="comment"> * by copying its incoming baton into the outgoing baton reference.</span>
<a name="l01073"></a>01073 <span class="comment"> *</span>
<a name="l01074"></a>01074 <span class="comment"> * This editor is not intended to be useful by itself, but is meant to</span>
<a name="l01075"></a>01075 <span class="comment"> * be the basis for a useful editor.  After getting a default editor,</span>
<a name="l01076"></a>01076 <span class="comment"> * you substitute in your own implementations for the editor functions</span>
<a name="l01077"></a>01077 <span class="comment"> * you care about.  The ones you don&#39;t care about, you don&#39;t have to</span>
<a name="l01078"></a>01078 <span class="comment"> * implement -- you can rely on the template&#39;s implementation to</span>
<a name="l01079"></a>01079 <span class="comment"> * safely do nothing of consequence.</span>
<a name="l01080"></a>01080 <span class="comment"> */</span>
<a name="l01081"></a>01081 <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> *
<a name="l01082"></a>01082 <a class="code" href="group__svn__delta__tree__deltas.html#gab15253a8fcc50b7813844832016641a2" title="Return a default delta editor template, allocated in pool.">svn_delta_default_editor</a>(apr_pool_t *pool);
<a name="l01083"></a>01083 <span class="comment"></span>
<a name="l01084"></a>01084 <span class="comment">/** A text-delta window handler which does nothing.</span>
<a name="l01085"></a>01085 <span class="comment"> *</span>
<a name="l01086"></a>01086 <span class="comment"> * Editors can return this handler from @c apply_textdelta if they don&#39;t</span>
<a name="l01087"></a>01087 <span class="comment"> * care about text delta windows.</span>
<a name="l01088"></a>01088 <span class="comment"> */</span>
<a name="l01089"></a>01089 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01090"></a>01090 <a class="code" href="group__svn__delta__tree__deltas.html#ga277d961312294cd385710ee4d32d7f3d" title="A text-delta window handler which does nothing.">svn_delta_noop_window_handler</a>(<a class="code" href="structsvn__txdelta__window__t.html" title="An svn_txdelta_window_t object describes how to reconstruct a contiguous section of the target string...">svn_txdelta_window_t</a> *window,
<a name="l01091"></a>01091                               <span class="keywordtype">void</span> *baton);
<a name="l01092"></a>01092 <span class="comment"></span>
<a name="l01093"></a>01093 <span class="comment">/** Set @a *editor and @a *edit_baton to a cancellation editor that</span>
<a name="l01094"></a>01094 <span class="comment"> * wraps @a wrapped_editor and @a wrapped_baton.</span>
<a name="l01095"></a>01095 <span class="comment"> *</span>
<a name="l01096"></a>01096 <span class="comment"> * The @a editor will call @a cancel_func with @a cancel_baton when each of</span>
<a name="l01097"></a>01097 <span class="comment"> * its functions is called, continuing on to call the corresponding wrapped</span>
<a name="l01098"></a>01098 <span class="comment"> * function if @a cancel_func returns #SVN_NO_ERROR.</span>
<a name="l01099"></a>01099 <span class="comment"> *</span>
<a name="l01100"></a>01100 <span class="comment"> * If @a cancel_func is @c NULL, set @a *editor to @a wrapped_editor and</span>
<a name="l01101"></a>01101 <span class="comment"> * @a *edit_baton to @a wrapped_baton.</span>
<a name="l01102"></a>01102 <span class="comment"> */</span>
<a name="l01103"></a>01103 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01104"></a>01104 <a class="code" href="group__svn__delta__tree__deltas.html#ga8f1c0290d6cea00bb1919e8a23087650" title="Set *editor and *edit_baton to a cancellation editor that wraps wrapped_editor and wrapped_baton...">svn_delta_get_cancellation_editor</a>(<a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l01105"></a>01105                                   <span class="keywordtype">void</span> *cancel_baton,
<a name="l01106"></a>01106                                   <span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> *wrapped_editor,
<a name="l01107"></a>01107                                   <span class="keywordtype">void</span> *wrapped_baton,
<a name="l01108"></a>01108                                   <span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> **editor,
<a name="l01109"></a>01109                                   <span class="keywordtype">void</span> **edit_baton,
<a name="l01110"></a>01110                                   apr_pool_t *pool);
<a name="l01111"></a>01111 <span class="comment"></span>
<a name="l01112"></a>01112 <span class="comment">/** Set @a *editor and @a *edit_baton to an depth-based filtering</span>
<a name="l01113"></a>01113 <span class="comment"> * editor that wraps @a wrapped_editor and @a wrapped_baton.</span>
<a name="l01114"></a>01114 <span class="comment"> *</span>
<a name="l01115"></a>01115 <span class="comment"> * The @a editor will track the depth of this drive against the @a</span>
<a name="l01116"></a>01116 <span class="comment"> * requested_depth, taking into account whether not the edit drive is</span>
<a name="l01117"></a>01117 <span class="comment"> * making use of a target (via @a has_target), and forward editor</span>
<a name="l01118"></a>01118 <span class="comment"> * calls which operate &quot;within&quot; the request depth range through to @a</span>
<a name="l01119"></a>01119 <span class="comment"> * wrapped_editor.</span>
<a name="l01120"></a>01120 <span class="comment"> *</span>
<a name="l01121"></a>01121 <span class="comment"> * @a requested_depth must be one of the following depth values:</span>
<a name="l01122"></a>01122 <span class="comment"> * #svn_depth_infinity, #svn_depth_empty, #svn_depth_files,</span>
<a name="l01123"></a>01123 <span class="comment"> * #svn_depth_immediates, or #svn_depth_unknown.</span>
<a name="l01124"></a>01124 <span class="comment"> *</span>
<a name="l01125"></a>01125 <span class="comment"> * If filtering is deemed unnecessary (or if @a requested_depth is</span>
<a name="l01126"></a>01126 <span class="comment"> * #svn_depth_unknown), @a *editor and @a *edit_baton will be set to @a</span>
<a name="l01127"></a>01127 <span class="comment"> * wrapped_editor and @a wrapped_baton, respectively; otherwise,</span>
<a name="l01128"></a>01128 <span class="comment"> * they&#39;ll be set to new objects allocated from @a pool.</span>
<a name="l01129"></a>01129 <span class="comment"> *</span>
<a name="l01130"></a>01130 <span class="comment"> * @note Because the svn_delta_editor_t interface&#39;s @c delete_entry()</span>
<a name="l01131"></a>01131 <span class="comment"> * function doesn&#39;t carry node kind information, a depth-based</span>
<a name="l01132"></a>01132 <span class="comment"> * filtering editor being asked to filter for #svn_depth_files but</span>
<a name="l01133"></a>01133 <span class="comment"> * receiving a @c delete_entry() call on an immediate child of the</span>
<a name="l01134"></a>01134 <span class="comment"> * editor&#39;s target is unable to know if that deletion should be</span>
<a name="l01135"></a>01135 <span class="comment"> * allowed or filtered out -- a delete of a top-level file is okay in</span>
<a name="l01136"></a>01136 <span class="comment"> * this case, a delete of a top-level subdirectory is not.  As such,</span>
<a name="l01137"></a>01137 <span class="comment"> * this filtering editor takes a conservative approach, and ignores</span>
<a name="l01138"></a>01138 <span class="comment"> * top-level deletion requests when filtering for #svn_depth_files.</span>
<a name="l01139"></a>01139 <span class="comment"> * Fortunately, most non-depth-aware (pre-1.5) Subversion editor</span>
<a name="l01140"></a>01140 <span class="comment"> * drivers can be told to drive non-recursively (where non-recursive</span>
<a name="l01141"></a>01141 <span class="comment"> * means essentially #svn_depth_files), which means they won&#39;t</span>
<a name="l01142"></a>01142 <span class="comment"> * transmit out-of-scope editor commands anyway.</span>
<a name="l01143"></a>01143 <span class="comment"> *</span>
<a name="l01144"></a>01144 <span class="comment"> * @since New in 1.5.</span>
<a name="l01145"></a>01145 <span class="comment"> */</span>
<a name="l01146"></a>01146 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01147"></a>01147 <a class="code" href="group__svn__delta__tree__deltas.html#gabbbc5a169982cca58a3b87bc425d50c1" title="Set *editor and *edit_baton to an depth-based filtering editor that wraps wrapped_editor and wrapped_...">svn_delta_depth_filter_editor</a>(<span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> **editor,
<a name="l01148"></a>01148                               <span class="keywordtype">void</span> **edit_baton,
<a name="l01149"></a>01149                               <span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> *wrapped_editor,
<a name="l01150"></a>01150                               <span class="keywordtype">void</span> *wrapped_edit_baton,
<a name="l01151"></a>01151                               <a class="code" href="svn__types_8h.html#a21dd8b080111fa6fb5d59156299f3a2c" title="The concept of depth for directories.">svn_depth_t</a> requested_depth,
<a name="l01152"></a>01152                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> has_target,
<a name="l01153"></a>01153                               apr_pool_t *pool);
<a name="l01154"></a>01154 <span class="comment"></span>
<a name="l01155"></a>01155 <span class="comment">/** @} */</span>
<a name="l01156"></a>01156 
<a name="l01157"></a>01157 <span class="comment"></span>
<a name="l01158"></a>01158 <span class="comment">/** Path-based editor drives.</span>
<a name="l01159"></a>01159 <span class="comment"> *</span>
<a name="l01160"></a>01160 <span class="comment"> * @defgroup svn_delta_path_delta_drivers Path-based delta drivers</span>
<a name="l01161"></a>01161 <span class="comment"> * @{</span>
<a name="l01162"></a>01162 <span class="comment"> */</span>
<a name="l01163"></a>01163 <span class="comment"></span>
<a name="l01164"></a>01164 <span class="comment">/** Callback function type for svn_delta_path_driver().</span>
<a name="l01165"></a>01165 <span class="comment"> *</span>
<a name="l01166"></a>01166 <span class="comment"> * The handler of this callback is given the callback baton @a</span>
<a name="l01167"></a>01167 <span class="comment"> * callback_baton, @a path, and the @a parent_baton which represents</span>
<a name="l01168"></a>01168 <span class="comment"> * path&#39;s parent directory as created by the editor passed to</span>
<a name="l01169"></a>01169 <span class="comment"> * svn_delta_path_driver().</span>
<a name="l01170"></a>01170 <span class="comment"> *</span>
<a name="l01171"></a>01171 <span class="comment"> * If @a path represents a directory, the handler must return a @a</span>
<a name="l01172"></a>01172 <span class="comment"> * *dir_baton for @a path, generated from the same editor (so that the</span>
<a name="l01173"></a>01173 <span class="comment"> * driver can later close that directory).</span>
<a name="l01174"></a>01174 <span class="comment"> *</span>
<a name="l01175"></a>01175 <span class="comment"> * If, however, @a path represents a file, the handler should NOT</span>
<a name="l01176"></a>01176 <span class="comment"> * return any file batons.  It can close any opened or added files</span>
<a name="l01177"></a>01177 <span class="comment"> * immediately, or delay that close until the end of the edit when</span>
<a name="l01178"></a>01178 <span class="comment"> * svn_delta_path_driver() returns.</span>
<a name="l01179"></a>01179 <span class="comment"> *</span>
<a name="l01180"></a>01180 <span class="comment"> * Finally, if @a parent_baton is @c NULL, then the root of the edit</span>
<a name="l01181"></a>01181 <span class="comment"> * is also one of the paths passed to svn_delta_path_driver().  The</span>
<a name="l01182"></a>01182 <span class="comment"> * handler of this callback must call the editor&#39;s open_root()</span>
<a name="l01183"></a>01183 <span class="comment"> * function and return the top-level root dir baton in @a *dir_baton.</span>
<a name="l01184"></a>01184 <span class="comment"> */</span>
<a name="l01185"></a><a class="code" href="group__svn__delta__path__delta__drivers.html#gae0b9b687c5f0f3424bcc0009600f57b5">01185</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_delta_path_driver_cb_func_t)(
<a name="l01186"></a>01186   <span class="keywordtype">void</span> **dir_baton,
<a name="l01187"></a>01187   <span class="keywordtype">void</span> *parent_baton,
<a name="l01188"></a>01188   <span class="keywordtype">void</span> *callback_baton,
<a name="l01189"></a>01189   <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01190"></a>01190   apr_pool_t *pool);
<a name="l01191"></a>01191 
<a name="l01192"></a>01192 <span class="comment"></span>
<a name="l01193"></a>01193 <span class="comment">/** Drive @a editor (with its @a edit_baton) in such a way that</span>
<a name="l01194"></a>01194 <span class="comment"> * each path in @a paths is traversed in a depth-first fashion.  As</span>
<a name="l01195"></a>01195 <span class="comment"> * each path is hit as part of the editor drive, use @a</span>
<a name="l01196"></a>01196 <span class="comment"> * callback_func and @a callback_baton to allow the caller to handle</span>
<a name="l01197"></a>01197 <span class="comment"> * the portion of the editor drive related to that path.</span>
<a name="l01198"></a>01198 <span class="comment"> *</span>
<a name="l01199"></a>01199 <span class="comment"> * Use @a revision as the revision number passed to intermediate</span>
<a name="l01200"></a>01200 <span class="comment"> * directory openings.</span>
<a name="l01201"></a>01201 <span class="comment"> *</span>
<a name="l01202"></a>01202 <span class="comment"> * Use @a pool for all necessary allocations.</span>
<a name="l01203"></a>01203 <span class="comment"> */</span>
<a name="l01204"></a>01204 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l01205"></a>01205 <a class="code" href="group__svn__delta__path__delta__drivers.html#ga7f54180b72f81c7e8c224f7a7a0629ed" title="Drive editor (with its edit_baton) in such a way that each path in paths is traversed in a depth-firs...">svn_delta_path_driver</a>(<span class="keyword">const</span> <a class="code" href="structsvn__delta__editor__t.html" title="A structure full of callback functions the delta source will invoke as it produces the delta...">svn_delta_editor_t</a> *editor,
<a name="l01206"></a>01206                       <span class="keywordtype">void</span> *edit_baton,
<a name="l01207"></a>01207                       <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> revision,
<a name="l01208"></a>01208                       <span class="keyword">const</span> apr_array_header_t *paths,
<a name="l01209"></a>01209                       <a class="code" href="group__svn__delta__path__delta__drivers.html#gae0b9b687c5f0f3424bcc0009600f57b5" title="Callback function type for svn_delta_path_driver().">svn_delta_path_driver_cb_func_t</a> callback_func,
<a name="l01210"></a>01210                       <span class="keywordtype">void</span> *callback_baton,
<a name="l01211"></a>01211                       apr_pool_t *pool);
<a name="l01212"></a>01212 <span class="comment"></span>
<a name="l01213"></a>01213 <span class="comment">/** @} */</span>
<a name="l01214"></a>01214 
<a name="l01215"></a>01215 
<a name="l01216"></a>01216 <span class="comment">/*** File revision iterator types ***/</span>
<a name="l01217"></a>01217 <span class="comment"></span>
<a name="l01218"></a>01218 <span class="comment">/**</span>
<a name="l01219"></a>01219 <span class="comment"> * The callback invoked by file rev loopers, such as</span>
<a name="l01220"></a>01220 <span class="comment"> * svn_ra_plugin_t.get_file_revs2() and svn_repos_get_file_revs2().</span>
<a name="l01221"></a>01221 <span class="comment"> *</span>
<a name="l01222"></a>01222 <span class="comment"> * @a baton is provided by the caller, @a path is the pathname of the file</span>
<a name="l01223"></a>01223 <span class="comment"> * in revision @a rev and @a rev_props are the revision properties.</span>
<a name="l01224"></a>01224 <span class="comment"> *</span>
<a name="l01225"></a>01225 <span class="comment"> * If @a delta_handler and @a delta_baton are non-NULL, they may be set to a</span>
<a name="l01226"></a>01226 <span class="comment"> * handler/baton which will be called with the delta between the previous</span>
<a name="l01227"></a>01227 <span class="comment"> * revision and this one after the return of this callback.  They may be</span>
<a name="l01228"></a>01228 <span class="comment"> * left as NULL/NULL.</span>
<a name="l01229"></a>01229 <span class="comment"> *</span>
<a name="l01230"></a>01230 <span class="comment"> * @a result_of_merge will be @c TRUE if the revision being returned was</span>
<a name="l01231"></a>01231 <span class="comment"> * included as the result of a merge.</span>
<a name="l01232"></a>01232 <span class="comment"> *</span>
<a name="l01233"></a>01233 <span class="comment"> * @a prop_diffs is an array of svn_prop_t elements indicating the property</span>
<a name="l01234"></a>01234 <span class="comment"> * delta for this and the previous revision.</span>
<a name="l01235"></a>01235 <span class="comment"> *</span>
<a name="l01236"></a>01236 <span class="comment"> * @a pool may be used for temporary allocations, but you can&#39;t rely</span>
<a name="l01237"></a>01237 <span class="comment"> * on objects allocated to live outside of this particular call and</span>
<a name="l01238"></a>01238 <span class="comment"> * the immediately following calls to @a *delta_handler if any.  (Pass</span>
<a name="l01239"></a>01239 <span class="comment"> * in a pool via @a baton if need be.)</span>
<a name="l01240"></a>01240 <span class="comment"> *</span>
<a name="l01241"></a>01241 <span class="comment"> * @since New in 1.5.</span>
<a name="l01242"></a>01242 <span class="comment"> */</span>
<a name="l01243"></a><a class="code" href="group__delta__support.html#ga31e5b4fa524d2ee126ca8f7e7b49eece">01243</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_file_rev_handler_t)(
<a name="l01244"></a>01244   <span class="keywordtype">void</span> *baton,
<a name="l01245"></a>01245   <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01246"></a>01246   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l01247"></a>01247   apr_hash_t *rev_props,
<a name="l01248"></a>01248   <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> result_of_merge,
<a name="l01249"></a>01249   <a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> *delta_handler,
<a name="l01250"></a>01250   <span class="keywordtype">void</span> **delta_baton,
<a name="l01251"></a>01251   apr_array_header_t *prop_diffs,
<a name="l01252"></a>01252   apr_pool_t *pool);
<a name="l01253"></a>01253 <span class="comment"></span>
<a name="l01254"></a>01254 <span class="comment">/**</span>
<a name="l01255"></a>01255 <span class="comment"> * The old file rev handler interface.</span>
<a name="l01256"></a>01256 <span class="comment"> *</span>
<a name="l01257"></a>01257 <span class="comment"> * @note #svn_file_rev_handler_old_t is a placeholder type for both</span>
<a name="l01258"></a>01258 <span class="comment"> * #svn_repos_file_rev_handler_t and #svn_ra_file_rev_handler_t.  It is</span>
<a name="l01259"></a>01259 <span class="comment"> * reproduced here for dependency reasons.</span>
<a name="l01260"></a>01260 <span class="comment"> *</span>
<a name="l01261"></a>01261 <span class="comment"> * @deprecated This type is provided for the svn_compat_wrap_file_rev_handler()</span>
<a name="l01262"></a>01262 <span class="comment"> * compatibility wrapper, and should not be used for new development.</span>
<a name="l01263"></a>01263 <span class="comment"> * @since New in 1.5.</span>
<a name="l01264"></a>01264 <span class="comment"> */</span>
<a name="l01265"></a><a class="code" href="group__delta__support.html#ga5436061cf6c7c18569781bb890e5d9fc">01265</a> <span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *(*svn_file_rev_handler_old_t)(
<a name="l01266"></a>01266   <span class="keywordtype">void</span> *baton,
<a name="l01267"></a>01267   <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l01268"></a>01268   <a class="code" href="svn__types_8h.html#af16427ed53d30f27da225c56552d2a89" title="About Special Files in Subversion.">svn_revnum_t</a> rev,
<a name="l01269"></a>01269   apr_hash_t *rev_props,
<a name="l01270"></a>01270   <a class="code" href="group__svn__delta__txt__delta.html#ga1c0d461a3f244928d7f0339c1cbe3219" title="A typedef for functions that consume a series of delta windows, for use in caller-pushes interfaces...">svn_txdelta_window_handler_t</a> *delta_handler,
<a name="l01271"></a>01271   <span class="keywordtype">void</span> **delta_baton,
<a name="l01272"></a>01272   apr_array_header_t *prop_diffs,
<a name="l01273"></a>01273   apr_pool_t *pool);
<a name="l01274"></a>01274 <span class="comment"></span>
<a name="l01275"></a>01275 <span class="comment">/** Return, in @a *handler2 and @a *handler2_baton a function/baton that</span>
<a name="l01276"></a>01276 <span class="comment"> * will call @a handler/@a handler_baton, allocating the @a *handler2_baton</span>
<a name="l01277"></a>01277 <span class="comment"> * in @a pool.</span>
<a name="l01278"></a>01278 <span class="comment"> *</span>
<a name="l01279"></a>01279 <span class="comment"> * @note This is used by compatibility wrappers, which exist in more than</span>
<a name="l01280"></a>01280 <span class="comment"> * Subversion core library.</span>
<a name="l01281"></a>01281 <span class="comment"> *</span>
<a name="l01282"></a>01282 <span class="comment"> * @note #svn_file_rev_handler_old_t is a placeholder type for both</span>
<a name="l01283"></a>01283 <span class="comment"> * #svn_repos_file_rev_handler_t and #svn_ra_file_rev_handler_t.  It is</span>
<a name="l01284"></a>01284 <span class="comment"> * reproduced here for dependency reasons.</span>
<a name="l01285"></a>01285 <span class="comment"> *</span>
<a name="l01286"></a>01286 <span class="comment"> * @since New in 1.5.</span>
<a name="l01287"></a>01287 <span class="comment"> */</span>
<a name="l01288"></a>01288 <span class="keywordtype">void</span>
<a name="l01289"></a>01289 <a class="code" href="group__delta__support.html#gabb2b478ce4b35009702c3e3405146116" title="Return, in *handler2 and *handler2_baton a function/baton that will call handler/handler_baton, allocating the *handler2_baton in pool.">svn_compat_wrap_file_rev_handler</a>(<a class="code" href="group__delta__support.html#ga31e5b4fa524d2ee126ca8f7e7b49eece" title="The callback invoked by file rev loopers, such as svn_ra_plugin_t.get_file_revs2() and svn_repos_get_...">svn_file_rev_handler_t</a> *handler2,
<a name="l01290"></a>01290                                  <span class="keywordtype">void</span> **handler2_baton,
<a name="l01291"></a>01291                                  <a class="code" href="group__delta__support.html#ga5436061cf6c7c18569781bb890e5d9fc" title="The old file rev handler interface.">svn_file_rev_handler_old_t</a> handler,
<a name="l01292"></a>01292                                  <span class="keywordtype">void</span> *handler_baton,
<a name="l01293"></a>01293                                  apr_pool_t *pool);
<a name="l01294"></a>01294 <span class="comment"></span>
<a name="l01295"></a>01295 <span class="comment">/** @} end group: delta_support */</span>
<a name="l01296"></a>01296 
<a name="l01297"></a>01297 
<a name="l01298"></a>01298 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l01299"></a>01299 <span class="preprocessor"></span>}
<a name="l01300"></a>01300 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l01301"></a>01301 
<a name="l01302"></a>01302 <span class="preprocessor">#endif </span><span class="comment">/* SVN_DELTA_H */</span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Fri Dec 23 2011 09:20:36 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>
