<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Subversion: svn_error.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_c37f7789c49aa9e5999234152b1ef6ed.html">subversion</a></li><li class="navelem"><a class="el" href="dir_334478eea8dba5ae935f94af9469978f.html">include</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">svn_error.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="svn__error_8h.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * @copyright</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * ====================================================================</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *    Licensed to the Apache Software Foundation (ASF) under one</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *    or more contributor license agreements.  See the NOTICE file</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *    distributed with this work for additional information</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *    regarding copyright ownership.  The ASF licenses this file</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *    to you under the Apache License, Version 2.0 (the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *    &quot;License&quot;); you may not use this file except in compliance</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *    with the License.  You may obtain a copy of the License at</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *    Unless required by applicable law or agreed to in writing,</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *    software distributed under the License is distributed on an</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *    &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *    KIND, either express or implied.  See the License for the</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *    specific language governing permissions and limitations</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *    under the License.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * ====================================================================</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * @endcopyright</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> * @file svn_error.h</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> * @brief Common exception handling for Subversion.</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#ifndef SVN_ERROR_H</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SVN_ERROR_H</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;apr.h&gt;</span>        <span class="comment">/* for apr_size_t */</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;apr_errno.h&gt;</span>  <span class="comment">/* APR&#39;s error system */</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;apr_pools.h&gt;</span>  <span class="comment">/* for apr_pool_t */</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define APR_WANT_STDIO</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;apr_want.h&gt;</span>   <span class="comment">/* for FILE* */</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="svn__types_8h.html">svn_types.h</a>&quot;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/* For the Subversion developers, this #define turns on extended &quot;stack</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">   traces&quot; of any errors that get thrown. See the SVN_ERR() macro.  */</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#ifdef SVN_DEBUG</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SVN_ERR__TRACING</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/** the best kind of (@c svn_error_t *) ! */</span></div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="svn__error_8h.html#a657398222a237c3c8cc77dcabf427f63">   54</a></span>&#160;<span class="preprocessor">#define SVN_NO_ERROR   0</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">/* The actual error codes are kept in a separate file; see comments</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">   there for the reasons why. */</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="svn__error__codes_8h.html">svn_error_codes.h</a>&quot;</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">/** Put an English description of @a statcode into @a buf and return @a buf,</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"> * NULL-terminated. @a statcode is either an svn error or apr error.</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keywordtype">char</span> *</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<a class="code" href="svn__error_8h.html#ae47ab028b9c77e76979ad8cb5b1d017c">svn_strerror</a>(apr_status_t statcode,</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;             <span class="keywordtype">char</span> *buf,</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;             apr_size_t bufsize);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"> * Return the symbolic name of an error code.  If the error code</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"> * is in svn_error_codes.h, return the name of the macro as a string.</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> * If the error number is not recognised, return @c NULL.</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> * An error number may not be recognised because it was defined in a future</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> * version of Subversion (e.g., a 1.9.x server may transmit a defined-in-1.9.0</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> * error number to a 1.8.x client).</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> * An error number may be recognised @em incorrectly if the @c apr_status_t</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> * value originates in another library (such as libserf) which also uses APR.</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> * (This is a theoretical concern only: the @c apr_err member of #svn_error_t</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> * should never contain a &quot;foreign&quot; @c apr_status_t value, and</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> * in any case Subversion and Serf use non-overlapping subsets of the</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> * @c APR_OS_START_USERERR range.)</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> * Support for error codes returned by APR itself (i.e., not in the</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> * @c APR_OS_START_USERERR range, as defined in apr_errno.h) may be implemented</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"> * in the future.</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"> * @note In rare cases, a single numeric code has more than one symbolic name.</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"> * (For example, #SVN_ERR_WC_NOT_DIRECTORY and #SVN_ERR_WC_NOT_WORKING_COPY).</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"> * In those cases, it is not guaranteed which symbolic name is returned.</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"> * @since New in 1.8.</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span> *</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<a class="code" href="svn__error_8h.html#aea18388d9dd1c3039549bec529b2a267">svn_error_symbolic_name</a>(apr_status_t statcode);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">/** If @a err has a custom error message, return that, otherwise</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"> * store the generic error string associated with @a err-&gt;apr_err into</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"> * @a buf (terminating with NULL) and return @a buf.</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"> * @since New in 1.4.</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"> * @note @a buf and @a bufsize are provided in the interface so that</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"> * this function is thread-safe and yet does no allocation.</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="svn__error_8h.html#a1b3b6a34086d2fff18e88906fa756f73">svn_err_best_message</a>(<a class="code" href="structsvn__error__t.html">svn_error_t</a> *err,</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                 <span class="keywordtype">char</span> *buf,</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                 apr_size_t bufsize);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">/** SVN error creation and destruction.</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"> * @defgroup svn_error_error_creation_destroy Error creation and destruction</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> * @{</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">/** Create a nested exception structure.</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> * Input:  an APR or SVN custom error code,</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> *         a &quot;child&quot; error to wrap,</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"> *         a specific message</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> * Returns:  a new error structure (containing the old one).</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"> * @note Errors are always allocated in a subpool of the global pool,</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> *        since an error&#39;s lifetime is generally not related to the</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"> *        lifetime of any convenient pool.  Errors must be freed</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> *        with svn_error_clear().  The specific message should be @c NULL</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> *        if there is nothing to add to the general message associated</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"> *        with the error code.</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"> *        If creating the &quot;bottommost&quot; error in a chain, pass @c NULL for</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"> *        the child argument.</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<a class="code" href="structsvn__error__t.html">svn_error_t</a> *</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<a class="code" href="group__svn__error__error__creation__destroy.html#ga63cac13b078a6d0af98e74d61f7e355b">svn_error_create</a>(apr_status_t apr_err,</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                 <a class="code" href="structsvn__error__t.html">svn_error_t</a> *child,</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                 <span class="keyword">const</span> <span class="keywordtype">char</span> *message);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">/** Create an error structure with the given @a apr_err and @a child,</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"> * with a printf-style error message produced by passing @a fmt, using</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"> * apr_psprintf().</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<a class="code" href="structsvn__error__t.html">svn_error_t</a> *</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<a class="code" href="group__svn__error__error__creation__destroy.html#ga3b21968b79922680a90fc13314d70789">svn_error_createf</a>(apr_status_t apr_err,</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                  <a class="code" href="structsvn__error__t.html">svn_error_t</a> *child,</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                  <span class="keyword">const</span> <span class="keywordtype">char</span> *fmt,</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                  ...)</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  __attribute__ ((format(printf, 3, 4)));</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">/** Wrap a @a status from an APR function.  If @a fmt is NULL, this is</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"> * equivalent to svn_error_create(status,NULL,NULL).  Otherwise,</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"> * the error message is constructed by formatting @a fmt and the</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"> * following arguments according to apr_psprintf(), and then</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"> * appending &quot;: &quot; and the error message corresponding to @a status.</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"> * (If UTF-8 translation of the APR error message fails, the &quot;: &quot; and</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"> * APR error are not appended to the error message.)</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<a class="code" href="structsvn__error__t.html">svn_error_t</a> *</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<a class="code" href="group__svn__error__error__creation__destroy.html#ga592eecb0b768f46e1183f4eabc348676">svn_error_wrap_apr</a>(apr_status_t status,</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                   const <span class="keywordtype">char</span> *fmt,</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                   ...)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;       __attribute__((format(printf, 2, 3)));</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">/** A quick n&#39; easy way to create a wrapped exception with your own</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"> * message, before throwing it up the stack.  (It uses all of the</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"> * @a child&#39;s fields.)</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<a class="code" href="structsvn__error__t.html">svn_error_t</a> *</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<a class="code" href="group__svn__error__error__creation__destroy.html#ga9a02d9052446ffc08ecece578d1a3c2f">svn_error_quick_wrap</a>(<a class="code" href="structsvn__error__t.html">svn_error_t</a> *child,</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                     const <span class="keywordtype">char</span> *new_msg);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">/** Compose two errors, returning the composition as a brand new error</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"> * and consuming the original errors.  Either or both of @a err1 and</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"> * @a err2 may be @c SVN_NO_ERROR.  If both are not @c SVN_NO_ERROR,</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"> * @a err2 will follow @a err1 in the chain of the returned error.</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"> * Either @a err1 or @a err2 can be functions that return svn_error_t*</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment"> * but if both are functions they can be evaluated in either order as</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment"> * per the C language rules.</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"> * @since New in 1.6.</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<a class="code" href="structsvn__error__t.html">svn_error_t</a> *</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<a class="code" href="group__svn__error__error__creation__destroy.html#ga3478fc47db9ca31d169138aa6ef7daee">svn_error_compose_create</a>(<a class="code" href="structsvn__error__t.html">svn_error_t</a> *err1,</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                         <a class="code" href="structsvn__error__t.html">svn_error_t</a> *err2);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">/** Add @a new_err to the end of @a chain&#39;s chain of errors.  The @a new_err</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment"> * chain will be copied into @a chain&#39;s pool and destroyed, so @a new_err</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"> * itself becomes invalid after this function.</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment"> * Either @a chain or @a new_err can be functions that return svn_error_t*</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment"> * but if both are functions they can be evaluated in either order as</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment"> * per the C language rules.</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<a class="code" href="group__svn__error__error__creation__destroy.html#ga0617c02787a33ecbf68dcf752fe17b34">svn_error_compose</a>(<a class="code" href="structsvn__error__t.html">svn_error_t</a> *chain,</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                  <a class="code" href="structsvn__error__t.html">svn_error_t</a> *new_err);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">/** Return the root cause of @a err by finding the last error in its</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment"> * chain (e.g. it or its children).  @a err may be @c SVN_NO_ERROR, in</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment"> * which case @c SVN_NO_ERROR is returned.</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment"> * @since New in 1.5.</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<a class="code" href="structsvn__error__t.html">svn_error_t</a> *</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<a class="code" href="group__svn__error__error__creation__destroy.html#ga963dd4ae636823a71c36f4a1abec70f7">svn_error_root_cause</a>(<a class="code" href="structsvn__error__t.html">svn_error_t</a> *err);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">/** Return the first error in @a err&#39;s chain that has an error code @a</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"> * apr_err or #SVN_NO_ERROR if there is no error with that code.  The</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"> * returned error should @em not be cleared as it shares memory with @a err.</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"> * If @a err is #SVN_NO_ERROR, return #SVN_NO_ERROR.</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment"> * @since New in 1.7.</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<a class="code" href="structsvn__error__t.html">svn_error_t</a> *</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<a class="code" href="group__svn__error__error__creation__destroy.html#gac7330fec4b094a825fe32ba6ca9b4ad2">svn_error_find_cause</a>(<a class="code" href="structsvn__error__t.html">svn_error_t</a> *err, apr_status_t apr_err);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">/** Create a new error that is a deep copy of @a err and return it.</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"> * @since New in 1.2.</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<a class="code" href="structsvn__error__t.html">svn_error_t</a> *</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<a class="code" href="group__svn__error__error__creation__destroy.html#gabbe0febe6b533b445347f8b7eaca448b">svn_error_dup</a>(<a class="code" href="structsvn__error__t.html">svn_error_t</a> *err);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">/** Free the memory used by @a error, as well as all ancestors and</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment"> * descendants of @a error.</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment"> * Unlike other Subversion objects, errors are managed explicitly; you</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment"> * MUST clear an error if you are ignoring it, or you are leaking memory.</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"> * For convenience, @a error may be @c NULL, in which case this function does</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"> * nothing; thus, svn_error_clear(svn_foo(...)) works as an idiom to</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment"> * ignore errors.</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<a class="code" href="group__svn__error__error__creation__destroy.html#gac8bb06e98118a482ccf534fe38c33495">svn_error_clear</a>(<a class="code" href="structsvn__error__t.html">svn_error_t</a> *error);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="preprocessor">#if defined(SVN_ERR__TRACING)</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="preprocessor"></span><span class="comment">/** Set the error location for debug mode. */</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;svn_error__locate(<span class="keyword">const</span> <span class="keywordtype">char</span> *file,</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                  <span class="keywordtype">long</span> line);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">/* Wrapper macros to collect file and line information */</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">#define svn_error_create \</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="preprocessor">  (svn_error__locate(__FILE__,__LINE__), (svn_error_create))</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define svn_error_createf \</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="preprocessor">  (svn_error__locate(__FILE__,__LINE__), (svn_error_createf))</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define svn_error_wrap_apr \</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="preprocessor">  (svn_error__locate(__FILE__,__LINE__), (svn_error_wrap_apr))</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define svn_error_quick_wrap \</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="preprocessor">  (svn_error__locate(__FILE__,__LINE__), (svn_error_quick_wrap))</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"> * Very basic default error handler: print out error stack @a error to the</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment"> * stdio stream @a stream, with each error prefixed by @a prefix; quit and</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"> * clear @a error iff the @a fatal flag is set.  Allocations are performed</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"> * in the @a error&#39;s pool.</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment"> * If you&#39;re not sure what prefix to pass, just pass &quot;svn: &quot;.  That&#39;s</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"> * what code that used to call svn_handle_error() and now calls</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"> * svn_handle_error2() does.</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment"> * @since New in 1.2.</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<a class="code" href="group__svn__error__error__creation__destroy.html#gaf9008085ded8f0af940f38a3cad6edb1">svn_handle_error2</a>(<a class="code" href="structsvn__error__t.html">svn_error_t</a> *error,</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                  FILE *stream,</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                  <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> fatal,</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                  <span class="keyword">const</span> <span class="keywordtype">char</span> *prefix);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">/** Like svn_handle_error2() but with @c prefix set to &quot;svn: &quot;</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment"> * @deprecated Provided for backward compatibility with the 1.1 API.</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1">SVN_DEPRECATED</a></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<a class="code" href="group__svn__error__error__creation__destroy.html#ga9eb04d5b9b6f6ad76132a7fb822aa77f">svn_handle_error</a>(<a class="code" href="structsvn__error__t.html">svn_error_t</a> *error,</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                 FILE *stream,</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                 <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> fatal);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"> * Very basic default warning handler: print out the error @a error to the</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"> * stdio stream @a stream, prefixed by @a prefix.  Allocations are</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment"> * performed in the error&#39;s pool.</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"> * @a error may not be @c NULL.</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment"> * @since New in 1.2.</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<a class="code" href="group__svn__error__error__creation__destroy.html#ga34f08713630352a0546038088ffa6479">svn_handle_warning2</a>(FILE *stream,</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                    <a class="code" href="structsvn__error__t.html">svn_error_t</a> *error,</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">char</span> *prefix);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">/** Like svn_handle_warning2() but with @c prefix set to &quot;svn: &quot;</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"> * @deprecated Provided for backward compatibility with the 1.1 API.</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1">SVN_DEPRECATED</a></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<a class="code" href="group__svn__error__error__creation__destroy.html#ga34bb30baf6f2da4abad396082111d671">svn_handle_warning</a>(FILE *stream,</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                   <a class="code" href="structsvn__error__t.html">svn_error_t</a> *error);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">/** A statement macro for checking error values.</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment"> * Evaluate @a expr.  If it yields an error, return that error from the</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"> * current function.  Otherwise, continue.</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment"> * The &lt;tt&gt;do { ... } while (0)&lt;/tt&gt; wrapper has no semantic effect,</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment"> * but it makes this macro syntactically equivalent to the expression</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment"> * statement it resembles.  Without it, statements like</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment"> * @code</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment"> *   if (a)</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment"> *     SVN_ERR(some operation);</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment"> *   else</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment"> *     foo;</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment"> * @endcode</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment"> * would not mean what they appear to.</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00331"></a><span class="lineno"><a class="line" href="group__svn__error__error__creation__destroy.html#ga2d4bba65866869939178e21df8e6fffb">  331</a></span>&#160;<span class="preprocessor">#define SVN_ERR(expr)                           \</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="preprocessor">  do {                                          \</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="preprocessor">    svn_error_t *svn_err__temp = (expr);        \</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="preprocessor">    if (svn_err__temp)                          \</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="preprocessor">      return svn_error_trace(svn_err__temp);    \</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="preprocessor">  } while (0)</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="preprocessor"></span><span class="comment"></span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment"> * A macro for wrapping an error in a source-location trace message.</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment"> * This macro can be used when directly returning an already created</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment"> * error (when not using SVN_ERR, svn_error_create(), etc.) to ensure</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment"> * that the call stack is recorded correctly.</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment"> * @since New in 1.7.</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="preprocessor">#ifdef SVN_ERR__TRACING</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="preprocessor"></span><a class="code" href="structsvn__error__t.html">svn_error_t</a> *</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;svn_error__trace(<span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">long</span> line, <a class="code" href="structsvn__error__t.html">svn_error_t</a> *err);</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="preprocessor">#define svn_error_trace(expr)  svn_error__trace(__FILE__, __LINE__, (expr))</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00353"></a><span class="lineno"><a class="line" href="group__svn__error__error__creation__destroy.html#gaebf3a4b9b88c5ac6f6eec7d9792a2288">  353</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define svn_error_trace(expr)  (expr)</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="preprocessor"></span><span class="comment"></span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment"> * Returns an error chain that is based on @a err&#39;s error chain but</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment"> * does not include any error tracing placeholders.  @a err is not</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment"> * modified, except for any allocations using its pool.</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment"> * The returned error chain is allocated from @a err&#39;s pool and shares</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment"> * its message and source filename character arrays.  The returned</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment"> * error chain should *not* be cleared because it is not a fully</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment"> * fledged error chain, only clearing @a err should be done to clear</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment"> * the returned error chain.  If @a err is cleared, then the returned</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment"> * error chain is unusable.</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment"> * @a err can be #SVN_NO_ERROR.  If @a err is not #SVN_NO_ERROR, then</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment"> * the last link in the error chain must be a non-tracing error, i.e,</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment"> * a real error.</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment"> * @since New in 1.7.</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<a class="code" href="structsvn__error__t.html">svn_error_t</a> *<a class="code" href="group__svn__error__error__creation__destroy.html#ga50fb6a28adf05e66b42993b2e89eb098">svn_error_purge_tracing</a>(<a class="code" href="structsvn__error__t.html">svn_error_t</a> *err);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">/** A statement macro, very similar to @c SVN_ERR.</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment"> * This macro will wrap the error with the specified text before</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment"> * returning the error.</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00382"></a><span class="lineno"><a class="line" href="group__svn__error__error__creation__destroy.html#gab25a91cd83a69c02997d636778652924">  382</a></span>&#160;<span class="preprocessor">#define SVN_ERR_W(expr, wrap_msg)                           \</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="preprocessor">  do {                                                      \</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="preprocessor">    svn_error_t *svn_err__temp = (expr);                    \</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="preprocessor">    if (svn_err__temp)                                      \</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="preprocessor">      return svn_error_quick_wrap(svn_err__temp, wrap_msg); \</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="preprocessor">  } while (0)</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">/** A statement macro, similar to @c SVN_ERR, but returns an integer.</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="comment"> * Evaluate @a expr. If it yields an error, handle that error and</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment"> * return @c EXIT_FAILURE.</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00395"></a><span class="lineno"><a class="line" href="group__svn__error__error__creation__destroy.html#gab5f98501379447f3b996418cec2a9e83">  395</a></span>&#160;<span class="preprocessor">#define SVN_INT_ERR(expr)                                        \</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="preprocessor">  do {                                                           \</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="preprocessor">    svn_error_t *svn_err__temp = (expr);                         \</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="preprocessor">    if (svn_err__temp) {                                         \</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="preprocessor">      svn_handle_error2(svn_err__temp, stderr, FALSE, &quot;svn: &quot;);  \</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="preprocessor">      svn_error_clear(svn_err__temp);                            \</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="preprocessor">      return EXIT_FAILURE; }                                     \</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="preprocessor">  } while (0)</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="preprocessor"></span><span class="comment"></span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment">/** @} */</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment">/** Error groups</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment"> * @defgroup svn_error_error_groups Error groups</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="comment"> * @{</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment"> * Return TRUE if @a err is an error specifically related to locking a</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment"> * path in the repository, FALSE otherwise.</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment"> * SVN_ERR_FS_OUT_OF_DATE and SVN_ERR_FS_NOT_FOUND are in here because it&#39;s a</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment"> * non-fatal error that can be thrown when attempting to lock an item.</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment"> * @since New in 1.2.</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00422"></a><span class="lineno"><a class="line" href="group__svn__error__error__groups.html#ga8f0bdaccdc1f8c5cd93f11cddf25ccf9">  422</a></span>&#160;<span class="preprocessor">#define SVN_ERR_IS_LOCK_ERROR(err)                          \</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="preprocessor">  (err-&gt;apr_err == SVN_ERR_FS_PATH_ALREADY_LOCKED ||        \</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="preprocessor">   err-&gt;apr_err == SVN_ERR_FS_NOT_FOUND           ||        \</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="preprocessor">   err-&gt;apr_err == SVN_ERR_FS_OUT_OF_DATE         ||        \</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="preprocessor">   err-&gt;apr_err == SVN_ERR_FS_BAD_LOCK_TOKEN)</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="preprocessor"></span><span class="comment"></span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment"> * Return TRUE if @a err is an error specifically related to unlocking</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment"> * a path in the repository, FALSE otherwise.</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment"> * @since New in 1.2.</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00434"></a><span class="lineno"><a class="line" href="group__svn__error__error__groups.html#ga810964f4b0cb3615a4006d515e0b947f">  434</a></span>&#160;<span class="preprocessor">#define SVN_ERR_IS_UNLOCK_ERROR(err)                        \</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="preprocessor">  (err-&gt;apr_err == SVN_ERR_FS_PATH_NOT_LOCKED ||            \</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="preprocessor">   err-&gt;apr_err == SVN_ERR_FS_BAD_LOCK_TOKEN ||             \</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="preprocessor">   err-&gt;apr_err == SVN_ERR_FS_LOCK_OWNER_MISMATCH ||        \</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="preprocessor">   err-&gt;apr_err == SVN_ERR_FS_NO_SUCH_LOCK ||               \</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="preprocessor">   err-&gt;apr_err == SVN_ERR_RA_NOT_LOCKED ||                 \</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="preprocessor">   err-&gt;apr_err == SVN_ERR_FS_LOCK_EXPIRED)</span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="preprocessor"></span><span class="comment"></span></div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment">/** Evaluates to @c TRUE iff @a apr_err (of type apr_status_t) is in the given</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment"> * @a category, which should be one of the @c SVN_ERR_*_CATEGORY_START</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment"> * constants.</span></div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment"> * @since New in 1.7.</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00448"></a><span class="lineno"><a class="line" href="group__svn__error__error__groups.html#ga763e51bf7f175978a7e5f8d38f731b75">  448</a></span>&#160;<span class="preprocessor">#define SVN_ERROR_IN_CATEGORY(apr_err, category)            \</span></div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="preprocessor">    ((category) == ((apr_err) / SVN_ERR_CATEGORY_SIZE) * SVN_ERR_CATEGORY_SIZE)</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment">/** @} */</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">/** Internal malfunctions and assertions</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment"> * @defgroup svn_error_malfunction_assertion Malfunctions and assertions</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment"> * @{</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment">/** Report that an internal malfunction has occurred, and possibly terminate</span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment"> * the program.</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment"> * Act as determined by the current &quot;malfunction handler&quot; which may have</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment"> * been specified by a call to svn_error_set_malfunction_handler() or else</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment"> * is the default handler as specified in that function&#39;s documentation. If</span></div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="comment"> * the malfunction handler returns, then cause the function using this macro</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="comment"> * to return the error object that it generated.</span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment"> * @note The intended use of this macro is where execution reaches a point</span></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment"> * that cannot possibly be reached unless there is a bug in the program.</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="comment"> * @since New in 1.6.</span></div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00475"></a><span class="lineno"><a class="line" href="group__svn__error__malfunction__assertion.html#ga959223b3e45ed38fde9b239a69f2a472">  475</a></span>&#160;<span class="preprocessor">#define SVN_ERR_MALFUNCTION()                                      \</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="preprocessor">  do {                                                             \</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="preprocessor">    return svn_error_trace(svn_error__malfunction(                 \</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="preprocessor">                                 TRUE, __FILE__, __LINE__, NULL)); \</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="preprocessor">  } while (0)</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="preprocessor"></span><span class="comment"></span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment">/** Similar to SVN_ERR_MALFUNCTION(), but without the option of returning</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment"> * an error to the calling function.</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment"> * If possible you should use SVN_ERR_MALFUNCTION() instead.</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment"> * @since New in 1.6.</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00488"></a><span class="lineno"><a class="line" href="group__svn__error__malfunction__assertion.html#ga18c3e150ee0b87c4eeb61acc72203e51">  488</a></span>&#160;<span class="preprocessor">#define SVN_ERR_MALFUNCTION_NO_RETURN()                      \</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="preprocessor">  do {                                                       \</span></div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="preprocessor">    svn_error__malfunction(FALSE, __FILE__, __LINE__, NULL); \</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="preprocessor">    abort();                                                 \</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="preprocessor">  } while (1)</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="preprocessor"></span><span class="comment"></span></div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="comment">/** Like SVN_ERR_ASSERT(), but append ERR to the returned error chain.</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment"> * If EXPR is false, return a malfunction error whose chain includes ERR.</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment"> * If EXPR is true, do nothing.  (In particular, this does not clear ERR.)</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment"> * Types: (svn_boolean_t expr, svn_error_t *err)</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment"> * @since New in 1.8.</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="preprocessor">#ifdef __clang_analyzer__</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;assert.h&gt;</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment">/* Just ignore ERR.  If the assert triggers, it&#39;ll be our least concern. */</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="preprocessor">#define SVN_ERR_ASSERT_E(expr, err)       assert((expr))</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00508"></a><span class="lineno"><a class="line" href="group__svn__error__malfunction__assertion.html#ga72e5264e34a5f884e0b95a73553a310a">  508</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SVN_ERR_ASSERT_E(expr, err)                                      \</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="preprocessor">  do {                                                                  \</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="preprocessor">    if (!(expr)) {                                                      \</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="preprocessor">      return svn_error_compose_create(                                  \</span></div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="preprocessor">               svn_error__malfunction(TRUE, __FILE__, __LINE__, #expr), \</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="preprocessor">               (err));                                                  \</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="preprocessor">    }                                                                   \</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="preprocessor">  } while (0)</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="comment">/** Check that a condition is true: if not, report an error and possibly</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="comment"> * terminate the program.</span></div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="comment"> * If the Boolean expression @a expr is true, do nothing. Otherwise,</span></div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="comment"> * act as determined by the current &quot;malfunction handler&quot; which may have</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="comment"> * been specified by a call to svn_error_set_malfunction_handler() or else</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="comment"> * is the default handler as specified in that function&#39;s documentation. If</span></div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment"> * the malfunction handler returns, then cause the function using this macro</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment"> * to return the error object that it generated.</span></div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment"> * @note The intended use of this macro is to check a condition that cannot</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment"> * possibly be false unless there is a bug in the program.</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment"> * @note The condition to be checked should not be computationally expensive</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment"> * if it is reached often, as, unlike traditional &quot;assert&quot; statements, the</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment"> * evaluation of this expression is not compiled out in release-mode builds.</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="comment"> * @since New in 1.6.</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment"> * @see SVN_ERR_ASSERT_E()</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="preprocessor">#ifdef __clang_analyzer__</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;assert.h&gt;</span></div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="preprocessor">#define SVN_ERR_ASSERT(expr)       assert((expr))</span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00544"></a><span class="lineno"><a class="line" href="group__svn__error__malfunction__assertion.html#ga0262f0dfe6997e2f27b46bf1996d4565">  544</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SVN_ERR_ASSERT(expr)                                            \</span></div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="preprocessor">  do {                                                                  \</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="preprocessor">    if (!(expr))                                                        \</span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="preprocessor">      SVN_ERR(svn_error__malfunction(TRUE, __FILE__, __LINE__, #expr)); \</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="preprocessor">  } while (0)</span></div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="preprocessor"></span><span class="comment"></span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="comment">/** Similar to SVN_ERR_ASSERT(), but without the option of returning</span></div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="comment"> * an error to the calling function.</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="comment"> * If possible you should use SVN_ERR_ASSERT() instead.</span></div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="comment"> * @since New in 1.6.</span></div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00558"></a><span class="lineno"><a class="line" href="group__svn__error__malfunction__assertion.html#gaf558fc819c1d0c4029a1503b34cdd589">  558</a></span>&#160;<span class="preprocessor">#define SVN_ERR_ASSERT_NO_RETURN(expr)                          \</span></div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="preprocessor">  do {                                                          \</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="preprocessor">    if (!(expr)) {                                              \</span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="preprocessor">      svn_error__malfunction(FALSE, __FILE__, __LINE__, #expr); \</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="preprocessor">      abort();                                                  \</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="preprocessor">    }                                                           \</span></div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="preprocessor">  } while (0)</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="preprocessor"></span><span class="comment"></span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="comment">/** Report a &quot;Not implemented&quot; malfunction.  Internal use only. */</span></div>
<div class="line"><a name="l00567"></a><span class="lineno"><a class="line" href="group__svn__error__malfunction__assertion.html#ga615c96fd3cbc339deeffbed9d3c00d5e">  567</a></span>&#160;<span class="preprocessor">#define SVN__NOT_IMPLEMENTED() \</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="preprocessor">  return svn_error__malfunction(TRUE, __FILE__, __LINE__, &quot;Not implemented.&quot;)</span></div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="preprocessor"></span><span class="comment"></span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="comment">/** A helper function for the macros that report malfunctions. Handle a</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="comment"> * malfunction by calling the current &quot;malfunction handler&quot; which may have</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="comment"> * been specified by a call to svn_error_set_malfunction_handler() or else</span></div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="comment"> * is the default handler as specified in that function&#39;s documentation.</span></div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="comment"> * Pass all of the parameters to the handler. The error occurred in the</span></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="comment"> * source file @a file at line @a line, and was an assertion failure of the</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment"> * expression @a expr, or, if @a expr is null, an unconditional error.</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment"> * If @a can_return is true, the handler can return an error object</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="comment"> * that is returned by the caller. If @a can_return is false the</span></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="comment"> * method should never return. (The caller will call abort())</span></div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="comment"> * @since New in 1.6.</span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<a class="code" href="structsvn__error__t.html">svn_error_t</a> *</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<a class="code" href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">svn_error__malfunction</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> can_return,</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                       <span class="keyword">const</span> <span class="keywordtype">char</span> *file,</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                       <span class="keywordtype">int</span> line,</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                       <span class="keyword">const</span> <span class="keywordtype">char</span> *expr);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="comment">/** A type of function that handles an assertion failure or other internal</span></div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;<span class="comment"> * malfunction detected within the Subversion libraries.</span></div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="comment"> * The error occurred in the source file @a file at line @a line, and was an</span></div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="comment"> * assertion failure of the expression @a expr, or, if @a expr is null, an</span></div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="comment"> * unconditional error.</span></div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="comment"> * If @a can_return is false a function of this type must never return.</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="comment"> * If @a can_return is true a function of this type must do one of:</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="comment"> *   - Return an error object describing the error, using an error code in</span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="comment"> *     the category SVN_ERR_MALFUNC_CATEGORY_START.</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="comment"> *   - Never return.</span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="comment"> * The function may alter its behaviour according to compile-time</span></div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="comment"> * and run-time and even interactive conditions.</span></div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="comment"> * @see SVN_ERROR_IN_CATEGORY()</span></div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="comment"> * @since New in 1.6.</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="keyword">typedef</span> <a class="code" href="structsvn__error__t.html">svn_error_t</a> *(*svn_error_malfunction_handler_t)</div>
<div class="line"><a name="l00613"></a><span class="lineno"><a class="line" href="group__svn__error__malfunction__assertion.html#ga8eb40e32bbe9f2f5ceb621611d7f9fd9">  613</a></span>&#160;  (<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> can_return, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line, <span class="keyword">const</span> <span class="keywordtype">char</span> *expr);</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="comment">/** Cause subsequent malfunctions to be handled by @a func.</span></div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="comment"> * Return the handler that was previously in effect.</span></div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<span class="comment"> * @a func may not be null.</span></div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="comment"> * @note The default handler is svn_error_abort_on_malfunction().</span></div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="comment"> * @note This function must be called in a single-threaded context.</span></div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="comment"> * @since New in 1.6.</span></div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<a class="code" href="group__svn__error__malfunction__assertion.html#ga8eb40e32bbe9f2f5ceb621611d7f9fd9">svn_error_malfunction_handler_t</a></div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<a class="code" href="group__svn__error__malfunction__assertion.html#ga399ab33aa7fcea5cc776a62b56b7ad06">svn_error_set_malfunction_handler</a>(<a class="code" href="group__svn__error__malfunction__assertion.html#ga8eb40e32bbe9f2f5ceb621611d7f9fd9">svn_error_malfunction_handler_t</a> func);</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="comment">/** Handle a malfunction by returning an error object that describes it.</span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;<span class="comment"> * When @a can_return is false, abort()</span></div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="comment"> * This function implements @c svn_error_malfunction_handler_t.</span></div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment"> * @since New in 1.6.</span></div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<a class="code" href="structsvn__error__t.html">svn_error_t</a> *</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<a class="code" href="group__svn__error__malfunction__assertion.html#ga3ad3793da54e30aa57e708d2f9e997d1">svn_error_raise_on_malfunction</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> can_return,</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                               <span class="keyword">const</span> <span class="keywordtype">char</span> *file,</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                               <span class="keywordtype">int</span> line,</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                               <span class="keyword">const</span> <span class="keywordtype">char</span> *expr);</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="comment">/** Handle a malfunction by printing a message to stderr and aborting.</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="comment"> * This function implements @c svn_error_malfunction_handler_t.</span></div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="comment"> * @since New in 1.6.</span></div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<a class="code" href="structsvn__error__t.html">svn_error_t</a> *</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<a class="code" href="group__svn__error__malfunction__assertion.html#ga17fc1ce5905f53d7b1107e6678459294">svn_error_abort_on_malfunction</a>(<a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> can_return,</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                               <span class="keyword">const</span> <span class="keywordtype">char</span> *file,</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                               <span class="keywordtype">int</span> line,</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                               <span class="keyword">const</span> <span class="keywordtype">char</span> *expr);</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;<span class="comment">/** @} */</span></div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SVN_ERROR_H */</span><span class="preprocessor"></span></div>
<div class="ttc" id="group__svn__error__malfunction__assertion_html_ga8eb40e32bbe9f2f5ceb621611d7f9fd9"><div class="ttname"><a href="group__svn__error__malfunction__assertion.html#ga8eb40e32bbe9f2f5ceb621611d7f9fd9">svn_error_malfunction_handler_t</a></div><div class="ttdeci">svn_error_t *(* svn_error_malfunction_handler_t)(svn_boolean_t can_return, const char *file, int line, const char *expr)</div><div class="ttdoc">A type of function that handles an assertion failure or other internal malfunction detected within th...</div><div class="ttdef"><b>Definition:</b> <a href="svn__error_8h_source.html#l00613">svn_error.h:613</a></div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_ga9a02d9052446ffc08ecece578d1a3c2f"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#ga9a02d9052446ffc08ecece578d1a3c2f">svn_error_quick_wrap</a></div><div class="ttdeci">svn_error_t * svn_error_quick_wrap(svn_error_t *child, const char *new_msg)</div><div class="ttdoc">A quick n&amp;#39; easy way to create a wrapped exception with your own message, before throwing it up the st...</div></div>
<div class="ttc" id="svn__error_8h_html_aea18388d9dd1c3039549bec529b2a267"><div class="ttname"><a href="svn__error_8h.html#aea18388d9dd1c3039549bec529b2a267">svn_error_symbolic_name</a></div><div class="ttdeci">const char * svn_error_symbolic_name(apr_status_t statcode)</div><div class="ttdoc">Return the symbolic name of an error code. </div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_gaf9008085ded8f0af940f38a3cad6edb1"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#gaf9008085ded8f0af940f38a3cad6edb1">svn_handle_error2</a></div><div class="ttdeci">void svn_handle_error2(svn_error_t *error, FILE *stream, svn_boolean_t fatal, const char *prefix)</div><div class="ttdoc">Very basic default error handler: print out error stack error to the stdio stream stream...</div></div>
<div class="ttc" id="group__svn__error__malfunction__assertion_html_ga3ad3793da54e30aa57e708d2f9e997d1"><div class="ttname"><a href="group__svn__error__malfunction__assertion.html#ga3ad3793da54e30aa57e708d2f9e997d1">svn_error_raise_on_malfunction</a></div><div class="ttdeci">svn_error_t * svn_error_raise_on_malfunction(svn_boolean_t can_return, const char *file, int line, const char *expr)</div><div class="ttdoc">Handle a malfunction by returning an error object that describes it. </div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_ga3478fc47db9ca31d169138aa6ef7daee"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#ga3478fc47db9ca31d169138aa6ef7daee">svn_error_compose_create</a></div><div class="ttdeci">svn_error_t * svn_error_compose_create(svn_error_t *err1, svn_error_t *err2)</div><div class="ttdoc">Compose two errors, returning the composition as a brand new error and consuming the original errors...</div></div>
<div class="ttc" id="group__svn__error__malfunction__assertion_html_ga17fc1ce5905f53d7b1107e6678459294"><div class="ttname"><a href="group__svn__error__malfunction__assertion.html#ga17fc1ce5905f53d7b1107e6678459294">svn_error_abort_on_malfunction</a></div><div class="ttdeci">svn_error_t * svn_error_abort_on_malfunction(svn_boolean_t can_return, const char *file, int line, const char *expr)</div><div class="ttdoc">Handle a malfunction by printing a message to stderr and aborting. </div></div>
<div class="ttc" id="structsvn__error__t_html"><div class="ttname"><a href="structsvn__error__t.html">svn_error_t</a></div><div class="ttdoc">Subversion error object. </div><div class="ttdef"><b>Definition:</b> <a href="svn__types_8h_source.html#l00113">svn_types.h:113</a></div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_ga3b21968b79922680a90fc13314d70789"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#ga3b21968b79922680a90fc13314d70789">svn_error_createf</a></div><div class="ttdeci">svn_error_t * svn_error_createf(apr_status_t apr_err, svn_error_t *child, const char *fmt,...)</div><div class="ttdoc">Create an error structure with the given apr_err and child, with a printf-style error message produce...</div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_ga592eecb0b768f46e1183f4eabc348676"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#ga592eecb0b768f46e1183f4eabc348676">svn_error_wrap_apr</a></div><div class="ttdeci">svn_error_t * svn_error_wrap_apr(apr_status_t status, const char *fmt,...)</div><div class="ttdoc">Wrap a status from an APR function. </div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_ga0617c02787a33ecbf68dcf752fe17b34"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#ga0617c02787a33ecbf68dcf752fe17b34">svn_error_compose</a></div><div class="ttdeci">void svn_error_compose(svn_error_t *chain, svn_error_t *new_err)</div><div class="ttdoc">Add new_err to the end of chain&amp;#39;s chain of errors. </div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_ga34f08713630352a0546038088ffa6479"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#ga34f08713630352a0546038088ffa6479">svn_handle_warning2</a></div><div class="ttdeci">void svn_handle_warning2(FILE *stream, svn_error_t *error, const char *prefix)</div><div class="ttdoc">Very basic default warning handler: print out the error error to the stdio stream stream...</div></div>
<div class="ttc" id="svn__types_8h_html"><div class="ttname"><a href="svn__types_8h.html">svn_types.h</a></div><div class="ttdoc">Subversion&amp;#39;s data types. </div></div>
<div class="ttc" id="svn__types_8h_html_aeced35b9b096eb3eb6f3d1af3e685aa1"><div class="ttname"><a href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1">SVN_DEPRECATED</a></div><div class="ttdeci">#define SVN_DEPRECATED</div><div class="ttdoc">Macro used to mark deprecated functions. </div><div class="ttdef"><b>Definition:</b> <a href="svn__types_8h_source.html#l00059">svn_types.h:59</a></div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_ga9eb04d5b9b6f6ad76132a7fb822aa77f"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#ga9eb04d5b9b6f6ad76132a7fb822aa77f">svn_handle_error</a></div><div class="ttdeci">void svn_handle_error(svn_error_t *error, FILE *stream, svn_boolean_t fatal)</div><div class="ttdoc">Like svn_handle_error2() but with prefix set to &amp;quot;svn: &amp;quot;. </div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_gac7330fec4b094a825fe32ba6ca9b4ad2"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#gac7330fec4b094a825fe32ba6ca9b4ad2">svn_error_find_cause</a></div><div class="ttdeci">svn_error_t * svn_error_find_cause(svn_error_t *err, apr_status_t apr_err)</div><div class="ttdoc">Return the first error in err&amp;#39;s chain that has an error code apr_err or SVN_NO_ERROR if there is no e...</div></div>
<div class="ttc" id="svn__error_8h_html_a1b3b6a34086d2fff18e88906fa756f73"><div class="ttname"><a href="svn__error_8h.html#a1b3b6a34086d2fff18e88906fa756f73">svn_err_best_message</a></div><div class="ttdeci">const char * svn_err_best_message(svn_error_t *err, char *buf, apr_size_t bufsize)</div><div class="ttdoc">If err has a custom error message, return that, otherwise store the generic error string associated w...</div></div>
<div class="ttc" id="svn__error__codes_8h_html"><div class="ttname"><a href="svn__error__codes_8h.html">svn_error_codes.h</a></div><div class="ttdoc">Subversion error codes. </div></div>
<div class="ttc" id="group__svn__error__malfunction__assertion_html_ga399ab33aa7fcea5cc776a62b56b7ad06"><div class="ttname"><a href="group__svn__error__malfunction__assertion.html#ga399ab33aa7fcea5cc776a62b56b7ad06">svn_error_set_malfunction_handler</a></div><div class="ttdeci">svn_error_malfunction_handler_t svn_error_set_malfunction_handler(svn_error_malfunction_handler_t func)</div><div class="ttdoc">Cause subsequent malfunctions to be handled by func. </div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_gac8bb06e98118a482ccf534fe38c33495"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#gac8bb06e98118a482ccf534fe38c33495">svn_error_clear</a></div><div class="ttdeci">void svn_error_clear(svn_error_t *error)</div><div class="ttdoc">Free the memory used by error, as well as all ancestors and descendants of error. ...</div></div>
<div class="ttc" id="group__svn__error__malfunction__assertion_html_ga0954e6a6341b3d32c783cba2579858c2"><div class="ttname"><a href="group__svn__error__malfunction__assertion.html#ga0954e6a6341b3d32c783cba2579858c2">svn_error__malfunction</a></div><div class="ttdeci">svn_error_t * svn_error__malfunction(svn_boolean_t can_return, const char *file, int line, const char *expr)</div><div class="ttdoc">A helper function for the macros that report malfunctions. </div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_ga963dd4ae636823a71c36f4a1abec70f7"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#ga963dd4ae636823a71c36f4a1abec70f7">svn_error_root_cause</a></div><div class="ttdeci">svn_error_t * svn_error_root_cause(svn_error_t *err)</div><div class="ttdoc">Return the root cause of err by finding the last error in its chain (e.g. </div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_ga63cac13b078a6d0af98e74d61f7e355b"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#ga63cac13b078a6d0af98e74d61f7e355b">svn_error_create</a></div><div class="ttdeci">svn_error_t * svn_error_create(apr_status_t apr_err, svn_error_t *child, const char *message)</div><div class="ttdoc">Create a nested exception structure. </div></div>
<div class="ttc" id="svn__error_8h_html_ae47ab028b9c77e76979ad8cb5b1d017c"><div class="ttname"><a href="svn__error_8h.html#ae47ab028b9c77e76979ad8cb5b1d017c">svn_strerror</a></div><div class="ttdeci">char * svn_strerror(apr_status_t statcode, char *buf, apr_size_t bufsize)</div><div class="ttdoc">Put an English description of statcode into buf and return buf, NULL-terminated. </div></div>
<div class="ttc" id="svn__types_8h_html_a22b35baddc4213c688d1bb12feea1024"><div class="ttname"><a href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a></div><div class="ttdeci">int svn_boolean_t</div><div class="ttdoc">YABT: Yet Another Boolean Type. </div><div class="ttdef"><b>Definition:</b> <a href="svn__types_8h_source.html#l00094">svn_types.h:94</a></div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_gabbe0febe6b533b445347f8b7eaca448b"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#gabbe0febe6b533b445347f8b7eaca448b">svn_error_dup</a></div><div class="ttdeci">svn_error_t * svn_error_dup(svn_error_t *err)</div><div class="ttdoc">Create a new error that is a deep copy of err and return it. </div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_ga50fb6a28adf05e66b42993b2e89eb098"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#ga50fb6a28adf05e66b42993b2e89eb098">svn_error_purge_tracing</a></div><div class="ttdeci">svn_error_t * svn_error_purge_tracing(svn_error_t *err)</div><div class="ttdoc">Returns an error chain that is based on err&amp;#39;s error chain but does not include any error tracing plac...</div></div>
<div class="ttc" id="group__svn__error__error__creation__destroy_html_ga34bb30baf6f2da4abad396082111d671"><div class="ttname"><a href="group__svn__error__error__creation__destroy.html#ga34bb30baf6f2da4abad396082111d671">svn_handle_warning</a></div><div class="ttdeci">void svn_handle_warning(FILE *stream, svn_error_t *error)</div><div class="ttdoc">Like svn_handle_warning2() but with prefix set to &amp;quot;svn: &amp;quot;. </div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 19 2015 09:37:22 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
