<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Subversion: C string functions</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">C string functions</div>  </div>
<div class="ingroups"><a class="el" href="group__svn__string.html">String handling</a></div></div>
<div class="contents">
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">apr_array_header_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga1af9bdcdb39027b11107088fd02cad9b">svn_cstring_split</a> (const char *input, const char *sep_chars, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> chop_whitespace, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Divide <em>input</em> into substrings along <em>sep_chars</em> boundaries, return an array of copies of those substrings (plain const char*), allocating both the array and the copies in <em>pool</em>.  <a href="#ga1af9bdcdb39027b11107088fd02cad9b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#gabb4be8497dbc9b869bcabefe93a08f83">svn_cstring_split_append</a> (apr_array_header_t *array, const char *input, const char *sep_chars, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> chop_whitespace, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Like <a class="el" href="group__svn__string__cstrings.html#ga1af9bdcdb39027b11107088fd02cad9b" title="Divide input into substrings along sep_chars boundaries, return an array of copies of those substring...">svn_cstring_split()</a>, but append to existing <em>array</em> instead of creating a new one.  <a href="#gabb4be8497dbc9b869bcabefe93a08f83"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga87a19191b67f3a0b9cb690e14ee00fb7"></a><!-- doxytag: member="svn_string_cstrings::svn_cstring_match_glob_list" ref="ga87a19191b67f3a0b9cb690e14ee00fb7" args="(const char *str, const apr_array_header_t *list)" -->
<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga87a19191b67f3a0b9cb690e14ee00fb7">svn_cstring_match_glob_list</a> (const char *str, const apr_array_header_t *list)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <code>TRUE</code> iff <em>str</em> matches any of the elements of <em>list</em>, a list of zero or more glob patterns. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga1f70bcb1cb2c819879693f03043aa0de">svn_cstring_match_list</a> (const char *str, const apr_array_header_t *list)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <code>TRUE</code> iff <em>str</em> exactly matches any of the elements of <em>list</em>.  <a href="#ga1f70bcb1cb2c819879693f03043aa0de"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga842ab6a90aecda5498232ad7dc5a3365">svn_cstring_count_newlines</a> (const char *msg)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of line breaks in <em>msg</em>, allowing any kind of newline termination (CR, LF, CRLF, or LFCR), even inconsistent.  <a href="#ga842ab6a90aecda5498232ad7dc5a3365"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#gac6173f7c6f546c0ebfcdc900b10f22f3">svn_cstring_join</a> (const apr_array_header_t *strings, const char *separator, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a cstring which is the concatenation of <em>strings</em> (an array of char *) each followed by <em>separator</em> (that is, <em>separator</em> will also end the resulting string).  <a href="#gac6173f7c6f546c0ebfcdc900b10f22f3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga33a5b549150b10cc9dae66e96062f077">svn_cstring_casecmp</a> (const char *str1, const char *str2)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare two strings <em>atr1</em> and <em>atr2</em>, treating case-equivalent unaccented Latin (ASCII subset) letters as equal.  <a href="#ga33a5b549150b10cc9dae66e96062f077"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga18761d57b6ad71f09a7a5680f5dd83e7">svn_cstring_strtoi64</a> (apr_int64_t *n, const char *str, apr_int64_t minval, apr_int64_t maxval, int base)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the C string <em>str</em> into a 64 bit number, and return it in <em>*n</em>.  <a href="#ga18761d57b6ad71f09a7a5680f5dd83e7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga79b3d8a797aa0e73ffce52a883d0104e">svn_cstring_atoi64</a> (apr_int64_t *n, const char *str)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the C string <em>str</em> into a 64 bit number, and return it in <em>*n</em>.  <a href="#ga79b3d8a797aa0e73ffce52a883d0104e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#gac55643ce692cdc83320b7ad27efb6452">svn_cstring_atoi</a> (int *n, const char *str)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the C string <em>str</em> into a 32 bit number, and return it in <em>*n</em>.  <a href="#gac55643ce692cdc83320b7ad27efb6452"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#gac69778af4590bde974c4565aa9395584">svn_cstring_strtoui64</a> (apr_uint64_t *n, const char *str, apr_uint64_t minval, apr_uint64_t maxval, int base)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the C string <em>str</em> into an unsigned 64 bit number, and return it in <em>*n</em>.  <a href="#gac69778af4590bde974c4565aa9395584"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga0426301ec4069a4594bd53d5cb6614d6">svn_cstring_atoui64</a> (apr_uint64_t *n, const char *str)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the C string <em>str</em> into an unsigned 64 bit number, and return it in <em>*n</em>.  <a href="#ga0426301ec4069a4594bd53d5cb6614d6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__svn__string__cstrings.html#ga3e99e6c6b2eebd930231c987ecae9966">svn_cstring_atoui</a> (unsigned int *n, const char *str)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the C string <em>str</em> into an unsigned 32 bit number, and return it in <em>*n</em>.  <a href="#ga3e99e6c6b2eebd930231c987ecae9966"></a><br/></td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="gac55643ce692cdc83320b7ad27efb6452"></a><!-- doxytag: member="svn_string.h::svn_cstring_atoi" ref="gac55643ce692cdc83320b7ad27efb6452" args="(int *n, const char *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_cstring_atoi </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Parse the C string <em>str</em> into a 32 bit number, and return it in <em>*n</em>. </p>
<p>Assume that the number is represented in base 10. Raise an error if conversion fails (e.g. due to overflow).</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga79b3d8a797aa0e73ffce52a883d0104e"></a><!-- doxytag: member="svn_string.h::svn_cstring_atoi64" ref="ga79b3d8a797aa0e73ffce52a883d0104e" args="(apr_int64_t *n, const char *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_cstring_atoi64 </td>
          <td>(</td>
          <td class="paramtype">apr_int64_t *&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Parse the C string <em>str</em> into a 64 bit number, and return it in <em>*n</em>. </p>
<p>Assume that the number is represented in base 10. Raise an error if conversion fails (e.g. due to overflow).</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga3e99e6c6b2eebd930231c987ecae9966"></a><!-- doxytag: member="svn_string.h::svn_cstring_atoui" ref="ga3e99e6c6b2eebd930231c987ecae9966" args="(unsigned int *n, const char *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_cstring_atoui </td>
          <td>(</td>
          <td class="paramtype">unsigned int *&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Parse the C string <em>str</em> into an unsigned 32 bit number, and return it in <em>*n</em>. </p>
<p>Assume that the number is represented in base 10. Raise an error if conversion fails (e.g. due to overflow).</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga0426301ec4069a4594bd53d5cb6614d6"></a><!-- doxytag: member="svn_string.h::svn_cstring_atoui64" ref="ga0426301ec4069a4594bd53d5cb6614d6" args="(apr_uint64_t *n, const char *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_cstring_atoui64 </td>
          <td>(</td>
          <td class="paramtype">apr_uint64_t *&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Parse the C string <em>str</em> into an unsigned 64 bit number, and return it in <em>*n</em>. </p>
<p>Assume that the number is represented in base 10. Raise an error if conversion fails (e.g. due to overflow).</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ga33a5b549150b10cc9dae66e96062f077"></a><!-- doxytag: member="svn_string.h::svn_cstring_casecmp" ref="ga33a5b549150b10cc9dae66e96062f077" args="(const char *str1, const char *str2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int svn_cstring_casecmp </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Compare two strings <em>atr1</em> and <em>atr2</em>, treating case-equivalent unaccented Latin (ASCII subset) letters as equal. </p>
<p>Returns in integer greater than, equal to, or less than 0, according to whether <em>str1</em> is considered greater than, equal to, or less than <em>str2</em>.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.5. </dd></dl>

</div>
</div>
<a class="anchor" id="ga842ab6a90aecda5498232ad7dc5a3365"></a><!-- doxytag: member="svn_string.h::svn_cstring_count_newlines" ref="ga842ab6a90aecda5498232ad7dc5a3365" args="(const char *msg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int svn_cstring_count_newlines </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>msg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return the number of line breaks in <em>msg</em>, allowing any kind of newline termination (CR, LF, CRLF, or LFCR), even inconsistent. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="gac6173f7c6f546c0ebfcdc900b10f22f3"></a><!-- doxytag: member="svn_string.h::svn_cstring_join" ref="gac6173f7c6f546c0ebfcdc900b10f22f3" args="(const apr_array_header_t *strings, const char *separator, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* svn_cstring_join </td>
          <td>(</td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>strings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>separator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return a cstring which is the concatenation of <em>strings</em> (an array of char *) each followed by <em>separator</em> (that is, <em>separator</em> will also end the resulting string). </p>
<p>Allocate the result in <em>pool</em>. If <em>strings</em> is empty, then return the empty string.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.2. </dd></dl>

</div>
</div>
<a class="anchor" id="ga1f70bcb1cb2c819879693f03043aa0de"></a><!-- doxytag: member="svn_string.h::svn_cstring_match_list" ref="ga1f70bcb1cb2c819879693f03043aa0de" args="(const char *str, const apr_array_header_t *list)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> svn_cstring_match_list </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const apr_array_header_t *&#160;</td>
          <td class="paramname"><em>list</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return <code>TRUE</code> iff <em>str</em> exactly matches any of the elements of <em>list</em>. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>new in 1.7 </dd></dl>

</div>
</div>
<a class="anchor" id="ga1af9bdcdb39027b11107088fd02cad9b"></a><!-- doxytag: member="svn_string.h::svn_cstring_split" ref="ga1af9bdcdb39027b11107088fd02cad9b" args="(const char *input, const char *sep_chars, svn_boolean_t chop_whitespace, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">apr_array_header_t* svn_cstring_split </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>sep_chars</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>chop_whitespace</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Divide <em>input</em> into substrings along <em>sep_chars</em> boundaries, return an array of copies of those substrings (plain const char*), allocating both the array and the copies in <em>pool</em>. </p>
<p>None of the elements added to the array contain any of the characters in <em>sep_chars</em>, and none of the new elements are empty (thus, it is possible that the returned array will have length zero).</p>
<p>If <em>chop_whitespace</em> is TRUE, then remove leading and trailing whitespace from the returned strings. </p>

</div>
</div>
<a class="anchor" id="gabb4be8497dbc9b869bcabefe93a08f83"></a><!-- doxytag: member="svn_string.h::svn_cstring_split_append" ref="gabb4be8497dbc9b869bcabefe93a08f83" args="(apr_array_header_t *array, const char *input, const char *sep_chars, svn_boolean_t chop_whitespace, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_cstring_split_append </td>
          <td>(</td>
          <td class="paramtype">apr_array_header_t *&#160;</td>
          <td class="paramname"><em>array</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>sep_chars</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>chop_whitespace</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Like <a class="el" href="group__svn__string__cstrings.html#ga1af9bdcdb39027b11107088fd02cad9b" title="Divide input into substrings along sep_chars boundaries, return an array of copies of those substring...">svn_cstring_split()</a>, but append to existing <em>array</em> instead of creating a new one. </p>
<p>Allocate the copied substrings in <em>pool</em> (i.e., caller decides whether or not to pass <em>array-&gt;pool</em> as <em>pool</em>). </p>

</div>
</div>
<a class="anchor" id="ga18761d57b6ad71f09a7a5680f5dd83e7"></a><!-- doxytag: member="svn_string.h::svn_cstring_strtoi64" ref="ga18761d57b6ad71f09a7a5680f5dd83e7" args="(apr_int64_t *n, const char *str, apr_int64_t minval, apr_int64_t maxval, int base)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_cstring_strtoi64 </td>
          <td>(</td>
          <td class="paramtype">apr_int64_t *&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_int64_t&#160;</td>
          <td class="paramname"><em>minval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_int64_t&#160;</td>
          <td class="paramname"><em>maxval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>base</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Parse the C string <em>str</em> into a 64 bit number, and return it in <em>*n</em>. </p>
<p>Assume that the number is represented in base <em>base</em>. Raise an error if conversion fails (e.g. due to overflow), or if the converted number is smaller than <em>minval</em> or larger than <em>maxval</em>.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="gac69778af4590bde974c4565aa9395584"></a><!-- doxytag: member="svn_string.h::svn_cstring_strtoui64" ref="gac69778af4590bde974c4565aa9395584" args="(apr_uint64_t *n, const char *str, apr_uint64_t minval, apr_uint64_t maxval, int base)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_cstring_strtoui64 </td>
          <td>(</td>
          <td class="paramtype">apr_uint64_t *&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_uint64_t&#160;</td>
          <td class="paramname"><em>minval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_uint64_t&#160;</td>
          <td class="paramname"><em>maxval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>base</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Parse the C string <em>str</em> into an unsigned 64 bit number, and return it in <em>*n</em>. </p>
<p>Assume that the number is represented in base <em>base</em>. Raise an error if conversion fails (e.g. due to overflow), or if the converted number is smaller than <em>minval</em> or larger than <em>maxval</em>.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Fri Dec 23 2011 09:20:41 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>
