<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Subversion: Cached authentication data</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Cached authentication data</div>  </div>
</div><!--header-->
<div class="contents">

<p>Accessing cached authentication data in the user config area.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga04879b1b48b5bfab1e31198dd6a921dd"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cached__authentication__data.html#ga04879b1b48b5bfab1e31198dd6a921dd">SVN_CONFIG_REALMSTRING_KEY</a>&#160;&#160;&#160;&quot;svn:realmstring&quot;</td></tr>
<tr class="memdesc:ga04879b1b48b5bfab1e31198dd6a921dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">A hash-key pointing to a realmstring.  <a href="#ga04879b1b48b5bfab1e31198dd6a921dd">More...</a><br/></td></tr>
<tr class="separator:ga04879b1b48b5bfab1e31198dd6a921dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ga57c9fdebc5cff575adec1795ca6c49b0"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cached__authentication__data.html#ga57c9fdebc5cff575adec1795ca6c49b0">svn_config_auth_walk_func_t</a> )(<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *delete_cred, void *cleanup_baton, const char *cred_kind, const char *realmstring, apr_hash_t *hash, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga57c9fdebc5cff575adec1795ca6c49b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Callback for <a class="el" href="group__cached__authentication__data.html#ga4a14698505b552c906d71393570c5124" title="Call walk_func with walk_baton and information describing each credential cached within the Subversio...">svn_config_walk_auth_data()</a>.  <a href="#ga57c9fdebc5cff575adec1795ca6c49b0">More...</a><br/></td></tr>
<tr class="separator:ga57c9fdebc5cff575adec1795ca6c49b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gad5b78b4b2e6476a91f39358d5a003b8b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cached__authentication__data.html#gad5b78b4b2e6476a91f39358d5a003b8b">svn_config_read_auth_data</a> (apr_hash_t **hash, const char *cred_kind, const char *realmstring, const char *config_dir, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gad5b78b4b2e6476a91f39358d5a003b8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use <em>cred_kind</em> and <em>realmstring</em> to locate a file within the ~/.subversion/auth/ area.  <a href="#gad5b78b4b2e6476a91f39358d5a003b8b">More...</a><br/></td></tr>
<tr class="separator:gad5b78b4b2e6476a91f39358d5a003b8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9383a4b14b70895fa72e0fef5d9f27af"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cached__authentication__data.html#ga9383a4b14b70895fa72e0fef5d9f27af">svn_config_write_auth_data</a> (apr_hash_t *hash, const char *cred_kind, const char *realmstring, const char *config_dir, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga9383a4b14b70895fa72e0fef5d9f27af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use <em>cred_kind</em> and <em>realmstring</em> to create or overwrite a file within the ~/.subversion/auth/ area.  <a href="#ga9383a4b14b70895fa72e0fef5d9f27af">More...</a><br/></td></tr>
<tr class="separator:ga9383a4b14b70895fa72e0fef5d9f27af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4a14698505b552c906d71393570c5124"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cached__authentication__data.html#ga4a14698505b552c906d71393570c5124">svn_config_walk_auth_data</a> (const char *config_dir, <a class="el" href="group__cached__authentication__data.html#ga57c9fdebc5cff575adec1795ca6c49b0">svn_config_auth_walk_func_t</a> walk_func, void *walk_baton, apr_pool_t *scratch_pool)</td></tr>
<tr class="memdesc:ga4a14698505b552c906d71393570c5124"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call <em>walk_func</em> with <em>walk_baton</em> and information describing each credential cached within the Subversion auth store located under <em>config_dir</em>.  <a href="#ga4a14698505b552c906d71393570c5124">More...</a><br/></td></tr>
<tr class="separator:ga4a14698505b552c906d71393570c5124"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad219f821cb1c8f72e593fe396f9167bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cached__authentication__data.html#gad219f821cb1c8f72e593fe396f9167bb">svn_config_get_user_config_path</a> (const char **path, const char *config_dir, const char *fname, apr_pool_t *pool)</td></tr>
<tr class="memdesc:gad219f821cb1c8f72e593fe396f9167bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Put the absolute path to the user's configuration directory, or to a file within that directory, into <em>*path</em>.  <a href="#gad219f821cb1c8f72e593fe396f9167bb">More...</a><br/></td></tr>
<tr class="separator:gad219f821cb1c8f72e593fe396f9167bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga98a7605fc4e4ed9beac05c9ba296ab6f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cached__authentication__data.html#ga98a7605fc4e4ed9beac05c9ba296ab6f">svn_config_dup</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> **cfgp, <a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *src, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga98a7605fc4e4ed9beac05c9ba296ab6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a deep copy of the config object <em>src</em> and return it in <em>cfgp</em>, allocating the memory in <em>pool</em>.  <a href="#ga98a7605fc4e4ed9beac05c9ba296ab6f">More...</a><br/></td></tr>
<tr class="separator:ga98a7605fc4e4ed9beac05c9ba296ab6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2eb8c81e29daf00099d0b4abad48a46d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cached__authentication__data.html#ga2eb8c81e29daf00099d0b4abad48a46d">svn_config_copy_config</a> (apr_hash_t **cfg_hash, apr_hash_t *src_hash, apr_pool_t *pool)</td></tr>
<tr class="memdesc:ga2eb8c81e29daf00099d0b4abad48a46d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a deep copy of the config hash <em>src_hash</em> and return it in <em>cfg_hash</em>, allocating the memory in <em>pool</em>.  <a href="#ga2eb8c81e29daf00099d0b4abad48a46d">More...</a><br/></td></tr>
<tr class="separator:ga2eb8c81e29daf00099d0b4abad48a46d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Accessing cached authentication data in the user config area. </p>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="ga04879b1b48b5bfab1e31198dd6a921dd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_CONFIG_REALMSTRING_KEY&#160;&#160;&#160;&quot;svn:realmstring&quot;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A hash-key pointing to a realmstring. </p>
<p>Every file containing authentication data should have this key. </p>

<p>Definition at line <a class="el" href="svn__config_8h_source.html#l00665">665</a> of file <a class="el" href="svn__config_8h_source.html">svn_config.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="ga57c9fdebc5cff575adec1795ca6c49b0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structsvn__error__t.html">svn_error_t</a>*(* svn_config_auth_walk_func_t)(<a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *delete_cred, void *cleanup_baton, const char *cred_kind, const char *realmstring, apr_hash_t *hash, apr_pool_t *scratch_pool)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Callback for <a class="el" href="group__cached__authentication__data.html#ga4a14698505b552c906d71393570c5124" title="Call walk_func with walk_baton and information describing each credential cached within the Subversio...">svn_config_walk_auth_data()</a>. </p>
<p>Called for each credential walked by that function (and able to be fully purged) to allow perusal and selective removal of credentials.</p>
<p><em>cred_kind</em> and <em>realmstring</em> specify the key of the credential. <em>hash</em> contains the hash data associated with the record.</p>
<p>Before returning set <em>*delete_cred</em> to TRUE to remove the credential from the cache; leave <em>*delete_cred</em> unchanged or set it to FALSE to keep the credential.</p>
<p>Implementations may return <a class="el" href="svn__error__codes_8h.html#ac8784565366c15a28d456c4997963660a185d3dbc5292f6ddbdb957bc8d8658da" title="&quot;Cease invocation of this API&quot; ">SVN_ERR_CEASE_INVOCATION</a> to indicate that the callback should not be called again. Note that when that error is returned, the value of <em>delete_cred</em> will still be honored and action taken if necessary. (For other returned errors, <em>delete_cred</em> is ignored by <a class="el" href="group__cached__authentication__data.html#ga4a14698505b552c906d71393570c5124" title="Call walk_func with walk_baton and information describing each credential cached within the Subversio...">svn_config_walk_auth_data()</a>.)</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.8. </dd></dl>

<p>Definition at line <a class="el" href="svn__config_8h_source.html#l00730">730</a> of file <a class="el" href="svn__config_8h_source.html">svn_config.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga2eb8c81e29daf00099d0b4abad48a46d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_copy_config </td>
          <td>(</td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>cfg_hash</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>src_hash</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a deep copy of the config hash <em>src_hash</em> and return it in <em>cfg_hash</em>, allocating the memory in <em>pool</em>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.8. </dd></dl>

</div>
</div>
<a class="anchor" id="ga98a7605fc4e4ed9beac05c9ba296ab6f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_dup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> **&#160;</td>
          <td class="paramname"><em>cfgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a deep copy of the config object <em>src</em> and return it in <em>cfgp</em>, allocating the memory in <em>pool</em>. </p>
<dl class="section since"><dt>Since</dt><dd>New in 1.8. </dd></dl>

</div>
</div>
<a class="anchor" id="gad219f821cb1c8f72e593fe396f9167bb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_get_user_config_path </td>
          <td>(</td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>config_dir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Put the absolute path to the user's configuration directory, or to a file within that directory, into <em>*path</em>. </p>
<p>If <em>config_dir</em> is not NULL, it must point to an alternative config directory location. If it is NULL, the default location is used. If <em>fname</em> is not NULL, it must specify the last component of the path to be returned. This can be used to create a path to any file in the configuration directory.</p>
<p>Do all allocations in <em>pool</em>.</p>
<p>Hint: To get the user configuration file, pass <code>SVN_CONFIG_CATEGORY_CONFIG</code> for <em>fname</em>. To get the servers configuration file, pass <code>SVN_CONFIG_CATEGORY_SERVERS</code> for <em>fname</em>.</p>
<dl class="section since"><dt>Since</dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="gad5b78b4b2e6476a91f39358d5a003b8b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_read_auth_data </td>
          <td>(</td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>hash</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>cred_kind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>realmstring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>config_dir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Use <em>cred_kind</em> and <em>realmstring</em> to locate a file within the ~/.subversion/auth/ area. </p>
<p>If the file exists, initialize <em>*hash</em> and load the file contents into the hash, using <em>pool</em>. If the file doesn't exist, set <em>*hash</em> to NULL.</p>
<p>If <em>config_dir</em> is not NULL it specifies a directory from which to read the config overriding all other sources.</p>
<p>Besides containing the original credential fields, the hash will also contain <code>SVN_CONFIG_REALMSTRING_KEY</code>. The caller can examine this value as a sanity-check that the correct file was loaded.</p>
<p>The hashtable will contain <code>const char *</code> keys and <code><a class="el" href="structsvn__string__t.html" title="A simple counted string. ">svn_string_t</a> *</code> values. </p>

</div>
</div>
<a class="anchor" id="ga4a14698505b552c906d71393570c5124"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_walk_auth_data </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>config_dir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__cached__authentication__data.html#ga57c9fdebc5cff575adec1795ca6c49b0">svn_config_auth_walk_func_t</a>&#160;</td>
          <td class="paramname"><em>walk_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>walk_baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>scratch_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Call <em>walk_func</em> with <em>walk_baton</em> and information describing each credential cached within the Subversion auth store located under <em>config_dir</em>. </p>
<p>If the callback sets its delete_cred return flag, delete the associated credential.</p>
<p>If <em>config_dir</em> is not NULL, it must point to an alternative config directory location. If it is NULL, the default location is used.</p>
<dl class="section note"><dt>Note</dt><dd><em>config_dir</em> may only be NULL in 1.8.2 and later.</dd>
<dd>
Removing credentials from the config-based disk store will not purge them from any open svn_auth_baton_t instance. Consider using <a class="el" href="group__auth__fns.html#gaa1581f354af47a824044480e11129a22" title="Forget a set (or all) memory-cached credentials. ">svn_auth_forget_credentials()</a> &ndash; from the <em>cleanup_func</em>, even &ndash; for this purpose.</dd>
<dd>
Removing credentials from the config-based disk store will not also remove any related credentials from third-party password stores. (Implementations of <em>walk_func</em> which delete credentials may wish to consult the "passtype" element of <em>hash</em>, if any, to see if a third-party store &ndash; such as "gnome-keyring" or "kwallet" is being used to hold the most sensitive portion of the credentials for this <em>cred_kind</em> and <em>realmstring</em>.)</dd></dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="group__auth__fns.html#gaa1581f354af47a824044480e11129a22" title="Forget a set (or all) memory-cached credentials. ">svn_auth_forget_credentials()</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>New in 1.8. </dd></dl>

</div>
</div>
<a class="anchor" id="ga9383a4b14b70895fa72e0fef5d9f27af"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_write_auth_data </td>
          <td>(</td>
          <td class="paramtype">apr_hash_t *&#160;</td>
          <td class="paramname"><em>hash</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>cred_kind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>realmstring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>config_dir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Use <em>cred_kind</em> and <em>realmstring</em> to create or overwrite a file within the ~/.subversion/auth/ area. </p>
<p>Write the contents of <em>hash</em> into the file. If <em>config_dir</em> is not NULL it specifies a directory to read the config overriding all other sources.</p>
<p>Also, add <em>realmstring</em> to the file, with key <code>SVN_CONFIG_REALMSTRING_KEY</code>. This allows programs (or users) to verify exactly which set credentials live within the file.</p>
<p>The hashtable must contain <code>const char *</code> keys and <code><a class="el" href="structsvn__string__t.html" title="A simple counted string. ">svn_string_t</a> *</code> values. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 19 2015 09:37:24 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
