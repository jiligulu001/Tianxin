<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>Subversion: svn_sorts.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_c37f7789c49aa9e5999234152b1ef6ed.html">subversion</a></li><li class="navelem"><a class="el" href="dir_334478eea8dba5ae935f94af9469978f.html">include</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">svn_sorts.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="svn__sorts_8h.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * @copyright</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * ====================================================================</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *    Licensed to the Apache Software Foundation (ASF) under one</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *    or more contributor license agreements.  See the NOTICE file</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *    distributed with this work for additional information</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *    regarding copyright ownership.  The ASF licenses this file</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *    to you under the Apache License, Version 2.0 (the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *    &quot;License&quot;); you may not use this file except in compliance</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *    with the License.  You may obtain a copy of the License at</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *    Unless required by applicable law or agreed to in writing,</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *    software distributed under the License is distributed on an</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *    &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *    KIND, either express or implied.  See the License for the</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *    specific language governing permissions and limitations</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *    under the License.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * ====================================================================</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * @endcopyright</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> * @file svn_sorts.h</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> * @brief all sorts of sorts.</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#ifndef SVN_SORTS_H</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SVN_SORTS_H</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;apr.h&gt;</span>         <span class="comment">/* for apr_ssize_t */</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;apr_pools.h&gt;</span>   <span class="comment">/* for apr_pool_t */</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;apr_tables.h&gt;</span>  <span class="comment">/* for apr_array_header_t */</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;apr_hash.h&gt;</span>    <span class="comment">/* for apr_hash_t */</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">/* Define a MAX macro if we don&#39;t already have one */</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#ifndef MAX</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define MAX(a, b) ((a) &lt; (b) ? (b) : (a))</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">/* Define a MIN macro if we don&#39;t already have one */</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#ifndef MIN</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define MIN(a, b) ((a) &lt; (b) ? (a) : (b))</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">/** This structure is used to hold a key/value from a hash table.</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> * @note Private. For use by Subversion&#39;s own code only. See issue #1644.</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="structsvn__sort____item__t.html">   55</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__sort____item__t.html">svn_sort__item_t</a> {<span class="comment"></span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">  /** pointer to the key */</span></div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="structsvn__sort____item__t.html#af527197c6ff484477a77e7743e9a3030">   57</a></span>&#160;  <span class="keyword">const</span> <span class="keywordtype">void</span> *<a class="code" href="structsvn__sort____item__t.html#af527197c6ff484477a77e7743e9a3030">key</a>;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">  /** size of the key */</span></div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="structsvn__sort____item__t.html#a7b753a4f17f1c342ee363e345dedbc6d">   60</a></span>&#160;  apr_ssize_t <a class="code" href="structsvn__sort____item__t.html#a7b753a4f17f1c342ee363e345dedbc6d">klen</a>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">  /** pointer to the value */</span></div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="structsvn__sort____item__t.html#ae07859f34ca406e59b72db3788c5399f">   63</a></span>&#160;  <span class="keywordtype">void</span> *<a class="code" href="structsvn__sort____item__t.html#ae07859f34ca406e59b72db3788c5399f">value</a>;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;} <a class="code" href="svn__sorts_8h.html#af02d34fd4f4a82763ee9f1616b11afbb">svn_sort__item_t</a>;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">/** Compare two @c svn_sort__item_t&#39;s, returning an integer greater than,</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"> * equal to, or less than 0, according to whether the key of @a a is</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"> * greater than, equal to, or less than the key of @a b as determined</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"> * by comparing them with svn_path_compare_paths().</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> * The key strings must be NULL-terminated, even though klen does not</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> * include the terminator.</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> * This is useful for converting a hash into a sorted</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> * @c apr_array_header_t.  For example, to convert hash @a hsh to a sorted</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> * array, do this:</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> * @code</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">     apr_array_header_t *array;</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">     array = svn_sort__hash(hsh, svn_sort_compare_items_as_paths, pool);</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">   @endcode</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> * This function works like svn_sort_compare_items_lexically() except that it</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> * orders children in subdirectories directly after their parents. This allows</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> * using the given ordering for a depth first walk, but at a performance</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"> * penalty. Code that doesn&#39;t need this special behavior for children, e.g. when</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"> * sorting files at a single directory level should use</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"> * svn_sort_compare_items_lexically() instead.</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keywordtype">int</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<a class="code" href="svn__sorts_8h.html#aa19ecf19e3040f6fe234f7406493c459">svn_sort_compare_items_as_paths</a>(<span class="keyword">const</span> <a class="code" href="structsvn__sort____item__t.html">svn_sort__item_t</a> *a,</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                <span class="keyword">const</span> <a class="code" href="structsvn__sort____item__t.html">svn_sort__item_t</a> *b);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">/** Compare two @c svn_sort__item_t&#39;s, returning an integer greater than,</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"> * equal to, or less than 0, according as @a a is greater than, equal to,</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"> * or less than @a b according to a lexical key comparison.  The keys are</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"> * not required to be zero-terminated.</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keywordtype">int</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<a class="code" href="svn__sorts_8h.html#a01a31be6b873bd72546a24a74204df1b">svn_sort_compare_items_lexically</a>(<span class="keyword">const</span> <a class="code" href="structsvn__sort____item__t.html">svn_sort__item_t</a> *a,</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="structsvn__sort____item__t.html">svn_sort__item_t</a> *b);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">/** Compare two @c svn_revnum_t&#39;s, returning an integer greater than, equal</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"> * to, or less than 0, according as @a b is greater than, equal to, or less</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"> * than @a a. Note that this sorts newest revision to oldest (IOW, descending</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"> * order).</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"> * This function is compatible for use with qsort().</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"> * This is useful for converting an array of revisions into a sorted</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"> * @c apr_array_header_t. You are responsible for detecting, preventing or</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"> * removing duplicates.</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keywordtype">int</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<a class="code" href="svn__sorts_8h.html#abdb819edeff863b1c9dd366cb073623c">svn_sort_compare_revisions</a>(<span class="keyword">const</span> <span class="keywordtype">void</span> *a,</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                           <span class="keyword">const</span> <span class="keywordtype">void</span> *b);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> * Compare two @c const char * paths, @a *a and @a *b, returning an</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> * integer greater than, equal to, or less than 0, using the same</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"> * comparison rules as are used by svn_path_compare_paths().</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> * This function is compatible for use with qsort().</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"> * @since New in 1.1.</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keywordtype">int</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<a class="code" href="svn__sorts_8h.html#ad42bcf05d0e53470ab8424c1c3f09217">svn_sort_compare_paths</a>(<span class="keyword">const</span> <span class="keywordtype">void</span> *a,</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                       <span class="keyword">const</span> <span class="keywordtype">void</span> *b);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"> * Compare two @c svn_merge_range_t *&#39;s, @a *a and @a *b, returning an</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"> * integer greater than, equal to, or less than 0 if the first range is</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"> * greater than, equal to, or less than, the second range.</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"> * Both @c svn_merge_range_t *&#39;s must describe forward merge ranges.</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"> * If @a *a and @a *b intersect then the range with the lower start revision</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"> * is considered the lesser range.  If the ranges&#39; start revisions are</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"> * equal then the range with the lower end revision is considered the</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"> * lesser range.</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"> * @since New in 1.5</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keywordtype">int</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<a class="code" href="svn__sorts_8h.html#a58a32c4f0a5c14672865be8768b1113a">svn_sort_compare_ranges</a>(<span class="keyword">const</span> <span class="keywordtype">void</span> *a,</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">void</span> *b);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">/** Sort @a ht according to its keys, return an @c apr_array_header_t</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"> * containing @c svn_sort__item_t structures holding those keys and values</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"> * (i.e. for each @c svn_sort__item_t @a item in the returned array,</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"> * @a item-&gt;key and @a item-&gt;size are the hash key, and @a item-&gt;value points to</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"> * the hash value).</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"> * Storage is shared with the original hash, not copied.</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"> * @a comparison_func should take two @c svn_sort__item_t&#39;s and return an</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment"> * integer greater than, equal to, or less than 0, according as the first item</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"> * is greater than, equal to, or less than the second.</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"> * @note Private. For use by Subversion&#39;s own code only. See issue #1644.</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment"> * @note This function and the @c svn_sort__item_t should go over to APR.</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;apr_array_header_t *</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<a class="code" href="svn__sorts_8h.html#ad90c805453e6015d2d182d651c964009">svn_sort__hash</a>(apr_hash_t *ht,</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;               <span class="keywordtype">int</span> (*comparison_func)(<span class="keyword">const</span> <a class="code" href="structsvn__sort____item__t.html">svn_sort__item_t</a> *,</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="structsvn__sort____item__t.html">svn_sort__item_t</a> *),</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;               apr_pool_t *pool);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">/* Return the lowest index at which the element @a *key should be inserted into</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"> * the array @a array, according to the ordering defined by @a compare_func.</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"> * The array must already be sorted in the ordering defined by @a compare_func.</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"> * @a compare_func is defined as for the C stdlib function bsearch().</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"> * @note Private. For use by Subversion&#39;s own code only.</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keywordtype">int</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;svn_sort__bsearch_lower_bound(<span class="keyword">const</span> <span class="keywordtype">void</span> *key,</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                              <span class="keyword">const</span> apr_array_header_t *array,</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                              <span class="keywordtype">int</span> (*compare_func)(<span class="keyword">const</span> <span class="keywordtype">void</span> *, <span class="keyword">const</span> <span class="keywordtype">void</span> *));</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">/* Insert a shallow copy of @a *new_element into the array @a array at the index</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"> * @a insert_index, growing the array and shuffling existing elements along to</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"> * make room.</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"> * @note Private. For use by Subversion&#39;s own code only.</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;svn_sort__array_insert(<span class="keyword">const</span> <span class="keywordtype">void</span> *new_element,</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                       apr_array_header_t *array,</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                       <span class="keywordtype">int</span> insert_index);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">/* Remove @a elements_to_delete elements starting at @a delete_index from the</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment"> * array @a arr. If @a delete_index is not a valid element of @a arr,</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"> * @a elements_to_delete is not greater than zero, or</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment"> * @a delete_index + @a elements_to_delete is greater than @a arr-&gt;nelts,</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment"> * then do nothing.</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment"> * @note Private. For use by Subversion&#39;s own code only.</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;svn_sort__array_delete(apr_array_header_t *arr,</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                       <span class="keywordtype">int</span> delete_index,</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                       <span class="keywordtype">int</span> elements_to_delete);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">/* Reverse the order of elements in @a array, in place.</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"> * @note Private. For use by Subversion&#39;s own code only.</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;svn_sort__array_reverse(apr_array_header_t *array,</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        apr_pool_t *scratch_pool);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SVN_SORTS_H */</span><span class="preprocessor"></span></div>
<div class="ttc" id="structsvn__sort____item__t_html_a7b753a4f17f1c342ee363e345dedbc6d"><div class="ttname"><a href="structsvn__sort____item__t.html#a7b753a4f17f1c342ee363e345dedbc6d">svn_sort__item_t::klen</a></div><div class="ttdeci">apr_ssize_t klen</div><div class="ttdoc">size of the key </div><div class="ttdef"><b>Definition:</b> <a href="svn__sorts_8h_source.html#l00060">svn_sorts.h:60</a></div></div>
<div class="ttc" id="svn__sorts_8h_html_a01a31be6b873bd72546a24a74204df1b"><div class="ttname"><a href="svn__sorts_8h.html#a01a31be6b873bd72546a24a74204df1b">svn_sort_compare_items_lexically</a></div><div class="ttdeci">int svn_sort_compare_items_lexically(const svn_sort__item_t *a, const svn_sort__item_t *b)</div><div class="ttdoc">Compare two svn_sort__item_t&amp;#39;s, returning an integer greater than, equal to, or less than 0...</div></div>
<div class="ttc" id="structsvn__sort____item__t_html"><div class="ttname"><a href="structsvn__sort____item__t.html">svn_sort__item_t</a></div><div class="ttdoc">This structure is used to hold a key/value from a hash table. </div><div class="ttdef"><b>Definition:</b> <a href="svn__sorts_8h_source.html#l00055">svn_sorts.h:55</a></div></div>
<div class="ttc" id="svn__sorts_8h_html_ad42bcf05d0e53470ab8424c1c3f09217"><div class="ttname"><a href="svn__sorts_8h.html#ad42bcf05d0e53470ab8424c1c3f09217">svn_sort_compare_paths</a></div><div class="ttdeci">int svn_sort_compare_paths(const void *a, const void *b)</div><div class="ttdoc">Compare two const char * paths, *a and *b, returning an integer greater than, equal to...</div></div>
<div class="ttc" id="structsvn__sort____item__t_html_af527197c6ff484477a77e7743e9a3030"><div class="ttname"><a href="structsvn__sort____item__t.html#af527197c6ff484477a77e7743e9a3030">svn_sort__item_t::key</a></div><div class="ttdeci">const void * key</div><div class="ttdoc">pointer to the key </div><div class="ttdef"><b>Definition:</b> <a href="svn__sorts_8h_source.html#l00057">svn_sorts.h:57</a></div></div>
<div class="ttc" id="svn__sorts_8h_html_a58a32c4f0a5c14672865be8768b1113a"><div class="ttname"><a href="svn__sorts_8h.html#a58a32c4f0a5c14672865be8768b1113a">svn_sort_compare_ranges</a></div><div class="ttdeci">int svn_sort_compare_ranges(const void *a, const void *b)</div><div class="ttdoc">Compare two svn_merge_range_t *&amp;#39;s, *a and *b, returning an integer greater than, equal to...</div></div>
<div class="ttc" id="svn__sorts_8h_html_abdb819edeff863b1c9dd366cb073623c"><div class="ttname"><a href="svn__sorts_8h.html#abdb819edeff863b1c9dd366cb073623c">svn_sort_compare_revisions</a></div><div class="ttdeci">int svn_sort_compare_revisions(const void *a, const void *b)</div><div class="ttdoc">Compare two svn_revnum_t&amp;#39;s, returning an integer greater than, equal to, or less than 0...</div></div>
<div class="ttc" id="svn__sorts_8h_html_ad90c805453e6015d2d182d651c964009"><div class="ttname"><a href="svn__sorts_8h.html#ad90c805453e6015d2d182d651c964009">svn_sort__hash</a></div><div class="ttdeci">apr_array_header_t * svn_sort__hash(apr_hash_t *ht, int(*comparison_func)(const svn_sort__item_t *, const svn_sort__item_t *), apr_pool_t *pool)</div><div class="ttdoc">Sort ht according to its keys, return an apr_array_header_t containing svn_sort__item_t structures ho...</div></div>
<div class="ttc" id="structsvn__sort____item__t_html_ae07859f34ca406e59b72db3788c5399f"><div class="ttname"><a href="structsvn__sort____item__t.html#ae07859f34ca406e59b72db3788c5399f">svn_sort__item_t::value</a></div><div class="ttdeci">void * value</div><div class="ttdoc">pointer to the value </div><div class="ttdef"><b>Definition:</b> <a href="svn__sorts_8h_source.html#l00063">svn_sorts.h:63</a></div></div>
<div class="ttc" id="svn__sorts_8h_html_aa19ecf19e3040f6fe234f7406493c459"><div class="ttname"><a href="svn__sorts_8h.html#aa19ecf19e3040f6fe234f7406493c459">svn_sort_compare_items_as_paths</a></div><div class="ttdeci">int svn_sort_compare_items_as_paths(const svn_sort__item_t *a, const svn_sort__item_t *b)</div><div class="ttdoc">Compare two svn_sort__item_t&amp;#39;s, returning an integer greater than, equal to, or less than 0...</div></div>
<div class="ttc" id="svn__sorts_8h_html_af02d34fd4f4a82763ee9f1616b11afbb"><div class="ttname"><a href="svn__sorts_8h.html#af02d34fd4f4a82763ee9f1616b11afbb">svn_sort__item_t</a></div><div class="ttdeci">struct svn_sort__item_t svn_sort__item_t</div><div class="ttdoc">This structure is used to hold a key/value from a hash table. </div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 19 2015 09:37:22 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
