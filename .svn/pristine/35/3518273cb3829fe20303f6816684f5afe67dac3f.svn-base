<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Subversion: svn_config.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">svn_config.h File Reference</div>  </div>
</div>
<div class="contents">

<p>Accessing SVN configuration files.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &lt;apr.h&gt;</code><br/>
<code>#include &lt;apr_pools.h&gt;</code><br/>
<code>#include &lt;apr_hash.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="svn__types_8h_source.html">svn_types.h</a>&quot;</code><br/>
</div>
<p><a href="svn__config_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a898312bb32bd1b43e0e44e576c5a8501"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_1" ref="a898312bb32bd1b43e0e44e576c5a8501" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_1</b>&#160;&#160;&#160;&quot;*.o *.lo *.la *.al .libs *.so *.so.[0-9]* *.a *.pyc *.pyo&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1910ff9cbd66667bf82436dc98e3f5cd"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_2" ref="a1910ff9cbd66667bf82436dc98e3f5cd" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_2</b>&#160;&#160;&#160;&quot;*.rej *~ #*# .#* .*.swp .DS_Store&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_DEFAULT_GLOBAL_IGNORES</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad75a231b62e9f27830324b1b833cf611"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_TRUE" ref="ad75a231b62e9f27830324b1b833cf611" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_TRUE</b>&#160;&#160;&#160;&quot;TRUE&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="acf9314cda930475e918b602344b907d3"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_FALSE" ref="acf9314cda930475e918b602344b907d3" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_FALSE</b>&#160;&#160;&#160;&quot;FALSE&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a704aa55e032c4f377b938e3ffd43268c"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_ASK" ref="a704aa55e032c4f377b938e3ffd43268c" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_ASK</b>&#160;&#160;&#160;&quot;ASK&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2f6ed6edc3bb6e9026884527be97faff"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_DEFAULT_OPTION_STORE_PASSWORDS" ref="a2f6ed6edc3bb6e9026884527be97faff" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_DEFAULT_OPTION_STORE_PASSWORDS</b>&#160;&#160;&#160;TRUE</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1c0aa158bff3d806325497c88ad208a7"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_DEFAULT_OPTION_STORE_PLAINTEXT_PASSWORDS" ref="a1c0aa158bff3d806325497c88ad208a7" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_DEFAULT_OPTION_STORE_PLAINTEXT_PASSWORDS</b>&#160;&#160;&#160;SVN_CONFIG_ASK</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5f6c34b3cf97e19df7d7462ac5d024c0"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_DEFAULT_OPTION_STORE_AUTH_CREDS" ref="a5f6c34b3cf97e19df7d7462ac5d024c0" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_DEFAULT_OPTION_STORE_AUTH_CREDS</b>&#160;&#160;&#160;TRUE</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5f50ac82b2184e9e9ef767fcfd5de258"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_DEFAULT_OPTION_STORE_SSL_CLIENT_CERT_PP" ref="a5f50ac82b2184e9e9ef767fcfd5de258" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_DEFAULT_OPTION_STORE_SSL_CLIENT_CERT_PP</b>&#160;&#160;&#160;TRUE</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae046f38481e3f8eab4a0c648a2d7662c"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_DEFAULT_OPTION_STORE_SSL_CLIENT_CERT_PP_PLAINTEXT" ref="ae046f38481e3f8eab4a0c648a2d7662c" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_DEFAULT_OPTION_STORE_SSL_CLIENT_CERT_PP_PLAINTEXT</b>&#160;&#160;&#160;SVN_CONFIG_ASK</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cached__authentication__data.html#ga04879b1b48b5bfab1e31198dd6a921dd">SVN_CONFIG_REALMSTRING_KEY</a>&#160;&#160;&#160;&quot;svn:realmstring&quot;</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A hash-key pointing to a realmstring.  <a href="group__cached__authentication__data.html#ga04879b1b48b5bfab1e31198dd6a921dd"></a><br/></td></tr>
<tr><td colspan="2"><div class="groupHeader">Client configuration files strings</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Strings for the names of files, sections, and options in the client configuration files. </p>
</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6c699dcff4cc6a639bbfc36c41a976b6"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_CATEGORY_SERVERS" ref="a6c699dcff4cc6a639bbfc36c41a976b6" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_CATEGORY_SERVERS</b>&#160;&#160;&#160;&quot;servers&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0bf7794e45efb49974ef5fa2cf1b28df"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_SECTION_GROUPS" ref="a0bf7794e45efb49974ef5fa2cf1b28df" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_SECTION_GROUPS</b>&#160;&#160;&#160;&quot;groups&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aac638560b58ccf65d38b6fa340956482"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_SECTION_GLOBAL" ref="aac638560b58ccf65d38b6fa340956482" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_SECTION_GLOBAL</b>&#160;&#160;&#160;&quot;global&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2859191441f7cfaa2a7ed2d32bfd2e92"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_HTTP_PROXY_HOST" ref="a2859191441f7cfaa2a7ed2d32bfd2e92" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_HTTP_PROXY_HOST</b>&#160;&#160;&#160;&quot;http-proxy-host&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2759c0efddf294e5e5fbae6a8743020e"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_HTTP_PROXY_PORT" ref="a2759c0efddf294e5e5fbae6a8743020e" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_HTTP_PROXY_PORT</b>&#160;&#160;&#160;&quot;http-proxy-port&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abdbcce98e1ce62de2efe514393343ee9"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_HTTP_PROXY_USERNAME" ref="abdbcce98e1ce62de2efe514393343ee9" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_HTTP_PROXY_USERNAME</b>&#160;&#160;&#160;&quot;http-proxy-username&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3f16f02cbbf19b131ca43fca76bbbfaa"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_HTTP_PROXY_PASSWORD" ref="a3f16f02cbbf19b131ca43fca76bbbfaa" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_HTTP_PROXY_PASSWORD</b>&#160;&#160;&#160;&quot;http-proxy-password&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af24f70a3f9985ff7dbf098a40ce02417"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_HTTP_PROXY_EXCEPTIONS" ref="af24f70a3f9985ff7dbf098a40ce02417" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_HTTP_PROXY_EXCEPTIONS</b>&#160;&#160;&#160;&quot;http-proxy-exceptions&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abffe5e9e53f5ee941a64f234bfc3cda5"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_HTTP_TIMEOUT" ref="abffe5e9e53f5ee941a64f234bfc3cda5" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_HTTP_TIMEOUT</b>&#160;&#160;&#160;&quot;http-timeout&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7bd3d1b41da58160cc512b57997713a3"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_HTTP_COMPRESSION" ref="a7bd3d1b41da58160cc512b57997713a3" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_HTTP_COMPRESSION</b>&#160;&#160;&#160;&quot;http-compression&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5c7f0ddd5f7ed0cfb43d9c2a2921556b"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_NEON_DEBUG_MASK" ref="a5c7f0ddd5f7ed0cfb43d9c2a2921556b" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_NEON_DEBUG_MASK</b>&#160;&#160;&#160;&quot;neon-debug-mask&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4c8dbfddfc1363846f2832e53a384b64"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_HTTP_AUTH_TYPES" ref="a4c8dbfddfc1363846f2832e53a384b64" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_HTTP_AUTH_TYPES</b>&#160;&#160;&#160;&quot;http-auth-types&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad5c064dd9a9affc0ad0570538271d71a"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_SSL_AUTHORITY_FILES" ref="ad5c064dd9a9affc0ad0570538271d71a" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_SSL_AUTHORITY_FILES</b>&#160;&#160;&#160;&quot;ssl-authority-files&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8bfcdbe6c979c23b56dd7cf4abe5d5ad"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_SSL_TRUST_DEFAULT_CA" ref="a8bfcdbe6c979c23b56dd7cf4abe5d5ad" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_SSL_TRUST_DEFAULT_CA</b>&#160;&#160;&#160;&quot;ssl-trust-default-ca&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8902c6cb1c0a2aee7f4b48284ca3902b"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_SSL_CLIENT_CERT_FILE" ref="a8902c6cb1c0a2aee7f4b48284ca3902b" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_SSL_CLIENT_CERT_FILE</b>&#160;&#160;&#160;&quot;ssl-client-cert-file&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8280e74a9cd0c69a7c506c4dd6fbabad"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_SSL_CLIENT_CERT_PASSWORD" ref="a8280e74a9cd0c69a7c506c4dd6fbabad" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_SSL_CLIENT_CERT_PASSWORD</b>&#160;&#160;&#160;&quot;ssl-client-cert-password&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab5630c551e51e37e5148877a6b77fa10"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_SSL_PKCS11_PROVIDER" ref="ab5630c551e51e37e5148877a6b77fa10" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_SSL_PKCS11_PROVIDER</b>&#160;&#160;&#160;&quot;ssl-pkcs11-provider&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4496c0a2b3cc95c09f91ebffe48a7ac5"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_HTTP_LIBRARY" ref="a4496c0a2b3cc95c09f91ebffe48a7ac5" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_HTTP_LIBRARY</b>&#160;&#160;&#160;&quot;http-library&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9d63cbc5efdb10666cfa9edc5dae04de"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_STORE_PASSWORDS" ref="a9d63cbc5efdb10666cfa9edc5dae04de" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_STORE_PASSWORDS</b>&#160;&#160;&#160;&quot;store-passwords&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab629b476443e1bbd898bfccb87f020ef"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_STORE_PLAINTEXT_PASSWORDS" ref="ab629b476443e1bbd898bfccb87f020ef" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_STORE_PLAINTEXT_PASSWORDS</b>&#160;&#160;&#160;&quot;store-plaintext-passwords&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4d3da8ed4ceac2211c1675d3721473f5"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_STORE_AUTH_CREDS" ref="a4d3da8ed4ceac2211c1675d3721473f5" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_STORE_AUTH_CREDS</b>&#160;&#160;&#160;&quot;store-auth-creds&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2d66f5349083913f58c327f8ac7df61d"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_STORE_SSL_CLIENT_CERT_PP" ref="a2d66f5349083913f58c327f8ac7df61d" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_STORE_SSL_CLIENT_CERT_PP</b>&#160;&#160;&#160;&quot;store-ssl-client-cert-pp&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab166387e86824091e91072da1ed6973b"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_STORE_SSL_CLIENT_CERT_PP_PLAINTEXT" ref="ab166387e86824091e91072da1ed6973b" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_STORE_SSL_CLIENT_CERT_PP_PLAINTEXT</b>&#160;&#160;&#160;&quot;store-ssl-client-cert-pp-plaintext&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6a3b34b3b0301c2e5ad49096a5ae9b5c"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_USERNAME" ref="a6a3b34b3b0301c2e5ad49096a5ae9b5c" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_USERNAME</b>&#160;&#160;&#160;&quot;username&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af66452a167c098987ed7a8ac947aedd3"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_CATEGORY_CONFIG" ref="af66452a167c098987ed7a8ac947aedd3" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_CATEGORY_CONFIG</b>&#160;&#160;&#160;&quot;config&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7bd1ede731d1dc8807ef70ad5fca97d3"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_SECTION_AUTH" ref="a7bd1ede731d1dc8807ef70ad5fca97d3" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_SECTION_AUTH</b>&#160;&#160;&#160;&quot;auth&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a191f9d5fffdc9f0129a8b54946687d46"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_PASSWORD_STORES" ref="a191f9d5fffdc9f0129a8b54946687d46" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_PASSWORD_STORES</b>&#160;&#160;&#160;&quot;password-stores&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa3965741d5270d7c00d29a7774b88caf"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_KWALLET_WALLET" ref="aa3965741d5270d7c00d29a7774b88caf" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_KWALLET_WALLET</b>&#160;&#160;&#160;&quot;kwallet-wallet&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a26ba21c75f46c0ca8c63f7d461f2b6be"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_KWALLET_SVN_APPLICATION_NAME_WITH_PID" ref="a26ba21c75f46c0ca8c63f7d461f2b6be" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_KWALLET_SVN_APPLICATION_NAME_WITH_PID</b>&#160;&#160;&#160;&quot;kwallet-svn-application-name-with-pid&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="adcbe0ae06152abd270c5662c5755601b"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_SECTION_HELPERS" ref="adcbe0ae06152abd270c5662c5755601b" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_SECTION_HELPERS</b>&#160;&#160;&#160;&quot;helpers&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad14a57b40b23bc38534b52acbc2eb23a"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_EDITOR_CMD" ref="ad14a57b40b23bc38534b52acbc2eb23a" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_EDITOR_CMD</b>&#160;&#160;&#160;&quot;editor-cmd&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab14fa53b1f2b5bf9ced7f1d5b3dc1d88"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_DIFF_CMD" ref="ab14fa53b1f2b5bf9ced7f1d5b3dc1d88" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_DIFF_CMD</b>&#160;&#160;&#160;&quot;diff-cmd&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a1ed44d2946abd6cbd5eb0d8c1d93b60f">SVN_CONFIG_OPTION_DIFF_EXTENSIONS</a>&#160;&#160;&#160;&quot;diff-extensions&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac46fa99b8d232b97ef5c65eb9931ee09"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_DIFF3_CMD" ref="ac46fa99b8d232b97ef5c65eb9931ee09" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_DIFF3_CMD</b>&#160;&#160;&#160;&quot;diff3-cmd&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a36308ef15615621c5439225db9f12a6c"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_DIFF3_HAS_PROGRAM_ARG" ref="a36308ef15615621c5439225db9f12a6c" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_DIFF3_HAS_PROGRAM_ARG</b>&#160;&#160;&#160;&quot;diff3-has-program-arg&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4ea31d8bef18ac359e57dbd949dab0ed"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_MERGE_TOOL_CMD" ref="a4ea31d8bef18ac359e57dbd949dab0ed" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_MERGE_TOOL_CMD</b>&#160;&#160;&#160;&quot;merge-tool-cmd&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aef7294fe4e59231e08a7af0a00ba2b16"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_SECTION_MISCELLANY" ref="aef7294fe4e59231e08a7af0a00ba2b16" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_SECTION_MISCELLANY</b>&#160;&#160;&#160;&quot;miscellany&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5241157cc3ee97569bf2cc50bd77e58f"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_GLOBAL_IGNORES" ref="a5241157cc3ee97569bf2cc50bd77e58f" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_GLOBAL_IGNORES</b>&#160;&#160;&#160;&quot;global-ignores&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae6db3b59232b382ad80f88ee457380b7"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_LOG_ENCODING" ref="ae6db3b59232b382ad80f88ee457380b7" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_LOG_ENCODING</b>&#160;&#160;&#160;&quot;log-encoding&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af0bd2a9a4f4e3dc8fa5ee4a8b6abeaa3"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_USE_COMMIT_TIMES" ref="af0bd2a9a4f4e3dc8fa5ee4a8b6abeaa3" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_USE_COMMIT_TIMES</b>&#160;&#160;&#160;&quot;use-commit-times&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a20b0e6dc53126154e7726f7da8b853c4"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_TEMPLATE_ROOT" ref="a20b0e6dc53126154e7726f7da8b853c4" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_TEMPLATE_ROOT</b>&#160;&#160;&#160;&quot;template-root&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad6d6c614edad7dc3b6b17b8e14db5cd3"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_ENABLE_AUTO_PROPS" ref="ad6d6c614edad7dc3b6b17b8e14db5cd3" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_ENABLE_AUTO_PROPS</b>&#160;&#160;&#160;&quot;enable-auto-props&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a84f8579fdef458b339772b05cc2b5eb4"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_NO_UNLOCK" ref="a84f8579fdef458b339772b05cc2b5eb4" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_NO_UNLOCK</b>&#160;&#160;&#160;&quot;no-unlock&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae623ff0025be259ba63716705666ce86"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_MIMETYPES_FILE" ref="ae623ff0025be259ba63716705666ce86" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_MIMETYPES_FILE</b>&#160;&#160;&#160;&quot;mime-types-file&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae8e4ee87734ff6847437bbb243aa9f04"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_PRESERVED_CF_EXTS" ref="ae8e4ee87734ff6847437bbb243aa9f04" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_PRESERVED_CF_EXTS</b>&#160;&#160;&#160;&quot;preserved-conflict-file-exts&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8c4c20090865c950fae0db15f0ec6fc0"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_INTERACTIVE_CONFLICTS" ref="a8c4c20090865c950fae0db15f0ec6fc0" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_INTERACTIVE_CONFLICTS</b>&#160;&#160;&#160;&quot;interactive-conflicts&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6a4cacd7c94a0ed7936ec360ebb9e95b"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_MEMORY_CACHE_SIZE" ref="a6a4cacd7c94a0ed7936ec360ebb9e95b" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_MEMORY_CACHE_SIZE</b>&#160;&#160;&#160;&quot;memory-cache-size&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4c2fee4665ec75a146db6ff168813e36"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_SECTION_TUNNELS" ref="a4c2fee4665ec75a146db6ff168813e36" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_SECTION_TUNNELS</b>&#160;&#160;&#160;&quot;tunnels&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0853b642f13d9b00950a9181f2376b67"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_SECTION_AUTO_PROPS" ref="a0853b642f13d9b00950a9181f2376b67" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_SECTION_AUTO_PROPS</b>&#160;&#160;&#160;&quot;auto-props&quot;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Repository conf directory configuration files strings</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Strings for the names of sections and options in the repository conf directory configuration files. </p>
</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2319dc627754c4740b49ac759919e71f"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_SECTION_GENERAL" ref="a2319dc627754c4740b49ac759919e71f" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_SECTION_GENERAL</b>&#160;&#160;&#160;&quot;general&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0cb8a04751306a9f2b5dc357e2562a13"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_ANON_ACCESS" ref="a0cb8a04751306a9f2b5dc357e2562a13" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_ANON_ACCESS</b>&#160;&#160;&#160;&quot;anon-access&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af04e744005b419c01daac8a2d0807dc4"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_AUTH_ACCESS" ref="af04e744005b419c01daac8a2d0807dc4" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_AUTH_ACCESS</b>&#160;&#160;&#160;&quot;auth-access&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a64dc566db48e9b31647aa8d862bce4dd"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_PASSWORD_DB" ref="a64dc566db48e9b31647aa8d862bce4dd" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_PASSWORD_DB</b>&#160;&#160;&#160;&quot;password-db&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abfdec7f744072f439609ba802072a56e"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_REALM" ref="abfdec7f744072f439609ba802072a56e" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_REALM</b>&#160;&#160;&#160;&quot;realm&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6d501a5a9bf71f3c4fb7bafed29fd501"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_AUTHZ_DB" ref="a6d501a5a9bf71f3c4fb7bafed29fd501" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_AUTHZ_DB</b>&#160;&#160;&#160;&quot;authz-db&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#ab3123c2811d380ffc029a3338fdf5165">SVN_CONFIG_OPTION_FORCE_USERNAME_CASE</a>&#160;&#160;&#160;&quot;force-username-case&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a821964ac544635b677dc46071d0dd41d"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_SECTION_SASL" ref="a821964ac544635b677dc46071d0dd41d" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_SECTION_SASL</b>&#160;&#160;&#160;&quot;sasl&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad4660eae8594b862271efb7c22b99e93"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_USE_SASL" ref="ad4660eae8594b862271efb7c22b99e93" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_USE_SASL</b>&#160;&#160;&#160;&quot;use-sasl&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2bc73f6173c278d410e6edbdffffd1f6"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_MIN_SSF" ref="a2bc73f6173c278d410e6edbdffffd1f6" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_MIN_SSF</b>&#160;&#160;&#160;&quot;min-encryption&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8936d2928d0a1c6b43ea12598ed3003b"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_MAX_SSF" ref="a8936d2928d0a1c6b43ea12598ed3003b" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_OPTION_MAX_SSF</b>&#160;&#160;&#160;&quot;max-encryption&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3b9f31d1d7a826589a11a8608f8ae412"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_SECTION_USERS" ref="a3b9f31d1d7a826589a11a8608f8ae412" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>SVN_CONFIG_SECTION_USERS</b>&#160;&#160;&#160;&quot;users&quot;</td></tr>
<tr><td colspan="2"><h2><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Opaque structure describing a set of configuration options.  <a href="#aab78e7d9b95c9bcfe0bdf1d9f3212596"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a37f71d897e0e045c20f15b115d30f3a8">svn_config_section_enumerator_t</a> )(const char *name, void *baton)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <code>svn_config_section_enumerator2_t</code>, but is not provided with a memory pool argument.  <a href="#a37f71d897e0e045c20f15b115d30f3a8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a2ca7e4c68ea29a510e1ab314a00ca198">svn_config_section_enumerator2_t</a> )(const char *name, void *baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A callback function used in enumerating config sections.  <a href="#a2ca7e4c68ea29a510e1ab314a00ca198"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#aff8b3348e9867495e88b7ffbda4d56be">svn_config_enumerator_t</a> )(const char *name, const char *value, void *baton)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <code>svn_config_enumerator2_t</code>, but is not provided with a memory pool argument.  <a href="#aff8b3348e9867495e88b7ffbda4d56be"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#ac0f07e7a62a0e12da3d9749ac32b35d6">svn_config_enumerator2_t</a> )(const char *name, const char *value, void *baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A callback function used in enumerating config options.  <a href="#ac0f07e7a62a0e12da3d9749ac32b35d6"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#ad3ad7ac88d580e3cac1b90cd1bd7ae56">svn_config_get_config</a> (apr_hash_t **cfg_hash, const char *config_dir, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Read configuration information from the standard sources and merge it into the hash <em>*cfg_hash</em>.  <a href="#ad3ad7ac88d580e3cac1b90cd1bd7ae56"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a7ad97c163e51197b737094ed54499e49">svn_config_create</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> **cfgp, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> section_names_case_sensitive, apr_pool_t *result_pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*cfgp</em> to an empty <code>svn_config_t</code> structure, allocated in <em>result_pool</em>.  <a href="#a7ad97c163e51197b737094ed54499e49"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a15dbbd4d8126438c29f2d7b75cefac59">svn_config_read2</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> **cfgp, const char *file, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> must_exist, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> section_names_case_sensitive, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Read configuration data from <em>file</em> (a file or registry path) into <em>*cfgp</em>, allocated in <em>pool</em>.  <a href="#a15dbbd4d8126438c29f2d7b75cefac59"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#aee0ca4aede6403f0451815cf505da608">svn_config_read</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> **cfgp, const char *file, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> must_exist, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to svn_config_read2, but always passes FALSE to section_names_case_sensitive.  <a href="#aee0ca4aede6403f0451815cf505da608"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#ad91cb2d86fe3fbac3a71dcca256ace49">svn_config_merge</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *cfg, const char *file, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> must_exist)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Like <a class="el" href="svn__config_8h.html#aee0ca4aede6403f0451815cf505da608" title="Similar to svn_config_read2, but always passes FALSE to section_names_case_sensitive.">svn_config_read()</a>, but merges the configuration data from <em>file</em> (a file or registry path) into <em>*cfg</em>, which was previously returned from <a class="el" href="svn__config_8h.html#aee0ca4aede6403f0451815cf505da608" title="Similar to svn_config_read2, but always passes FALSE to section_names_case_sensitive.">svn_config_read()</a>.  <a href="#ad91cb2d86fe3fbac3a71dcca256ace49"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a90c528ac95373f3df1b3472cd3a91a51">svn_config_get</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *cfg, const char **valuep, const char *section, const char *option, const char *default_value)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the value of a (<em>section</em>, <em>option</em>) pair in <em>cfg</em>, set <em>*valuep</em> to the value.  <a href="#a90c528ac95373f3df1b3472cd3a91a51"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a327ef16db5f78bbcaf1771690dad8170">svn_config_set</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *cfg, const char *section, const char *option, const char *value)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Add or replace the value of a (<em>section</em>, <em>option</em>) pair in <em>cfg</em> with <em>value</em>.  <a href="#a327ef16db5f78bbcaf1771690dad8170"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#ae042b99963b14512893ec166b3b524aa">svn_config_get_bool</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *cfg, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *valuep, const char *section, const char *option, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> default_value)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Like <a class="el" href="svn__config_8h.html#a90c528ac95373f3df1b3472cd3a91a51" title="Find the value of a (section, option) pair in cfg, set *valuep to the value.">svn_config_get()</a>, but for boolean values.  <a href="#ae042b99963b14512893ec166b3b524aa"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a20a1d8a406d76ccbecb1cf1800328150">svn_config_set_bool</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *cfg, const char *section, const char *option, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> value)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Like <a class="el" href="svn__config_8h.html#a327ef16db5f78bbcaf1771690dad8170" title="Add or replace the value of a (section, option) pair in cfg with value.">svn_config_set()</a>, but for boolean values.  <a href="#a20a1d8a406d76ccbecb1cf1800328150"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a73854939d0d25efbbad03bc81278c519">svn_config_get_yes_no_ask</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *cfg, const char **valuep, const char *section, const char *option, const char *default_value)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Like <a class="el" href="svn__config_8h.html#a90c528ac95373f3df1b3472cd3a91a51" title="Find the value of a (section, option) pair in cfg, set *valuep to the value.">svn_config_get()</a>, but only for yes/no/ask values.  <a href="#a73854939d0d25efbbad03bc81278c519"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a2d4ef615420c6d9317c12a4b3df4720e">svn_config_enumerate_sections</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *cfg, <a class="el" href="svn__config_8h.html#a37f71d897e0e045c20f15b115d30f3a8">svn_config_section_enumerator_t</a> callback, void *baton)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__config_8h.html#a43176794c420e921ee92612deaa7eb78" title="Enumerate the sections, passing baton and the current section&#39;s name to callback.">svn_config_enumerate_sections2()</a>, but uses a memory pool of <em>cfg</em> instead of one that is explicitly provided.  <a href="#a2d4ef615420c6d9317c12a4b3df4720e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a43176794c420e921ee92612deaa7eb78">svn_config_enumerate_sections2</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *cfg, <a class="el" href="svn__config_8h.html#a2ca7e4c68ea29a510e1ab314a00ca198">svn_config_section_enumerator2_t</a> callback, void *baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Enumerate the sections, passing <em>baton</em> and the current section's name to <em>callback</em>.  <a href="#a43176794c420e921ee92612deaa7eb78"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a73110bda2ad24ae54d8a3d4828fdafff">svn_config_enumerate</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *cfg, const char *section, <a class="el" href="svn__config_8h.html#aff8b3348e9867495e88b7ffbda4d56be">svn_config_enumerator_t</a> callback, void *baton)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="svn__config_8h.html#a7539ccae7bb647dcbf1a1795c7327db4" title="Enumerate the options in section, passing baton and the current option&#39;s name and value to callback...">svn_config_enumerate2()</a>, but uses a memory pool of <em>cfg</em> instead of one that is explicitly provided.  <a href="#a73110bda2ad24ae54d8a3d4828fdafff"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a7539ccae7bb647dcbf1a1795c7327db4">svn_config_enumerate2</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *cfg, const char *section, <a class="el" href="svn__config_8h.html#ac0f07e7a62a0e12da3d9749ac32b35d6">svn_config_enumerator2_t</a> callback, void *baton, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Enumerate the options in <em>section</em>, passing <em>baton</em> and the current option's name and value to <em>callback</em>.  <a href="#a7539ccae7bb647dcbf1a1795c7327db4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a0293043608f2a618f72bb307f07a5052">svn_config_has_section</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *cfg, const char *section)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <code>TRUE</code> if <em>section</em> exists in <em>cfg</em>, <code>FALSE</code> otherwise.  <a href="#a0293043608f2a618f72bb307f07a5052"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a807421f62541b18647cb300a3ca61521">svn_config_find_group</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *cfg, const char *key, const char *master_section, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Enumerate the group <em>master_section</em> in <em>cfg</em>.  <a href="#a807421f62541b18647cb300a3ca61521"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a247ccede6f9d6816dccf105019686f77">svn_config_get_server_setting</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *cfg, const char *server_group, const char *option_name, const char *default_value)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve value corresponding to <em>option_name</em> in <em>cfg</em>, or return <em>default_value</em> if none is found.  <a href="#a247ccede6f9d6816dccf105019686f77"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a77fccc1888bd2db11401fafe42921792">svn_config_get_server_setting_int</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *cfg, const char *server_group, const char *option_name, apr_int64_t default_value, apr_int64_t *result_value, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve value into <em>result_value</em> corresponding to <em>option_name</em> for a given <em>server_group</em> in <em>cfg</em>, or return <em>default_value</em> if none is found.  <a href="#a77fccc1888bd2db11401fafe42921792"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#a73000ee2761966cfec5905d47b1ee6f6">svn_config_get_server_setting_bool</a> (<a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *cfg, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *valuep, const char *server_group, const char *option_name, <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> default_value)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set <em>*valuep</em> according to <em>option_name</em> for a given <em>server_group</em> in <em>cfg</em>, or set to <em>default_value</em> if no value is specified.  <a href="#a73000ee2761966cfec5905d47b1ee6f6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="svn__config_8h.html#ae4a888ce54909cc342492d2a0babba45">svn_config_ensure</a> (const char *config_dir, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Try to ensure that the user's ~/.subversion/ area exists, and create no-op template files for any absent config files.  <a href="#ae4a888ce54909cc342492d2a0babba45"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cached__authentication__data.html#gad5b78b4b2e6476a91f39358d5a003b8b">svn_config_read_auth_data</a> (apr_hash_t **hash, const char *cred_kind, const char *realmstring, const char *config_dir, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Use <em>cred_kind</em> and <em>realmstring</em> to locate a file within the ~/.subversion/auth/ area.  <a href="group__cached__authentication__data.html#gad5b78b4b2e6476a91f39358d5a003b8b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cached__authentication__data.html#ga9383a4b14b70895fa72e0fef5d9f27af">svn_config_write_auth_data</a> (apr_hash_t *hash, const char *cred_kind, const char *realmstring, const char *config_dir, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Use <em>cred_kind</em> and <em>realmstring</em> to create or overwrite a file within the ~/.subversion/auth/ area.  <a href="group__cached__authentication__data.html#ga9383a4b14b70895fa72e0fef5d9f27af"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structsvn__error__t.html">svn_error_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__cached__authentication__data.html#gad219f821cb1c8f72e593fe396f9167bb">svn_config_get_user_config_path</a> (const char **path, const char *config_dir, const char *fname, apr_pool_t *pool)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Put the absolute path to the user's configuration directory, or to a file within that directory, into <em>*path</em>.  <a href="group__cached__authentication__data.html#gad219f821cb1c8f72e593fe396f9167bb"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Accessing SVN configuration files. </p>

<p>Definition in file <a class="el" href="svn__config_8h_source.html">svn_config.h</a>.</p>
</div><hr/><h2>Define Documentation</h2>
<a class="anchor" id="ad8db47668facc57afa2fdb4ccf56ed44"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_DEFAULT_GLOBAL_IGNORES" ref="ad8db47668facc57afa2fdb4ccf56ed44" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_CONFIG_DEFAULT_GLOBAL_IGNORES</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment">SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_1 <span class="stringliteral">&quot; &quot;</span> \
  SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_2
</pre></div>
<p>Definition at line <a class="el" href="svn__config_8h_source.html#l00154">154</a> of file <a class="el" href="svn__config_8h_source.html">svn_config.h</a>.</p>

</div>
</div>
<a class="anchor" id="a1ed44d2946abd6cbd5eb0d8c1d93b60f"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_DIFF_EXTENSIONS" ref="a1ed44d2946abd6cbd5eb0d8c1d93b60f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_CONFIG_OPTION_DIFF_EXTENSIONS&#160;&#160;&#160;&quot;diff-extensions&quot;</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

<p>Definition at line <a class="el" href="svn__config_8h_source.html#l00101">101</a> of file <a class="el" href="svn__config_8h_source.html">svn_config.h</a>.</p>

</div>
</div>
<a class="anchor" id="ab3123c2811d380ffc029a3338fdf5165"></a><!-- doxytag: member="svn_config.h::SVN_CONFIG_OPTION_FORCE_USERNAME_CASE" ref="ab3123c2811d380ffc029a3338fdf5165" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SVN_CONFIG_OPTION_FORCE_USERNAME_CASE&#160;&#160;&#160;&quot;force-username-case&quot;</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

<p>Definition at line <a class="el" href="svn__config_8h_source.html#l00133">133</a> of file <a class="el" href="svn__config_8h_source.html">svn_config.h</a>.</p>

</div>
</div>
<hr/><h2>Typedef Documentation</h2>
<a class="anchor" id="ac0f07e7a62a0e12da3d9749ac32b35d6"></a><!-- doxytag: member="svn_config.h::svn_config_enumerator2_t" ref="ac0f07e7a62a0e12da3d9749ac32b35d6" args=")(const char *name, const char *value, void *baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>(* <a class="el" href="svn__config_8h.html#ac0f07e7a62a0e12da3d9749ac32b35d6">svn_config_enumerator2_t</a>)(const char *name, const char *value, void *baton, apr_pool_t *pool)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A callback function used in enumerating config options. </p>
<p>See <a class="el" href="svn__config_8h.html#a7539ccae7bb647dcbf1a1795c7327db4" title="Enumerate the options in section, passing baton and the current option&#39;s name and value to callback...">svn_config_enumerate2()</a> for the details of this type.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.3. </dd></dl>

<p>Definition at line <a class="el" href="svn__config_8h_source.html#l00403">403</a> of file <a class="el" href="svn__config_8h_source.html">svn_config.h</a>.</p>

</div>
</div>
<a class="anchor" id="aff8b3348e9867495e88b7ffbda4d56be"></a><!-- doxytag: member="svn_config.h::svn_config_enumerator_t" ref="aff8b3348e9867495e88b7ffbda4d56be" args=")(const char *name, const char *value, void *baton)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>(* <a class="el" href="svn__config_8h.html#aff8b3348e9867495e88b7ffbda4d56be">svn_config_enumerator_t</a>)(const char *name, const char *value, void *baton)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <code>svn_config_enumerator2_t</code>, but is not provided with a memory pool argument. </p>
<p>See <a class="el" href="svn__config_8h.html#a73110bda2ad24ae54d8a3d4828fdafff" title="Similar to svn_config_enumerate2(), but uses a memory pool of cfg instead of one that is explicitly p...">svn_config_enumerate()</a> for the details of this type.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000133">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.2 API. </dd></dl>

<p>Definition at line <a class="el" href="svn__config_8h_source.html#l00380">380</a> of file <a class="el" href="svn__config_8h_source.html">svn_config.h</a>.</p>

</div>
</div>
<a class="anchor" id="a2ca7e4c68ea29a510e1ab314a00ca198"></a><!-- doxytag: member="svn_config.h::svn_config_section_enumerator2_t" ref="a2ca7e4c68ea29a510e1ab314a00ca198" args=")(const char *name, void *baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>(* <a class="el" href="svn__config_8h.html#a2ca7e4c68ea29a510e1ab314a00ca198">svn_config_section_enumerator2_t</a>)(const char *name, void *baton, apr_pool_t *pool)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A callback function used in enumerating config sections. </p>
<p>See <a class="el" href="svn__config_8h.html#a43176794c420e921ee92612deaa7eb78" title="Enumerate the sections, passing baton and the current section&#39;s name to callback.">svn_config_enumerate_sections2()</a> for the details of this type.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.3. </dd></dl>

<p>Definition at line <a class="el" href="svn__config_8h_source.html#l00354">354</a> of file <a class="el" href="svn__config_8h_source.html">svn_config.h</a>.</p>

</div>
</div>
<a class="anchor" id="a37f71d897e0e045c20f15b115d30f3a8"></a><!-- doxytag: member="svn_config.h::svn_config_section_enumerator_t" ref="a37f71d897e0e045c20f15b115d30f3a8" args=")(const char *name, void *baton)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>(* <a class="el" href="svn__config_8h.html#a37f71d897e0e045c20f15b115d30f3a8">svn_config_section_enumerator_t</a>)(const char *name, void *baton)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <code>svn_config_section_enumerator2_t</code>, but is not provided with a memory pool argument. </p>
<p>See <a class="el" href="svn__config_8h.html#a2d4ef615420c6d9317c12a4b3df4720e" title="Similar to svn_config_enumerate_sections2(), but uses a memory pool of cfg instead of one that is exp...">svn_config_enumerate_sections()</a> for the details of this type.</p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000131">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.2 API. </dd></dl>

<p>Definition at line <a class="el" href="svn__config_8h_source.html#l00334">334</a> of file <a class="el" href="svn__config_8h_source.html">svn_config.h</a>.</p>

</div>
</div>
<a class="anchor" id="aab78e7d9b95c9bcfe0bdf1d9f3212596"></a><!-- doxytag: member="svn_config.h::svn_config_t" ref="aab78e7d9b95c9bcfe0bdf1d9f3212596" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> <a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Opaque structure describing a set of configuration options. </p>

<p>Definition at line <a class="el" href="svn__config_8h_source.html#l00053">53</a> of file <a class="el" href="svn__config_8h_source.html">svn_config.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a7ad97c163e51197b737094ed54499e49"></a><!-- doxytag: member="svn_config.h::svn_config_create" ref="a7ad97c163e51197b737094ed54499e49" args="(svn_config_t **cfgp, svn_boolean_t section_names_case_sensitive, apr_pool_t *result_pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_create </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> **&#160;</td>
          <td class="paramname"><em>cfgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>section_names_case_sensitive</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>result_pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*cfgp</em> to an empty <code>svn_config_t</code> structure, allocated in <em>result_pool</em>. </p>
<p>Pass TRUE to <em>section_names_case_sensitive</em> if section names are to be populated case sensitively.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="ae4a888ce54909cc342492d2a0babba45"></a><!-- doxytag: member="svn_config.h::svn_config_ensure" ref="ae4a888ce54909cc342492d2a0babba45" args="(const char *config_dir, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_ensure </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>config_dir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Try to ensure that the user's ~/.subversion/ area exists, and create no-op template files for any absent config files. </p>
<p>Use <em>pool</em> for any temporary allocation. If <em>config_dir</em> is not <code>NULL</code> it specifies a directory from which to read the config overriding all other sources.</p>
<p>Don't error if something exists but is the wrong kind (for example, ~/.subversion exists but is a file, or ~/.subversion/servers exists but is a directory).</p>
<p>Also don't error if trying to create something and failing -- it's okay for the config area or its contents not to be created. However, if creating a config template file succeeds, return an error if unable to initialize its contents. </p>

</div>
</div>
<a class="anchor" id="a73110bda2ad24ae54d8a3d4828fdafff"></a><!-- doxytag: member="svn_config.h::svn_config_enumerate" ref="a73110bda2ad24ae54d8a3d4828fdafff" args="(svn_config_t *cfg, const char *section, svn_config_enumerator_t callback, void *baton)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int svn_config_enumerate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>section</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aff8b3348e9867495e88b7ffbda4d56be">svn_config_enumerator_t</a>&#160;</td>
          <td class="paramname"><em>callback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>baton</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__config_8h.html#a7539ccae7bb647dcbf1a1795c7327db4" title="Enumerate the options in section, passing baton and the current option&#39;s name and value to callback...">svn_config_enumerate2()</a>, but uses a memory pool of <em>cfg</em> instead of one that is explicitly provided. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000134">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.2 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a7539ccae7bb647dcbf1a1795c7327db4"></a><!-- doxytag: member="svn_config.h::svn_config_enumerate2" ref="a7539ccae7bb647dcbf1a1795c7327db4" args="(svn_config_t *cfg, const char *section, svn_config_enumerator2_t callback, void *baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int svn_config_enumerate2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>section</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#ac0f07e7a62a0e12da3d9749ac32b35d6">svn_config_enumerator2_t</a>&#160;</td>
          <td class="paramname"><em>callback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enumerate the options in <em>section</em>, passing <em>baton</em> and the current option's name and value to <em>callback</em>. </p>
<p>Continue the enumeration if <em>callback</em> returns <code>TRUE</code>. Return the number of times <em>callback</em> was called.</p>
<p>### kff asks: A more usual interface is to continue enumerating while <em>callback</em> does not return error, and if <em>callback</em> does return error, to return the same error (or a wrapping of it) from <a class="el" href="svn__config_8h.html#a73110bda2ad24ae54d8a3d4828fdafff" title="Similar to svn_config_enumerate2(), but uses a memory pool of cfg instead of one that is explicitly p...">svn_config_enumerate()</a>. What's the use case for <a class="el" href="svn__config_8h.html#a73110bda2ad24ae54d8a3d4828fdafff" title="Similar to svn_config_enumerate2(), but uses a memory pool of cfg instead of one that is explicitly p...">svn_config_enumerate()</a>? Is it more likely to need to break out of an enumeration early, with no error, than an invocation of <em>callback</em> is likely to need to return an error? ###</p>
<p><em>callback's</em> <em>name</em> and <em>value</em> parameters are only valid for the duration of the call.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.3. </dd></dl>

</div>
</div>
<a class="anchor" id="a2d4ef615420c6d9317c12a4b3df4720e"></a><!-- doxytag: member="svn_config.h::svn_config_enumerate_sections" ref="a2d4ef615420c6d9317c12a4b3df4720e" args="(svn_config_t *cfg, svn_config_section_enumerator_t callback, void *baton)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int svn_config_enumerate_sections </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#a37f71d897e0e045c20f15b115d30f3a8">svn_config_section_enumerator_t</a>&#160;</td>
          <td class="paramname"><em>callback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>baton</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to <a class="el" href="svn__config_8h.html#a43176794c420e921ee92612deaa7eb78" title="Enumerate the sections, passing baton and the current section&#39;s name to callback.">svn_config_enumerate_sections2()</a>, but uses a memory pool of <em>cfg</em> instead of one that is explicitly provided. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000132">Deprecated:</a></b></dt><dd>Provided for backwards compatibility with the 1.2 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a43176794c420e921ee92612deaa7eb78"></a><!-- doxytag: member="svn_config.h::svn_config_enumerate_sections2" ref="a43176794c420e921ee92612deaa7eb78" args="(svn_config_t *cfg, svn_config_section_enumerator2_t callback, void *baton, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int svn_config_enumerate_sections2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#a2ca7e4c68ea29a510e1ab314a00ca198">svn_config_section_enumerator2_t</a>&#160;</td>
          <td class="paramname"><em>callback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>baton</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enumerate the sections, passing <em>baton</em> and the current section's name to <em>callback</em>. </p>
<p>Continue the enumeration if <em>callback</em> returns <code>TRUE</code>. Return the number of times <em>callback</em> was called.</p>
<p>### See kff's comment to <a class="el" href="svn__config_8h.html#a7539ccae7bb647dcbf1a1795c7327db4" title="Enumerate the options in section, passing baton and the current option&#39;s name and value to callback...">svn_config_enumerate2()</a>. It applies to this function, too. ###</p>
<p><em>callback's</em> <em>name</em> parameter is only valid for the duration of the call.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.3. </dd></dl>

</div>
</div>
<a class="anchor" id="a807421f62541b18647cb300a3ca61521"></a><!-- doxytag: member="svn_config.h::svn_config_find_group" ref="a807421f62541b18647cb300a3ca61521" args="(svn_config_t *cfg, const char *key, const char *master_section, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* svn_config_find_group </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>master_section</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enumerate the group <em>master_section</em> in <em>cfg</em>. </p>
<p>Each variable value is interpreted as a list of glob patterns (separated by comma and optional whitespace). Return the name of the first variable whose value matches <em>key</em>, or <code>NULL</code> if no variable matches. </p>

</div>
</div>
<a class="anchor" id="a90c528ac95373f3df1b3472cd3a91a51"></a><!-- doxytag: member="svn_config.h::svn_config_get" ref="a90c528ac95373f3df1b3472cd3a91a51" args="(svn_config_t *cfg, const char **valuep, const char *section, const char *option, const char *default_value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_config_get </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>valuep</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>section</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>default_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Find the value of a (<em>section</em>, <em>option</em>) pair in <em>cfg</em>, set <em>*valuep</em> to the value. </p>
<p>If <em>cfg</em> is <code>NULL</code>, just sets <em>*valuep</em> to <em>default_value</em>. If the value does not exist, expand and return <em>default_value</em>. <em>default_value</em> can be NULL.</p>
<p>The returned value will be valid at least until the next call to <a class="el" href="svn__config_8h.html#a90c528ac95373f3df1b3472cd3a91a51" title="Find the value of a (section, option) pair in cfg, set *valuep to the value.">svn_config_get()</a>, or for the lifetime of <em>default_value</em>. It is safest to consume the returned value immediately.</p>
<p>This function may change <em>cfg</em> by expanding option values. </p>

</div>
</div>
<a class="anchor" id="ae042b99963b14512893ec166b3b524aa"></a><!-- doxytag: member="svn_config.h::svn_config_get_bool" ref="ae042b99963b14512893ec166b3b524aa" args="(svn_config_t *cfg, svn_boolean_t *valuep, const char *section, const char *option, svn_boolean_t default_value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_get_bool </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>valuep</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>section</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>default_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Like <a class="el" href="svn__config_8h.html#a90c528ac95373f3df1b3472cd3a91a51" title="Find the value of a (section, option) pair in cfg, set *valuep to the value.">svn_config_get()</a>, but for boolean values. </p>
<p>Parses the option as a boolean value. The recognized representations are 'TRUE'/'FALSE', 'yes'/'no', 'on'/'off', '1'/'0'; case does not matter. Returns an error if the option doesn't contain a known string. </p>

</div>
</div>
<a class="anchor" id="ad3ad7ac88d580e3cac1b90cd1bd7ae56"></a><!-- doxytag: member="svn_config.h::svn_config_get_config" ref="ad3ad7ac88d580e3cac1b90cd1bd7ae56" args="(apr_hash_t **cfg_hash, const char *config_dir, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_get_config </td>
          <td>(</td>
          <td class="paramtype">apr_hash_t **&#160;</td>
          <td class="paramname"><em>cfg_hash</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>config_dir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Read configuration information from the standard sources and merge it into the hash <em>*cfg_hash</em>. </p>
<p>If <em>config_dir</em> is not NULL it specifies a directory from which to read the configuration files, overriding all other sources. Otherwise, first read any system-wide configurations (from a file or from the registry), then merge in personal configurations (again from file or registry). The hash and all its data are allocated in <em>pool</em>.</p>
<p><em>*cfg_hash</em> is a hash whose keys are <code>const</code> char * configuration categories (<code>SVN_CONFIG_CATEGORY_SERVERS</code>, <code>SVN_CONFIG_CATEGORY_CONFIG</code>, etc.) and whose values are the <code>svn_config_t</code> * items representing the configuration values for that category. </p>

</div>
</div>
<a class="anchor" id="a247ccede6f9d6816dccf105019686f77"></a><!-- doxytag: member="svn_config.h::svn_config_get_server_setting" ref="a247ccede6f9d6816dccf105019686f77" args="(svn_config_t *cfg, const char *server_group, const char *option_name, const char *default_value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* svn_config_get_server_setting </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>server_group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>default_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Retrieve value corresponding to <em>option_name</em> in <em>cfg</em>, or return <em>default_value</em> if none is found. </p>
<p>The config will first be checked for a default. If <em>server_group</em> is not <code>NULL</code>, the config will also be checked for an override in a server group, </p>

</div>
</div>
<a class="anchor" id="a73000ee2761966cfec5905d47b1ee6f6"></a><!-- doxytag: member="svn_config.h::svn_config_get_server_setting_bool" ref="a73000ee2761966cfec5905d47b1ee6f6" args="(svn_config_t *cfg, svn_boolean_t *valuep, const char *server_group, const char *option_name, svn_boolean_t default_value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_get_server_setting_bool </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> *&#160;</td>
          <td class="paramname"><em>valuep</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>server_group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>default_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set <em>*valuep</em> according to <em>option_name</em> for a given <em>server_group</em> in <em>cfg</em>, or set to <em>default_value</em> if no value is specified. </p>
<p>Check first a default, then for an override in a server group. If a value is found but is not a valid boolean, return an SVN_ERR_BAD_CONFIG_VALUE error.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="a77fccc1888bd2db11401fafe42921792"></a><!-- doxytag: member="svn_config.h::svn_config_get_server_setting_int" ref="a77fccc1888bd2db11401fafe42921792" args="(svn_config_t *cfg, const char *server_group, const char *option_name, apr_int64_t default_value, apr_int64_t *result_value, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_get_server_setting_int </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>server_group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_int64_t&#160;</td>
          <td class="paramname"><em>default_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_int64_t *&#160;</td>
          <td class="paramname"><em>result_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Retrieve value into <em>result_value</em> corresponding to <em>option_name</em> for a given <em>server_group</em> in <em>cfg</em>, or return <em>default_value</em> if none is found. </p>
<p>The config will first be checked for a default, then will be checked for an override in a server group. If the value found is not a valid integer, a <code>svn_error_t*</code> will be returned. </p>

</div>
</div>
<a class="anchor" id="a73854939d0d25efbbad03bc81278c519"></a><!-- doxytag: member="svn_config.h::svn_config_get_yes_no_ask" ref="a73854939d0d25efbbad03bc81278c519" args="(svn_config_t *cfg, const char **valuep, const char *section, const char *option, const char *default_value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_get_yes_no_ask </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>valuep</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>section</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>default_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Like <a class="el" href="svn__config_8h.html#a90c528ac95373f3df1b3472cd3a91a51" title="Find the value of a (section, option) pair in cfg, set *valuep to the value.">svn_config_get()</a>, but only for yes/no/ask values. </p>
<p>Parse <em>option</em> in <em>section</em> and set <em>*valuep</em> to one of SVN_CONFIG_TRUE, SVN_CONFIG_FALSE, or SVN_CONFIG_ASK. If there is no setting for <em>option</em>, then parse <em>default_value</em> and set <em>*valuep</em> accordingly. If <em>default_value</em> is NULL, the result is undefined, and may be an error; we recommend that you pass one of SVN_CONFIG_TRUE, SVN_CONFIG_FALSE, or SVN_CONFIG_ASK for <em>default</em> value.</p>
<p>Valid representations are (at least) "true"/"false", "yes"/"no", "on"/"off", "1"/"0", and "ask"; they are case-insensitive. Return an SVN_ERR_BAD_CONFIG_VALUE error if either <em>default_value</em> or <em>option's</em> value is not a valid representation.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.6. </dd></dl>

</div>
</div>
<a class="anchor" id="a0293043608f2a618f72bb307f07a5052"></a><!-- doxytag: member="svn_config.h::svn_config_has_section" ref="a0293043608f2a618f72bb307f07a5052" args="(svn_config_t *cfg, const char *section)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a> svn_config_has_section </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>section</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return <code>TRUE</code> if <em>section</em> exists in <em>cfg</em>, <code>FALSE</code> otherwise. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.4. </dd></dl>

</div>
</div>
<a class="anchor" id="ad91cb2d86fe3fbac3a71dcca256ace49"></a><!-- doxytag: member="svn_config.h::svn_config_merge" ref="ad91cb2d86fe3fbac3a71dcca256ace49" args="(svn_config_t *cfg, const char *file, svn_boolean_t must_exist)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_merge </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>must_exist</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Like <a class="el" href="svn__config_8h.html#aee0ca4aede6403f0451815cf505da608" title="Similar to svn_config_read2, but always passes FALSE to section_names_case_sensitive.">svn_config_read()</a>, but merges the configuration data from <em>file</em> (a file or registry path) into <em>*cfg</em>, which was previously returned from <a class="el" href="svn__config_8h.html#aee0ca4aede6403f0451815cf505da608" title="Similar to svn_config_read2, but always passes FALSE to section_names_case_sensitive.">svn_config_read()</a>. </p>
<p>This function invalidates all value expansions in <em>cfg</em>, so that the next <a class="el" href="svn__config_8h.html#a90c528ac95373f3df1b3472cd3a91a51" title="Find the value of a (section, option) pair in cfg, set *valuep to the value.">svn_config_get()</a> takes the modifications into account. </p>

</div>
</div>
<a class="anchor" id="aee0ca4aede6403f0451815cf505da608"></a><!-- doxytag: member="svn_config.h::svn_config_read" ref="aee0ca4aede6403f0451815cf505da608" args="(svn_config_t **cfgp, const char *file, svn_boolean_t must_exist, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_read </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> **&#160;</td>
          <td class="paramname"><em>cfgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>must_exist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Similar to svn_config_read2, but always passes FALSE to section_names_case_sensitive. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000130">Deprecated:</a></b></dt><dd>Provided for backward compatibility with 1.6 API. </dd></dl>

</div>
</div>
<a class="anchor" id="a15dbbd4d8126438c29f2d7b75cefac59"></a><!-- doxytag: member="svn_config.h::svn_config_read2" ref="a15dbbd4d8126438c29f2d7b75cefac59" args="(svn_config_t **cfgp, const char *file, svn_boolean_t must_exist, svn_boolean_t section_names_case_sensitive, apr_pool_t *pool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structsvn__error__t.html">svn_error_t</a>* svn_config_read2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> **&#160;</td>
          <td class="paramname"><em>cfgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>must_exist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>section_names_case_sensitive</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_pool_t *&#160;</td>
          <td class="paramname"><em>pool</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Read configuration data from <em>file</em> (a file or registry path) into <em>*cfgp</em>, allocated in <em>pool</em>. </p>
<p>If <em>file</em> does not exist, then if <em>must_exist</em>, return an error, otherwise return an empty <code>svn_config_t</code>.</p>
<p>If <em>section_names_case_sensitive</em> is TRUE, populate section name hashes case sensitively, except for the default SVN_CONFIG__DEFAULT_SECTION.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>New in 1.7. </dd></dl>

</div>
</div>
<a class="anchor" id="a327ef16db5f78bbcaf1771690dad8170"></a><!-- doxytag: member="svn_config.h::svn_config_set" ref="a327ef16db5f78bbcaf1771690dad8170" args="(svn_config_t *cfg, const char *section, const char *option, const char *value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_config_set </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>section</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add or replace the value of a (<em>section</em>, <em>option</em>) pair in <em>cfg</em> with <em>value</em>. </p>
<p>This function invalidates all value expansions in <em>cfg</em>.</p>
<p>To remove an option, pass NULL for the <em>value</em>. </p>

</div>
</div>
<a class="anchor" id="a20a1d8a406d76ccbecb1cf1800328150"></a><!-- doxytag: member="svn_config.h::svn_config_set_bool" ref="a20a1d8a406d76ccbecb1cf1800328150" args="(svn_config_t *cfg, const char *section, const char *option, svn_boolean_t value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void svn_config_set_bool </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="svn__config_8h.html#aab78e7d9b95c9bcfe0bdf1d9f3212596">svn_config_t</a> *&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>section</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024">svn_boolean_t</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Like <a class="el" href="svn__config_8h.html#a327ef16db5f78bbcaf1771690dad8170" title="Add or replace the value of a (section, option) pair in cfg with value.">svn_config_set()</a>, but for boolean values. </p>
<p>Sets the option to 'TRUE'/'FALSE', depending on <em>value</em>. </p>

</div>
</div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Fri Dec 23 2011 09:20:38 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>
