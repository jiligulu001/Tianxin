<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Subversion: svn_subst.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Subversion
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">svn_subst.h</div>  </div>
</div>
<div class="contents">
<a href="svn__subst_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**</span>
<a name="l00002"></a>00002 <span class="comment"> * @copyright</span>
<a name="l00003"></a>00003 <span class="comment"> * ====================================================================</span>
<a name="l00004"></a>00004 <span class="comment"> *    Licensed to the Apache Software Foundation (ASF) under one</span>
<a name="l00005"></a>00005 <span class="comment"> *    or more contributor license agreements.  See the NOTICE file</span>
<a name="l00006"></a>00006 <span class="comment"> *    distributed with this work for additional information</span>
<a name="l00007"></a>00007 <span class="comment"> *    regarding copyright ownership.  The ASF licenses this file</span>
<a name="l00008"></a>00008 <span class="comment"> *    to you under the Apache License, Version 2.0 (the</span>
<a name="l00009"></a>00009 <span class="comment"> *    &quot;License&quot;); you may not use this file except in compliance</span>
<a name="l00010"></a>00010 <span class="comment"> *    with the License.  You may obtain a copy of the License at</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00013"></a>00013 <span class="comment"> *</span>
<a name="l00014"></a>00014 <span class="comment"> *    Unless required by applicable law or agreed to in writing,</span>
<a name="l00015"></a>00015 <span class="comment"> *    software distributed under the License is distributed on an</span>
<a name="l00016"></a>00016 <span class="comment"> *    &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span>
<a name="l00017"></a>00017 <span class="comment"> *    KIND, either express or implied.  See the License for the</span>
<a name="l00018"></a>00018 <span class="comment"> *    specific language governing permissions and limitations</span>
<a name="l00019"></a>00019 <span class="comment"> *    under the License.</span>
<a name="l00020"></a>00020 <span class="comment"> * ====================================================================</span>
<a name="l00021"></a>00021 <span class="comment"> * @endcopyright</span>
<a name="l00022"></a>00022 <span class="comment"> *</span>
<a name="l00023"></a>00023 <span class="comment"> * @file svn_subst.h</span>
<a name="l00024"></a>00024 <span class="comment"> * @brief Data substitution (keywords and EOL style)</span>
<a name="l00025"></a>00025 <span class="comment"> */</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#ifndef SVN_SUBST_H</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span><span class="preprocessor">#define SVN_SUBST_H</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;apr_pools.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;apr_hash.h&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;apr_time.h&gt;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="svn__types_8h.html" title="Subversion&#39;s data types.">svn_types.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="svn__string_8h.html" title="Counted-length strings for Subversion, plus some C string goodies.">svn_string.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="svn__io_8h.html" title="General file I/O for Subversion.">svn_io.h</a>&quot;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {
<a name="l00042"></a>00042 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="comment">/* EOL conversion and keyword expansion. */</span>
<a name="l00045"></a>00045 <span class="comment"></span>
<a name="l00046"></a>00046 <span class="comment">/** The EOL used in the Repository for &quot;native&quot; files */</span>
<a name="l00047"></a><a class="code" href="svn__subst_8h.html#a2b96491e8354387681b06b54d317b10f">00047</a> <span class="preprocessor">#define SVN_SUBST_NATIVE_EOL_STR &quot;\n&quot;</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00049"></a>00049 <span class="comment">/** Valid states for &#39;svn:eol-style&#39; property.</span>
<a name="l00050"></a>00050 <span class="comment"> *</span>
<a name="l00051"></a>00051 <span class="comment"> * Property nonexistence is equivalent to &#39;none&#39;.</span>
<a name="l00052"></a>00052 <span class="comment"> */</span>
<a name="l00053"></a><a class="code" href="svn__subst_8h.html#a160543c34edb8318de8cbe4543bbca28">00053</a> <span class="keyword">typedef</span> <span class="keyword">enum</span> <a class="code" href="svn__subst_8h.html#a160543c34edb8318de8cbe4543bbca28" title="Valid states for &#39;svn:eol-style&#39; property.">svn_subst_eol_style</a>
<a name="l00054"></a>00054 {<span class="comment"></span>
<a name="l00055"></a>00055 <span class="comment">  /** An unrecognized style */</span>
<a name="l00056"></a><a class="code" href="svn__subst_8h.html#a160543c34edb8318de8cbe4543bbca28a6e1bf631a8574e3cf1e52b6599785fdf">00056</a>   <a class="code" href="svn__subst_8h.html#a160543c34edb8318de8cbe4543bbca28a6e1bf631a8574e3cf1e52b6599785fdf" title="An unrecognized style.">svn_subst_eol_style_unknown</a>,
<a name="l00057"></a>00057 <span class="comment"></span>
<a name="l00058"></a>00058 <span class="comment">  /** EOL translation is &quot;off&quot; or ignored value */</span>
<a name="l00059"></a><a class="code" href="svn__subst_8h.html#a160543c34edb8318de8cbe4543bbca28ac33cc2b19c97a910b90d4efef275043f">00059</a>   <a class="code" href="svn__subst_8h.html#a160543c34edb8318de8cbe4543bbca28ac33cc2b19c97a910b90d4efef275043f" title="EOL translation is &quot;off&quot; or ignored value.">svn_subst_eol_style_none</a>,
<a name="l00060"></a>00060 <span class="comment"></span>
<a name="l00061"></a>00061 <span class="comment">  /** Translation is set to client&#39;s native eol */</span>
<a name="l00062"></a><a class="code" href="svn__subst_8h.html#a160543c34edb8318de8cbe4543bbca28a2fdd9ef5ba015f6ecc6d59458df5c055">00062</a>   <a class="code" href="svn__subst_8h.html#a160543c34edb8318de8cbe4543bbca28a2fdd9ef5ba015f6ecc6d59458df5c055" title="Translation is set to client&#39;s native eol.">svn_subst_eol_style_native</a>,
<a name="l00063"></a>00063 <span class="comment"></span>
<a name="l00064"></a>00064 <span class="comment">  /** Translation is set to one of LF, CR, CRLF */</span>
<a name="l00065"></a><a class="code" href="svn__subst_8h.html#a160543c34edb8318de8cbe4543bbca28a6e778790cbc23c4028f73aaaf5524069">00065</a>   <a class="code" href="svn__subst_8h.html#a160543c34edb8318de8cbe4543bbca28a6e778790cbc23c4028f73aaaf5524069" title="Translation is set to one of LF, CR, CRLF.">svn_subst_eol_style_fixed</a>
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 } <a class="code" href="svn__subst_8h.html#a82d6196808784a7a73e098f8d8534edb" title="Valid states for &#39;svn:eol-style&#39; property.">svn_subst_eol_style_t</a>;
<a name="l00068"></a>00068 <span class="comment"></span>
<a name="l00069"></a>00069 <span class="comment">/** Set @a *style to the appropriate @c svn_subst_eol_style_t and @a *eol to</span>
<a name="l00070"></a>00070 <span class="comment"> * the appropriate cstring for a given svn:eol-style property value.</span>
<a name="l00071"></a>00071 <span class="comment"> *</span>
<a name="l00072"></a>00072 <span class="comment"> * Set @a *eol to</span>
<a name="l00073"></a>00073 <span class="comment"> *</span>
<a name="l00074"></a>00074 <span class="comment"> *    - @c NULL for @c svn_subst_eol_style_none, or</span>
<a name="l00075"></a>00075 <span class="comment"> *</span>
<a name="l00076"></a>00076 <span class="comment"> *    - a NULL-terminated C string containing the native eol marker</span>
<a name="l00077"></a>00077 <span class="comment"> *      for this platform, for @c svn_subst_eol_style_native, or</span>
<a name="l00078"></a>00078 <span class="comment"> *</span>
<a name="l00079"></a>00079 <span class="comment"> *    - a NULL-terminated C string containing the eol marker indicated</span>
<a name="l00080"></a>00080 <span class="comment"> *      by the property value, for @c svn_subst_eol_style_fixed.</span>
<a name="l00081"></a>00081 <span class="comment"> *</span>
<a name="l00082"></a>00082 <span class="comment"> * If @a *style is NULL, it is ignored.</span>
<a name="l00083"></a>00083 <span class="comment"> */</span>
<a name="l00084"></a>00084 <span class="keywordtype">void</span>
<a name="l00085"></a>00085 <a class="code" href="svn__subst_8h.html#adee8f25af905f8a450092b61ba79ea5c" title="Set *style to the appropriate svn_subst_eol_style_t and *eol to the appropriate cstring for a given s...">svn_subst_eol_style_from_value</a>(<a class="code" href="svn__subst_8h.html#a82d6196808784a7a73e098f8d8534edb" title="Valid states for &#39;svn:eol-style&#39; property.">svn_subst_eol_style_t</a> *style,
<a name="l00086"></a>00086                                <span class="keyword">const</span> <span class="keywordtype">char</span> **eol,
<a name="l00087"></a>00087                                <span class="keyword">const</span> <span class="keywordtype">char</span> *value);
<a name="l00088"></a>00088 <span class="comment"></span>
<a name="l00089"></a>00089 <span class="comment">/** Indicates whether the working copy and normalized versions of a file</span>
<a name="l00090"></a>00090 <span class="comment"> * with the given the parameters differ.  If @a force_eol_check is TRUE,</span>
<a name="l00091"></a>00091 <span class="comment"> * the routine also accounts for all translations required due to repairing</span>
<a name="l00092"></a>00092 <span class="comment"> * fixed eol styles.</span>
<a name="l00093"></a>00093 <span class="comment"> *</span>
<a name="l00094"></a>00094 <span class="comment"> * @since New in 1.4</span>
<a name="l00095"></a>00095 <span class="comment"> *</span>
<a name="l00096"></a>00096 <span class="comment"> */</span>
<a name="l00097"></a>00097 <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a>
<a name="l00098"></a>00098 <a class="code" href="svn__subst_8h.html#a8655a649e193b8eb96ba8ea59433a6b3" title="Indicates whether the working copy and normalized versions of a file with the given the parameters di...">svn_subst_translation_required</a>(<a class="code" href="svn__subst_8h.html#a82d6196808784a7a73e098f8d8534edb" title="Valid states for &#39;svn:eol-style&#39; property.">svn_subst_eol_style_t</a> style,
<a name="l00099"></a>00099                                <span class="keyword">const</span> <span class="keywordtype">char</span> *eol,
<a name="l00100"></a>00100                                apr_hash_t *keywords,
<a name="l00101"></a>00101                                <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> special,
<a name="l00102"></a>00102                                <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> force_eol_check);
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="comment"></span>
<a name="l00105"></a>00105 <span class="comment">/** Values used in keyword expansion.</span>
<a name="l00106"></a>00106 <span class="comment"> *</span>
<a name="l00107"></a>00107 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.2 API.</span>
<a name="l00108"></a>00108 <span class="comment"> */</span>
<a name="l00109"></a><a class="code" href="structsvn__subst__keywords__t.html">00109</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structsvn__subst__keywords__t.html" title="Values used in keyword expansion.">svn_subst_keywords_t</a>
<a name="l00110"></a>00110 {<span class="comment"></span>
<a name="l00111"></a>00111 <span class="comment">  /**</span>
<a name="l00112"></a>00112 <span class="comment">   * @name svn_subst_keywords_t fields</span>
<a name="l00113"></a>00113 <span class="comment">   * String expansion of the like-named keyword, or NULL if the keyword</span>
<a name="l00114"></a>00114 <span class="comment">   * was not selected in the svn:keywords property.</span>
<a name="l00115"></a>00115 <span class="comment">   * @{</span>
<a name="l00116"></a>00116 <span class="comment">   */</span>
<a name="l00117"></a>00117   <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *revision;
<a name="l00118"></a>00118   <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *date;
<a name="l00119"></a>00119   <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *author;
<a name="l00120"></a>00120   <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *url;
<a name="l00121"></a>00121   <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *id;<span class="comment"></span>
<a name="l00122"></a>00122 <span class="comment">  /** @} */</span>
<a name="l00123"></a>00123 } <a class="code" href="svn__subst_8h.html#a23f86ade6d1361383d284d423bd333ce" title="Values used in keyword expansion.">svn_subst_keywords_t</a>;
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 <span class="comment"></span>
<a name="l00126"></a>00126 <span class="comment">/**</span>
<a name="l00127"></a>00127 <span class="comment"> * Set @a *kw to a new keywords hash filled with the appropriate contents</span>
<a name="l00128"></a>00128 <span class="comment"> * given a @a keywords_string (the contents of the svn:keywords</span>
<a name="l00129"></a>00129 <span class="comment"> * property for the file in question), the revision @a rev, the @a url,</span>
<a name="l00130"></a>00130 <span class="comment"> * the @a date the file was committed on, and the @a author of the last</span>
<a name="l00131"></a>00131 <span class="comment"> * commit.  Any of these can be @c NULL to indicate that the information is</span>
<a name="l00132"></a>00132 <span class="comment"> * not present, or @c 0 for @a date.</span>
<a name="l00133"></a>00133 <span class="comment"> *</span>
<a name="l00134"></a>00134 <span class="comment"> * Hash keys are of type &lt;tt&gt;const char *&lt;/tt&gt;.</span>
<a name="l00135"></a>00135 <span class="comment"> * Hash values are of type &lt;tt&gt;svn_string_t *&lt;/tt&gt;.</span>
<a name="l00136"></a>00136 <span class="comment"> *</span>
<a name="l00137"></a>00137 <span class="comment"> * All memory is allocated out of @a pool.</span>
<a name="l00138"></a>00138 <span class="comment"> *</span>
<a name="l00139"></a>00139 <span class="comment"> * @since New in 1.3.</span>
<a name="l00140"></a>00140 <span class="comment"> */</span>
<a name="l00141"></a>00141 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00142"></a>00142 <a class="code" href="svn__subst_8h.html#a42f73d2001ac889b1d9883c5601e55f8" title="Set *kw to a new keywords hash filled with the appropriate contents given a keywords_string (the cont...">svn_subst_build_keywords2</a>(apr_hash_t **kw,
<a name="l00143"></a>00143                           <span class="keyword">const</span> <span class="keywordtype">char</span> *keywords_string,
<a name="l00144"></a>00144                           <span class="keyword">const</span> <span class="keywordtype">char</span> *rev,
<a name="l00145"></a>00145                           <span class="keyword">const</span> <span class="keywordtype">char</span> *url,
<a name="l00146"></a>00146                           apr_time_t date,
<a name="l00147"></a>00147                           <span class="keyword">const</span> <span class="keywordtype">char</span> *author,
<a name="l00148"></a>00148                           apr_pool_t *pool);
<a name="l00149"></a>00149 <span class="comment"></span>
<a name="l00150"></a>00150 <span class="comment">/** Similar to svn_subst_build_keywords2() except that it populates</span>
<a name="l00151"></a>00151 <span class="comment"> * an existing structure @a *kw instead of creating a keywords hash.</span>
<a name="l00152"></a>00152 <span class="comment"> *</span>
<a name="l00153"></a>00153 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.2 API.</span>
<a name="l00154"></a>00154 <span class="comment"> */</span>
<a name="l00155"></a>00155 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00156"></a>00156 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00157"></a>00157 <a class="code" href="svn__subst_8h.html#ab004042c7b9a26349d68d625128041c8" title="Similar to svn_subst_build_keywords2() except that it populates an existing structure *kw instead of ...">svn_subst_build_keywords</a>(<a class="code" href="structsvn__subst__keywords__t.html" title="Values used in keyword expansion.">svn_subst_keywords_t</a> *kw,
<a name="l00158"></a>00158                          <span class="keyword">const</span> <span class="keywordtype">char</span> *keywords_string,
<a name="l00159"></a>00159                          <span class="keyword">const</span> <span class="keywordtype">char</span> *rev,
<a name="l00160"></a>00160                          <span class="keyword">const</span> <span class="keywordtype">char</span> *url,
<a name="l00161"></a>00161                          apr_time_t date,
<a name="l00162"></a>00162                          <span class="keyword">const</span> <span class="keywordtype">char</span> *author,
<a name="l00163"></a>00163                          apr_pool_t *pool);
<a name="l00164"></a>00164 
<a name="l00165"></a>00165 <span class="comment"></span>
<a name="l00166"></a>00166 <span class="comment">/** Return @c TRUE if @a a and @a b do not hold the same keywords.</span>
<a name="l00167"></a>00167 <span class="comment"> *</span>
<a name="l00168"></a>00168 <span class="comment"> * @a a and @a b are hashes of the form produced by</span>
<a name="l00169"></a>00169 <span class="comment"> * svn_subst_build_keywords2().</span>
<a name="l00170"></a>00170 <span class="comment"> *</span>
<a name="l00171"></a>00171 <span class="comment"> * @since New in 1.3.</span>
<a name="l00172"></a>00172 <span class="comment"> *</span>
<a name="l00173"></a>00173 <span class="comment"> * If @a compare_values is @c TRUE, &quot;same&quot; means that the @a a and @a b</span>
<a name="l00174"></a>00174 <span class="comment"> * contain exactly the same set of keywords, and the values of corresponding</span>
<a name="l00175"></a>00175 <span class="comment"> * keywords match as well.  Else if @a compare_values is @c FALSE, then</span>
<a name="l00176"></a>00176 <span class="comment"> * &quot;same&quot; merely means that @a a and @a b hold the same set of keywords,</span>
<a name="l00177"></a>00177 <span class="comment"> * although those keywords&#39; values might differ.</span>
<a name="l00178"></a>00178 <span class="comment"> *</span>
<a name="l00179"></a>00179 <span class="comment"> * @a a and/or @a b may be @c NULL; for purposes of comparison, @c NULL is</span>
<a name="l00180"></a>00180 <span class="comment"> * equivalent to holding no keywords.</span>
<a name="l00181"></a>00181 <span class="comment"> */</span>
<a name="l00182"></a>00182 <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a>
<a name="l00183"></a>00183 <a class="code" href="svn__subst_8h.html#ac1bd03f2381659cd0358dd74e7f882e5" title="Return TRUE if a and b do not hold the same keywords.">svn_subst_keywords_differ2</a>(apr_hash_t *a,
<a name="l00184"></a>00184                            apr_hash_t *b,
<a name="l00185"></a>00185                            <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> compare_values,
<a name="l00186"></a>00186                            apr_pool_t *pool);
<a name="l00187"></a>00187 <span class="comment"></span>
<a name="l00188"></a>00188 <span class="comment">/** Similar to svn_subst_keywords_differ2() except that it compares</span>
<a name="l00189"></a>00189 <span class="comment"> * two @c svn_subst_keywords_t structs instead of keyword hashes.</span>
<a name="l00190"></a>00190 <span class="comment"> *</span>
<a name="l00191"></a>00191 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.2 API.</span>
<a name="l00192"></a>00192 <span class="comment"> */</span>
<a name="l00193"></a>00193 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00194"></a>00194 <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a>
<a name="l00195"></a>00195 <a class="code" href="svn__subst_8h.html#a598cb9236b80298a904c4b8d7b5ab113" title="Similar to svn_subst_keywords_differ2() except that it compares two svn_subst_keywords_t structs inst...">svn_subst_keywords_differ</a>(<span class="keyword">const</span> <a class="code" href="structsvn__subst__keywords__t.html" title="Values used in keyword expansion.">svn_subst_keywords_t</a> *a,
<a name="l00196"></a>00196                           <span class="keyword">const</span> <a class="code" href="structsvn__subst__keywords__t.html" title="Values used in keyword expansion.">svn_subst_keywords_t</a> *b,
<a name="l00197"></a>00197                           <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> compare_values);
<a name="l00198"></a>00198 
<a name="l00199"></a>00199 <span class="comment"></span>
<a name="l00200"></a>00200 <span class="comment">/**</span>
<a name="l00201"></a>00201 <span class="comment"> * Copy and translate the data in @a src_stream into @a dst_stream.  It is</span>
<a name="l00202"></a>00202 <span class="comment"> * assumed that @a src_stream is a readable stream and @a dst_stream is a</span>
<a name="l00203"></a>00203 <span class="comment"> * writable stream.</span>
<a name="l00204"></a>00204 <span class="comment"> *</span>
<a name="l00205"></a>00205 <span class="comment"> * If @a eol_str is non-@c NULL, replace whatever bytestring @a src_stream</span>
<a name="l00206"></a>00206 <span class="comment"> * uses to denote line endings with @a eol_str in the output.  If</span>
<a name="l00207"></a>00207 <span class="comment"> * @a src_stream has an inconsistent line ending style, then: if @a repair</span>
<a name="l00208"></a>00208 <span class="comment"> * is @c FALSE, return @c SVN_ERR_IO_INCONSISTENT_EOL, else if @a repair is</span>
<a name="l00209"></a>00209 <span class="comment"> * @c TRUE, convert any line ending in @a src_stream to @a eol_str in</span>
<a name="l00210"></a>00210 <span class="comment"> * @a dst_stream.  Recognized line endings are: &quot;\n&quot;, &quot;\r&quot;, and &quot;\r\n&quot;.</span>
<a name="l00211"></a>00211 <span class="comment"> *</span>
<a name="l00212"></a>00212 <span class="comment"> * See svn_subst_stream_translated() for details of the keyword substitution</span>
<a name="l00213"></a>00213 <span class="comment"> * which is controlled by the @a expand and @a keywords parameters.</span>
<a name="l00214"></a>00214 <span class="comment"> *</span>
<a name="l00215"></a>00215 <span class="comment"> * Note that a translation request is *required*:  one of @a eol_str or</span>
<a name="l00216"></a>00216 <span class="comment"> * @a keywords must be non-@c NULL.</span>
<a name="l00217"></a>00217 <span class="comment"> *</span>
<a name="l00218"></a>00218 <span class="comment"> * Notes:</span>
<a name="l00219"></a>00219 <span class="comment"> *</span>
<a name="l00220"></a>00220 <span class="comment"> * See svn_wc__get_keywords() and svn_wc__get_eol_style() for a</span>
<a name="l00221"></a>00221 <span class="comment"> * convenient way to get @a eol_str and @a keywords if in libsvn_wc.</span>
<a name="l00222"></a>00222 <span class="comment"> *</span>
<a name="l00223"></a>00223 <span class="comment"> * @since New in 1.3.</span>
<a name="l00224"></a>00224 <span class="comment"> *</span>
<a name="l00225"></a>00225 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.5 API.</span>
<a name="l00226"></a>00226 <span class="comment"> *   Callers should use svn_subst_stream_translated() instead.</span>
<a name="l00227"></a>00227 <span class="comment"> */</span>
<a name="l00228"></a>00228 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00229"></a>00229 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00230"></a>00230 <a class="code" href="svn__subst_8h.html#a8055c67113fea26360d05820e91de8b1" title="Copy and translate the data in src_stream into dst_stream.">svn_subst_translate_stream3</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *src_stream,
<a name="l00231"></a>00231                             <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *dst_stream,
<a name="l00232"></a>00232                             <span class="keyword">const</span> <span class="keywordtype">char</span> *eol_str,
<a name="l00233"></a>00233                             <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> repair,
<a name="l00234"></a>00234                             apr_hash_t *keywords,
<a name="l00235"></a>00235                             <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> expand,
<a name="l00236"></a>00236                             apr_pool_t *scratch_pool);
<a name="l00237"></a>00237 
<a name="l00238"></a>00238 <span class="comment"></span>
<a name="l00239"></a>00239 <span class="comment">/** Similar to svn_subst_translate_stream3() except relies upon a</span>
<a name="l00240"></a>00240 <span class="comment"> * @c svn_subst_keywords_t struct instead of a hash for the keywords.</span>
<a name="l00241"></a>00241 <span class="comment"> *</span>
<a name="l00242"></a>00242 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.2 API.</span>
<a name="l00243"></a>00243 <span class="comment"> */</span>
<a name="l00244"></a>00244 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00245"></a>00245 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00246"></a>00246 <a class="code" href="svn__subst_8h.html#a4b2918175c4dbeef269a8537aa33c5bb" title="Similar to svn_subst_translate_stream3() except relies upon a svn_subst_keywords_t struct instead of ...">svn_subst_translate_stream2</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *src_stream,
<a name="l00247"></a>00247                             <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *dst_stream,
<a name="l00248"></a>00248                             <span class="keyword">const</span> <span class="keywordtype">char</span> *eol_str,
<a name="l00249"></a>00249                             <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> repair,
<a name="l00250"></a>00250                             <span class="keyword">const</span> <a class="code" href="structsvn__subst__keywords__t.html" title="Values used in keyword expansion.">svn_subst_keywords_t</a> *keywords,
<a name="l00251"></a>00251                             <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> expand,
<a name="l00252"></a>00252                             apr_pool_t *scratch_pool);
<a name="l00253"></a>00253 
<a name="l00254"></a>00254 <span class="comment"></span>
<a name="l00255"></a>00255 <span class="comment">/**</span>
<a name="l00256"></a>00256 <span class="comment"> * Same as svn_subst_translate_stream2(), but does not take a @a pool</span>
<a name="l00257"></a>00257 <span class="comment"> * argument, instead creates a temporary subpool of the global pool, and</span>
<a name="l00258"></a>00258 <span class="comment"> * destroys it before returning.</span>
<a name="l00259"></a>00259 <span class="comment"> *</span>
<a name="l00260"></a>00260 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.1 API.</span>
<a name="l00261"></a>00261 <span class="comment"> */</span>
<a name="l00262"></a>00262 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00263"></a>00263 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00264"></a>00264 <a class="code" href="svn__subst_8h.html#a81b349bf8cb380a0421327013e00d626" title="Same as svn_subst_translate_stream2(), but does not take a pool argument, instead creates a temporary...">svn_subst_translate_stream</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *src_stream,
<a name="l00265"></a>00265                            <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *dst_stream,
<a name="l00266"></a>00266                            <span class="keyword">const</span> <span class="keywordtype">char</span> *eol_str,
<a name="l00267"></a>00267                            <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> repair,
<a name="l00268"></a>00268                            <span class="keyword">const</span> <a class="code" href="structsvn__subst__keywords__t.html" title="Values used in keyword expansion.">svn_subst_keywords_t</a> *keywords,
<a name="l00269"></a>00269                            <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> expand);
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 <span class="comment"></span>
<a name="l00272"></a>00272 <span class="comment">/** Return a stream which performs eol translation and keyword</span>
<a name="l00273"></a>00273 <span class="comment"> * expansion when read from or written to.  The stream @a stream</span>
<a name="l00274"></a>00274 <span class="comment"> * is used to read and write all data.</span>
<a name="l00275"></a>00275 <span class="comment"> *</span>
<a name="l00276"></a>00276 <span class="comment"> * Make sure you call svn_stream_close() on the returned stream to</span>
<a name="l00277"></a>00277 <span class="comment"> * ensure all data is flushed and cleaned up (this will also close</span>
<a name="l00278"></a>00278 <span class="comment"> * the provided @a stream).</span>
<a name="l00279"></a>00279 <span class="comment"> *</span>
<a name="l00280"></a>00280 <span class="comment"> * Read operations from and write operations to the stream</span>
<a name="l00281"></a>00281 <span class="comment"> * perform the same operation: if @a expand is @c FALSE, both</span>
<a name="l00282"></a>00282 <span class="comment"> * contract keywords.  One stream supports both read and write</span>
<a name="l00283"></a>00283 <span class="comment"> * operations.  Reads and writes may be mixed.</span>
<a name="l00284"></a>00284 <span class="comment"> *</span>
<a name="l00285"></a>00285 <span class="comment"> * If @a eol_str is non-@c NULL, replace whatever bytestring the input uses</span>
<a name="l00286"></a>00286 <span class="comment"> * to denote line endings with @a eol_str in the output.  If the input has</span>
<a name="l00287"></a>00287 <span class="comment"> * an inconsistent line ending style, then: if @a repair is @c FALSE, then a</span>
<a name="l00288"></a>00288 <span class="comment"> * subsequent read, write or other operation on the stream will return</span>
<a name="l00289"></a>00289 <span class="comment"> * @c SVN_ERR_IO_INCONSISTENT_EOL when the inconsistency is detected, else</span>
<a name="l00290"></a>00290 <span class="comment"> * if @a repair is @c TRUE, convert any line ending to @a eol_str.</span>
<a name="l00291"></a>00291 <span class="comment"> * Recognized line endings are: &quot;\n&quot;, &quot;\r&quot;, and &quot;\r\n&quot;.</span>
<a name="l00292"></a>00292 <span class="comment"> *</span>
<a name="l00293"></a>00293 <span class="comment"> * Expand and contract keywords using the contents of @a keywords as the</span>
<a name="l00294"></a>00294 <span class="comment"> * new values.  If @a expand is @c TRUE, expand contracted keywords and</span>
<a name="l00295"></a>00295 <span class="comment"> * re-expand expanded keywords.  If @a expand is @c FALSE, contract expanded</span>
<a name="l00296"></a>00296 <span class="comment"> * keywords and ignore contracted ones.  Keywords not found in the hash are</span>
<a name="l00297"></a>00297 <span class="comment"> * ignored (not contracted or expanded).  If the @a keywords hash</span>
<a name="l00298"></a>00298 <span class="comment"> * itself is @c NULL, keyword substitution will be altogether ignored.</span>
<a name="l00299"></a>00299 <span class="comment"> *</span>
<a name="l00300"></a>00300 <span class="comment"> * Detect only keywords that are no longer than @c SVN_KEYWORD_MAX_LEN</span>
<a name="l00301"></a>00301 <span class="comment"> * bytes, including the delimiters and the keyword itself.</span>
<a name="l00302"></a>00302 <span class="comment"> *</span>
<a name="l00303"></a>00303 <span class="comment"> * Recommendation: if @a expand is FALSE, then you don&#39;t care about the</span>
<a name="l00304"></a>00304 <span class="comment"> * keyword values, so use empty strings as non-NULL signifiers when you</span>
<a name="l00305"></a>00305 <span class="comment"> * build the keywords hash.</span>
<a name="l00306"></a>00306 <span class="comment"> *</span>
<a name="l00307"></a>00307 <span class="comment"> * The stream returned is allocated in @a result_pool.</span>
<a name="l00308"></a>00308 <span class="comment"> *</span>
<a name="l00309"></a>00309 <span class="comment"> * If the inner stream implements resetting via svn_stream_reset(),</span>
<a name="l00310"></a>00310 <span class="comment"> * or marking and seeking via svn_stream_mark() and svn_stream_seek(),</span>
<a name="l00311"></a>00311 <span class="comment"> * the translated stream will too.</span>
<a name="l00312"></a>00312 <span class="comment"> *</span>
<a name="l00313"></a>00313 <span class="comment"> * @since New in 1.4.</span>
<a name="l00314"></a>00314 <span class="comment"> */</span>
<a name="l00315"></a>00315 <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *
<a name="l00316"></a>00316 <a class="code" href="svn__subst_8h.html#a5dff1f4ae902e9d96a648b647545c559" title="Return a stream which performs eol translation and keyword expansion when read from or written to...">svn_subst_stream_translated</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *stream,
<a name="l00317"></a>00317                             <span class="keyword">const</span> <span class="keywordtype">char</span> *eol_str,
<a name="l00318"></a>00318                             <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> repair,
<a name="l00319"></a>00319                             apr_hash_t *keywords,
<a name="l00320"></a>00320                             <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> expand,
<a name="l00321"></a>00321                             apr_pool_t *result_pool);
<a name="l00322"></a>00322 
<a name="l00323"></a>00323 <span class="comment"></span>
<a name="l00324"></a>00324 <span class="comment">/** Set @a *stream to a stream which performs eol translation and keyword</span>
<a name="l00325"></a>00325 <span class="comment"> * expansion when read from or written to.  The stream @a source</span>
<a name="l00326"></a>00326 <span class="comment"> * is used to read and write all data.  Make sure you call</span>
<a name="l00327"></a>00327 <span class="comment"> * svn_stream_close() on @a stream to make sure all data are flushed</span>
<a name="l00328"></a>00328 <span class="comment"> * and cleaned up.</span>
<a name="l00329"></a>00329 <span class="comment"> *</span>
<a name="l00330"></a>00330 <span class="comment"> * When @a stream is closed, then @a source will be closed.</span>
<a name="l00331"></a>00331 <span class="comment"> *</span>
<a name="l00332"></a>00332 <span class="comment"> * Read and write operations perform the same transformation:</span>
<a name="l00333"></a>00333 <span class="comment"> * all data is translated to normal form.</span>
<a name="l00334"></a>00334 <span class="comment"> *</span>
<a name="l00335"></a>00335 <span class="comment"> * @see svn_subst_translate_to_normal_form()</span>
<a name="l00336"></a>00336 <span class="comment"> *</span>
<a name="l00337"></a>00337 <span class="comment"> * @since New in 1.5.</span>
<a name="l00338"></a>00338 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.5 API.</span>
<a name="l00339"></a>00339 <span class="comment"> */</span>
<a name="l00340"></a>00340 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00341"></a>00341 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00342"></a>00342 <a class="code" href="svn__subst_8h.html#a4f47ae70ef1b063543924891f3fb71d6" title="Set *stream to a stream which performs eol translation and keyword expansion when read from or writte...">svn_subst_stream_translated_to_normal_form</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> **stream,
<a name="l00343"></a>00343                                            <a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> *source,
<a name="l00344"></a>00344                                            <a class="code" href="svn__subst_8h.html#a82d6196808784a7a73e098f8d8534edb" title="Valid states for &#39;svn:eol-style&#39; property.">svn_subst_eol_style_t</a> eol_style,
<a name="l00345"></a>00345                                            <span class="keyword">const</span> <span class="keywordtype">char</span> *eol_str,
<a name="l00346"></a>00346                                            <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> always_repair_eols,
<a name="l00347"></a>00347                                            apr_hash_t *keywords,
<a name="l00348"></a>00348                                            apr_pool_t *pool);
<a name="l00349"></a>00349 
<a name="l00350"></a>00350 <span class="comment"></span>
<a name="l00351"></a>00351 <span class="comment">/** Set @a *stream to a readable stream containing the &quot;normal form&quot;</span>
<a name="l00352"></a>00352 <span class="comment"> * of the special file located at @a path. The stream will be allocated</span>
<a name="l00353"></a>00353 <span class="comment"> * in @a result_pool, and any temporary allocations will be made in</span>
<a name="l00354"></a>00354 <span class="comment"> * @a scratch_pool.</span>
<a name="l00355"></a>00355 <span class="comment"> *</span>
<a name="l00356"></a>00356 <span class="comment"> * If the file at @a path is in fact a regular file, just read its content,</span>
<a name="l00357"></a>00357 <span class="comment"> * which should be in the &quot;normal form&quot; for a special file.  This enables</span>
<a name="l00358"></a>00358 <span class="comment"> * special files to be written and read on platforms that do not treat them</span>
<a name="l00359"></a>00359 <span class="comment"> * as special.</span>
<a name="l00360"></a>00360 <span class="comment"> *</span>
<a name="l00361"></a>00361 <span class="comment"> * @since New in 1.6.</span>
<a name="l00362"></a>00362 <span class="comment"> */</span>
<a name="l00363"></a>00363 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00364"></a>00364 <a class="code" href="svn__subst_8h.html#a8e764bcb9bebd55a9679308d439cf35f" title="Set *stream to a readable stream containing the &quot;normal form&quot; of the special file located at path...">svn_subst_read_specialfile</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> **stream,
<a name="l00365"></a>00365                            <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00366"></a>00366                            apr_pool_t *result_pool,
<a name="l00367"></a>00367                            apr_pool_t *scratch_pool);
<a name="l00368"></a>00368 
<a name="l00369"></a>00369 <span class="comment"></span>
<a name="l00370"></a>00370 <span class="comment">/** Set @a *stream to a writable stream that accepts content in</span>
<a name="l00371"></a>00371 <span class="comment"> * the &quot;normal form&quot; for a special file, to be located at @a path, and</span>
<a name="l00372"></a>00372 <span class="comment"> * will create that file when the stream is closed. The stream will be</span>
<a name="l00373"></a>00373 <span class="comment"> * allocated in @a result_pool, and any temporary allocations will be</span>
<a name="l00374"></a>00374 <span class="comment"> * made in @a scratch_pool.</span>
<a name="l00375"></a>00375 <span class="comment"> *</span>
<a name="l00376"></a>00376 <span class="comment"> * If the platform does not support the semantics of the special file, write</span>
<a name="l00377"></a>00377 <span class="comment"> * a regular file containing the &quot;normal form&quot; text.  This enables special</span>
<a name="l00378"></a>00378 <span class="comment"> * files to be written and read on platforms that do not treat them as</span>
<a name="l00379"></a>00379 <span class="comment"> * special.</span>
<a name="l00380"></a>00380 <span class="comment"> *</span>
<a name="l00381"></a>00381 <span class="comment"> * Note: the target file is created in a temporary location, then renamed</span>
<a name="l00382"></a>00382 <span class="comment"> *   into position, so the creation can be considered &quot;atomic&quot;.</span>
<a name="l00383"></a>00383 <span class="comment"> *</span>
<a name="l00384"></a>00384 <span class="comment"> * @since New in 1.6.</span>
<a name="l00385"></a>00385 <span class="comment"> */</span>
<a name="l00386"></a>00386 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00387"></a>00387 <a class="code" href="svn__subst_8h.html#adc53c6941cb7760a87dc86e87dbe5741" title="Set *stream to a writable stream that accepts content in the &quot;normal form&quot; for a special file...">svn_subst_create_specialfile</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> **stream,
<a name="l00388"></a>00388                              <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00389"></a>00389                              apr_pool_t *result_pool,
<a name="l00390"></a>00390                              apr_pool_t *scratch_pool);
<a name="l00391"></a>00391 
<a name="l00392"></a>00392 <span class="comment"></span>
<a name="l00393"></a>00393 <span class="comment">/** Set @a *stream to a stream which translates the special file at @a path</span>
<a name="l00394"></a>00394 <span class="comment"> * to the internal representation for special files when read from.  When</span>
<a name="l00395"></a>00395 <span class="comment"> * written to, it does the reverse: creating a special file when the</span>
<a name="l00396"></a>00396 <span class="comment"> * stream is closed.</span>
<a name="l00397"></a>00397 <span class="comment"> *</span>
<a name="l00398"></a>00398 <span class="comment"> * @since New in 1.5.</span>
<a name="l00399"></a>00399 <span class="comment"> *</span>
<a name="l00400"></a>00400 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.5 API.</span>
<a name="l00401"></a>00401 <span class="comment"> *   Callers should use svn_subst_read_specialfile or</span>
<a name="l00402"></a>00402 <span class="comment"> *   svn_subst_create_specialfile as appropriate.</span>
<a name="l00403"></a>00403 <span class="comment"> */</span>
<a name="l00404"></a>00404 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00405"></a>00405 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00406"></a>00406 <a class="code" href="svn__subst_8h.html#ae4e5f664140910fecfce37994ba949dc" title="Set *stream to a stream which translates the special file at path to the internal representation for ...">svn_subst_stream_from_specialfile</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> **stream,
<a name="l00407"></a>00407                                   <span class="keyword">const</span> <span class="keywordtype">char</span> *path,
<a name="l00408"></a>00408                                   apr_pool_t *pool);
<a name="l00409"></a>00409 
<a name="l00410"></a>00410 <span class="comment"></span>
<a name="l00411"></a>00411 <span class="comment">/**</span>
<a name="l00412"></a>00412 <span class="comment"> * Copy the contents of file-path @a src to file-path @a dst atomically,</span>
<a name="l00413"></a>00413 <span class="comment"> * either creating @a dst or overwriting @a dst if it exists, possibly</span>
<a name="l00414"></a>00414 <span class="comment"> * performing line ending and keyword translations.</span>
<a name="l00415"></a>00415 <span class="comment"> *</span>
<a name="l00416"></a>00416 <span class="comment"> * The parameters @a *eol_str, @a repair, @a *keywords and @a expand are</span>
<a name="l00417"></a>00417 <span class="comment"> * defined the same as in svn_subst_translate_stream3().</span>
<a name="l00418"></a>00418 <span class="comment"> *</span>
<a name="l00419"></a>00419 <span class="comment"> * In addition, it will create a special file from normal form or</span>
<a name="l00420"></a>00420 <span class="comment"> * translate one to normal form if @a special is @c TRUE.</span>
<a name="l00421"></a>00421 <span class="comment"> *</span>
<a name="l00422"></a>00422 <span class="comment"> * If anything goes wrong during the copy, attempt to delete @a dst (if</span>
<a name="l00423"></a>00423 <span class="comment"> * it exists).</span>
<a name="l00424"></a>00424 <span class="comment"> *</span>
<a name="l00425"></a>00425 <span class="comment"> * If @a eol_str and @a keywords are @c NULL, behavior is just a byte-for-byte</span>
<a name="l00426"></a>00426 <span class="comment"> * copy.</span>
<a name="l00427"></a>00427 <span class="comment"> *</span>
<a name="l00428"></a>00428 <span class="comment"> * @a cancel_func and @a cancel_baton will be called (if not NULL)</span>
<a name="l00429"></a>00429 <span class="comment"> * periodically to check for cancellation.</span>
<a name="l00430"></a>00430 <span class="comment"> *</span>
<a name="l00431"></a>00431 <span class="comment"> * @since New in 1.7.</span>
<a name="l00432"></a>00432 <span class="comment"> */</span>
<a name="l00433"></a>00433 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00434"></a>00434 <a class="code" href="svn__subst_8h.html#a8ae011aa19ef5cae54c604b61ca40a16" title="Copy the contents of file-path src to file-path dst atomically, either creating dst or overwriting ds...">svn_subst_copy_and_translate4</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src,
<a name="l00435"></a>00435                               <span class="keyword">const</span> <span class="keywordtype">char</span> *dst,
<a name="l00436"></a>00436                               <span class="keyword">const</span> <span class="keywordtype">char</span> *eol_str,
<a name="l00437"></a>00437                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> repair,
<a name="l00438"></a>00438                               apr_hash_t *keywords,
<a name="l00439"></a>00439                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> expand,
<a name="l00440"></a>00440                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> special,
<a name="l00441"></a>00441                               <a class="code" href="svn__types_8h.html#addaab83431a3d41b6c62e9d501cd5ecc" title="A user defined callback that subversion will call with a user defined baton to see if the current ope...">svn_cancel_func_t</a> cancel_func,
<a name="l00442"></a>00442                               <span class="keywordtype">void</span> *cancel_baton,
<a name="l00443"></a>00443                               apr_pool_t *pool);
<a name="l00444"></a>00444 
<a name="l00445"></a>00445 <span class="comment"></span>
<a name="l00446"></a>00446 <span class="comment">/**</span>
<a name="l00447"></a>00447 <span class="comment"> * Similar to svn_subst_copy_and_translate4() but without a cancellation</span>
<a name="l00448"></a>00448 <span class="comment"> * function and baton.</span>
<a name="l00449"></a>00449 <span class="comment"> *</span>
<a name="l00450"></a>00450 <span class="comment"> * @since New in 1.3.</span>
<a name="l00451"></a>00451 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l00452"></a>00452 <span class="comment"> */</span>
<a name="l00453"></a>00453 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00454"></a>00454 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00455"></a>00455 <a class="code" href="svn__subst_8h.html#a18dbb80be4ef26b2a978454716539d0c" title="Similar to svn_subst_copy_and_translate4() but without a cancellation function and baton...">svn_subst_copy_and_translate3</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src,
<a name="l00456"></a>00456                               <span class="keyword">const</span> <span class="keywordtype">char</span> *dst,
<a name="l00457"></a>00457                               <span class="keyword">const</span> <span class="keywordtype">char</span> *eol_str,
<a name="l00458"></a>00458                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> repair,
<a name="l00459"></a>00459                               apr_hash_t *keywords,
<a name="l00460"></a>00460                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> expand,
<a name="l00461"></a>00461                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> special,
<a name="l00462"></a>00462                               apr_pool_t *pool);
<a name="l00463"></a>00463 
<a name="l00464"></a>00464 <span class="comment"></span>
<a name="l00465"></a>00465 <span class="comment">/**</span>
<a name="l00466"></a>00466 <span class="comment"> * Similar to svn_subst_copy_and_translate3() except that @a keywords is a</span>
<a name="l00467"></a>00467 <span class="comment"> * @c svn_subst_keywords_t struct instead of a keywords hash.</span>
<a name="l00468"></a>00468 <span class="comment"> *</span>
<a name="l00469"></a>00469 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.2 API.</span>
<a name="l00470"></a>00470 <span class="comment"> * @since New in 1.1.</span>
<a name="l00471"></a>00471 <span class="comment"> */</span>
<a name="l00472"></a>00472 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00473"></a>00473 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00474"></a>00474 <a class="code" href="svn__subst_8h.html#a9bbccf6a71c3e07a112e1e44f9ecec98" title="Similar to svn_subst_copy_and_translate3() except that keywords is a svn_subst_keywords_t struct inst...">svn_subst_copy_and_translate2</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src,
<a name="l00475"></a>00475                               <span class="keyword">const</span> <span class="keywordtype">char</span> *dst,
<a name="l00476"></a>00476                               <span class="keyword">const</span> <span class="keywordtype">char</span> *eol_str,
<a name="l00477"></a>00477                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> repair,
<a name="l00478"></a>00478                               <span class="keyword">const</span> <a class="code" href="structsvn__subst__keywords__t.html" title="Values used in keyword expansion.">svn_subst_keywords_t</a> *keywords,
<a name="l00479"></a>00479                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> expand,
<a name="l00480"></a>00480                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> special,
<a name="l00481"></a>00481                               apr_pool_t *pool);
<a name="l00482"></a>00482 <span class="comment"></span>
<a name="l00483"></a>00483 <span class="comment">/**</span>
<a name="l00484"></a>00484 <span class="comment"> * Similar to svn_subst_copy_and_translate2() except that @a special is</span>
<a name="l00485"></a>00485 <span class="comment"> * always set to @c FALSE.</span>
<a name="l00486"></a>00486 <span class="comment"> *</span>
<a name="l00487"></a>00487 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.0 API.</span>
<a name="l00488"></a>00488 <span class="comment"> */</span>
<a name="l00489"></a>00489 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00490"></a>00490 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00491"></a>00491 <a class="code" href="svn__subst_8h.html#aa9dfe3fade520c1ca5b1edbe50989658" title="Similar to svn_subst_copy_and_translate2() except that special is always set to FALSE.">svn_subst_copy_and_translate</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src,
<a name="l00492"></a>00492                              <span class="keyword">const</span> <span class="keywordtype">char</span> *dst,
<a name="l00493"></a>00493                              <span class="keyword">const</span> <span class="keywordtype">char</span> *eol_str,
<a name="l00494"></a>00494                              <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> repair,
<a name="l00495"></a>00495                              <span class="keyword">const</span> <a class="code" href="structsvn__subst__keywords__t.html" title="Values used in keyword expansion.">svn_subst_keywords_t</a> *keywords,
<a name="l00496"></a>00496                              <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> expand,
<a name="l00497"></a>00497                              apr_pool_t *pool);
<a name="l00498"></a>00498 
<a name="l00499"></a>00499 <span class="comment"></span>
<a name="l00500"></a>00500 <span class="comment">/**</span>
<a name="l00501"></a>00501 <span class="comment"> * Set @a *dst to a copy of the string @a src, possibly performing line</span>
<a name="l00502"></a>00502 <span class="comment"> * ending and keyword translations.</span>
<a name="l00503"></a>00503 <span class="comment"> *</span>
<a name="l00504"></a>00504 <span class="comment"> * This is a variant of svn_subst_translate_stream3() that operates on</span>
<a name="l00505"></a>00505 <span class="comment"> * cstrings.  @see svn_subst_stream_translated() for details of the</span>
<a name="l00506"></a>00506 <span class="comment"> * translation and of @a eol_str, @a repair, @a keywords and @a expand.</span>
<a name="l00507"></a>00507 <span class="comment"> *</span>
<a name="l00508"></a>00508 <span class="comment"> * If @a eol_str and @a keywords are @c NULL, behavior is just a byte-for-byte</span>
<a name="l00509"></a>00509 <span class="comment"> * copy.</span>
<a name="l00510"></a>00510 <span class="comment"> *</span>
<a name="l00511"></a>00511 <span class="comment"> * Allocate @a *dst in @a pool.</span>
<a name="l00512"></a>00512 <span class="comment"> *</span>
<a name="l00513"></a>00513 <span class="comment"> * @since New in 1.3.</span>
<a name="l00514"></a>00514 <span class="comment"> */</span>
<a name="l00515"></a>00515 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00516"></a>00516 <a class="code" href="svn__subst_8h.html#a9030b641b1ef299e68c35670014ea747" title="Set *dst to a copy of the string src, possibly performing line ending and keyword translations...">svn_subst_translate_cstring2</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src,
<a name="l00517"></a>00517                              <span class="keyword">const</span> <span class="keywordtype">char</span> **dst,
<a name="l00518"></a>00518                              <span class="keyword">const</span> <span class="keywordtype">char</span> *eol_str,
<a name="l00519"></a>00519                              <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> repair,
<a name="l00520"></a>00520                              apr_hash_t *keywords,
<a name="l00521"></a>00521                              <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> expand,
<a name="l00522"></a>00522                              apr_pool_t *pool);
<a name="l00523"></a>00523 <span class="comment"></span>
<a name="l00524"></a>00524 <span class="comment">/**</span>
<a name="l00525"></a>00525 <span class="comment"> * Similar to svn_subst_translate_cstring2() except that @a keywords is a</span>
<a name="l00526"></a>00526 <span class="comment"> * @c svn_subst_keywords_t struct instead of a keywords hash.</span>
<a name="l00527"></a>00527 <span class="comment"> *</span>
<a name="l00528"></a>00528 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.2 API.</span>
<a name="l00529"></a>00529 <span class="comment"> */</span>
<a name="l00530"></a>00530 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00531"></a>00531 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00532"></a>00532 <a class="code" href="svn__subst_8h.html#aab1b28fcddc78254ca6b6ed4ad149b89" title="Similar to svn_subst_translate_cstring2() except that keywords is a svn_subst_keywords_t struct inste...">svn_subst_translate_cstring</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src,
<a name="l00533"></a>00533                             <span class="keyword">const</span> <span class="keywordtype">char</span> **dst,
<a name="l00534"></a>00534                             <span class="keyword">const</span> <span class="keywordtype">char</span> *eol_str,
<a name="l00535"></a>00535                             <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> repair,
<a name="l00536"></a>00536                             <span class="keyword">const</span> <a class="code" href="structsvn__subst__keywords__t.html" title="Values used in keyword expansion.">svn_subst_keywords_t</a> *keywords,
<a name="l00537"></a>00537                             <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> expand,
<a name="l00538"></a>00538                             apr_pool_t *pool);
<a name="l00539"></a>00539 <span class="comment"></span>
<a name="l00540"></a>00540 <span class="comment">/**</span>
<a name="l00541"></a>00541 <span class="comment"> * Translate the file @a src in working copy form to a file @a dst in</span>
<a name="l00542"></a>00542 <span class="comment"> * normal form.</span>
<a name="l00543"></a>00543 <span class="comment"> *</span>
<a name="l00544"></a>00544 <span class="comment"> * The values specified for @a eol_style, @a *eol_str, @a keywords and</span>
<a name="l00545"></a>00545 <span class="comment"> * @a special, should be the ones used to translate the file to its</span>
<a name="l00546"></a>00546 <span class="comment"> * working copy form.  Usually, these are the values specified by the</span>
<a name="l00547"></a>00547 <span class="comment"> * user in the files&#39; properties.</span>
<a name="l00548"></a>00548 <span class="comment"> *</span>
<a name="l00549"></a>00549 <span class="comment"> * Inconsistent line endings in the file will be automatically repaired</span>
<a name="l00550"></a>00550 <span class="comment"> * (made consistent) for some eol styles.  For all others, an error is</span>
<a name="l00551"></a>00551 <span class="comment"> * returned.  By setting @a always_repair_eols to @c TRUE, eols will be</span>
<a name="l00552"></a>00552 <span class="comment"> * made consistent even for those styles which don&#39;t have it by default.</span>
<a name="l00553"></a>00553 <span class="comment"> *</span>
<a name="l00554"></a>00554 <span class="comment"> * @note To translate a file FROM normal form, use</span>
<a name="l00555"></a>00555 <span class="comment"> *       svn_subst_copy_and_translate3().</span>
<a name="l00556"></a>00556 <span class="comment"> *</span>
<a name="l00557"></a>00557 <span class="comment"> * @since New in 1.4</span>
<a name="l00558"></a>00558 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.5 API</span>
<a name="l00559"></a>00559 <span class="comment"> */</span>
<a name="l00560"></a>00560 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00561"></a>00561 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00562"></a>00562 <a class="code" href="svn__subst_8h.html#ace41f93ffd67e19f15cc705a855e8a98" title="Translate the file src in working copy form to a file dst in normal form.">svn_subst_translate_to_normal_form</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *src,
<a name="l00563"></a>00563                                    <span class="keyword">const</span> <span class="keywordtype">char</span> *dst,
<a name="l00564"></a>00564                                    <a class="code" href="svn__subst_8h.html#a82d6196808784a7a73e098f8d8534edb" title="Valid states for &#39;svn:eol-style&#39; property.">svn_subst_eol_style_t</a> eol_style,
<a name="l00565"></a>00565                                    <span class="keyword">const</span> <span class="keywordtype">char</span> *eol_str,
<a name="l00566"></a>00566                                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> always_repair_eols,
<a name="l00567"></a>00567                                    apr_hash_t *keywords,
<a name="l00568"></a>00568                                    <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> special,
<a name="l00569"></a>00569                                    apr_pool_t *pool);
<a name="l00570"></a>00570 <span class="comment"></span>
<a name="l00571"></a>00571 <span class="comment">/**</span>
<a name="l00572"></a>00572 <span class="comment"> * Set @a *stream_p to a stream that detranslates the file @a src from</span>
<a name="l00573"></a>00573 <span class="comment"> * working copy form to normal form, allocated in @a pool.</span>
<a name="l00574"></a>00574 <span class="comment"> *</span>
<a name="l00575"></a>00575 <span class="comment"> * The values specified for @a eol_style, @a *eol_str, @a keywords and</span>
<a name="l00576"></a>00576 <span class="comment"> * @a special, should be the ones used to translate the file to its</span>
<a name="l00577"></a>00577 <span class="comment"> * working copy form.  Usually, these are the values specified by the</span>
<a name="l00578"></a>00578 <span class="comment"> * user in the files&#39; properties.</span>
<a name="l00579"></a>00579 <span class="comment"> *</span>
<a name="l00580"></a>00580 <span class="comment"> * Inconsistent line endings in the file will be automatically repaired</span>
<a name="l00581"></a>00581 <span class="comment"> * (made consistent) for some eol styles.  For all others, an error is</span>
<a name="l00582"></a>00582 <span class="comment"> * returned.  By setting @a always_repair_eols to @c TRUE, eols will be</span>
<a name="l00583"></a>00583 <span class="comment"> * made consistent even for those styles which don&#39;t have it by default.</span>
<a name="l00584"></a>00584 <span class="comment"> *</span>
<a name="l00585"></a>00585 <span class="comment"> * @since New in 1.4.</span>
<a name="l00586"></a>00586 <span class="comment"> *</span>
<a name="l00587"></a>00587 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.5 API.</span>
<a name="l00588"></a>00588 <span class="comment"> *   Use svn_subst_stream_from_specialfile if the source is special;</span>
<a name="l00589"></a>00589 <span class="comment"> *   otherwise, use svn_subst_stream_translated_to_normal_form.</span>
<a name="l00590"></a>00590 <span class="comment"> */</span>
<a name="l00591"></a>00591 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00592"></a>00592 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00593"></a>00593 <a class="code" href="svn__subst_8h.html#a9174c224c4fc71aaba0d2b9e93482df6" title="Set *stream_p to a stream that detranslates the file src from working copy form to normal form...">svn_subst_stream_detranslated</a>(<a class="code" href="group__svn__io__byte__streams.html#ga06d6291c397e63f895deb92a2c14e6af" title="An abstract stream of bytes--either incoming or outgoing or both.">svn_stream_t</a> **stream_p,
<a name="l00594"></a>00594                               <span class="keyword">const</span> <span class="keywordtype">char</span> *src,
<a name="l00595"></a>00595                               <a class="code" href="svn__subst_8h.html#a82d6196808784a7a73e098f8d8534edb" title="Valid states for &#39;svn:eol-style&#39; property.">svn_subst_eol_style_t</a> eol_style,
<a name="l00596"></a>00596                               <span class="keyword">const</span> <span class="keywordtype">char</span> *eol_str,
<a name="l00597"></a>00597                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> always_repair_eols,
<a name="l00598"></a>00598                               apr_hash_t *keywords,
<a name="l00599"></a>00599                               <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> special,
<a name="l00600"></a>00600                               apr_pool_t *pool);
<a name="l00601"></a>00601 
<a name="l00602"></a>00602 
<a name="l00603"></a>00603 <span class="comment">/* EOL conversion and character encodings */</span>
<a name="l00604"></a>00604 <span class="comment"></span>
<a name="l00605"></a>00605 <span class="comment">/** Translate the string @a value from character encoding @a encoding to</span>
<a name="l00606"></a>00606 <span class="comment"> * UTF8, and also from its current line-ending style to LF line-endings.  If</span>
<a name="l00607"></a>00607 <span class="comment"> * @a encoding is @c NULL, translate from the system-default encoding.</span>
<a name="l00608"></a>00608 <span class="comment"> *</span>
<a name="l00609"></a>00609 <span class="comment"> * If @a translated_to_utf8 is not @c NULL, then set @a *translated_to_utf8</span>
<a name="l00610"></a>00610 <span class="comment"> * to @c TRUE if at least one character of @a value in the source character</span>
<a name="l00611"></a>00611 <span class="comment"> * encoding was translated to UTF-8, or to @c FALSE otherwise.</span>
<a name="l00612"></a>00612 <span class="comment"> *</span>
<a name="l00613"></a>00613 <span class="comment"> * If @a translated_line_endings is not @c NULL, then set @a</span>
<a name="l00614"></a>00614 <span class="comment"> * *translated_line_endings to @c TRUE if at least one line ending was</span>
<a name="l00615"></a>00615 <span class="comment"> * changed to LF, or to @c FALSE otherwise.</span>
<a name="l00616"></a>00616 <span class="comment"> *</span>
<a name="l00617"></a>00617 <span class="comment"> * If @a value has an inconsistent line ending style, then: if @a repair</span>
<a name="l00618"></a>00618 <span class="comment"> * is @c FALSE, return @c SVN_ERR_IO_INCONSISTENT_EOL, else if @a repair is</span>
<a name="l00619"></a>00619 <span class="comment"> * @c TRUE, convert any line ending in @a value to &quot;\n&quot; in</span>
<a name="l00620"></a>00620 <span class="comment"> * @a *new_value.  Recognized line endings are: &quot;\n&quot;, &quot;\r&quot;, and &quot;\r\n&quot;.</span>
<a name="l00621"></a>00621 <span class="comment"> *</span>
<a name="l00622"></a>00622 <span class="comment"> * Set @a *new_value to the translated string, allocated in @a result_pool.</span>
<a name="l00623"></a>00623 <span class="comment"> *</span>
<a name="l00624"></a>00624 <span class="comment"> * @a scratch_pool is used for temporary allocations.</span>
<a name="l00625"></a>00625 <span class="comment"> *</span>
<a name="l00626"></a>00626 <span class="comment"> * @since New in 1.7.</span>
<a name="l00627"></a>00627 <span class="comment"> */</span>
<a name="l00628"></a>00628 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *
<a name="l00629"></a>00629 <a class="code" href="svn__subst_8h.html#af2cf0f290bfe975e4ef8400eaa9e0add" title="Translate the string value from character encoding encoding to UTF8, and also from its current line-e...">svn_subst_translate_string2</a>(<a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> **new_value,
<a name="l00630"></a>00630                             <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *translated_to_utf8,
<a name="l00631"></a>00631                             <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> *translated_line_endings,
<a name="l00632"></a>00632                             <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *value,
<a name="l00633"></a>00633                             <span class="keyword">const</span> <span class="keywordtype">char</span> *encoding,
<a name="l00634"></a>00634                             <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> repair,
<a name="l00635"></a>00635                             apr_pool_t *result_pool,
<a name="l00636"></a>00636                             apr_pool_t *scratch_pool);
<a name="l00637"></a>00637 <span class="comment"></span>
<a name="l00638"></a>00638 <span class="comment">/** Similar to svn_subst_translate_string2(), except that the information about</span>
<a name="l00639"></a>00639 <span class="comment"> * whether re-encoding or line ending translation were performed is discarded.</span>
<a name="l00640"></a>00640 <span class="comment"> *</span>
<a name="l00641"></a>00641 <span class="comment"> * @deprecated Provided for backward compatibility with the 1.6 API.</span>
<a name="l00642"></a>00642 <span class="comment"> */</span>
<a name="l00643"></a>00643 <a class="code" href="svn__types_8h.html#aeced35b9b096eb3eb6f3d1af3e685aa1" title="Macro used to mark deprecated functions.">SVN_DEPRECATED</a>
<a name="l00644"></a>00644 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *<a class="code" href="svn__subst_8h.html#a626c5dcfbbf5057ebc0e384187f6d330" title="Similar to svn_subst_translate_string2(), except that the information about whether re-encoding or li...">svn_subst_translate_string</a>(<a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> **new_value,
<a name="l00645"></a>00645                                         <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *value,
<a name="l00646"></a>00646                                         <span class="keyword">const</span> <span class="keywordtype">char</span> *encoding,
<a name="l00647"></a>00647                                         apr_pool_t *pool);
<a name="l00648"></a>00648 <span class="comment"></span>
<a name="l00649"></a>00649 <span class="comment">/** Translate the string @a value from UTF8 and LF line-endings into native</span>
<a name="l00650"></a>00650 <span class="comment"> * character encoding and native line-endings.  If @a for_output is TRUE,</span>
<a name="l00651"></a>00651 <span class="comment"> * translate to the character encoding of the output locale, else to that of</span>
<a name="l00652"></a>00652 <span class="comment"> * the default locale.</span>
<a name="l00653"></a>00653 <span class="comment"> *</span>
<a name="l00654"></a>00654 <span class="comment"> * Set @a *new_value to the translated string, allocated in @a pool.</span>
<a name="l00655"></a>00655 <span class="comment"> */</span>
<a name="l00656"></a>00656 <a class="code" href="structsvn__error__t.html" title="Subversion error object.">svn_error_t</a> *<a class="code" href="svn__subst_8h.html#a7b0510e7ebae885c80b227ccc3a13685" title="Translate the string value from UTF8 and LF line-endings into native character encoding and native li...">svn_subst_detranslate_string</a>(<a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> **new_value,
<a name="l00657"></a>00657                                           <span class="keyword">const</span> <a class="code" href="structsvn__string__t.html" title="A simple counted string.">svn_string_t</a> *value,
<a name="l00658"></a>00658                                           <a class="code" href="svn__types_8h.html#a22b35baddc4213c688d1bb12feea1024" title="YABT: Yet Another Boolean Type.">svn_boolean_t</a> for_output,
<a name="l00659"></a>00659                                           apr_pool_t *pool);
<a name="l00660"></a>00660 
<a name="l00661"></a>00661 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00662"></a>00662 <span class="preprocessor"></span>}
<a name="l00663"></a>00663 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l00664"></a>00664 
<a name="l00665"></a>00665 <span class="preprocessor">#endif </span><span class="comment">/* SVN_SUBST_H */</span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Fri Dec 23 2011 09:20:37 for Subversion by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>
